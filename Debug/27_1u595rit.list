
27_1u595rit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113e0  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08011630  08011630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011844  08011844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801184c  0801184c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011850  08011850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  08011854  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003b88  2000006c  080118c0  0001306c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003bf4  080118c0  00013bf4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004f6af  00000000  00000000  000130a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b47c  00000000  00000000  00062751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023d0  00000000  00000000  0006dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000199a  00000000  00000000  0006ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044a95  00000000  00000000  0007193a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049637  00000000  00000000  000b63cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001691a7  00000000  00000000  000ffa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00268bad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007920  00000000  00000000  00268bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000109  00000000  00000000  00270510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	08011618 	.word	0x08011618

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	08011618 	.word	0x08011618

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	20003014 	.word	0x20003014
    LDR     r1, =SYSTICK_CYCLES
 8000300:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	200030b0 	.word	0x200030b0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	20003018 	.word	0x20003018
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	2000301c 	.word	0x2000301c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	2000361c 	.word	0x2000361c

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f00c fa18 	bl	800c8a0 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f00c f985 	bl	800c784 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	200030bc 	.word	0x200030bc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	2000361c 	.word	0x2000361c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	200030c0 	.word	0x200030c0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	2000314c 	.word	0x2000314c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20003150 	.word	0x20003150
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	20003148 	.word	0x20003148
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20003144 	.word	0x20003144
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	200030b0 	.word	0x200030b0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	20003018 	.word	0x20003018
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	2000301c 	.word	0x2000301c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <strlen>:
 80004cc:	4603      	mov	r3, r0
 80004ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1fb      	bne.n	80004ce <strlen+0x2>
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	3801      	subs	r0, #1
 80004da:	4770      	bx	lr

080004dc <__aeabi_uldivmod>:
 80004dc:	b953      	cbnz	r3, 80004f4 <__aeabi_uldivmod+0x18>
 80004de:	b94a      	cbnz	r2, 80004f4 <__aeabi_uldivmod+0x18>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	bf08      	it	eq
 80004e4:	2800      	cmpeq	r0, #0
 80004e6:	bf1c      	itt	ne
 80004e8:	f04f 31ff 	movne.w	r1, #4294967295
 80004ec:	f04f 30ff 	movne.w	r0, #4294967295
 80004f0:	f000 b97e 	b.w	80007f0 <__aeabi_idiv0>
 80004f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004fc:	f000 f806 	bl	800050c <__udivmoddi4>
 8000500:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000508:	b004      	add	sp, #16
 800050a:	4770      	bx	lr

0800050c <__udivmoddi4>:
 800050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000510:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000512:	460c      	mov	r4, r1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d14d      	bne.n	80005b4 <__udivmoddi4+0xa8>
 8000518:	428a      	cmp	r2, r1
 800051a:	460f      	mov	r7, r1
 800051c:	4684      	mov	ip, r0
 800051e:	4696      	mov	lr, r2
 8000520:	fab2 f382 	clz	r3, r2
 8000524:	d960      	bls.n	80005e8 <__udivmoddi4+0xdc>
 8000526:	b14b      	cbz	r3, 800053c <__udivmoddi4+0x30>
 8000528:	fa02 fe03 	lsl.w	lr, r2, r3
 800052c:	f1c3 0220 	rsb	r2, r3, #32
 8000530:	409f      	lsls	r7, r3
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f202 	lsr.w	r2, r0, r2
 800053a:	4317      	orrs	r7, r2
 800053c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000540:	fa1f f48e 	uxth.w	r4, lr
 8000544:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000548:	fbb7 f1f6 	udiv	r1, r7, r6
 800054c:	fb06 7711 	mls	r7, r6, r1, r7
 8000550:	fb01 f004 	mul.w	r0, r1, r4
 8000554:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000558:	4290      	cmp	r0, r2
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x62>
 800055c:	eb1e 0202 	adds.w	r2, lr, r2
 8000560:	f101 37ff 	add.w	r7, r1, #4294967295
 8000564:	d202      	bcs.n	800056c <__udivmoddi4+0x60>
 8000566:	4290      	cmp	r0, r2
 8000568:	f200 812d 	bhi.w	80007c6 <__udivmoddi4+0x2ba>
 800056c:	4639      	mov	r1, r7
 800056e:	1a12      	subs	r2, r2, r0
 8000570:	fa1f fc8c 	uxth.w	ip, ip
 8000574:	fbb2 f0f6 	udiv	r0, r2, r6
 8000578:	fb06 2210 	mls	r2, r6, r0, r2
 800057c:	fb00 f404 	mul.w	r4, r0, r4
 8000580:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000584:	4564      	cmp	r4, ip
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x8e>
 8000588:	eb1e 0c0c 	adds.w	ip, lr, ip
 800058c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x8c>
 8000592:	4564      	cmp	r4, ip
 8000594:	f200 811a 	bhi.w	80007cc <__udivmoddi4+0x2c0>
 8000598:	4610      	mov	r0, r2
 800059a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800059e:	ebac 0c04 	sub.w	ip, ip, r4
 80005a2:	2100      	movs	r1, #0
 80005a4:	b125      	cbz	r5, 80005b0 <__udivmoddi4+0xa4>
 80005a6:	fa2c f303 	lsr.w	r3, ip, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	e9c5 3200 	strd	r3, r2, [r5]
 80005b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d905      	bls.n	80005c4 <__udivmoddi4+0xb8>
 80005b8:	b10d      	cbz	r5, 80005be <__udivmoddi4+0xb2>
 80005ba:	e9c5 0100 	strd	r0, r1, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7f5      	b.n	80005b0 <__udivmoddi4+0xa4>
 80005c4:	fab3 f183 	clz	r1, r3
 80005c8:	2900      	cmp	r1, #0
 80005ca:	d14d      	bne.n	8000668 <__udivmoddi4+0x15c>
 80005cc:	42a3      	cmp	r3, r4
 80005ce:	f0c0 80f2 	bcc.w	80007b6 <__udivmoddi4+0x2aa>
 80005d2:	4290      	cmp	r0, r2
 80005d4:	f080 80ef 	bcs.w	80007b6 <__udivmoddi4+0x2aa>
 80005d8:	4606      	mov	r6, r0
 80005da:	4623      	mov	r3, r4
 80005dc:	4608      	mov	r0, r1
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d0e6      	beq.n	80005b0 <__udivmoddi4+0xa4>
 80005e2:	e9c5 6300 	strd	r6, r3, [r5]
 80005e6:	e7e3      	b.n	80005b0 <__udivmoddi4+0xa4>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f040 80a2 	bne.w	8000732 <__udivmoddi4+0x226>
 80005ee:	1a8a      	subs	r2, r1, r2
 80005f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005f4:	fa1f f68e 	uxth.w	r6, lr
 80005f8:	2101      	movs	r1, #1
 80005fa:	fbb2 f4f7 	udiv	r4, r2, r7
 80005fe:	fb07 2014 	mls	r0, r7, r4, r2
 8000602:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000606:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800060a:	fb06 f004 	mul.w	r0, r6, r4
 800060e:	4290      	cmp	r0, r2
 8000610:	d90f      	bls.n	8000632 <__udivmoddi4+0x126>
 8000612:	eb1e 0202 	adds.w	r2, lr, r2
 8000616:	f104 38ff 	add.w	r8, r4, #4294967295
 800061a:	bf2c      	ite	cs
 800061c:	f04f 0901 	movcs.w	r9, #1
 8000620:	f04f 0900 	movcc.w	r9, #0
 8000624:	4290      	cmp	r0, r2
 8000626:	d903      	bls.n	8000630 <__udivmoddi4+0x124>
 8000628:	f1b9 0f00 	cmp.w	r9, #0
 800062c:	f000 80c8 	beq.w	80007c0 <__udivmoddi4+0x2b4>
 8000630:	4644      	mov	r4, r8
 8000632:	1a12      	subs	r2, r2, r0
 8000634:	fa1f fc8c 	uxth.w	ip, ip
 8000638:	fbb2 f0f7 	udiv	r0, r2, r7
 800063c:	fb07 2210 	mls	r2, r7, r0, r2
 8000640:	fb00 f606 	mul.w	r6, r0, r6
 8000644:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000648:	4566      	cmp	r6, ip
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x152>
 800064c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000650:	f100 32ff 	add.w	r2, r0, #4294967295
 8000654:	d202      	bcs.n	800065c <__udivmoddi4+0x150>
 8000656:	4566      	cmp	r6, ip
 8000658:	f200 80bb 	bhi.w	80007d2 <__udivmoddi4+0x2c6>
 800065c:	4610      	mov	r0, r2
 800065e:	ebac 0c06 	sub.w	ip, ip, r6
 8000662:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000666:	e79d      	b.n	80005a4 <__udivmoddi4+0x98>
 8000668:	f1c1 0620 	rsb	r6, r1, #32
 800066c:	408b      	lsls	r3, r1
 800066e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000672:	fa22 f706 	lsr.w	r7, r2, r6
 8000676:	fa20 fc06 	lsr.w	ip, r0, r6
 800067a:	40f4      	lsrs	r4, r6
 800067c:	408a      	lsls	r2, r1
 800067e:	431f      	orrs	r7, r3
 8000680:	ea4e 030c 	orr.w	r3, lr, ip
 8000684:	fa00 fe01 	lsl.w	lr, r0, r1
 8000688:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800068c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000690:	fa1f fc87 	uxth.w	ip, r7
 8000694:	fbb4 f0f8 	udiv	r0, r4, r8
 8000698:	fb08 4410 	mls	r4, r8, r0, r4
 800069c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006a0:	fb00 f90c 	mul.w	r9, r0, ip
 80006a4:	45a1      	cmp	r9, r4
 80006a6:	d90e      	bls.n	80006c6 <__udivmoddi4+0x1ba>
 80006a8:	193c      	adds	r4, r7, r4
 80006aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80006ae:	bf2c      	ite	cs
 80006b0:	f04f 0b01 	movcs.w	fp, #1
 80006b4:	f04f 0b00 	movcc.w	fp, #0
 80006b8:	45a1      	cmp	r9, r4
 80006ba:	d903      	bls.n	80006c4 <__udivmoddi4+0x1b8>
 80006bc:	f1bb 0f00 	cmp.w	fp, #0
 80006c0:	f000 8093 	beq.w	80007ea <__udivmoddi4+0x2de>
 80006c4:	4650      	mov	r0, sl
 80006c6:	eba4 0409 	sub.w	r4, r4, r9
 80006ca:	fa1f f983 	uxth.w	r9, r3
 80006ce:	fbb4 f3f8 	udiv	r3, r4, r8
 80006d2:	fb08 4413 	mls	r4, r8, r3, r4
 80006d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80006da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006de:	45a4      	cmp	ip, r4
 80006e0:	d906      	bls.n	80006f0 <__udivmoddi4+0x1e4>
 80006e2:	193c      	adds	r4, r7, r4
 80006e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e8:	d201      	bcs.n	80006ee <__udivmoddi4+0x1e2>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	d87a      	bhi.n	80007e4 <__udivmoddi4+0x2d8>
 80006ee:	4643      	mov	r3, r8
 80006f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006f4:	eba4 040c 	sub.w	r4, r4, ip
 80006f8:	fba0 9802 	umull	r9, r8, r0, r2
 80006fc:	4544      	cmp	r4, r8
 80006fe:	46cc      	mov	ip, r9
 8000700:	4643      	mov	r3, r8
 8000702:	d302      	bcc.n	800070a <__udivmoddi4+0x1fe>
 8000704:	d106      	bne.n	8000714 <__udivmoddi4+0x208>
 8000706:	45ce      	cmp	lr, r9
 8000708:	d204      	bcs.n	8000714 <__udivmoddi4+0x208>
 800070a:	3801      	subs	r0, #1
 800070c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000710:	eb68 0307 	sbc.w	r3, r8, r7
 8000714:	b15d      	cbz	r5, 800072e <__udivmoddi4+0x222>
 8000716:	ebbe 020c 	subs.w	r2, lr, ip
 800071a:	eb64 0403 	sbc.w	r4, r4, r3
 800071e:	fa04 f606 	lsl.w	r6, r4, r6
 8000722:	fa22 f301 	lsr.w	r3, r2, r1
 8000726:	40cc      	lsrs	r4, r1
 8000728:	431e      	orrs	r6, r3
 800072a:	e9c5 6400 	strd	r6, r4, [r5]
 800072e:	2100      	movs	r1, #0
 8000730:	e73e      	b.n	80005b0 <__udivmoddi4+0xa4>
 8000732:	fa02 fe03 	lsl.w	lr, r2, r3
 8000736:	f1c3 0120 	rsb	r1, r3, #32
 800073a:	fa04 f203 	lsl.w	r2, r4, r3
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	40cc      	lsrs	r4, r1
 8000744:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000748:	fa20 f101 	lsr.w	r1, r0, r1
 800074c:	fa1f f68e 	uxth.w	r6, lr
 8000750:	fbb4 f0f7 	udiv	r0, r4, r7
 8000754:	430a      	orrs	r2, r1
 8000756:	fb07 4410 	mls	r4, r7, r0, r4
 800075a:	0c11      	lsrs	r1, r2, #16
 800075c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000760:	fb00 f406 	mul.w	r4, r0, r6
 8000764:	428c      	cmp	r4, r1
 8000766:	d90e      	bls.n	8000786 <__udivmoddi4+0x27a>
 8000768:	eb1e 0101 	adds.w	r1, lr, r1
 800076c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000770:	bf2c      	ite	cs
 8000772:	f04f 0901 	movcs.w	r9, #1
 8000776:	f04f 0900 	movcc.w	r9, #0
 800077a:	428c      	cmp	r4, r1
 800077c:	d902      	bls.n	8000784 <__udivmoddi4+0x278>
 800077e:	f1b9 0f00 	cmp.w	r9, #0
 8000782:	d02c      	beq.n	80007de <__udivmoddi4+0x2d2>
 8000784:	4640      	mov	r0, r8
 8000786:	1b09      	subs	r1, r1, r4
 8000788:	b292      	uxth	r2, r2
 800078a:	fbb1 f4f7 	udiv	r4, r1, r7
 800078e:	fb07 1114 	mls	r1, r7, r4, r1
 8000792:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000796:	fb04 f106 	mul.w	r1, r4, r6
 800079a:	4291      	cmp	r1, r2
 800079c:	d907      	bls.n	80007ae <__udivmoddi4+0x2a2>
 800079e:	eb1e 0202 	adds.w	r2, lr, r2
 80007a2:	f104 38ff 	add.w	r8, r4, #4294967295
 80007a6:	d201      	bcs.n	80007ac <__udivmoddi4+0x2a0>
 80007a8:	4291      	cmp	r1, r2
 80007aa:	d815      	bhi.n	80007d8 <__udivmoddi4+0x2cc>
 80007ac:	4644      	mov	r4, r8
 80007ae:	1a52      	subs	r2, r2, r1
 80007b0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007b4:	e721      	b.n	80005fa <__udivmoddi4+0xee>
 80007b6:	1a86      	subs	r6, r0, r2
 80007b8:	eb64 0303 	sbc.w	r3, r4, r3
 80007bc:	2001      	movs	r0, #1
 80007be:	e70e      	b.n	80005de <__udivmoddi4+0xd2>
 80007c0:	3c02      	subs	r4, #2
 80007c2:	4472      	add	r2, lr
 80007c4:	e735      	b.n	8000632 <__udivmoddi4+0x126>
 80007c6:	3902      	subs	r1, #2
 80007c8:	4472      	add	r2, lr
 80007ca:	e6d0      	b.n	800056e <__udivmoddi4+0x62>
 80007cc:	44f4      	add	ip, lr
 80007ce:	3802      	subs	r0, #2
 80007d0:	e6e3      	b.n	800059a <__udivmoddi4+0x8e>
 80007d2:	44f4      	add	ip, lr
 80007d4:	3802      	subs	r0, #2
 80007d6:	e742      	b.n	800065e <__udivmoddi4+0x152>
 80007d8:	3c02      	subs	r4, #2
 80007da:	4472      	add	r2, lr
 80007dc:	e7e7      	b.n	80007ae <__udivmoddi4+0x2a2>
 80007de:	3802      	subs	r0, #2
 80007e0:	4471      	add	r1, lr
 80007e2:	e7d0      	b.n	8000786 <__udivmoddi4+0x27a>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	443c      	add	r4, r7
 80007e8:	e782      	b.n	80006f0 <__udivmoddi4+0x1e4>
 80007ea:	3802      	subs	r0, #2
 80007ec:	443c      	add	r4, r7
 80007ee:	e76a      	b.n	80006c6 <__udivmoddi4+0x1ba>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <led_blink_entry>:
#endif

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void led_blink_entry(ULONG thread_input) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 80007fc:	2101      	movs	r1, #1
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <led_blink_entry+0x1c>)
 8000800:	f001 fe26 	bl	8002450 <HAL_GPIO_TogglePin>
        tx_thread_sleep(500); // Задержка 500 мс
 8000804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000808:	f00b fcea 	bl	800c1e0 <_tx_thread_sleep>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 800080c:	bf00      	nop
 800080e:	e7f5      	b.n	80007fc <led_blink_entry+0x8>
 8000810:	42020400 	.word	0x42020400

08000814 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af08      	add	r7, sp, #32
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

	static TX_THREAD led_blink_thread;
	static UCHAR led_blink_stack[1024];

	UINT mystatus = tx_thread_create(&led_blink_thread, "LED Blink", led_blink_entry, 0,
 800081c:	23b0      	movs	r3, #176	@ 0xb0
 800081e:	9306      	str	r3, [sp, #24]
 8000820:	2301      	movs	r3, #1
 8000822:	9305      	str	r3, [sp, #20]
 8000824:	2300      	movs	r3, #0
 8000826:	9304      	str	r3, [sp, #16]
 8000828:	2305      	movs	r3, #5
 800082a:	9303      	str	r3, [sp, #12]
 800082c:	2305      	movs	r3, #5
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <tx_application_define+0xa8>)
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <tx_application_define+0xac>)
 800083e:	4921      	ldr	r1, [pc, #132]	@ (80008c4 <tx_application_define+0xb0>)
 8000840:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <tx_application_define+0xb4>)
 8000842:	f00c fdd9 	bl	800d3f8 <_txe_thread_create>
 8000846:	6178      	str	r0, [r7, #20]
	                                   led_blink_stack, sizeof(led_blink_stack),
	                                   5, 5, TX_NO_TIME_SLICE, TX_AUTO_START);

	if (mystatus != TX_SUCCESS)
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <tx_application_define+0x3e>
	    {
	        // Обработка ошибки
	        while (1);
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <tx_application_define+0x3a>
	    }

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000856:	2334      	movs	r3, #52	@ 0x34
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085e:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <tx_application_define+0xb8>)
 8000860:	491b      	ldr	r1, [pc, #108]	@ (80008d0 <tx_application_define+0xbc>)
 8000862:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <tx_application_define+0xc0>)
 8000864:	f00c fac6 	bl	800cdf4 <_txe_byte_pool_create>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10a      	bne.n	8000884 <tx_application_define+0x70>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <tx_application_define+0xc0>)
 8000870:	60fb      	str	r3, [r7, #12]
    status = App_ThreadX_Init(memory_ptr);
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 f836 	bl	80008e4 <App_ThreadX_Init>
 8000878:	6138      	str	r0, [r7, #16]
    if (status != TX_SUCCESS)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <tx_application_define+0x70>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <tx_application_define+0x6c>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000884:	2334      	movs	r3, #52	@ 0x34
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <tx_application_define+0xc4>)
 800088e:	4913      	ldr	r1, [pc, #76]	@ (80008dc <tx_application_define+0xc8>)
 8000890:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <tx_application_define+0xcc>)
 8000892:	f00c faaf 	bl	800cdf4 <_txe_byte_pool_create>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10a      	bne.n	80008b2 <tx_application_define+0x9e>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <tx_application_define+0xcc>)
 800089e:	60fb      	str	r3, [r7, #12]
    status = MX_USBX_Device_Init(memory_ptr);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f00f ff65 	bl	8010770 <MX_USBX_Device_Init>
 80008a6:	6138      	str	r0, [r7, #16]
    if (status != UX_SUCCESS)
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <tx_application_define+0x9e>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 80008ae:	bf00      	nop
 80008b0:	e7fd      	b.n	80008ae <tx_application_define+0x9a>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200025a0 	.word	0x200025a0
 80008c0:	080007f5 	.word	0x080007f5
 80008c4:	08011630 	.word	0x08011630
 80008c8:	200024f0 	.word	0x200024f0
 80008cc:	20000088 	.word	0x20000088
 80008d0:	0801163c 	.word	0x0801163c
 80008d4:	20000488 	.word	0x20000488
 80008d8:	200004bc 	.word	0x200004bc
 80008dc:	08011650 	.word	0x08011650
 80008e0:	200024bc 	.word	0x200024bc

080008e4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008f0:	68fb      	ldr	r3, [r7, #12]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 8000902:	f00a fb29 	bl	800af58 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fbec 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f816 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f906 	bl	8000b28 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800091c:	f000 f86a 	bl	80009f4 <MX_GPDMA1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000920:	f000 f8d4 	bl	8000acc <MX_USB_OTG_HS_PCD_Init>
  MX_USART1_UART_Init();
 8000924:	f000 f886 	bl	8000a34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // USB_Reset(&hpcd_USB_OTG_HS);

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000928:	f7ff ffe9 	bl	80008fe <MX_ThreadX_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// ux_dcd_stm32_interrupt_handler();
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800092c:	2101      	movs	r1, #1
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <main+0x34>)
 8000930:	f001 fd8e 	bl	8002450 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	@ 0x64
 8000936:	f000 fc29 	bl	800118c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800093a:	bf00      	nop
 800093c:	e7f6      	b.n	800092c <main+0x20>
 800093e:	bf00      	nop
 8000940:	42020400 	.word	0x42020400

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09e      	sub	sp, #120	@ 0x78
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	2260      	movs	r2, #96	@ 0x60
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f010 fe34 	bl	80115c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
 8000966:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000968:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800096c:	f002 ff1e 	bl	80037ac <HAL_PWREx_ControlVoltageScaling>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000976:	f000 f93d 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000982:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000988:	2303      	movs	r3, #3
 800098a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000994:	2314      	movs	r3, #20
 8000996:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009a4:	230c      	movs	r3, #12
 80009a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 ffb5 	bl	8003920 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f91a 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	231f      	movs	r3, #31
 80009c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2303      	movs	r3, #3
 80009c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2104      	movs	r1, #4
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fe7b 	bl	80046d8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009e8:	f000 f904 	bl	8000bf4 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3778      	adds	r7, #120	@ 0x78
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_GPDMA1_Init+0x3c>)
 80009fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a00:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <MX_GPDMA1_Init+0x3c>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_GPDMA1_Init+0x3c>)
 8000a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	201d      	movs	r0, #29
 8000a1e:	f000 fcb9 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000a22:	201d      	movs	r0, #29
 8000a24:	f000 fcd0 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	46020c00 	.word	0x46020c00

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <MX_USART1_UART_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f007 fd01 	bl	8008484 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f8b4 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a90:	f008 fce5 	bl	800945e <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 f8ab 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f008 fd1a 	bl	80094da <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f8a2 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f008 fc9b 	bl	80093ec <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f89a 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200029a0 	.word	0x200029a0
 8000ac8:	40013800 	.word	0x40013800

08000acc <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000ad2:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000ad8:	2209      	movs	r2, #9
 8000ada:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000b0e:	f001 fcb9 	bl	8002484 <HAL_PCD_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8000b18:	f000 f86c 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20002aac 	.word	0x20002aac
 8000b24:	42040000 	.word	0x42040000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b44:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b62:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <MX_GPIO_Init+0xa4>)
 8000b9e:	f001 fc3f 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_GPIO_Init+0xa4>)
 8000bba:	f001 fa59 	bl	8002070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	46020c00 	.word	0x46020c00
 8000bcc:	42020400 	.word	0x42020400

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 fab3 	bl	800114c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c0c:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000c24:	f002 fe4e 	bl	80038c4 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	46020c00 	.word	0x46020c00

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0c0      	sub	sp, #256	@ 0x100
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	22d8      	movs	r2, #216	@ 0xd8
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f010 fcb3 	bl	80115c0 <memset>
  if(huart->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000d90 <HAL_UART_MspInit+0x15c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	f040 8090 	bne.w	8000d86 <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c66:	f04f 0201 	mov.w	r2, #1
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c72:	2300      	movs	r3, #0
 8000c74:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 f934 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c86:	f7ff ffb5 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	4b42      	ldr	r3, [pc, #264]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c90:	4a40      	ldr	r2, [pc, #256]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c96:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cae:	4a39      	ldr	r2, [pc, #228]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb8:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <HAL_UART_MspInit+0x160>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cea:	4619      	mov	r1, r3
 8000cec:	482a      	ldr	r0, [pc, #168]	@ (8000d98 <HAL_UART_MspInit+0x164>)
 8000cee:	f001 f9bf 	bl	8002070 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8000da0 <HAL_UART_MspInit+0x16c>)
 8000cf6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8000cf8:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000cfa:	2219      	movs	r2, #25
 8000cfc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000cfe:	4b27      	ldr	r3, [pc, #156]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d04:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000d12:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000d36:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000d48:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d4a:	f000 fba3 	bl	8001494 <HAL_DMA_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8000d54:	f7ff ff4e 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d64:	2110      	movs	r1, #16
 8000d66:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <HAL_UART_MspInit+0x168>)
 8000d68:	f000 fec6 	bl	8001af8 <HAL_DMA_ConfigChannelAttributes>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000d72:	f7ff ff3f 	bl	8000bf4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	203d      	movs	r0, #61	@ 0x3d
 8000d7c:	f000 fb0a 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d80:	203d      	movs	r0, #61	@ 0x3d
 8000d82:	f000 fb21 	bl	80013c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d86:	bf00      	nop
 8000d88:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40013800 	.word	0x40013800
 8000d94:	46020c00 	.word	0x46020c00
 8000d98:	42020000 	.word	0x42020000
 8000d9c:	20002a34 	.word	0x20002a34
 8000da0:	40020050 	.word	0x40020050

08000da4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0bc      	sub	sp, #240	@ 0xf0
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	22d8      	movs	r2, #216	@ 0xd8
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f010 fc03 	bl	80115c0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8000eb8 <HAL_PCD_MspInit+0x114>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d174      	bne.n	8000eae <HAL_PCD_MspInit+0x10a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000dc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dca:	4a3c      	ldr	r2, [pc, #240]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000dd4:	4b39      	ldr	r3, [pc, #228]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000dd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0308 	mov.w	r3, #8
 8000dea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_HSE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 f875 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8000e04:	f7ff fef6 	bl	8000bf4 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f000 f9f7 	bl	80011fc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e14:	4a29      	ldr	r2, [pc, #164]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e1e:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e32:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d11b      	bne.n	8000e90 <HAL_PCD_MspInit+0xec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000e76:	f002 fd25 	bl	80038c4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000e7a:	f002 fd33 	bl	80038e4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_PCD_MspInit+0x118>)
 8000e86:	f023 0304 	bic.w	r3, r3, #4
 8000e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e8e:	e003      	b.n	8000e98 <HAL_PCD_MspInit+0xf4>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000e90:	f002 fd18 	bl	80038c4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000e94:	f002 fd26 	bl	80038e4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 f99b 	bl	80011d4 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2049      	movs	r0, #73	@ 0x49
 8000ea4:	f000 fa76 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000ea8:	2049      	movs	r0, #73	@ 0x49
 8000eaa:	f000 fa8d 	bl	80013c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000eae:	bf00      	nop
 8000eb0:	37f0      	adds	r7, #240	@ 0xf0
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	42040000 	.word	0x42040000
 8000ebc:	46020c00 	.word	0x46020c00

08000ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <HAL_InitTick+0xcc>)
 8000ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f8c <HAL_InitTick+0xcc>)
 8000ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000edc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <HAL_InitTick+0xcc>)
 8000ee2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eee:	f107 0210 	add.w	r2, r7, #16
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 ff37 	bl	8004d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000efe:	f003 ff0d 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8000f02:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	@ (8000f90 <HAL_InitTick+0xd0>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9b      	lsrs	r3, r3, #18
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <HAL_InitTick+0xd8>)
 8000f16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f20:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f24:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f34:	f006 fee6 	bl	8007d04 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f46:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <HAL_InitTick+0xd4>)
 8000f48:	f006 ff3e 	bl	8007dc8 <HAL_TIM_Base_Start_IT>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000f52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10e      	bne.n	8000f78 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d808      	bhi.n	8000f72 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	202a      	movs	r0, #42	@ 0x2a
 8000f66:	f000 fa15 	bl	8001394 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <HAL_InitTick+0xdc>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e002      	b.n	8000f78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f78:	202a      	movs	r0, #42	@ 0x2a
 8000f7a:	f000 fa25 	bl	80013c8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3738      	adds	r7, #56	@ 0x38
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	46020c00 	.word	0x46020c00
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	20002f90 	.word	0x20002f90
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <GPDMA1_Channel0_IRQHandler+0x10>)
 8000fde:	f000 fc2a 	bl	8001836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20002a34 	.word	0x20002a34

08000fec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <TIM1_UP_IRQHandler+0x10>)
 8000ff2:	f006 ff89 	bl	8007f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20002f90 	.word	0x20002f90

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f007 fa8d 	bl	8008524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200029a0 	.word	0x200029a0

08001014 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <OTG_HS_IRQHandler+0x10>)
 800101a:	f001 fb3f 	bl	800269c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20002aac 	.word	0x20002aac

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <SystemInit+0x68>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001032:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <SystemInit+0x68>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <SystemInit+0x6c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <SystemInit+0x6c>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <SystemInit+0x6c>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <SystemInit+0x6c>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <SystemInit+0x6c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <SystemInit+0x6c>)
 800105a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800105e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <SystemInit+0x6c>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <SystemInit+0x6c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <SystemInit+0x6c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <SystemInit+0x6c>)
 8001078:	2200      	movs	r2, #0
 800107a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SystemInit+0x68>)
 800107e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001082:	609a      	str	r2, [r3, #8]
  #endif
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	46020c00 	.word	0x46020c00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800109c:	f7ff ffc4 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010a2:	e003      	b.n	80010ac <LoopCopyDataInit>

080010a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010aa:	3104      	adds	r1, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80010b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b4:	d3f6      	bcc.n	80010a4 <CopyDataInit>
	ldr	r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b8:	e002      	b.n	80010c0 <LoopFillZerobss>

080010ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010bc:	f842 3b04 	str.w	r3, [r2], #4

080010c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <LoopForever+0x16>)
	cmp	r2, r3
 80010c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c4:	d3f9      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f010 fa83 	bl	80115d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fc1f 	bl	800090c <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010d0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80010d4:	08011854 	.word	0x08011854
	ldr	r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010dc:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80010e0:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80010e4:	20003bf4 	.word	0x20003bf4

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_Init+0x50>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a11      	ldr	r2, [pc, #68]	@ (800113c <HAL_Init+0x50>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f93e 	bl	800137e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001102:	f003 fcdb 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8001106:	4602      	mov	r2, r0
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_Init+0x54>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <HAL_Init+0x58>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <HAL_Init+0x5c>)
 800111a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800111c:	2004      	movs	r0, #4
 800111e:	f000 f961 	bl	80013e4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff fecc 	bl	8000ec0 <HAL_InitTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e002      	b.n	8001138 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001132:	f7ff fd65 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40022000 	.word	0x40022000
 8001140:	46020c00 	.word	0x46020c00
 8001144:	08011744 	.word	0x08011744
 8001148:	20000000 	.word	0x20000000

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20002fdc 	.word	0x20002fdc

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20002fdc 	.word	0x20002fdc

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e0:	f023 0201 	bic.w	r2, r3, #1
 80011e4:	4904      	ldr	r1, [pc, #16]	@ (80011f8 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	46000400 	.word	0x46000400

080011fc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8001206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001208:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 800120c:	4904      	ldr	r1, [pc, #16]	@ (8001220 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	46000400 	.word	0x46000400

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	@ (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	@ (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	@ 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	@ 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff4c 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a2:	f7ff ff63 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	6978      	ldr	r0, [r7, #20]
 80013ae:	f7ff ffb3 	bl	8001318 <NVIC_EncodePriority>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff82 	bl	80012c4 <__NVIC_SetPriority>
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff56 	bl	8001288 <__NVIC_EnableIRQ>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d844      	bhi.n	800147c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	0800141b 	.word	0x0800141b
 80013fc:	08001439 	.word	0x08001439
 8001400:	0800145b 	.word	0x0800145b
 8001404:	0800147d 	.word	0x0800147d
 8001408:	0800140d 	.word	0x0800140d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6013      	str	r3, [r2, #0]
      break;
 8001418:	e031      	b.n	800147e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800142e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001436:	e022      	b.n	800147e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a13      	ldr	r2, [pc, #76]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800143e:	f023 0304 	bic.w	r3, r3, #4
 8001442:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001458:	e011      	b.n	800147e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800147a:	e000      	b.n	800147e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800147c:	bf00      	nop
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010
 8001490:	46020c00 	.word	0x46020c00

08001494 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fe6a 	bl	8001174 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0db      	b.n	8001664 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <HAL_DMA_Init+0x1d8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	f000 809f 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001670 <HAL_DMA_Init+0x1dc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f000 8099 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <HAL_DMA_Init+0x1e0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f000 8093 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a68      	ldr	r2, [pc, #416]	@ (8001678 <HAL_DMA_Init+0x1e4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f000 808d 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a66      	ldr	r2, [pc, #408]	@ (800167c <HAL_DMA_Init+0x1e8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a64      	ldr	r2, [pc, #400]	@ (8001680 <HAL_DMA_Init+0x1ec>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	f000 8081 	beq.w	80015f6 <HAL_DMA_Init+0x162>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a62      	ldr	r2, [pc, #392]	@ (8001684 <HAL_DMA_Init+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d07b      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a61      	ldr	r2, [pc, #388]	@ (8001688 <HAL_DMA_Init+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d076      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5f      	ldr	r2, [pc, #380]	@ (800168c <HAL_DMA_Init+0x1f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d071      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5e      	ldr	r2, [pc, #376]	@ (8001690 <HAL_DMA_Init+0x1fc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d06c      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5c      	ldr	r2, [pc, #368]	@ (8001694 <HAL_DMA_Init+0x200>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d067      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5b      	ldr	r2, [pc, #364]	@ (8001698 <HAL_DMA_Init+0x204>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d062      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a59      	ldr	r2, [pc, #356]	@ (800169c <HAL_DMA_Init+0x208>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d05d      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a58      	ldr	r2, [pc, #352]	@ (80016a0 <HAL_DMA_Init+0x20c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d058      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a56      	ldr	r2, [pc, #344]	@ (80016a4 <HAL_DMA_Init+0x210>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d053      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a55      	ldr	r2, [pc, #340]	@ (80016a8 <HAL_DMA_Init+0x214>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d04e      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a53      	ldr	r2, [pc, #332]	@ (80016ac <HAL_DMA_Init+0x218>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d049      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a52      	ldr	r2, [pc, #328]	@ (80016b0 <HAL_DMA_Init+0x21c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d044      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a50      	ldr	r2, [pc, #320]	@ (80016b4 <HAL_DMA_Init+0x220>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d03f      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a4f      	ldr	r2, [pc, #316]	@ (80016b8 <HAL_DMA_Init+0x224>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d03a      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a4d      	ldr	r2, [pc, #308]	@ (80016bc <HAL_DMA_Init+0x228>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d035      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a4c      	ldr	r2, [pc, #304]	@ (80016c0 <HAL_DMA_Init+0x22c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d030      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <HAL_DMA_Init+0x230>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a49      	ldr	r2, [pc, #292]	@ (80016c8 <HAL_DMA_Init+0x234>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d026      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <HAL_DMA_Init+0x238>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d021      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a46      	ldr	r2, [pc, #280]	@ (80016d0 <HAL_DMA_Init+0x23c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d01c      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a44      	ldr	r2, [pc, #272]	@ (80016d4 <HAL_DMA_Init+0x240>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d017      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a43      	ldr	r2, [pc, #268]	@ (80016d8 <HAL_DMA_Init+0x244>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d012      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a41      	ldr	r2, [pc, #260]	@ (80016dc <HAL_DMA_Init+0x248>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a40      	ldr	r2, [pc, #256]	@ (80016e0 <HAL_DMA_Init+0x24c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d008      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a3e      	ldr	r2, [pc, #248]	@ (80016e4 <HAL_DMA_Init+0x250>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d003      	beq.n	80015f6 <HAL_DMA_Init+0x162>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <HAL_DMA_Init+0x254>)
 80015f4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2202      	movs	r2, #2
 8001602:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0206 	orr.w	r2, r2, #6
 8001614:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001616:	e00f      	b.n	8001638 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001618:	f7ff fdac 	bl	8001174 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b05      	cmp	r3, #5
 8001624:	d908      	bls.n	8001638 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2210      	movs	r2, #16
 800162a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e015      	b.n	8001664 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1e8      	bne.n	8001618 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fa92 	bl	8001b70 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020050 	.word	0x40020050
 8001670:	50020050 	.word	0x50020050
 8001674:	400200d0 	.word	0x400200d0
 8001678:	500200d0 	.word	0x500200d0
 800167c:	40020150 	.word	0x40020150
 8001680:	50020150 	.word	0x50020150
 8001684:	400201d0 	.word	0x400201d0
 8001688:	500201d0 	.word	0x500201d0
 800168c:	40020250 	.word	0x40020250
 8001690:	50020250 	.word	0x50020250
 8001694:	400202d0 	.word	0x400202d0
 8001698:	500202d0 	.word	0x500202d0
 800169c:	40020350 	.word	0x40020350
 80016a0:	50020350 	.word	0x50020350
 80016a4:	400203d0 	.word	0x400203d0
 80016a8:	500203d0 	.word	0x500203d0
 80016ac:	40020450 	.word	0x40020450
 80016b0:	50020450 	.word	0x50020450
 80016b4:	400204d0 	.word	0x400204d0
 80016b8:	500204d0 	.word	0x500204d0
 80016bc:	40020550 	.word	0x40020550
 80016c0:	50020550 	.word	0x50020550
 80016c4:	400205d0 	.word	0x400205d0
 80016c8:	500205d0 	.word	0x500205d0
 80016cc:	40020650 	.word	0x40020650
 80016d0:	50020650 	.word	0x50020650
 80016d4:	400206d0 	.word	0x400206d0
 80016d8:	500206d0 	.word	0x500206d0
 80016dc:	40020750 	.word	0x40020750
 80016e0:	50020750 	.word	0x50020750
 80016e4:	400207d0 	.word	0x400207d0
 80016e8:	500207d0 	.word	0x500207d0

080016ec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80016f4:	f7ff fd3e 	bl	8001174 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e06b      	b.n	80017dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d008      	beq.n	8001722 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e05c      	b.n	80017dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0204 	orr.w	r2, r2, #4
 8001730:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2205      	movs	r2, #5
 8001736:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800173a:	e020      	b.n	800177e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800173c:	f7ff fd1a 	bl	8001174 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b05      	cmp	r3, #5
 8001748:	d919      	bls.n	800177e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f043 0210 	orr.w	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176e:	2201      	movs	r2, #1
 8001770:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e02e      	b.n	80017dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0d7      	beq.n	800173c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0202 	orr.w	r2, r2, #2
 800179a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80017ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c6:	2201      	movs	r2, #1
 80017c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e019      	b.n	800182a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d004      	beq.n	800180c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2220      	movs	r2, #32
 8001806:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e00e      	b.n	800182a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001846:	f023 030f 	bic.w	r3, r3, #15
 800184a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	3b50      	subs	r3, #80	@ 0x50
 8001856:	09db      	lsrs	r3, r3, #7
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2201      	movs	r2, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 813b 	beq.w	8001aec <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d011      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800189a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00a      	beq.n	80018da <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d011      	beq.n	800190c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d011      	beq.n	800193e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00a      	beq.n	800193e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001930:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f043 0208 	orr.w	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001962:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d04c      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d045      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001998:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d12e      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019b4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0202 	orr.w	r2, r2, #2
 80019c4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019de:	2201      	movs	r2, #1
 80019e0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d07a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
        }

        return;
 8001a02:	e075      	b.n	8001af0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d039      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d032      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a64:	2201      	movs	r2, #1
 8001a66:	731a      	strb	r2, [r3, #12]
 8001a68:	e008      	b.n	8001a7c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a84:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0202 	orr.w	r2, r2, #2
 8001ab4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ace:	2201      	movs	r2, #1
 8001ad0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
 8001aea:	e002      	b.n	8001af2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001af0:	bf00      	nop
    }
  }
}
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e02b      	b.n	8001b64 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001b14:	f023 030f 	bic.w	r3, r3, #15
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b22:	3b50      	subs	r3, #80	@ 0x50
 8001b24:	09db      	lsrs	r3, r3, #7
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d012      	beq.n	8001b62 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f003 0311 	and.w	r3, r3, #17
 8001b42:	2b11      	cmp	r3, #17
 8001b44:	d106      	bne.n	8001b54 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	e006      	b.n	8001b62 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a53      	ldr	r2, [pc, #332]	@ (8001cfc <DMA_Init+0x18c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f000 80a0 	beq.w	8001cf6 <DMA_Init+0x186>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a51      	ldr	r2, [pc, #324]	@ (8001d00 <DMA_Init+0x190>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f000 809a 	beq.w	8001cf6 <DMA_Init+0x186>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4f      	ldr	r2, [pc, #316]	@ (8001d04 <DMA_Init+0x194>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f000 8094 	beq.w	8001cf6 <DMA_Init+0x186>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d08 <DMA_Init+0x198>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f000 808e 	beq.w	8001cf6 <DMA_Init+0x186>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	@ (8001d0c <DMA_Init+0x19c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	f000 8088 	beq.w	8001cf6 <DMA_Init+0x186>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a49      	ldr	r2, [pc, #292]	@ (8001d10 <DMA_Init+0x1a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f000 8082 	beq.w	8001cf6 <DMA_Init+0x186>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	@ (8001d14 <DMA_Init+0x1a4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d07c      	beq.n	8001cf6 <DMA_Init+0x186>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <DMA_Init+0x1a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d077      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <DMA_Init+0x1ac>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d072      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <DMA_Init+0x1b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d06d      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a41      	ldr	r2, [pc, #260]	@ (8001d24 <DMA_Init+0x1b4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d068      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3f      	ldr	r2, [pc, #252]	@ (8001d28 <DMA_Init+0x1b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d063      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	@ (8001d2c <DMA_Init+0x1bc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <DMA_Init+0x1c0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d059      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <DMA_Init+0x1c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d054      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a39      	ldr	r2, [pc, #228]	@ (8001d38 <DMA_Init+0x1c8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d04f      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a38      	ldr	r2, [pc, #224]	@ (8001d3c <DMA_Init+0x1cc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04a      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <DMA_Init+0x1d0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d045      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a35      	ldr	r2, [pc, #212]	@ (8001d44 <DMA_Init+0x1d4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d040      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a33      	ldr	r2, [pc, #204]	@ (8001d48 <DMA_Init+0x1d8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d03b      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a32      	ldr	r2, [pc, #200]	@ (8001d4c <DMA_Init+0x1dc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d036      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <DMA_Init+0x1e0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2f      	ldr	r2, [pc, #188]	@ (8001d54 <DMA_Init+0x1e4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d02c      	beq.n	8001cf6 <DMA_Init+0x186>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d58 <DMA_Init+0x1e8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d027      	beq.n	8001cf6 <DMA_Init+0x186>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2c      	ldr	r2, [pc, #176]	@ (8001d5c <DMA_Init+0x1ec>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d022      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <DMA_Init+0x1f0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01d      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <DMA_Init+0x1f4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d018      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <DMA_Init+0x1f8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <DMA_Init+0x1fc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00e      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a24      	ldr	r2, [pc, #144]	@ (8001d70 <DMA_Init+0x200>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <DMA_Init+0x186>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <DMA_Init+0x204>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d004      	beq.n	8001cf6 <DMA_Init+0x186>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <DMA_Init+0x208>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d142      	bne.n	8001d7c <DMA_Init+0x20c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e041      	b.n	8001d7e <DMA_Init+0x20e>
 8001cfa:	bf00      	nop
 8001cfc:	40020050 	.word	0x40020050
 8001d00:	50020050 	.word	0x50020050
 8001d04:	400200d0 	.word	0x400200d0
 8001d08:	500200d0 	.word	0x500200d0
 8001d0c:	40020150 	.word	0x40020150
 8001d10:	50020150 	.word	0x50020150
 8001d14:	400201d0 	.word	0x400201d0
 8001d18:	500201d0 	.word	0x500201d0
 8001d1c:	40020250 	.word	0x40020250
 8001d20:	50020250 	.word	0x50020250
 8001d24:	400202d0 	.word	0x400202d0
 8001d28:	500202d0 	.word	0x500202d0
 8001d2c:	40020350 	.word	0x40020350
 8001d30:	50020350 	.word	0x50020350
 8001d34:	400203d0 	.word	0x400203d0
 8001d38:	500203d0 	.word	0x500203d0
 8001d3c:	40020450 	.word	0x40020450
 8001d40:	50020450 	.word	0x50020450
 8001d44:	400204d0 	.word	0x400204d0
 8001d48:	500204d0 	.word	0x500204d0
 8001d4c:	40020550 	.word	0x40020550
 8001d50:	50020550 	.word	0x50020550
 8001d54:	400205d0 	.word	0x400205d0
 8001d58:	500205d0 	.word	0x500205d0
 8001d5c:	40020650 	.word	0x40020650
 8001d60:	50020650 	.word	0x50020650
 8001d64:	400206d0 	.word	0x400206d0
 8001d68:	500206d0 	.word	0x500206d0
 8001d6c:	40020750 	.word	0x40020750
 8001d70:	50020750 	.word	0x50020750
 8001d74:	400207d0 	.word	0x400207d0
 8001d78:	500207d0 	.word	0x500207d0
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d012      	beq.n	8001da8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051b      	lsls	r3, r3, #20
 8001d8e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001d92:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001da0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dda:	f040 80b0 	bne.w	8001f3e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a82      	ldr	r2, [pc, #520]	@ (8001fec <DMA_Init+0x47c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	f000 80a0 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a80      	ldr	r2, [pc, #512]	@ (8001ff0 <DMA_Init+0x480>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	f000 809a 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff4 <DMA_Init+0x484>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	f000 8094 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7c      	ldr	r2, [pc, #496]	@ (8001ff8 <DMA_Init+0x488>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f000 808e 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7a      	ldr	r2, [pc, #488]	@ (8001ffc <DMA_Init+0x48c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f000 8088 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a78      	ldr	r2, [pc, #480]	@ (8002000 <DMA_Init+0x490>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f000 8082 	beq.w	8001f2a <DMA_Init+0x3ba>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a76      	ldr	r2, [pc, #472]	@ (8002004 <DMA_Init+0x494>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d07c      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a74      	ldr	r2, [pc, #464]	@ (8002008 <DMA_Init+0x498>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d077      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a73      	ldr	r2, [pc, #460]	@ (800200c <DMA_Init+0x49c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d072      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a71      	ldr	r2, [pc, #452]	@ (8002010 <DMA_Init+0x4a0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d06d      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a70      	ldr	r2, [pc, #448]	@ (8002014 <DMA_Init+0x4a4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d068      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002018 <DMA_Init+0x4a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d063      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6d      	ldr	r2, [pc, #436]	@ (800201c <DMA_Init+0x4ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d05e      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6b      	ldr	r2, [pc, #428]	@ (8002020 <DMA_Init+0x4b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d059      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8002024 <DMA_Init+0x4b4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d054      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a68      	ldr	r2, [pc, #416]	@ (8002028 <DMA_Init+0x4b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d04f      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a67      	ldr	r2, [pc, #412]	@ (800202c <DMA_Init+0x4bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d04a      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a65      	ldr	r2, [pc, #404]	@ (8002030 <DMA_Init+0x4c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d045      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a64      	ldr	r2, [pc, #400]	@ (8002034 <DMA_Init+0x4c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d040      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a62      	ldr	r2, [pc, #392]	@ (8002038 <DMA_Init+0x4c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d03b      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a61      	ldr	r2, [pc, #388]	@ (800203c <DMA_Init+0x4cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d036      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8002040 <DMA_Init+0x4d0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5e      	ldr	r2, [pc, #376]	@ (8002044 <DMA_Init+0x4d4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d02c      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5c      	ldr	r2, [pc, #368]	@ (8002048 <DMA_Init+0x4d8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d027      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5b      	ldr	r2, [pc, #364]	@ (800204c <DMA_Init+0x4dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a59      	ldr	r2, [pc, #356]	@ (8002050 <DMA_Init+0x4e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a58      	ldr	r2, [pc, #352]	@ (8002054 <DMA_Init+0x4e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a56      	ldr	r2, [pc, #344]	@ (8002058 <DMA_Init+0x4e8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a55      	ldr	r2, [pc, #340]	@ (800205c <DMA_Init+0x4ec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a53      	ldr	r2, [pc, #332]	@ (8002060 <DMA_Init+0x4f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a52      	ldr	r2, [pc, #328]	@ (8002064 <DMA_Init+0x4f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <DMA_Init+0x3ba>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a50      	ldr	r2, [pc, #320]	@ (8002068 <DMA_Init+0x4f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <DMA_Init+0x3be>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <DMA_Init+0x3c0>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e008      	b.n	8001f50 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f46:	d103      	bne.n	8001f50 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f56:	4b45      	ldr	r3, [pc, #276]	@ (800206c <DMA_Init+0x4fc>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a36      	ldr	r2, [pc, #216]	@ (800204c <DMA_Init+0x4dc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <DMA_Init+0x44c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a35      	ldr	r2, [pc, #212]	@ (8002050 <DMA_Init+0x4e0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d01d      	beq.n	8001fbc <DMA_Init+0x44c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a33      	ldr	r2, [pc, #204]	@ (8002054 <DMA_Init+0x4e4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <DMA_Init+0x44c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a32      	ldr	r2, [pc, #200]	@ (8002058 <DMA_Init+0x4e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <DMA_Init+0x44c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a30      	ldr	r2, [pc, #192]	@ (800205c <DMA_Init+0x4ec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <DMA_Init+0x44c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8002060 <DMA_Init+0x4f0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <DMA_Init+0x44c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2d      	ldr	r2, [pc, #180]	@ (8002064 <DMA_Init+0x4f4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <DMA_Init+0x44c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <DMA_Init+0x4f8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <DMA_Init+0x450>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <DMA_Init+0x452>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40020050 	.word	0x40020050
 8001ff0:	50020050 	.word	0x50020050
 8001ff4:	400200d0 	.word	0x400200d0
 8001ff8:	500200d0 	.word	0x500200d0
 8001ffc:	40020150 	.word	0x40020150
 8002000:	50020150 	.word	0x50020150
 8002004:	400201d0 	.word	0x400201d0
 8002008:	500201d0 	.word	0x500201d0
 800200c:	40020250 	.word	0x40020250
 8002010:	50020250 	.word	0x50020250
 8002014:	400202d0 	.word	0x400202d0
 8002018:	500202d0 	.word	0x500202d0
 800201c:	40020350 	.word	0x40020350
 8002020:	50020350 	.word	0x50020350
 8002024:	400203d0 	.word	0x400203d0
 8002028:	500203d0 	.word	0x500203d0
 800202c:	40020450 	.word	0x40020450
 8002030:	50020450 	.word	0x50020450
 8002034:	400204d0 	.word	0x400204d0
 8002038:	500204d0 	.word	0x500204d0
 800203c:	40020550 	.word	0x40020550
 8002040:	50020550 	.word	0x50020550
 8002044:	400205d0 	.word	0x400205d0
 8002048:	500205d0 	.word	0x500205d0
 800204c:	40020650 	.word	0x40020650
 8002050:	50020650 	.word	0x50020650
 8002054:	400206d0 	.word	0x400206d0
 8002058:	500206d0 	.word	0x500206d0
 800205c:	40020750 	.word	0x40020750
 8002060:	50020750 	.word	0x50020750
 8002064:	400207d0 	.word	0x400207d0
 8002068:	500207d0 	.word	0x500207d0
 800206c:	3cc03180 	.word	0x3cc03180

08002070 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002082:	e1ba      	b.n	80023fa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 81aa 	beq.w	80023f4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a55      	ldr	r2, [pc, #340]	@ (80021f8 <HAL_GPIO_Init+0x188>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d15d      	bne.n	8002164 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80020ae:	2201      	movs	r2, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80020d8:	4a48      	ldr	r2, [pc, #288]	@ (80021fc <HAL_GPIO_Init+0x18c>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020e0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80020e2:	4a46      	ldr	r2, [pc, #280]	@ (80021fc <HAL_GPIO_Init+0x18c>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3208      	adds	r2, #8
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	4013      	ands	r3, r2
 8002110:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220b      	movs	r2, #11
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	4313      	orrs	r3, r2
 8002124:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	3208      	adds	r2, #8
 800212e:	69f9      	ldr	r1, [r7, #28]
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	4013      	ands	r3, r2
 800214a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2202      	movs	r2, #2
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	4313      	orrs	r3, r2
 800215a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e067      	b.n	8002234 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x104>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d145      	bne.n	8002200 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	4013      	ands	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e01e      	b.n	8002234 <HAL_GPIO_Init+0x1c4>
 80021f6:	bf00      	nop
 80021f8:	46020000 	.word	0x46020000
 80021fc:	0801179c 	.word	0x0801179c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	4313      	orrs	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d00b      	beq.n	8002254 <HAL_GPIO_Init+0x1e4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d007      	beq.n	8002254 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002248:	2b11      	cmp	r3, #17
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b12      	cmp	r3, #18
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	4013      	ands	r3, r2
 800226a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	4313      	orrs	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800228a:	2201      	movs	r2, #1
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	4013      	ands	r3, r2
 8002298:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07c      	beq.n	80023f4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022fa:	4a47      	ldr	r2, [pc, #284]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3318      	adds	r3, #24
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	4013      	ands	r3, r2
 800231c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0a9a      	lsrs	r2, r3, #10
 8002322:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <HAL_GPIO_Init+0x3ac>)
 8002324:	4013      	ands	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	00d2      	lsls	r2, r2, #3
 800232e:	4093      	lsls	r3, r2
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	4313      	orrs	r3, r2
 8002334:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002336:	4938      	ldr	r1, [pc, #224]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3318      	adds	r3, #24
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002344:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002368:	4a2b      	ldr	r2, [pc, #172]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	4013      	ands	r3, r2
 800237c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002392:	4a21      	ldr	r2, [pc, #132]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 800239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800239e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80023be:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 80023c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80023ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <HAL_GPIO_Init+0x3a8>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	f47f ae3d 	bne.w	8002084 <HAL_GPIO_Init+0x14>
  }
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	@ 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	46022000 	.word	0x46022000
 800241c:	002f7f7f 	.word	0x002f7f7f

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800243c:	e002      	b.n	8002444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43d9      	mvns	r1, r3
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	400b      	ands	r3, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0fe      	b.n	8002694 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fc7a 	bl	8000da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f007 f96b 	bl	8009798 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7c1a      	ldrb	r2, [r3, #16]
 80024ca:	f88d 2000 	strb.w	r2, [sp]
 80024ce:	3304      	adds	r3, #4
 80024d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d2:	f007 f88f 	bl	80095f4 <USB_CoreInit>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d5      	b.n	8002694 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 f963 	bl	80097ba <USB_SetCurrentMode>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0c6      	b.n	8002694 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e04a      	b.n	80025a2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3315      	adds	r3, #21
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3314      	adds	r3, #20
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	b298      	uxth	r0, r3
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	332e      	adds	r3, #46	@ 0x2e
 8002548:	4602      	mov	r2, r0
 800254a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3318      	adds	r3, #24
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	331c      	adds	r3, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3320      	adds	r3, #32
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3324      	adds	r3, #36	@ 0x24
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	3301      	adds	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3af      	bcc.n	800250c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e044      	b.n	800263c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	3301      	adds	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	429a      	cmp	r2, r3
 8002644:	d3b5      	bcc.n	80025b2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7c1a      	ldrb	r2, [r3, #16]
 800264e:	f88d 2000 	strb.w	r2, [sp]
 8002652:	3304      	adds	r3, #4
 8002654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002656:	f007 f8fd 	bl	8009854 <USB_DevInit>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e013      	b.n	8002694 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7b1b      	ldrb	r3, [r3, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f001 f862 	bl	800374c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f007 ffc3 	bl	800a618 <USB_DevDisconnect>

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b08d      	sub	sp, #52	@ 0x34
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f008 f864 	bl	800a780 <USB_GetMode>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 84b9 	bne.w	8003032 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f007 ffc8 	bl	800a65a <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 84af 	beq.w	8003030 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f007 ffb5 	bl	800a65a <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f002 0202 	and.w	r2, r2, #2
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f007 ffa3 	bl	800a65a <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d161      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0210 	bic.w	r2, r2, #16
 800272c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	0c5b      	lsrs	r3, r3, #17
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	2b02      	cmp	r3, #2
 8002758:	d124      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d035      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6a38      	ldr	r0, [r7, #32]
 800277a:	f007 fe87 	bl	800a48c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278a:	441a      	add	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	e016      	b.n	80027d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d110      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027b6:	2208      	movs	r2, #8
 80027b8:	4619      	mov	r1, r3
 80027ba:	6a38      	ldr	r0, [r7, #32]
 80027bc:	f007 fe66 	bl	800a48c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027cc:	441a      	add	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f007 ff37 	bl	800a65a <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027f6:	f040 80a7 	bne.w	8002948 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f007 ff3c 	bl	800a680 <USB_ReadDevAllOutEpInterrupt>
 8002808:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800280a:	e099      	b.n	8002940 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 808e 	beq.w	8002934 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f007 ff60 	bl	800a6e8 <USB_ReadDevOutEPInterrupt>
 8002828:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fe51 	bl	80034f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800286a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 ff27 	bl	80036c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	2310      	movs	r3, #16
 800288c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d030      	beq.n	80028fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	2b80      	cmp	r3, #128	@ 0x80
 80028a2:	d109      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	78db      	ldrb	r3, [r3, #3]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fba8 	bl	8003038 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	2302      	movs	r3, #2
 80028f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002910:	461a      	mov	r2, r3
 8002912:	2320      	movs	r3, #32
 8002914:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002932:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	3301      	adds	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	f47f af62 	bne.w	800280c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f007 fe84 	bl	800a65a <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800295c:	f040 80db 	bne.w	8002b16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f007 fea5 	bl	800a6b4 <USB_ReadDevAllInEpInterrupt>
 800296a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002970:	e0cd      	b.n	8002b0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80c2 	beq.w	8002b02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f007 fecb 	bl	800a724 <USB_ReadDevInEPInterrupt>
 800298e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d057      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69f9      	ldr	r1, [r7, #28]
 80029b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029ba:	4013      	ands	r3, r2
 80029bc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ca:	461a      	mov	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	799b      	ldrb	r3, [r3, #6]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d132      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3320      	adds	r3, #32
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	331c      	adds	r3, #28
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4419      	add	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4403      	add	r3, r0
 8002a0c:	3320      	adds	r3, #32
 8002a0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d113      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3324      	adds	r3, #36	@ 0x24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d108      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a36:	461a      	mov	r2, r3
 8002a38:	2101      	movs	r1, #1
 8002a3a:	f007 fed3 	bl	800a7e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f00d fbcb 	bl	80101e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2308      	movs	r3, #8
 8002a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2340      	movs	r3, #64	@ 0x40
 8002a9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aaa:	6a38      	ldr	r0, [r7, #32]
 8002aac:	f007 f842 	bl	8009b34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3310      	adds	r3, #16
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	78db      	ldrb	r3, [r3, #3]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fab9 	bl	8003050 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aea:	461a      	mov	r2, r3
 8002aec:	2302      	movs	r3, #2
 8002aee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002afa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fc6b 	bl	80033d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f af2e 	bne.w	8002972 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f007 fd9d 	bl	800a65a <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b2a:	d122      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fe1d 	bl	8003794 <HAL_PCDEx_LPM_Callback>
 8002b5a:	e002      	b.n	8002b62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f00d fcef 	bl	8010540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 fd6f 	bl	800a65a <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b86:	d112      	bne.n	8002bae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d102      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f00d fcbb 	bl	8010514 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 fd51 	bl	800a65a <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bc2:	d121      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fdca 	bl	8003794 <HAL_PCDEx_LPM_Callback>
 8002c00:	e002      	b.n	8002c08 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f00d fc86 	bl	8010514 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f007 fd24 	bl	800a65a <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1c:	f040 80b7 	bne.w	8002d8e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2110      	movs	r1, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 ff7a 	bl	8009b34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c44:	e046      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ccc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	791b      	ldrb	r3, [r3, #4]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d3b2      	bcc.n	8002c46 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cee:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7bdb      	ldrb	r3, [r3, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0c:	f043 030b 	orr.w	r3, r3, #11
 8002d10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d22:	f043 030b 	orr.w	r3, r3, #11
 8002d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d28:	e015      	b.n	8002d56 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d3c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d50:	f043 030b 	orr.w	r3, r3, #11
 8002d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d64:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f007 fd33 	bl	800a7e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f007 fc61 	bl	800a65a <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da2:	d123      	bne.n	8002dec <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f007 fcf7 	bl	800a79c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 ff37 	bl	8009c26 <USB_GetDevSpeed>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	f001 ff7c 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f006 fc3f 	bl	8009654 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f00d fb38 	bl	801044c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f007 fc32 	bl	800a65a <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d10a      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f00d fbb3 	bl	801056c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 0208 	and.w	r2, r2, #8
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f007 fc1d 	bl	800a65a <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d123      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e014      	b.n	8002e66 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa5e 	bl	800331c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	791b      	ldrb	r3, [r3, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d3e4      	bcc.n	8002e3c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f007 fbef 	bl	800a65a <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e86:	d13c      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	e02b      	b.n	8002ee6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3318      	adds	r3, #24
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d115      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da12      	bge.n	8002ee0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3317      	adds	r3, #23
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa1e 	bl	800331c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3cd      	bcc.n	8002e8e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f007 fba7 	bl	800a65a <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f16:	d156      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f18:	2301      	movs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	e045      	b.n	8002faa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da2b      	bge.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	0c1a      	lsrs	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f56:	4053      	eors	r3, r2
 8002f58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d121      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa0:	6053      	str	r3, [r2, #4]
            break;
 8002fa2:	e008      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	791b      	ldrb	r3, [r3, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d3b3      	bcc.n	8002f1e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f007 fb45 	bl	800a65a <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fda:	d10a      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f00d fa65 	bl	80104ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f007 fb2f 	bl	800a65a <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d115      	bne.n	8003032 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f00d fa5d 	bl	80104d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e000      	b.n	8003032 <HAL_PCD_IRQHandler+0x996>
      return;
 8003030:	bf00      	nop
    }
  }
}
 8003032:	3734      	adds	r7, #52	@ 0x34
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}

08003038 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	70fb      	strb	r3, [r7, #3]
 800307a:	460b      	mov	r3, r1
 800307c:	803b      	strh	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da0f      	bge.n	80030ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	3310      	adds	r3, #16
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	705a      	strb	r2, [r3, #1]
 80030ac:	e00f      	b.n	80030ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030da:	883b      	ldrh	r3, [r7, #0]
 80030dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	78ba      	ldrb	r2, [r7, #2]
 80030e8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030fc:	78bb      	ldrb	r3, [r7, #2]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d102      	bne.n	8003108 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_PCD_EP_Open+0xae>
 8003112:	2302      	movs	r3, #2
 8003114:	e00e      	b.n	8003134 <HAL_PCD_EP_Open+0xcc>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	f006 fda3 	bl	8009c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003132:	7afb      	ldrb	r3, [r7, #11]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	799b      	ldrb	r3, [r3, #6]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	461a      	mov	r2, r3
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	f006 fdec 	bl	8009d80 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80031d4:	681b      	ldr	r3, [r3, #0]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	460b      	mov	r3, r1
 80031f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	3310      	adds	r3, #16
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	799b      	ldrb	r3, [r3, #6]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d102      	bne.n	800323c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	799b      	ldrb	r3, [r3, #6]
 8003244:	461a      	mov	r2, r3
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	f006 fd9a 	bl	8009d80 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	7912      	ldrb	r2, [r2, #4]
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04f      	b.n	8003314 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003278:	2b00      	cmp	r3, #0
 800327a:	da0f      	bge.n	800329c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 020f 	and.w	r2, r3, #15
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3310      	adds	r3, #16
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	3304      	adds	r3, #4
 8003292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	705a      	strb	r2, [r3, #1]
 800329a:	e00d      	b.n	80032b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_PCD_EP_SetStall+0x82>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e01d      	b.n	8003314 <HAL_PCD_EP_SetStall+0xbe>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f007 f928 	bl	800a53c <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7999      	ldrb	r1, [r3, #6]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003304:	461a      	mov	r2, r3
 8003306:	f007 fa6d 	bl	800a7e4 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0c      	bge.n	800334a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	3310      	adds	r3, #16
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e00c      	b.n	8003364 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f006 ffa6 	bl	800a2bc <USB_EPStopXfer>
 8003370:	4603      	mov	r3, r0
 8003372:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003374:	7afb      	ldrb	r3, [r7, #11]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_Flush+0x1a>
 8003394:	2302      	movs	r3, #2
 8003396:	e01b      	b.n	80033d0 <HAL_PCD_EP_Flush+0x52>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80033a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da09      	bge.n	80033bc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f006 fbbd 	bl	8009b34 <USB_FlushTxFifo>
 80033ba:	e004      	b.n	80033c6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f006 fbe9 	bl	8009b98 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af02      	add	r7, sp, #8
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	3310      	adds	r3, #16
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d901      	bls.n	8003410 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e06b      	b.n	80034e8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	429a      	cmp	r2, r3
 8003424:	d902      	bls.n	800342c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3303      	adds	r3, #3
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003434:	e02a      	b.n	800348c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	429a      	cmp	r2, r3
 800344a:	d902      	bls.n	8003452 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3303      	adds	r3, #3
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4603      	mov	r3, r0
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	f006 ffce 	bl	800a410 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	441a      	add	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d809      	bhi.n	80034b6 <PCD_WriteEmptyTxFifo+0xde>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d203      	bcs.n	80034b6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1bf      	bne.n	8003436 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d811      	bhi.n	80034e6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	2201      	movs	r2, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	43db      	mvns	r3, r3
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e2:	4013      	ands	r3, r2
 80034e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	333c      	adds	r3, #60	@ 0x3c
 8003508:	3304      	adds	r3, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	799b      	ldrb	r3, [r3, #6]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d17b      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4a61      	ldr	r2, [pc, #388]	@ (80036b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	f240 80b9 	bls.w	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80b3 	beq.w	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003558:	6093      	str	r3, [r2, #8]
 800355a:	e0a7      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	e098      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8093 	bne.w	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a4b      	ldr	r2, [pc, #300]	@ (80036b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d90f      	bls.n	80035ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e07e      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d114      	bne.n	8003610 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035f8:	461a      	mov	r2, r3
 80035fa:	2101      	movs	r1, #1
 80035fc:	f007 f8f2 	bl	800a7e4 <USB_EP0_OutStart>
 8003600:	e006      	b.n	8003610 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	441a      	add	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f00c fe98 	bl	801034c <HAL_PCD_DataOutStageCallback>
 800361c:	e046      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d124      	bne.n	8003670 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e032      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2320      	movs	r3, #32
 8003660:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f00c fe6f 	bl	801034c <HAL_PCD_DataOutStageCallback>
 800366e:	e01d      	b.n	80036ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d114      	bne.n	80036a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003698:	461a      	mov	r2, r3
 800369a:	2100      	movs	r1, #0
 800369c:	f007 f8a2 	bl	800a7e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f00c fe50 	bl	801034c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	4f54300a 	.word	0x4f54300a
 80036bc:	4f54310a 	.word	0x4f54310a

080036c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	333c      	adds	r3, #60	@ 0x3c
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <PCD_EP_OutSetupPacket_int+0x88>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d90e      	bls.n	8003714 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003712:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f00c fce9 	bl	80100ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <PCD_EP_OutSetupPacket_int+0x88>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d90c      	bls.n	800373c <PCD_EP_OutSetupPacket_int+0x7c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	799b      	ldrb	r3, [r3, #6]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003734:	461a      	mov	r2, r3
 8003736:	2101      	movs	r1, #1
 8003738:	f007 f854 	bl	800a7e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	4f54300a 	.word	0x4f54300a

0800374c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377e:	f043 0303 	orr.w	r3, r3, #3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80037b4:	4b39      	ldr	r3, [pc, #228]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037bc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10b      	bne.n	80037de <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d905      	bls.n	80037da <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037ce:	4b33      	ldr	r3, [pc, #204]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a32      	ldr	r2, [pc, #200]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e057      	b.n	800388e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d90a      	bls.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80037e6:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	4a2a      	ldr	r2, [pc, #168]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f8:	60d3      	str	r3, [r2, #12]
 80037fa:	e007      	b.n	800380c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80037fc:	4b27      	ldr	r3, [pc, #156]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003804:	4925      	ldr	r1, [pc, #148]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800380c:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a24      	ldr	r2, [pc, #144]	@ (80038a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	2232      	movs	r2, #50	@ 0x32
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a21      	ldr	r2, [pc, #132]	@ (80038a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800382a:	e002      	b.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3b01      	subs	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003832:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x98>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f3      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01b      	beq.n	8003882 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a15      	ldr	r2, [pc, #84]	@ (80038a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	2232      	movs	r2, #50	@ 0x32
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	4a11      	ldr	r2, [pc, #68]	@ (80038a4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	3301      	adds	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003868:	e002      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b01      	subs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f3      	bne.n	800386a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e000      	b.n	800388e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	46020800 	.word	0x46020800
 80038a0:	20000000 	.word	0x20000000
 80038a4:	10624dd3 	.word	0x10624dd3

080038a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	46020800 	.word	0x46020800

080038c4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6113      	str	r3, [r2, #16]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	46020800 	.word	0x46020800

080038e4 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80038ea:	f7ff ffdd 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 80038ee:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038f6:	d003      	beq.n	8003900 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038fe:	d107      	bne.n	8003910 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a05      	ldr	r2, [pc, #20]	@ (800391c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8003906:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800390a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	46020800 	.word	0x46020800

08003920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	@ 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f000 bec8 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4b99      	ldr	r3, [pc, #612]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003944:	4b96      	ldr	r3, [pc, #600]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 816c 	beq.w	8003c34 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_RCC_OscConfig+0x52>
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	2b0c      	cmp	r3, #12
 8003966:	f040 80de 	bne.w	8003b26 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	2b01      	cmp	r3, #1
 800396e:	f040 80da 	bne.w	8003b26 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f000 bea5 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003984:	4b86      	ldr	r3, [pc, #536]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_RCC_OscConfig+0x7a>
 8003990:	4b83      	ldr	r3, [pc, #524]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003998:	e005      	b.n	80039a6 <HAL_RCC_OscConfig+0x86>
 800399a:	4b81      	ldr	r3, [pc, #516]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 800399c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d255      	bcs.n	8003a56 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fa11 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f000 be82 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039d0:	6093      	str	r3, [r2, #8]
 80039d2:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	4970      	ldr	r1, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039ec:	d309      	bcc.n	8003a02 <HAL_RCC_OscConfig+0xe2>
 80039ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 021f 	bic.w	r2, r3, #31
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4969      	ldr	r1, [pc, #420]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60cb      	str	r3, [r1, #12]
 8003a00:	e07e      	b.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0a      	bge.n	8003a20 <HAL_RCC_OscConfig+0x100>
 8003a0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	4961      	ldr	r1, [pc, #388]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60cb      	str	r3, [r1, #12]
 8003a1e:	e06f      	b.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d30a      	bcc.n	8003a40 <HAL_RCC_OscConfig+0x120>
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	4959      	ldr	r1, [pc, #356]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60cb      	str	r3, [r1, #12]
 8003a3e:	e05f      	b.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
 8003a40:	4b57      	ldr	r3, [pc, #348]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	03db      	lsls	r3, r3, #15
 8003a4e:	4954      	ldr	r1, [pc, #336]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
 8003a54:	e054      	b.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003a56:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4a51      	ldr	r2, [pc, #324]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	494c      	ldr	r1, [pc, #304]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a7c:	d309      	bcc.n	8003a92 <HAL_RCC_OscConfig+0x172>
 8003a7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 021f 	bic.w	r2, r3, #31
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4945      	ldr	r1, [pc, #276]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
 8003a90:	e028      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1c4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da0a      	bge.n	8003ab0 <HAL_RCC_OscConfig+0x190>
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	015b      	lsls	r3, r3, #5
 8003aa8:	493d      	ldr	r1, [pc, #244]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
 8003aae:	e019      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1c4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d30a      	bcc.n	8003ad0 <HAL_RCC_OscConfig+0x1b0>
 8003aba:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	029b      	lsls	r3, r3, #10
 8003ac8:	4935      	ldr	r1, [pc, #212]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60cb      	str	r3, [r1, #12]
 8003ace:	e009      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1c4>
 8003ad0:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	03db      	lsls	r3, r3, #15
 8003ade:	4930      	ldr	r1, [pc, #192]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f974 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f000 bde5 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003b00:	f001 f8de 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b04:	4b27      	ldr	r3, [pc, #156]	@ (8003ba4 <HAL_RCC_OscConfig+0x284>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f9d9 	bl	8000ec0 <HAL_InitTick>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808a 	beq.w	8003c32 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b22:	f000 bdd2 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d066      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b3a:	f7fd fb1b 	bl	8001174 <HAL_GetTick>
 8003b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b42:	f7fd fb17 	bl	8001174 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f000 bdba 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b6c:	6093      	str	r3, [r2, #8]
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	4909      	ldr	r1, [pc, #36]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b88:	d30e      	bcc.n	8003ba8 <HAL_RCC_OscConfig+0x288>
 8003b8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 021f 	bic.w	r2, r3, #31
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4902      	ldr	r1, [pc, #8]	@ (8003ba0 <HAL_RCC_OscConfig+0x280>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
 8003b9c:	e04a      	b.n	8003c34 <HAL_RCC_OscConfig+0x314>
 8003b9e:	bf00      	nop
 8003ba0:	46020c00 	.word	0x46020c00
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	da0a      	bge.n	8003bc6 <HAL_RCC_OscConfig+0x2a6>
 8003bb0:	4b98      	ldr	r3, [pc, #608]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	015b      	lsls	r3, r3, #5
 8003bbe:	4995      	ldr	r1, [pc, #596]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60cb      	str	r3, [r1, #12]
 8003bc4:	e036      	b.n	8003c34 <HAL_RCC_OscConfig+0x314>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d30a      	bcc.n	8003be6 <HAL_RCC_OscConfig+0x2c6>
 8003bd0:	4b90      	ldr	r3, [pc, #576]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	498d      	ldr	r1, [pc, #564]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
 8003be4:	e026      	b.n	8003c34 <HAL_RCC_OscConfig+0x314>
 8003be6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	03db      	lsls	r3, r3, #15
 8003bf4:	4987      	ldr	r1, [pc, #540]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60cb      	str	r3, [r1, #12]
 8003bfa:	e01b      	b.n	8003c34 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003bfc:	4b85      	ldr	r3, [pc, #532]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a84      	ldr	r2, [pc, #528]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c08:	f7fd fab4 	bl	8001174 <HAL_GetTick>
 8003c0c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c0e:	e009      	b.n	8003c24 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c10:	f7fd fab0 	bl	8001174 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	f000 bd53 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c24:	4b7b      	ldr	r3, [pc, #492]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ef      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2f0>
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 808b 	beq.w	8003d58 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_OscConfig+0x334>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d17d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f000 bd34 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x35a>
 8003c6c:	4b69      	ldr	r3, [pc, #420]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a68      	ldr	r2, [pc, #416]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e041      	b.n	8003cfe <HAL_RCC_OscConfig+0x3de>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c82:	d112      	bne.n	8003caa <HAL_RCC_OscConfig+0x38a>
 8003c84:	4b63      	ldr	r3, [pc, #396]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a62      	ldr	r2, [pc, #392]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b60      	ldr	r3, [pc, #384]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5f      	ldr	r2, [pc, #380]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e029      	b.n	8003cfe <HAL_RCC_OscConfig+0x3de>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003cb2:	d112      	bne.n	8003cda <HAL_RCC_OscConfig+0x3ba>
 8003cb4:	4b57      	ldr	r3, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b54      	ldr	r3, [pc, #336]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a53      	ldr	r2, [pc, #332]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b51      	ldr	r3, [pc, #324]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a50      	ldr	r2, [pc, #320]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e011      	b.n	8003cfe <HAL_RCC_OscConfig+0x3de>
 8003cda:	4b4e      	ldr	r3, [pc, #312]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4d      	ldr	r2, [pc, #308]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b48      	ldr	r3, [pc, #288]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a47      	ldr	r2, [pc, #284]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003d06:	f7fd fa35 	bl	8001174 <HAL_GetTick>
 8003d0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0c:	e009      	b.n	8003d22 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fa31 	bl	8001174 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b64      	cmp	r3, #100	@ 0x64
 8003d1a:	d902      	bls.n	8003d22 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	f000 bcd4 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d22:	4b3c      	ldr	r3, [pc, #240]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ef      	beq.n	8003d0e <HAL_RCC_OscConfig+0x3ee>
 8003d2e:	e013      	b.n	8003d58 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003d30:	f7fd fa20 	bl	8001174 <HAL_GetTick>
 8003d34:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d36:	e009      	b.n	8003d4c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fd fa1c 	bl	8001174 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d902      	bls.n	8003d4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	f000 bcbf 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d4c:	4b31      	ldr	r3, [pc, #196]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ef      	bne.n	8003d38 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05f      	beq.n	8003e24 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x456>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d114      	bne.n	8003d9a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d111      	bne.n	8003d9a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f000 bca3 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	4920      	ldr	r1, [pc, #128]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d98:	e044      	b.n	8003e24 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d024      	beq.n	8003dec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003da2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dae:	f7fd f9e1 	bl	8001174 <HAL_GetTick>
 8003db2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db4:	e009      	b.n	8003dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fd f9dd 	bl	8001174 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d902      	bls.n	8003dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f000 bc80 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ef      	beq.n	8003db6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	490b      	ldr	r1, [pc, #44]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
 8003dea:	e01b      	b.n	8003e24 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003dec:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a08      	ldr	r2, [pc, #32]	@ (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003df8:	f7fd f9bc 	bl	8001174 <HAL_GetTick>
 8003dfc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fd f9b8 	bl	8001174 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d904      	bls.n	8003e18 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	f000 bc5b 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
 8003e14:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e18:	4baf      	ldr	r3, [pc, #700]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ed      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80c8 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e38:	4ba7      	ldr	r3, [pc, #668]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4ba4      	ldr	r3, [pc, #656]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4c:	4aa2      	ldr	r2, [pc, #648]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e56:	4ba0      	ldr	r3, [pc, #640]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d119      	bne.n	8003eaa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e76:	4b99      	ldr	r3, [pc, #612]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	4a98      	ldr	r2, [pc, #608]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fd f977 	bl	8001174 <HAL_GetTick>
 8003e86:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e88:	e009      	b.n	8003e9e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fd f973 	bl	8001174 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d902      	bls.n	8003e9e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	f000 bc16 	b.w	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ef      	beq.n	8003e8a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d05f      	beq.n	8003f72 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003eb2:	4b89      	ldr	r3, [pc, #548]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d037      	beq.n	8003f38 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e3f4      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003eea:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef0:	4a79      	ldr	r2, [pc, #484]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003ef2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003efa:	f7fd f93b 	bl	8001174 <HAL_GetTick>
 8003efe:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fd f937 	bl	8001174 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e3da      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f14:	4b70      	ldr	r3, [pc, #448]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ef      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003f22:	4b6d      	ldr	r3, [pc, #436]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f28:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4969      	ldr	r1, [pc, #420]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003f38:	4b67      	ldr	r3, [pc, #412]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f3e:	4a66      	ldr	r2, [pc, #408]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f48:	f7fd f914 	bl	8001174 <HAL_GetTick>
 8003f4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fd f910 	bl	8001174 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e3b3      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f62:	4b5d      	ldr	r3, [pc, #372]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ef      	beq.n	8003f50 <HAL_RCC_OscConfig+0x630>
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f78:	4a57      	ldr	r2, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f7a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f82:	f7fd f8f7 	bl	8001174 <HAL_GetTick>
 8003f86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8a:	f7fd f8f3 	bl	8001174 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e396      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ef      	bne.n	8003f8a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003faa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb2:	4b49      	ldr	r3, [pc, #292]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb8:	4a47      	ldr	r2, [pc, #284]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8111 	beq.w	80041f2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd6:	4b40      	ldr	r3, [pc, #256]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fea:	4a3b      	ldr	r2, [pc, #236]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ff4:	4b38      	ldr	r3, [pc, #224]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8003ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 800400a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d118      	bne.n	8004046 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004014:	4b31      	ldr	r3, [pc, #196]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	4a30      	ldr	r2, [pc, #192]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004020:	f7fd f8a8 	bl	8001174 <HAL_GetTick>
 8004024:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fd f8a4 	bl	8001174 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e347      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800403a:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_RCC_OscConfig+0x7bc>)
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01f      	beq.n	8004092 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800405e:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004064:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800406e:	4b1a      	ldr	r3, [pc, #104]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004074:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004080:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004086:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004090:	e00f      	b.n	80040b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 8004094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004098:	4a0f      	ldr	r2, [pc, #60]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 80040a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a8:	4a0b      	ldr	r2, [pc, #44]	@ (80040d8 <HAL_RCC_OscConfig+0x7b8>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d057      	beq.n	800416a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80040ba:	f7fd f85b 	bl	8001174 <HAL_GetTick>
 80040be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c0:	e00e      	b.n	80040e0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fd f857 	bl	8001174 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d905      	bls.n	80040e0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e2f8      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
 80040d8:	46020c00 	.word	0x46020c00
 80040dc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0e9      	beq.n	80040c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01b      	beq.n	8004132 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040fa:	4b96      	ldr	r3, [pc, #600]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80040fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004100:	4a94      	ldr	r2, [pc, #592]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd f832 	bl	8001174 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e2d3      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004122:	4b8c      	ldr	r3, [pc, #560]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ed      	beq.n	800410c <HAL_RCC_OscConfig+0x7ec>
 8004130:	e053      	b.n	80041da <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004132:	4b88      	ldr	r3, [pc, #544]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004138:	4a86      	ldr	r2, [pc, #536]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd f816 	bl	8001174 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e2b7      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800415a:	4b7e      	ldr	r3, [pc, #504]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800415c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ed      	bne.n	8004144 <HAL_RCC_OscConfig+0x824>
 8004168:	e037      	b.n	80041da <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800416a:	f7fd f803 	bl	8001174 <HAL_GetTick>
 800416e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fc ffff 	bl	8001174 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e2a0      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800418a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ed      	bne.n	8004172 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004196:	4b6f      	ldr	r3, [pc, #444]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01a      	beq.n	80041da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80041a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80041ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fc ffdd 	bl	8001174 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e27e      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041cc:	4b61      	ldr	r3, [pc, #388]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80041ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ed      	bne.n	80041b6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80041ea:	f023 0304 	bic.w	r3, r3, #4
 80041ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d019      	beq.n	800423a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004206:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a52      	ldr	r2, [pc, #328]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800420c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004210:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004212:	f7fc ffaf 	bl	8001174 <HAL_GetTick>
 8004216:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800421a:	f7fc ffab 	bl	8001174 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e24e      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800422c:	4b49      	ldr	r3, [pc, #292]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x8fa>
 8004238:	e018      	b.n	800426c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800423a:	4b46      	ldr	r3, [pc, #280]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a45      	ldr	r2, [pc, #276]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004240:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004244:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004246:	f7fc ff95 	bl	8001174 <HAL_GetTick>
 800424a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424e:	f7fc ff91 	bl	8001174 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e234      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004260:	4b3c      	ldr	r3, [pc, #240]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d036      	beq.n	80042e6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d019      	beq.n	80042b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004280:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a33      	ldr	r2, [pc, #204]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800428a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800428c:	f7fc ff72 	bl	8001174 <HAL_GetTick>
 8004290:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004294:	f7fc ff6e 	bl	8001174 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e211      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80042a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x974>
 80042b2:	e018      	b.n	80042e6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80042ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042c0:	f7fc ff58 	bl	8001174 <HAL_GetTick>
 80042c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80042c8:	f7fc ff54 	bl	8001174 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e1f7      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d07f      	beq.n	80043f2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d062      	beq.n	80043c0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80042fa:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004300:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004304:	6093      	str	r3, [r2, #8]
 8004306:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	4910      	ldr	r1, [pc, #64]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004320:	d309      	bcc.n	8004336 <HAL_RCC_OscConfig+0xa16>
 8004322:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f023 021f 	bic.w	r2, r3, #31
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4909      	ldr	r1, [pc, #36]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004330:	4313      	orrs	r3, r2
 8004332:	60cb      	str	r3, [r1, #12]
 8004334:	e02a      	b.n	800438c <HAL_RCC_OscConfig+0xa6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	da0c      	bge.n	8004358 <HAL_RCC_OscConfig+0xa38>
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	015b      	lsls	r3, r3, #5
 800434c:	4901      	ldr	r1, [pc, #4]	@ (8004354 <HAL_RCC_OscConfig+0xa34>)
 800434e:	4313      	orrs	r3, r2
 8004350:	60cb      	str	r3, [r1, #12]
 8004352:	e01b      	b.n	800438c <HAL_RCC_OscConfig+0xa6c>
 8004354:	46020c00 	.word	0x46020c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004360:	d30a      	bcc.n	8004378 <HAL_RCC_OscConfig+0xa58>
 8004362:	4ba1      	ldr	r3, [pc, #644]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	499d      	ldr	r1, [pc, #628]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	60cb      	str	r3, [r1, #12]
 8004376:	e009      	b.n	800438c <HAL_RCC_OscConfig+0xa6c>
 8004378:	4b9b      	ldr	r3, [pc, #620]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	03db      	lsls	r3, r3, #15
 8004386:	4998      	ldr	r1, [pc, #608]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800438c:	4b96      	ldr	r3, [pc, #600]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a95      	ldr	r2, [pc, #596]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004392:	f043 0310 	orr.w	r3, r3, #16
 8004396:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004398:	f7fc feec 	bl	8001174 <HAL_GetTick>
 800439c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043a0:	f7fc fee8 	bl	8001174 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e18b      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80043b2:	4b8d      	ldr	r3, [pc, #564]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xa80>
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80043c0:	4b89      	ldr	r3, [pc, #548]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a88      	ldr	r2, [pc, #544]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043cc:	f7fc fed2 	bl	8001174 <HAL_GetTick>
 80043d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043d4:	f7fc fece 	bl	8001174 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e171      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043e6:	4b80      	ldr	r3, [pc, #512]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8166 	beq.w	80046c8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004402:	4b79      	ldr	r3, [pc, #484]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b0c      	cmp	r3, #12
 800440c:	f000 80f2 	beq.w	80045f4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	2b02      	cmp	r3, #2
 8004416:	f040 80c5 	bne.w	80045a4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b73      	ldr	r3, [pc, #460]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a72      	ldr	r2, [pc, #456]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004424:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004426:	f7fc fea5 	bl	8001174 <HAL_GetTick>
 800442a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442e:	f7fc fea1 	bl	8001174 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e144      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004440:	4b69      	ldr	r3, [pc, #420]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444c:	4b66      	ldr	r3, [pc, #408]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d111      	bne.n	800447e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	4b63      	ldr	r3, [pc, #396]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004460:	4a61      	ldr	r2, [pc, #388]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800446a:	4b5f      	ldr	r3, [pc, #380]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800447e:	4b5b      	ldr	r3, [pc, #364]	@ (80045ec <HAL_RCC_OscConfig+0xccc>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800448a:	d102      	bne.n	8004492 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004492:	4b56      	ldr	r3, [pc, #344]	@ (80045ec <HAL_RCC_OscConfig+0xccc>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4a55      	ldr	r2, [pc, #340]	@ (80045ec <HAL_RCC_OscConfig+0xccc>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800449c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800449e:	4b52      	ldr	r3, [pc, #328]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0212      	lsls	r2, r2, #8
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80044bc:	430a      	orrs	r2, r1
 80044be:	494a      	ldr	r1, [pc, #296]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044c4:	4b48      	ldr	r3, [pc, #288]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80044c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044c8:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <HAL_RCC_OscConfig+0xcd0>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044d0:	3a01      	subs	r2, #1
 80044d2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044da:	3a01      	subs	r2, #1
 80044dc:	0252      	lsls	r2, r2, #9
 80044de:	b292      	uxth	r2, r2
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044e6:	3a01      	subs	r2, #1
 80044e8:	0412      	lsls	r2, r2, #16
 80044ea:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0612      	lsls	r2, r2, #24
 80044f8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80044fc:	430a      	orrs	r2, r1
 80044fe:	493a      	ldr	r1, [pc, #232]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004500:	4313      	orrs	r3, r2
 8004502:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004504:	4b38      	ldr	r3, [pc, #224]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	4a37      	ldr	r2, [pc, #220]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	4a34      	ldr	r2, [pc, #208]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800451a:	4b33      	ldr	r3, [pc, #204]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	4a32      	ldr	r2, [pc, #200]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004520:	f043 0310 	orr.w	r3, r3, #16
 8004524:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004526:	4b30      	ldr	r3, [pc, #192]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	f023 020c 	bic.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	492d      	ldr	r1, [pc, #180]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004538:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004540:	4b2a      	ldr	r3, [pc, #168]	@ (80045ec <HAL_RCC_OscConfig+0xccc>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <HAL_RCC_OscConfig+0xccc>)
 8004546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800454a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800454c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b24      	ldr	r3, [pc, #144]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800455a:	4a23      	ldr	r2, [pc, #140]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004564:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800456a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800456e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004570:	f7fc fe00 	bl	8001174 <HAL_GetTick>
 8004574:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fc fdfc 	bl	8001174 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e09f      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800458a:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004596:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	4a13      	ldr	r2, [pc, #76]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80045a2:	e091      	b.n	80046c8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0f      	ldr	r2, [pc, #60]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80045aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045b0:	f7fc fde0 	bl	8001174 <HAL_GetTick>
 80045b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fc fddc 	bl	8001174 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e07f      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045ca:	4b07      	ldr	r3, [pc, #28]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80045d6:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	4a03      	ldr	r2, [pc, #12]	@ (80045e8 <HAL_RCC_OscConfig+0xcc8>)
 80045dc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80045e0:	f023 0303 	bic.w	r3, r3, #3
 80045e4:	6293      	str	r3, [r2, #40]	@ 0x28
 80045e6:	e06f      	b.n	80046c8 <HAL_RCC_OscConfig+0xda8>
 80045e8:	46020c00 	.word	0x46020c00
 80045ec:	46020800 	.word	0x46020800
 80045f0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80045f4:	4b37      	ldr	r3, [pc, #220]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045fa:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004604:	2b01      	cmp	r3, #1
 8004606:	d039      	beq.n	800467c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d132      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d129      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d122      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d11a      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004652:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d111      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0c1b      	lsrs	r3, r3, #16
 800465c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d108      	bne.n	800467c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e024      	b.n	80046ca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004680:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800468e:	429a      	cmp	r2, r3
 8004690:	d01a      	beq.n	80046c8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004696:	4a0f      	ldr	r2, [pc, #60]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 8004698:	f023 0310 	bic.w	r3, r3, #16
 800469c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fc fd69 	bl	8001174 <HAL_GetTick>
 80046a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80046a4:	bf00      	nop
 80046a6:	f7fc fd65 	bl	8001174 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d0f9      	beq.n	80046a6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b6:	4a07      	ldr	r2, [pc, #28]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	4a04      	ldr	r2, [pc, #16]	@ (80046d4 <HAL_RCC_OscConfig+0xdb4>)
 80046c2:	f043 0310 	orr.w	r3, r3, #16
 80046c6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3738      	adds	r7, #56	@ 0x38
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	46020c00 	.word	0x46020c00

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e1d9      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b9b      	ldr	r3, [pc, #620]	@ (800495c <HAL_RCC_ClockConfig+0x284>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d910      	bls.n	800471c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b98      	ldr	r3, [pc, #608]	@ (800495c <HAL_RCC_ClockConfig+0x284>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	4996      	ldr	r1, [pc, #600]	@ (800495c <HAL_RCC_ClockConfig+0x284>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b94      	ldr	r3, [pc, #592]	@ (800495c <HAL_RCC_ClockConfig+0x284>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e1c1      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	4b8c      	ldr	r3, [pc, #560]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004734:	429a      	cmp	r2, r3
 8004736:	d908      	bls.n	800474a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004738:	4b89      	ldr	r3, [pc, #548]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	4986      	ldr	r1, [pc, #536]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004746:	4313      	orrs	r3, r2
 8004748:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	4b81      	ldr	r3, [pc, #516]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004764:	429a      	cmp	r2, r3
 8004766:	d909      	bls.n	800477c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004768:	4b7d      	ldr	r3, [pc, #500]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	497a      	ldr	r1, [pc, #488]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004778:	4313      	orrs	r3, r2
 800477a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4b74      	ldr	r3, [pc, #464]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004794:	429a      	cmp	r2, r3
 8004796:	d908      	bls.n	80047aa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004798:	4b71      	ldr	r3, [pc, #452]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	496e      	ldr	r1, [pc, #440]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d010      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	4b69      	ldr	r3, [pc, #420]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d908      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	4b66      	ldr	r3, [pc, #408]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 020f 	bic.w	r2, r3, #15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4963      	ldr	r1, [pc, #396]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80d2 	beq.w	800498a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d143      	bne.n	800487a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d110      	bne.n	8004822 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004800:	4b57      	ldr	r3, [pc, #348]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004806:	4a56      	ldr	r2, [pc, #344]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004822:	f7fc fca7 	bl	8001174 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004828:	4b4e      	ldr	r3, [pc, #312]	@ (8004964 <HAL_RCC_ClockConfig+0x28c>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004836:	f7fc fc9d 	bl	8001174 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e12b      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004848:	4b46      	ldr	r3, [pc, #280]	@ (8004964 <HAL_RCC_ClockConfig+0x28c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800485a:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004860:	4a3f      	ldr	r2, [pc, #252]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d121      	bne.n	80048ba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e112      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004882:	4b37      	ldr	r3, [pc, #220]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d115      	bne.n	80048ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e106      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800489a:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0fa      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0f2      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b29      	ldr	r3, [pc, #164]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4926      	ldr	r1, [pc, #152]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80048cc:	f7fc fc52 	bl	8001174 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d112      	bne.n	8004900 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048dc:	f7fc fc4a 	bl	8001174 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0d6      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_ClockConfig+0x204>
 80048fe:	e044      	b.n	800498a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d112      	bne.n	800492e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490a:	f7fc fc33 	bl	8001174 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0bf      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d1ee      	bne.n	800490a <HAL_RCC_ClockConfig+0x232>
 800492c:	e02d      	b.n	800498a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d123      	bne.n	800497e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004936:	e00a      	b.n	800494e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004938:	f7fc fc1c 	bl	8001174 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0a8      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800494e:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <HAL_RCC_ClockConfig+0x288>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ee      	bne.n	8004938 <HAL_RCC_ClockConfig+0x260>
 800495a:	e016      	b.n	800498a <HAL_RCC_ClockConfig+0x2b2>
 800495c:	40022000 	.word	0x40022000
 8004960:	46020c00 	.word	0x46020c00
 8004964:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fc fc04 	bl	8001174 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e090      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800497e:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d1ee      	bne.n	8004968 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d208      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80049a6:	4b40      	ldr	r3, [pc, #256]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	493d      	ldr	r1, [pc, #244]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b3c      	ldr	r3, [pc, #240]	@ (8004aac <HAL_RCC_ClockConfig+0x3d4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d210      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b39      	ldr	r3, [pc, #228]	@ (8004aac <HAL_RCC_ClockConfig+0x3d4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 020f 	bic.w	r2, r3, #15
 80049ce:	4937      	ldr	r1, [pc, #220]	@ (8004aac <HAL_RCC_ClockConfig+0x3d4>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b35      	ldr	r3, [pc, #212]	@ (8004aac <HAL_RCC_ClockConfig+0x3d4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e05b      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d208      	bcs.n	8004a16 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a04:	4b28      	ldr	r3, [pc, #160]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4925      	ldr	r1, [pc, #148]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d209      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a34:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4919      	ldr	r1, [pc, #100]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d208      	bcs.n	8004a76 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004a64:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	490d      	ldr	r1, [pc, #52]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a76:	f000 f821 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_RCC_ClockConfig+0x3d0>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	490a      	ldr	r1, [pc, #40]	@ (8004ab0 <HAL_RCC_ClockConfig+0x3d8>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <HAL_RCC_ClockConfig+0x3dc>)
 8004a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <HAL_RCC_ClockConfig+0x3e0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fc fa13 	bl	8000ec0 <HAL_InitTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	46020c00 	.word	0x46020c00
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	08011744 	.word	0x08011744
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b08b      	sub	sp, #44	@ 0x2c
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b78      	ldr	r3, [pc, #480]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad4:	4b75      	ldr	r3, [pc, #468]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d11e      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004af0:	4b6e      	ldr	r3, [pc, #440]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004afc:	4b6b      	ldr	r3, [pc, #428]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b02:	0b1b      	lsrs	r3, r3, #12
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0a:	e005      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004b0c:	4b67      	ldr	r3, [pc, #412]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	0f1b      	lsrs	r3, r3, #28
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b18:	4a65      	ldr	r2, [pc, #404]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d110      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b2c:	e00d      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d102      	bne.n	8004b40 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	e004      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b46:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b48:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	f040 80a5 	bne.w	8004c9c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b52:	4b56      	ldr	r3, [pc, #344]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b6a:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b76:	4b4d      	ldr	r3, [pc, #308]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	08db      	lsrs	r3, r3, #3
 8004b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d022      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x128>
 8004b9e:	e043      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bc2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004bc6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x200>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e046      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c06:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c0a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x200>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	e024      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c40:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c50:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c54:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x200>
 8004c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c70:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004c72:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	0e1b      	lsrs	r3, r3, #24
 8004c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 3a90 	vmov	r3, s15
 8004c9a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	372c      	adds	r7, #44	@ 0x2c
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	46020c00 	.word	0x46020c00
 8004cb0:	0801175c 	.word	0x0801175c
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	4b742400 	.word	0x4b742400
 8004cbc:	46000000 	.word	0x46000000

08004cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cc4:	f7ff fefa 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x28>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	4906      	ldr	r1, [pc, #24]	@ (8004cec <HAL_RCC_GetHCLKFreq+0x2c>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a05      	ldr	r2, [pc, #20]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004cdc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004cde:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	46020c00 	.word	0x46020c00
 8004cec:	08011744 	.word	0x08011744
 8004cf0:	20000000 	.word	0x20000000

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004cf8:	f7ff ffe2 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	46020c00 	.word	0x46020c00
 8004d18:	08011754 	.word	0x08011754

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004d20:	f7ff ffce 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	46020c00 	.word	0x46020c00
 8004d40:	08011754 	.word	0x08011754

08004d44 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004d48:	f7ff ffba 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	4903      	ldr	r1, [pc, #12]	@ (8004d68 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	46020c00 	.word	0x46020c00
 8004d68:	08011754 	.word	0x08011754

08004d6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	221f      	movs	r2, #31
 8004d7a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004d7c:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <HAL_RCC_GetClockConfig+0x68>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_GetClockConfig+0x68>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_RCC_GetClockConfig+0x68>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <HAL_RCC_GetClockConfig+0x68>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_GetClockConfig+0x68>)
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <HAL_RCC_GetClockConfig+0x6c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	46020c00 	.word	0x46020c00
 8004dd8:	40022000 	.word	0x40022000

08004ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df2:	f7fe fd59 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 8004df6:	6178      	str	r0, [r7, #20]
 8004df8:	e019      	b.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e00:	4a37      	ldr	r2, [pc, #220]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e0a:	4b35      	ldr	r3, [pc, #212]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e18:	f7fe fd46 	bl	80038a8 <HAL_PWREx_GetVoltageRange>
 8004e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4b30      	ldr	r3, [pc, #192]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e24:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004e26:	f023 0304 	bic.w	r3, r3, #4
 8004e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e34:	d003      	beq.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e3c:	d109      	bne.n	8004e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e44:	d202      	bcs.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e46:	2301      	movs	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004e4a:	e033      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004e50:	e030      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e58:	d208      	bcs.n	8004e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d102      	bne.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004e62:	2303      	movs	r3, #3
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e025      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e035      	b.n	8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e72:	d90f      	bls.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e80:	d902      	bls.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e015      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004e88:	2301      	movs	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e012      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e00f      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e9a:	d109      	bne.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea2:	d102      	bne.n	8004eaa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	e004      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004eaa:	2302      	movs	r3, #2
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e001      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 020f 	bic.w	r2, r3, #15
 8004ebc:	4909      	ldr	r1, [pc, #36]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004ec4:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	46020c00 	.word	0x46020c00
 8004ee4:	40022000 	.word	0x40022000

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b0c2      	sub	sp, #264	@ 0x108
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f002 0401 	and.w	r4, r2, #1
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	ea54 0305 	orrs.w	r3, r4, r5
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004f14:	4bd5      	ldr	r3, [pc, #852]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f1a:	f023 0103 	bic.w	r1, r3, #3
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	4ad1      	ldr	r2, [pc, #836]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 0802 	and.w	r8, r2, #2
 8004f38:	f04f 0900 	mov.w	r9, #0
 8004f3c:	ea58 0309 	orrs.w	r3, r8, r9
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004f42:	4bca      	ldr	r3, [pc, #808]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f48:	f023 010c 	bic.w	r1, r3, #12
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	4ac6      	ldr	r2, [pc, #792]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f002 0a04 	and.w	sl, r2, #4
 8004f66:	f04f 0b00 	mov.w	fp, #0
 8004f6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004f70:	4bbe      	ldr	r3, [pc, #760]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f76:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f80:	4aba      	ldr	r2, [pc, #744]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f002 0308 	and.w	r3, r2, #8
 8004f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f9e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004fa8:	4bb0      	ldr	r3, [pc, #704]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	4aac      	ldr	r2, [pc, #688]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f002 0310 	and.w	r3, r2, #16
 8004fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004fe0:	4ba2      	ldr	r3, [pc, #648]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff0:	4a9e      	ldr	r2, [pc, #632]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800500e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d00b      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005018:	4b94      	ldr	r3, [pc, #592]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800501a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800501e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005028:	4a90      	ldr	r2, [pc, #576]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800502a:	430b      	orrs	r3, r1
 800502c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 0320 	and.w	r3, r2, #32
 800503c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005046:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d00b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005050:	4b86      	ldr	r3, [pc, #536]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005056:	f023 0107 	bic.w	r1, r3, #7
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005060:	4a82      	ldr	r2, [pc, #520]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005062:	430b      	orrs	r3, r1
 8005064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800507e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005082:	460b      	mov	r3, r1
 8005084:	4313      	orrs	r3, r2
 8005086:	d00b      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005088:	4b78      	ldr	r3, [pc, #480]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800508a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800508e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005098:	4a74      	ldr	r2, [pc, #464]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800509a:	430b      	orrs	r3, r1
 800509c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80050ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050b0:	2300      	movs	r3, #0
 80050b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4313      	orrs	r3, r2
 80050be:	d00b      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80050c0:	4b6a      	ldr	r3, [pc, #424]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	4a66      	ldr	r2, [pc, #408]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050d2:	430b      	orrs	r3, r1
 80050d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80050e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d00b      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80050f8:	4b5c      	ldr	r3, [pc, #368]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005108:	4a58      	ldr	r2, [pc, #352]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800510a:	430b      	orrs	r3, r1
 800510c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800511c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005126:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005130:	4b4e      	ldr	r3, [pc, #312]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005136:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005140:	4a4a      	ldr	r2, [pc, #296]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005142:	430b      	orrs	r3, r1
 8005144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800515e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d00b      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005168:	4b40      	ldr	r3, [pc, #256]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800516a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800516e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005178:	4a3c      	ldr	r2, [pc, #240]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800517a:	430b      	orrs	r3, r1
 800517c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800518c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005196:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d00c      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80051a0:	4b32      	ldr	r3, [pc, #200]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051b2:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80051c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80051d4:	460b      	mov	r3, r1
 80051d6:	4313      	orrs	r3, r2
 80051d8:	d00c      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051e0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ec:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800520a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d00c      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005214:	4b15      	ldr	r3, [pc, #84]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800521a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	4a11      	ldr	r2, [pc, #68]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005228:	430b      	orrs	r3, r1
 800522a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800523a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005244:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d010      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005254:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005260:	4a02      	ldr	r2, [pc, #8]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800526a:	bf00      	nop
 800526c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800527c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005286:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d04c      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005298:	2b80      	cmp	r3, #128	@ 0x80
 800529a:	d02d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d827      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052a0:	2b60      	cmp	r3, #96	@ 0x60
 80052a2:	d02b      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x414>
 80052a4:	2b60      	cmp	r3, #96	@ 0x60
 80052a6:	d823      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d006      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d81f      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d011      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80052b8:	e01a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052ba:	4bbd      	ldr	r3, [pc, #756]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	4abc      	ldr	r2, [pc, #752]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052c6:	e01a      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	3308      	adds	r3, #8
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fbe8 	bl	8007aa4 <RCCEx_PLL2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052da:	e010      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	332c      	adds	r3, #44	@ 0x2c
 80052e2:	4618      	mov	r0, r3
 80052e4:	f002 fc76 	bl	8007bd4 <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052ee:	e006      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80052fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fe:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005306:	4baa      	ldr	r3, [pc, #680]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800530c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005318:	4aa5      	ldr	r2, [pc, #660]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005320:	e003      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005326:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005336:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005338:	2300      	movs	r3, #0
 800533a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800533c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005340:	460b      	mov	r3, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	d053      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005352:	d033      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005358:	d82c      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800535a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800535e:	d02f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005364:	d826      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8005366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800536a:	d008      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800536c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005370:	d820      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537a:	d011      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800537c:	e01a      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800537e:	4b8c      	ldr	r3, [pc, #560]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	4a8b      	ldr	r2, [pc, #556]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005388:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800538a:	e01a      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005390:	3308      	adds	r3, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f002 fb86 	bl	8007aa4 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 800539e:	e010      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	332c      	adds	r3, #44	@ 0x2c
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 fc14 	bl	8007bd4 <RCCEx_PLL3_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053b2:	e006      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80053ba:	e002      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053dc:	4a74      	ldr	r2, [pc, #464]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80053ea:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80053fc:	2300      	movs	r3, #0
 80053fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005400:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d046      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005412:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005416:	d028      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005418:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800541c:	d821      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800541e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005422:	d022      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005428:	d81b      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800542a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800542e:	d01c      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005430:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005434:	d815      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543a:	d008      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005440:	d80f      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d011      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544a:	d00e      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800544c:	e009      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005452:	3308      	adds	r3, #8
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fb25 	bl	8007aa4 <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10d      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005474:	4b4e      	ldr	r3, [pc, #312]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800547a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005486:	4a4a      	ldr	r2, [pc, #296]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005488:	430b      	orrs	r3, r1
 800548a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005494:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80054a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054a6:	2300      	movs	r3, #0
 80054a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d03f      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d81e      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x616>
 80054c0:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054eb 	.word	0x080054eb
 80054d4:	08005507 	.word	0x08005507
 80054d8:	08005507 	.word	0x08005507
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054dc:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054e8:	e00e      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	332c      	adds	r3, #44	@ 0x2c
 80054f0:	4618      	mov	r0, r3
 80054f2:	f002 fb6f 	bl	8007bd4 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80054fc:	e004      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005504:	e000      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8005506:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005508:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005516:	f023 0107 	bic.w	r1, r3, #7
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005522:	4a23      	ldr	r2, [pc, #140]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005524:	430b      	orrs	r3, r1
 8005526:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800552a:	e003      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005530:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005540:	663b      	str	r3, [r7, #96]	@ 0x60
 8005542:	2300      	movs	r3, #0
 8005544:	667b      	str	r3, [r7, #100]	@ 0x64
 8005546:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	d04c      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800555c:	d02a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800555e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005562:	d821      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005568:	d026      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800556a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800556e:	d81b      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005574:	d00e      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800557a:	d815      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01d      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005584:	d110      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005586:	4b0a      	ldr	r3, [pc, #40]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005592:	e014      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	332c      	adds	r3, #44	@ 0x2c
 800559a:	4618      	mov	r0, r3
 800559c:	f002 fb1a 	bl	8007bd4 <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80055a6:	e00a      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80055ae:	e006      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80055b0:	46020c00 	.word	0x46020c00
        break;
 80055b4:	bf00      	nop
 80055b6:	e002      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 80055b8:	bf00      	nop
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 80055bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055be:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80055c6:	4baf      	ldr	r3, [pc, #700]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80055c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d8:	4aaa      	ldr	r2, [pc, #680]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80055e6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055f8:	2300      	movs	r3, #0
 80055fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005600:	460b      	mov	r3, r1
 8005602:	4313      	orrs	r3, r2
 8005604:	f000 80b5 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b9d      	ldr	r3, [pc, #628]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d113      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561c:	4b99      	ldr	r3, [pc, #612]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005622:	4a98      	ldr	r2, [pc, #608]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800562c:	4b95      	ldr	r3, [pc, #596]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800563a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005644:	4b90      	ldr	r3, [pc, #576]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	4a8f      	ldr	r2, [pc, #572]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005650:	f7fb fd90 	bl	8001174 <HAL_GetTick>
 8005654:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005658:	e00b      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fb fd8b 	bl	8001174 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d903      	bls.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005670:	e005      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005672:	4b85      	ldr	r3, [pc, #532]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ed      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 800567e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005682:	2b00      	cmp	r3, #0
 8005684:	d165      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005686:	4b7f      	ldr	r3, [pc, #508]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800568c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005690:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	2b00      	cmp	r3, #0
 800569a:	d023      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ac:	4b75      	ldr	r3, [pc, #468]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056ba:	4b72      	ldr	r3, [pc, #456]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c0:	4a70      	ldr	r2, [pc, #448]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ca:	4b6e      	ldr	r3, [pc, #440]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d0:	4a6c      	ldr	r2, [pc, #432]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056da:	4a6a      	ldr	r2, [pc, #424]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d019      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fb fd40 	bl	8001174 <HAL_GetTick>
 80056f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f8:	e00d      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fb fd3b 	bl	8001174 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005704:	1ad2      	subs	r2, r2, r3
 8005706:	f241 3388 	movw	r3, #5000	@ 0x1388
 800570a:	429a      	cmp	r2, r3
 800570c:	d903      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8005714:	e006      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005716:	4b5b      	ldr	r3, [pc, #364]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ea      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8005724:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10d      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800572c:	4b55      	ldr	r3, [pc, #340]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800572e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800573e:	4a51      	ldr	r2, [pc, #324]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005740:	430b      	orrs	r3, r1
 8005742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005748:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800574c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005756:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800575a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800575e:	2b01      	cmp	r3, #1
 8005760:	d107      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005762:	4b48      	ldr	r3, [pc, #288]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005768:	4a46      	ldr	r2, [pc, #280]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800576a:	f023 0304 	bic.w	r3, r3, #4
 800576e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800577e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005780:	2300      	movs	r3, #0
 8005782:	657b      	str	r3, [r7, #84]	@ 0x54
 8005784:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d042      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005796:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800579a:	d022      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800579c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80057a0:	d81b      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a6:	d011      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ac:	d815      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d019      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80057b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b6:	d110      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	3308      	adds	r3, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f002 f970 	bl	8007aa4 <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80057ca:	e00d      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80057e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057e8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80057f0:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80057f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005802:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005804:	430b      	orrs	r3, r1
 8005806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800580a:	e003      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005810:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005822:	2300      	movs	r3, #0
 8005824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005826:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	d031      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583c:	d00b      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005842:	d804      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584c:	d007      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005854:	e004      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800585e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005860:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005864:	2b00      	cmp	r3, #0
 8005866:	d111      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005868:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800586a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800586e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800587a:	4a02      	ldr	r2, [pc, #8]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800587c:	430b      	orrs	r3, r1
 800587e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005882:	e007      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8005884:	46020c00 	.word	0x46020c00
 8005888:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005890:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058a2:	2300      	movs	r3, #0
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d019      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058bc:	d105      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058be:	4ba1      	ldr	r3, [pc, #644]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80058c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c2:	4aa0      	ldr	r2, [pc, #640]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80058ca:	4b9e      	ldr	r3, [pc, #632]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80058cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058dc:	4a99      	ldr	r2, [pc, #612]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058f2:	2300      	movs	r3, #0
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d00c      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005900:	4b90      	ldr	r3, [pc, #576]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005906:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005912:	4a8c      	ldr	r2, [pc, #560]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005914:	430b      	orrs	r3, r1
 8005916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005926:	633b      	str	r3, [r7, #48]	@ 0x30
 8005928:	2300      	movs	r3, #0
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d00c      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005936:	4b83      	ldr	r3, [pc, #524]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800593c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005948:	4a7e      	ldr	r2, [pc, #504]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800594a:	430b      	orrs	r3, r1
 800594c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800595e:	2300      	movs	r3, #0
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005962:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d00c      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800596c:	4b75      	ldr	r3, [pc, #468]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800596e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005972:	f023 0218 	bic.w	r2, r3, #24
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800597e:	4971      	ldr	r1, [pc, #452]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	2300      	movs	r3, #0
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
 8005998:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d032      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ae:	d105      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b64      	ldr	r3, [pc, #400]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	4a63      	ldr	r2, [pc, #396]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ba:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059c8:	d108      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	3308      	adds	r3, #8
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 f867 	bl	8007aa4 <RCCEx_PLL2_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 80059dc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80059e4:	4b57      	ldr	r3, [pc, #348]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80059e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059f6:	4953      	ldr	r1, [pc, #332]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005a04:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	2100      	movs	r1, #0
 8005a12:	61b9      	str	r1, [r7, #24]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d04a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a30:	d01e      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005a32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a36:	d825      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005a38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a3c:	d00e      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a42:	d81f      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d021      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	4a3c      	ldr	r2, [pc, #240]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005a5a:	e018      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a60:	3308      	adds	r3, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f002 f81e 	bl	8007aa4 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005a6e:	e00e      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	332c      	adds	r3, #44	@ 0x2c
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 f8ac 	bl	8007bd4 <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005a96:	4b2b      	ldr	r3, [pc, #172]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aa8:	4926      	ldr	r1, [pc, #152]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005ab6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d03c      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ae2:	d00e      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ae8:	d815      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d017      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8005aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005af2:	d110      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af4:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	4a12      	ldr	r2, [pc, #72]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b00:	e00e      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	3308      	adds	r3, #8
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 ffcb 	bl	8007aa4 <RCCEx_PLL2_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b14:	e004      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005b1c:	e000      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 8005b1e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b20:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10f      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	4902      	ldr	r1, [pc, #8]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b42:	e005      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005b44:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005b4c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d00c      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b72:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b7e:	4928      	ldr	r1, [pc, #160]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	2100      	movs	r1, #0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d036      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005baa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005bae:	d00d      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005bb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005bb4:	d811      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8005bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bba:	d012      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8005bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc0:	d80b      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bca:	d106      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bcc:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005bd8:	e004      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 8005be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10d      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005bec:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bf2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005bfe:	4908      	ldr	r1, [pc, #32]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005c0c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005c10:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c20:	46020c00 	.word	0x46020c00

08005c24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	@ 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005c2c:	4ba6      	ldr	r3, [pc, #664]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c36:	4ba4      	ldr	r3, [pc, #656]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005c40:	4ba1      	ldr	r3, [pc, #644]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	08db      	lsrs	r3, r3, #3
 8005c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d062      	beq.n	8005d42 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	f200 8081 	bhi.w	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d024      	beq.n	8005cd4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d17a      	bne.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b89      	ldr	r3, [pc, #548]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd2:	e08f      	b.n	8005df4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005ce0:	4b79      	ldr	r3, [pc, #484]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	0f1b      	lsrs	r3, r3, #28
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	e006      	b.n	8005cfa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005cec:	4b76      	ldr	r3, [pc, #472]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	0f1b      	lsrs	r3, r3, #28
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	4a76      	ldr	r2, [pc, #472]	@ (8005ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d24:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d40:	e058      	b.n	8005df4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d54:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d84:	e036      	b.n	8005df4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d86:	4b50      	ldr	r3, [pc, #320]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005d92:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0f1b      	lsrs	r3, r3, #28
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da4:	041b      	lsls	r3, r3, #16
 8005da6:	0f1b      	lsrs	r3, r3, #28
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	4a49      	ldr	r2, [pc, #292]	@ (8005ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dd6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005df2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005df4:	4b34      	ldr	r3, [pc, #208]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d017      	beq.n	8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e00:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e26:	ee17 2a90 	vmov	r2, s15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e42:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e46:	0c1b      	lsrs	r3, r3, #16
 8005e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4c:	ee07 3a90 	vmov	s15, r3
 8005e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e58:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e68:	ee17 2a90 	vmov	r2, s15
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	605a      	str	r2, [r3, #4]
 8005e70:	e002      	b.n	8005e78 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e78:	4b13      	ldr	r3, [pc, #76]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e84:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	0e1b      	lsrs	r3, r3, #24
 8005e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eaa:	ee17 2a90 	vmov	r2, s15
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
}
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	@ 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	46020c00 	.word	0x46020c00
 8005ecc:	4b742400 	.word	0x4b742400
 8005ed0:	46000000 	.word	0x46000000
 8005ed4:	0801175c 	.word	0x0801175c

08005ed8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	@ 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ee0:	4ba6      	ldr	r3, [pc, #664]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005eea:	4ba4      	ldr	r3, [pc, #656]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3301      	adds	r3, #1
 8005f00:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005f02:	4b9e      	ldr	r3, [pc, #632]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005f0e:	4b9b      	ldr	r3, [pc, #620]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d062      	beq.n	8005ff6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	f200 8081 	bhi.w	800603a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d024      	beq.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d17a      	bne.n	800603a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f56:	4b89      	ldr	r3, [pc, #548]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f6a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f86:	e08f      	b.n	80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f88:	4b7c      	ldr	r3, [pc, #496]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005f94:	4b79      	ldr	r3, [pc, #484]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	0f1b      	lsrs	r3, r3, #28
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	e006      	b.n	8005fae <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005fa0:	4b76      	ldr	r3, [pc, #472]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	0f1b      	lsrs	r3, r3, #28
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	4a76      	ldr	r2, [pc, #472]	@ (8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ff4:	e058      	b.n	80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006008:	4b5c      	ldr	r3, [pc, #368]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006018:	ed97 6a02 	vldr	s12, [r7, #8]
 800601c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006020:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006024:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006034:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006038:	e036      	b.n	80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800603a:	4b50      	ldr	r3, [pc, #320]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006046:	4b4d      	ldr	r3, [pc, #308]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0f1b      	lsrs	r3, r3, #28
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	e006      	b.n	8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006052:	4b4a      	ldr	r3, [pc, #296]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	0f1b      	lsrs	r3, r3, #28
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	4a49      	ldr	r2, [pc, #292]	@ (8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006086:	ed97 6a02 	vldr	s12, [r7, #8]
 800608a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800608e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800609a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060a6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80060a8:	4b34      	ldr	r3, [pc, #208]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060b4:	4b31      	ldr	r3, [pc, #196]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b8:	0a5b      	lsrs	r3, r3, #9
 80060ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80060c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060da:	ee17 2a90 	vmov	r2, s15
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80060ea:	4b24      	ldr	r3, [pc, #144]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d017      	beq.n	8006126 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060f6:	4b21      	ldr	r3, [pc, #132]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800610c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006110:	edd7 6a07 	vldr	s13, [r7, #28]
 8006114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611c:	ee17 2a90 	vmov	r2, s15
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	e002      	b.n	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800612c:	4b13      	ldr	r3, [pc, #76]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006138:	4b10      	ldr	r3, [pc, #64]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800613a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613c:	0e1b      	lsrs	r3, r3, #24
 800613e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800614a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800614e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006152:	edd7 6a07 	vldr	s13, [r7, #28]
 8006156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 2a90 	vmov	r2, s15
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006166:	e002      	b.n	800616e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
}
 800616e:	bf00      	nop
 8006170:	3724      	adds	r7, #36	@ 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	46020c00 	.word	0x46020c00
 8006180:	4b742400 	.word	0x4b742400
 8006184:	46000000 	.word	0x46000000
 8006188:	0801175c 	.word	0x0801175c

0800618c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800618c:	b480      	push	{r7}
 800618e:	b089      	sub	sp, #36	@ 0x24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006194:	4ba6      	ldr	r3, [pc, #664]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800619e:	4ba4      	ldr	r3, [pc, #656]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80061a8:	4ba1      	ldr	r3, [pc, #644]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	3301      	adds	r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80061b6:	4b9e      	ldr	r3, [pc, #632]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80061c2:	4b9b      	ldr	r3, [pc, #620]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c6:	08db      	lsrs	r3, r3, #3
 80061c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	fb02 f303 	mul.w	r3, r2, r3
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d062      	beq.n	80062aa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	f200 8081 	bhi.w	80062ee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d024      	beq.n	800623c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d17a      	bne.n	80062ee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	4b89      	ldr	r3, [pc, #548]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800621a:	ed97 6a02 	vldr	s12, [r7, #8]
 800621e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800622a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800623a:	e08f      	b.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800623c:	4b7c      	ldr	r3, [pc, #496]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006248:	4b79      	ldr	r3, [pc, #484]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	0f1b      	lsrs	r3, r3, #28
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	e006      	b.n	8006262 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006254:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	0f1b      	lsrs	r3, r3, #28
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4a76      	ldr	r2, [pc, #472]	@ (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	ed97 6a02 	vldr	s12, [r7, #8]
 800628c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a8:	e058      	b.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80062b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80062cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80062d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80062dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ec:	e036      	b.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062ee:	4b50      	ldr	r3, [pc, #320]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80062fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	0f1b      	lsrs	r3, r3, #28
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	e006      	b.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006306:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	0f1b      	lsrs	r3, r3, #28
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	4a49      	ldr	r2, [pc, #292]	@ (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	ed97 6a02 	vldr	s12, [r7, #8]
 800633e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800635a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800635c:	4b34      	ldr	r3, [pc, #208]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d017      	beq.n	8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006368:	4b31      	ldr	r3, [pc, #196]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636c:	0a5b      	lsrs	r3, r3, #9
 800636e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800637a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800637e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006382:	edd7 6a07 	vldr	s13, [r7, #28]
 8006386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800638e:	ee17 2a90 	vmov	r2, s15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e002      	b.n	800639e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800639e:	4b24      	ldr	r3, [pc, #144]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d017      	beq.n	80063da <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063aa:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80063bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d0:	ee17 2a90 	vmov	r2, s15
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	605a      	str	r2, [r3, #4]
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80063e0:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063ec:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f0:	0e1b      	lsrs	r3, r3, #24
 80063f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80063fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006402:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006406:	edd7 6a07 	vldr	s13, [r7, #28]
 800640a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006412:	ee17 2a90 	vmov	r2, s15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800641a:	e002      	b.n	8006422 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
}
 8006422:	bf00      	nop
 8006424:	3724      	adds	r7, #36	@ 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	46020c00 	.word	0x46020c00
 8006434:	4b742400 	.word	0x4b742400
 8006438:	46000000 	.word	0x46000000
 800643c:	0801175c 	.word	0x0801175c

08006440 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	@ 0x38
 8006444:	af00      	add	r7, sp, #0
 8006446:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800644a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006452:	430b      	orrs	r3, r1
 8006454:	d145      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006456:	4baa      	ldr	r3, [pc, #680]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800645c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006460:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006462:	4ba7      	ldr	r3, [pc, #668]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b02      	cmp	r3, #2
 800646e:	d108      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006476:	d104      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
 800647e:	f001 bb05 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006482:	4b9f      	ldr	r3, [pc, #636]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800648c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006490:	d114      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006498:	d110      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800649a:	4b99      	ldr	r3, [pc, #612]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800649c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064a8:	d103      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80064aa:	23fa      	movs	r3, #250	@ 0xfa
 80064ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064ae:	f001 baed 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 80064b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80064b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064b8:	f001 bae8 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80064bc:	4b90      	ldr	r3, [pc, #576]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c8:	d107      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d0:	d103      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80064d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d6:	f001 bad9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064de:	f001 bad5 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80064ea:	430b      	orrs	r3, r1
 80064ec:	d151      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064ee:	4b84      	ldr	r3, [pc, #528]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064f4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b80      	cmp	r3, #128	@ 0x80
 80064fe:	d035      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	2b80      	cmp	r3, #128	@ 0x80
 8006504:	d841      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	2b60      	cmp	r3, #96	@ 0x60
 800650a:	d02a      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	2b60      	cmp	r3, #96	@ 0x60
 8006510:	d83b      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	2b40      	cmp	r3, #64	@ 0x40
 8006516:	d009      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d835      	bhi.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00c      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	2b20      	cmp	r3, #32
 8006528:	d012      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800652a:	e02e      	b.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800652c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fb77 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800653a:	f001 baa7 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff fcc8 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800654c:	f001 ba9e 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fe19 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800655e:	f001 ba95 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006562:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006568:	f001 ba90 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800656c:	4b64      	ldr	r3, [pc, #400]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006578:	d103      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800657a:	4b63      	ldr	r3, [pc, #396]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800657e:	f001 ba85 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006586:	f001 ba81 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :
      {
        frequency = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800658e:	f001 ba7d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006596:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800659a:	430b      	orrs	r3, r1
 800659c:	d158      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800659e:	4b58      	ldr	r3, [pc, #352]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80065a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b0:	d03b      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b8:	d846      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c0:	d02e      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c8:	d83e      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d0:	d00b      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d8:	d836      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e6:	d012      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80065e8:	e02e      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fb18 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065f8:	f001 ba48 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fc:	f107 0318 	add.w	r3, r7, #24
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fc69 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800660a:	f001 ba3f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fdba 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661c:	f001 ba36 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006620:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006626:	f001 ba31 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800662a:	4b35      	ldr	r3, [pc, #212]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006636:	d103      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006638:	4b33      	ldr	r3, [pc, #204]	@ (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800663a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800663c:	f001 ba26 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006644:	f001 ba22 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :

        frequency = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800664c:	f001 ba1e 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006654:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006658:	430b      	orrs	r3, r1
 800665a:	d16e      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800665c:	4b28      	ldr	r3, [pc, #160]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800665e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006662:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006666:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800666e:	d034      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006676:	d85c      	bhi.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667e:	d00b      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006686:	d854      	bhi.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006694:	d009      	beq.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006696:	e04c      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fac1 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a6:	f001 b9f1 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066aa:	f107 0318 	add.w	r3, r7, #24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fc12 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066b8:	f001 b9e8 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80066bc:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c8:	d103      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80066ca:	4b10      	ldr	r3, [pc, #64]	@ (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066ce:	f001 b9dd 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066d6:	f001 b9d9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066da:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d121      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00e      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80066f2:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	0e1b      	lsrs	r3, r3, #24
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	e00f      	b.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80066fe:	bf00      	nop
 8006700:	46020c00 	.word	0x46020c00
 8006704:	0007a120 	.word	0x0007a120
 8006708:	00f42400 	.word	0x00f42400
 800670c:	02dc6c00 	.word	0x02dc6c00
 8006710:	4ba7      	ldr	r3, [pc, #668]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	0e1b      	lsrs	r3, r3, #24
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	4aa5      	ldr	r2, [pc, #660]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006724:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006726:	f001 b9b1 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800672e:	f001 b9ad 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :

        frequency = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006736:	f001 b9a9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800673a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006742:	430b      	orrs	r3, r1
 8006744:	d17f      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006746:	4b9a      	ldr	r3, [pc, #616]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800674c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006750:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d165      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006758:	4b95      	ldr	r3, [pc, #596]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800675a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800675e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006762:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800676a:	d034      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006772:	d853      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800677a:	d00b      	beq.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006782:	d84b      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006790:	d009      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006792:	e043      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fa43 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80067a2:	f001 b973 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a6:	f107 0318 	add.w	r3, r7, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fb94 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80067b4:	f001 b96a 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80067b8:	4b7d      	ldr	r3, [pc, #500]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c4:	d103      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80067c6:	4b7c      	ldr	r3, [pc, #496]	@ (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80067ca:	f001 b95f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
            frequency = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80067d2:	f001 b95b 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067d6:	4b76      	ldr	r3, [pc, #472]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d118      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067e2:	4b73      	ldr	r3, [pc, #460]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80067ee:	4b70      	ldr	r3, [pc, #448]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	0e1b      	lsrs	r3, r3, #24
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	e006      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80067fa:	4b6d      	ldr	r3, [pc, #436]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	0e1b      	lsrs	r3, r3, #24
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	4a6a      	ldr	r2, [pc, #424]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006810:	f001 b93c 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
            frequency = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006818:	f001 b938 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        default :
        {
          frequency = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006820:	f001 b934 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800682a:	d108      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800682c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff f9f7 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
 800683a:	f001 b927 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else
    {
      frequency = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	f001 b923 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684a:	1e51      	subs	r1, r2, #1
 800684c:	430b      	orrs	r3, r1
 800684e:	d136      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006850:	4b57      	ldr	r3, [pc, #348]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006862:	f7fe fa5b 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8006866:	6378      	str	r0, [r7, #52]	@ 0x34
 8006868:	f001 b910 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b01      	cmp	r3, #1
 8006870:	d104      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006872:	f7fe f923 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006876:	6378      	str	r0, [r7, #52]	@ 0x34
 8006878:	f001 b908 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800687c:	4b4c      	ldr	r3, [pc, #304]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006888:	d106      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2b02      	cmp	r3, #2
 800688e:	d103      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006890:	4b4a      	ldr	r3, [pc, #296]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
 8006894:	f001 b8fa 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006898:	4b45      	ldr	r3, [pc, #276]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800689a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d107      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d104      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80068ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b2:	f001 b8eb 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ba:	f001 b8e7 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	1e91      	subs	r1, r2, #2
 80068c4:	430b      	orrs	r3, r1
 80068c6:	d136      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80068c8:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80068ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068da:	f7fe fa0b 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80068de:	6378      	str	r0, [r7, #52]	@ 0x34
 80068e0:	f001 b8d4 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d104      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068ea:	f7fe f8e7 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80068ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80068f0:	f001 b8cc 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80068f4:	4b2e      	ldr	r3, [pc, #184]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006900:	d106      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2b08      	cmp	r3, #8
 8006906:	d103      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006908:	4b2c      	ldr	r3, [pc, #176]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
 800690c:	f001 b8be 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006910:	4b27      	ldr	r3, [pc, #156]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d107      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d104      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006928:	637b      	str	r3, [r7, #52]	@ 0x34
 800692a:	f001 b8af 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
 8006932:	f001 b8ab 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693a:	1f11      	subs	r1, r2, #4
 800693c:	430b      	orrs	r3, r1
 800693e:	d13f      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006940:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006946:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800694a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006952:	f7fe f9cf 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006956:	6378      	str	r0, [r7, #52]	@ 0x34
 8006958:	f001 b898 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	2b10      	cmp	r3, #16
 8006960:	d104      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe f8ab 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006966:	6378      	str	r0, [r7, #52]	@ 0x34
 8006968:	f001 b890 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800696c:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006978:	d106      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2b20      	cmp	r3, #32
 800697e:	d103      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006980:	4b0e      	ldr	r3, [pc, #56]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
 8006984:	f001 b882 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006988:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800698a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d107      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	2b30      	cmp	r3, #48	@ 0x30
 800699a:	d104      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800699c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	f001 b873 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069aa:	f001 b86f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80069ae:	bf00      	nop
 80069b0:	46020c00 	.word	0x46020c00
 80069b4:	0801175c 	.word	0x0801175c
 80069b8:	02dc6c00 	.word	0x02dc6c00
 80069bc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80069c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c4:	f1a2 0108 	sub.w	r1, r2, #8
 80069c8:	430b      	orrs	r3, r1
 80069ca:	d136      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80069cc:	4baa      	ldr	r3, [pc, #680]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069de:	f7fe f989 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80069e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80069e4:	f001 b852 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2b40      	cmp	r3, #64	@ 0x40
 80069ec:	d104      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069ee:	f7fe f865 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80069f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80069f4:	f001 b84a 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80069f8:	4b9f      	ldr	r3, [pc, #636]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a04:	d106      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	2b80      	cmp	r3, #128	@ 0x80
 8006a0a:	d103      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a10:	f001 b83c 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006a14:	4b98      	ldr	r3, [pc, #608]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d107      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a26:	d104      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2e:	f001 b82d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a36:	f001 b829 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3e:	f1a2 0110 	sub.w	r1, r2, #16
 8006a42:	430b      	orrs	r3, r1
 8006a44:	d139      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006a46:	4b8c      	ldr	r3, [pc, #560]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fe f94c 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a5e:	f001 b815 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a68:	d104      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fe f827 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006a6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a70:	f001 b80c 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006a74:	4b80      	ldr	r3, [pc, #512]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a80:	d107      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a88:	d103      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8e:	f000 bffd 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006a92:	4b79      	ldr	r3, [pc, #484]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d108      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa6:	d104      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aae:	f000 bfed 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab6:	f000 bfe9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abe:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	d139      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ad8:	f7fe f90c 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006adc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ade:	f000 bfd5 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae8:	d104      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006aea:	f7fd ffe7 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006aee:	6378      	str	r0, [r7, #52]	@ 0x34
 8006af0:	f000 bfcc 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006af4:	4b60      	ldr	r3, [pc, #384]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b00:	d107      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b08:	d103      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HSI_VALUE;
 8006b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0e:	f000 bfbd 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006b12:	4b59      	ldr	r3, [pc, #356]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d108      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b26:	d104      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
    {
      frequency = LSE_VALUE;
 8006b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	f000 bfad 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b36:	f000 bfa9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3e:	f1a2 0120 	sub.w	r1, r2, #32
 8006b42:	430b      	orrs	r3, r1
 8006b44:	d158      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b46:	4b4c      	ldr	r3, [pc, #304]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006b58:	f7fe f8f4 	bl	8004d44 <HAL_RCC_GetPCLK3Freq>
 8006b5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b5e:	f000 bf95 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d104      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b68:	f7fd ffa8 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006b6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b6e:	f000 bf8d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b72:	4b41      	ldr	r3, [pc, #260]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
    {
      frequency = HSI_VALUE;
 8006b86:	4b3d      	ldr	r3, [pc, #244]	@ (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8a:	f000 bf7f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d104      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
    {
      frequency = LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba8:	f000 bf70 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006bac:	4b32      	ldr	r3, [pc, #200]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d118      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8006bca:	4b2b      	ldr	r3, [pc, #172]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	0e1b      	lsrs	r3, r3, #24
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006bd6:	4b28      	ldr	r3, [pc, #160]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	0e1b      	lsrs	r3, r3, #24
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	4a26      	ldr	r2, [pc, #152]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bec:	f000 bf4e 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf4:	f000 bf4a 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006c00:	430b      	orrs	r3, r1
 8006c02:	d172      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c04:	4b1c      	ldr	r3, [pc, #112]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c0a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c16:	d104      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c18:	f7fd ff50 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006c1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c1e:	f000 bf35 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c28:	d108      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2a:	f107 0318 	add.w	r3, r7, #24
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff f952 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c38:	f000 bf28 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006c42:	f7fe f83d 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8006c46:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c48:	f000 bf20 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c52:	d128      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c54:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d11e      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006c6c:	4b02      	ldr	r3, [pc, #8]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	0e1b      	lsrs	r3, r3, #24
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	e00c      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 8006c78:	46020c00 	.word	0x46020c00
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	0801175c 	.word	0x0801175c
 8006c84:	4ba9      	ldr	r3, [pc, #676]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	0e1b      	lsrs	r3, r3, #24
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	4aa7      	ldr	r2, [pc, #668]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9a:	f000 bef7 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	f000 bef3 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006ca6:	4ba1      	ldr	r3, [pc, #644]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cba:	d103      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
    {
      frequency = HSE_VALUE;
 8006cbc:	4b9d      	ldr	r3, [pc, #628]	@ (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc0:	f000 bee4 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006cc4:	4b99      	ldr	r3, [pc, #612]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
    {
      frequency = HSI_VALUE;
 8006cda:	4b96      	ldr	r3, [pc, #600]	@ (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	f000 bed5 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce6:	f000 bed1 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	d159      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d84c      	bhi.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8006d08:	a201      	add	r2, pc, #4	@ (adr r2, 8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d49 	.word	0x08006d49
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d37 	.word	0x08006d37
 8006d1c:	08006d53 	.word	0x08006d53
 8006d20:	08006d5d 	.word	0x08006d5d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe ff7b 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d32:	f000 beab 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fa26 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d44:	f000 bea2 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d48:	f7fd ffba 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8006d4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d4e:	f000 be9d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d52:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d58:	f000 be98 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d5c:	4b73      	ldr	r3, [pc, #460]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d118      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d68:	4b70      	ldr	r3, [pc, #448]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006d74:	4b6d      	ldr	r3, [pc, #436]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	e006      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 8006d80:	4b6a      	ldr	r3, [pc, #424]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	4a68      	ldr	r2, [pc, #416]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d96:	f000 be79 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9e:	f000 be75 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da6:	f000 be71 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dae:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006db2:	430b      	orrs	r3, r1
 8006db4:	d167      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006db6:	4b5d      	ldr	r3, [pc, #372]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dbc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dc8:	d036      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dd0:	d855      	bhi.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dd8:	d029      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de0:	d84d      	bhi.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de8:	d013      	beq.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df0:	d845      	bhi.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d015      	beq.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9e4>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dfe:	d13e      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe ff0d 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e0e:	f000 be3d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e12:	f107 030c 	add.w	r3, r7, #12
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff f9b8 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e20:	f000 be34 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e24:	f7fd ff4c 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8006e28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e2a:	f000 be2f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e2e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e34:	f000 be2a 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e38:	4b3c      	ldr	r3, [pc, #240]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d118      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e44:	4b39      	ldr	r3, [pc, #228]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006e50:	4b36      	ldr	r3, [pc, #216]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	0e1b      	lsrs	r3, r3, #24
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	e006      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006e5c:	4b33      	ldr	r3, [pc, #204]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	4a31      	ldr	r2, [pc, #196]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e72:	f000 be0b 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e7a:	f000 be07 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e82:	f000 be03 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	d152      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e92:	4b26      	ldr	r3, [pc, #152]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fd ff26 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eaa:	f000 bdef 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb4:	d104      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fd fe01 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006eba:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ebc:	f000 bde6 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ecc:	d107      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed4:	d103      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
    {
      frequency = HSI_VALUE;
 8006ed6:	4b17      	ldr	r3, [pc, #92]	@ (8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eda:	f000 bdd7 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006ede:	4b13      	ldr	r3, [pc, #76]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d11c      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ef0:	d118      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8006efe:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0e1b      	lsrs	r3, r3, #24
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8006f0a:	4b08      	ldr	r3, [pc, #32]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	4a05      	ldr	r2, [pc, #20]	@ (8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f20:	f000 bdb4 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f28:	f000 bdb0 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8006f2c:	46020c00 	.word	0x46020c00
 8006f30:	0801175c 	.word	0x0801175c
 8006f34:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f3c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006f40:	430b      	orrs	r3, r1
 8006f42:	d14c      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f44:	4ba8      	ldr	r3, [pc, #672]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f56:	f7fd fecd 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006f5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f5c:	f000 bd96 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f66:	d104      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f68:	f7fd fda8 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006f6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f6e:	f000 bd8d 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006f72:	4b9d      	ldr	r3, [pc, #628]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7e:	d107      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f86:	d103      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
    {
      frequency = HSI_VALUE;
 8006f88:	4b98      	ldr	r3, [pc, #608]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8c:	f000 bd7e 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006f90:	4b95      	ldr	r3, [pc, #596]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d11c      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fa2:	d118      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fa4:	4b90      	ldr	r3, [pc, #576]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
 8006fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	e006      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
 8006fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006fbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	4a89      	ldr	r2, [pc, #548]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8006fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd2:	f000 bd5b 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fda:	f000 bd57 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	d158      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006fea:	4b7f      	ldr	r3, [pc, #508]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ff0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ffa:	d028      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007000:	d848      	bhi.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	2b80      	cmp	r3, #128	@ 0x80
 8007006:	d00e      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	2b80      	cmp	r3, #128	@ 0x80
 800700c:	d842      	bhi.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xbdc>
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d014      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800701a:	e03b      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800701c:	f7fd fe92 	bl	8004d44 <HAL_RCC_GetPCLK3Freq>
 8007020:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007022:	f000 bd33 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007026:	4b70      	ldr	r3, [pc, #448]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007032:	d103      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        {
          frequency = HSI_VALUE;
 8007034:	4b6d      	ldr	r3, [pc, #436]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007038:	f000 bd28 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007040:	f000 bd24 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007044:	f7fd fd3a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007048:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800704a:	f000 bd1f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800704e:	4b66      	ldr	r3, [pc, #408]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b20      	cmp	r3, #32
 8007058:	d118      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800705a:	4b63      	ldr	r3, [pc, #396]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
 8007066:	4b60      	ldr	r3, [pc, #384]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 8007072:	4b5d      	ldr	r3, [pc, #372]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	4a5b      	ldr	r2, [pc, #364]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8007082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007088:	f000 bd00 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007090:	f000 bcfc 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      default:
      {
        frequency = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007098:	f000 bcf8 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800709c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80070a4:	430b      	orrs	r3, r1
 80070a6:	d14c      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80070a8:	4b4f      	ldr	r3, [pc, #316]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80070aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80070b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070ba:	f7fd fe1b 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80070be:	6378      	str	r0, [r7, #52]	@ 0x34
 80070c0:	f000 bce4 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070ca:	d104      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070cc:	f7fd fcf6 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80070d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80070d2:	f000 bcdb 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80070d6:	4b44      	ldr	r3, [pc, #272]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ea:	d103      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
    {
      frequency = HSI_VALUE;
 80070ec:	4b3f      	ldr	r3, [pc, #252]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f0:	f000 bccc 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80070f4:	4b3c      	ldr	r3, [pc, #240]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d11c      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007106:	d118      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007108:	4b37      	ldr	r3, [pc, #220]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
 8007114:	4b34      	ldr	r3, [pc, #208]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	0e1b      	lsrs	r3, r3, #24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	e006      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
 8007120:	4b31      	ldr	r3, [pc, #196]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	4a30      	ldr	r2, [pc, #192]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8007130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
 8007136:	f000 bca9 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34
 800713e:	f000 bca5 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007146:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800714a:	430b      	orrs	r3, r1
 800714c:	d152      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800714e:	4b26      	ldr	r3, [pc, #152]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8007150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007154:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007158:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007160:	f7fd fdc8 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8007164:	6378      	str	r0, [r7, #52]	@ 0x34
 8007166:	f000 bc91 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007170:	d104      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007172:	f7fd fca3 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007176:	6378      	str	r0, [r7, #52]	@ 0x34
 8007178:	f000 bc88 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800717c:	4b1a      	ldr	r3, [pc, #104]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007188:	d107      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007190:	d103      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      frequency = HSI_VALUE;
 8007192:	4b16      	ldr	r3, [pc, #88]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	f000 bc79 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800719a:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d11c      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ac:	d118      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071ae:	4b0e      	ldr	r3, [pc, #56]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
 80071ba:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80071c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	4a06      	ldr	r2, [pc, #24]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 80071d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
 80071dc:	f000 bc56 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e4:	f000 bc52 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80071e8:	46020c00 	.word	0x46020c00
 80071ec:	00f42400 	.word	0x00f42400
 80071f0:	0801175c 	.word	0x0801175c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80071fc:	430b      	orrs	r3, r1
 80071fe:	d14a      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007200:	4ba5      	ldr	r3, [pc, #660]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007202:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007206:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800720a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fd fd6f 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8007216:	6378      	str	r0, [r7, #52]	@ 0x34
 8007218:	f000 bc38 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007222:	d104      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007224:	f7fd fc4a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007228:	6378      	str	r0, [r7, #52]	@ 0x34
 800722a:	f000 bc2f 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800722e:	4b9a      	ldr	r3, [pc, #616]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007242:	d103      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
    {
      frequency = HSI_VALUE;
 8007244:	4b95      	ldr	r3, [pc, #596]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
 8007248:	f000 bc20 	b.w	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800724c:	4b92      	ldr	r3, [pc, #584]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b20      	cmp	r3, #32
 8007256:	d11b      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800725e:	d117      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007260:	4b8d      	ldr	r3, [pc, #564]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 800726c:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	e006      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
 8007278:	4b87      	ldr	r3, [pc, #540]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800727a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	0e1b      	lsrs	r3, r3, #24
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	4a86      	ldr	r2, [pc, #536]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8007288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
 800728e:	e3fd      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
 8007294:	e3fa      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800729a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800729e:	430b      	orrs	r3, r1
 80072a0:	d164      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80072a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d120      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072b4:	4b78      	ldr	r3, [pc, #480]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d117      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072c0:	4b75      	ldr	r3, [pc, #468]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 80072cc:	4b72      	ldr	r3, [pc, #456]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	0e1b      	lsrs	r3, r3, #24
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	e006      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
 80072d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	4a6e      	ldr	r2, [pc, #440]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 80072e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ee:	e3cd      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	e3ca      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80072f6:	4b68      	ldr	r3, [pc, #416]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80072f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007304:	d112      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730c:	d10e      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800730e:	4b62      	ldr	r3, [pc, #392]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731c:	d102      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xee4>
      {
        frequency = LSI_VALUE / 128U;
 800731e:	23fa      	movs	r3, #250	@ 0xfa
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007322:	e3b3      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 8007324:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800732a:	e3af      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800732c:	4b5a      	ldr	r3, [pc, #360]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007338:	d106      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007340:	d102      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      frequency = HSI_VALUE;
 8007342:	4b56      	ldr	r3, [pc, #344]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	e3a1      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007348:	4b53      	ldr	r3, [pc, #332]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800734a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b02      	cmp	r3, #2
 8007354:	d107      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800735c:	d103      	bne.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    {
      frequency = LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
 8007364:	e392      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
 800736a:	e38f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800736c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007370:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007374:	430b      	orrs	r3, r1
 8007376:	d164      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007378:	4b47      	ldr	r3, [pc, #284]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800737a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007382:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	2b00      	cmp	r3, #0
 8007388:	d120      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xf8c>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800738a:	4b43      	ldr	r3, [pc, #268]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b20      	cmp	r3, #32
 8007394:	d117      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007396:	4b40      	ldr	r3, [pc, #256]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xf6e>
 80073a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	0e1b      	lsrs	r3, r3, #24
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	e006      	b.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 80073ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80073b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	0e1b      	lsrs	r3, r3, #24
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	4a38      	ldr	r2, [pc, #224]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 80073be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	e362      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ca:	e35f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80073cc:	4b32      	ldr	r3, [pc, #200]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80073ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073da:	d112      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e2:	d10e      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80073e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f2:	d102      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
      {
        frequency = LSI_VALUE / 128U;
 80073f4:	23fa      	movs	r3, #250	@ 0xfa
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f8:	e348      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 80073fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007400:	e344      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007402:	4b25      	ldr	r3, [pc, #148]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800740a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740e:	d106      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007416:	d102      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
    {
      frequency = HSI_VALUE;
 8007418:	4b20      	ldr	r3, [pc, #128]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
 800741c:	e336      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d107      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007432:	d103      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
    {
      frequency = LSE_VALUE;
 8007434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
 800743a:	e327      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007440:	e324      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007446:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800744a:	430b      	orrs	r3, r1
 800744c:	d14e      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800744e:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007454:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007458:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1028>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007460:	f7fd fc48 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8007464:	6378      	str	r0, [r7, #52]	@ 0x34
 8007466:	e311      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800746a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800746e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007476:	d119      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800747e:	d115      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007480:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8007482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800748a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800748e:	d109      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
      {
        frequency = LSI_VALUE / 128U;
 8007490:	23fa      	movs	r3, #250	@ 0xfa
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007494:	e2fa      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007496:	bf00      	nop
 8007498:	46020c00 	.word	0x46020c00
 800749c:	00f42400 	.word	0x00f42400
 80074a0:	0801175c 	.word	0x0801175c
      }
      else
      {
        frequency = LSI_VALUE;
 80074a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074aa:	e2ef      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80074ac:	4ba8      	ldr	r3, [pc, #672]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b8:	d106      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074c0:	d102      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
    {
      frequency = HSI_VALUE;
 80074c2:	4ba4      	ldr	r3, [pc, #656]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	e2e1      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80074c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80074ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d107      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074dc:	d103      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
    {
      frequency = LSE_VALUE;
 80074de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	e2d2      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ea:	e2cf      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80074ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80074f4:	430b      	orrs	r3, r1
 80074f6:	d12d      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80074f8:	4b95      	ldr	r3, [pc, #596]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80074fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007502:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007504:	4b92      	ldr	r3, [pc, #584]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007510:	d105      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
    {
      frequency = HSE_VALUE;
 8007518:	4b8e      	ldr	r3, [pc, #568]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	e2b6      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fb7a 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
 8007534:	e2aa      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800753c:	d107      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800753e:	f107 0318 	add.w	r3, r7, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fcc8 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	637b      	str	r3, [r7, #52]	@ 0x34
 800754c:	e29e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
 8007552:	e29b      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007558:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800755c:	430b      	orrs	r3, r1
 800755e:	d156      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007560:	4b7b      	ldr	r3, [pc, #492]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007566:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800756a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007572:	d028      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007576:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800757a:	d845      	bhi.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007582:	d013      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800758a:	d83d      	bhi.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x115c>
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007598:	d004      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1164>
 800759a:	e035      	b.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fd fbbe 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 80075a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075a2:	e273      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075a4:	f7fd fa8a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80075a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075aa:	e26f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075ac:	4b68      	ldr	r3, [pc, #416]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b8:	d102      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
        {
          frequency = HSI_VALUE;
 80075ba:	4b66      	ldr	r3, [pc, #408]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075be:	e265      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c4:	e262      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075c6:	4b62      	ldr	r3, [pc, #392]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d117      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x11aa>
 80075de:	4b5c      	ldr	r3, [pc, #368]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	0e1b      	lsrs	r3, r3, #24
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	e006      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80075ea:	4b59      	ldr	r3, [pc, #356]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80075ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075f0:	041b      	lsls	r3, r3, #16
 80075f2:	0e1b      	lsrs	r3, r3, #24
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	4a57      	ldr	r2, [pc, #348]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 80075fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007600:	e244      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007606:	e241      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800760c:	e23e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800760e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007612:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007616:	430b      	orrs	r3, r1
 8007618:	d156      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800761a:	4b4d      	ldr	r3, [pc, #308]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800761c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007624:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800762c:	d028      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007634:	d845      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800763c:	d013      	beq.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007644:	d83d      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007652:	d004      	beq.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 8007654:	e035      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007656:	f7fd fb4d 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 800765a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800765c:	e216      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800765e:	f7fd fa2d 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007662:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007664:	e212      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007666:	4b3a      	ldr	r3, [pc, #232]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800766e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007672:	d102      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        {
          frequency = HSI_VALUE;
 8007674:	4b37      	ldr	r3, [pc, #220]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007678:	e208      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800767e:	e205      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007680:	4b33      	ldr	r3, [pc, #204]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b20      	cmp	r3, #32
 800768a:	d117      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800768c:	4b30      	ldr	r3, [pc, #192]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
 8007698:	4b2d      	ldr	r3, [pc, #180]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	0e1b      	lsrs	r3, r3, #24
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	e006      	b.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 80076a4:	4b2a      	ldr	r3, [pc, #168]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80076a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	4a29      	ldr	r2, [pc, #164]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 80076b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076ba:	e1e7      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c0:	e1e4      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c6:	e1e1      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80076c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076cc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80076d0:	430b      	orrs	r3, r1
 80076d2:	d17c      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076d4:	4b1e      	ldr	r3, [pc, #120]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80076d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076da:	f003 0318 	and.w	r3, r3, #24
 80076de:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	2b18      	cmp	r3, #24
 80076e4:	d870      	bhi.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 80076e6:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ac>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	0800775d 	.word	0x0800775d
 80076f0:	080077c9 	.word	0x080077c9
 80076f4:	080077c9 	.word	0x080077c9
 80076f8:	080077c9 	.word	0x080077c9
 80076fc:	080077c9 	.word	0x080077c9
 8007700:	080077c9 	.word	0x080077c9
 8007704:	080077c9 	.word	0x080077c9
 8007708:	080077c9 	.word	0x080077c9
 800770c:	08007765 	.word	0x08007765
 8007710:	080077c9 	.word	0x080077c9
 8007714:	080077c9 	.word	0x080077c9
 8007718:	080077c9 	.word	0x080077c9
 800771c:	080077c9 	.word	0x080077c9
 8007720:	080077c9 	.word	0x080077c9
 8007724:	080077c9 	.word	0x080077c9
 8007728:	080077c9 	.word	0x080077c9
 800772c:	0800776d 	.word	0x0800776d
 8007730:	080077c9 	.word	0x080077c9
 8007734:	080077c9 	.word	0x080077c9
 8007738:	080077c9 	.word	0x080077c9
 800773c:	080077c9 	.word	0x080077c9
 8007740:	080077c9 	.word	0x080077c9
 8007744:	080077c9 	.word	0x080077c9
 8007748:	080077c9 	.word	0x080077c9
 800774c:	08007787 	.word	0x08007787
 8007750:	46020c00 	.word	0x46020c00
 8007754:	00f42400 	.word	0x00f42400
 8007758:	0801175c 	.word	0x0801175c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800775c:	f7fd faf2 	bl	8004d44 <HAL_RCC_GetPCLK3Freq>
 8007760:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007762:	e193      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007764:	f7fd f9aa 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007768:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800776a:	e18f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800776c:	4b9f      	ldr	r3, [pc, #636]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007778:	d102      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
        {
          frequency = HSI_VALUE;
 800777a:	4b9d      	ldr	r3, [pc, #628]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>)
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800777e:	e185      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007784:	e182      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007786:	4b99      	ldr	r3, [pc, #612]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	d117      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007792:	4b96      	ldr	r3, [pc, #600]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800779e:	4b93      	ldr	r3, [pc, #588]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	0e1b      	lsrs	r3, r3, #24
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>
 80077aa:	4b90      	ldr	r3, [pc, #576]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80077ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077b0:	041b      	lsls	r3, r3, #16
 80077b2:	0e1b      	lsrs	r3, r3, #24
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	4a8e      	ldr	r2, [pc, #568]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15b4>)
 80077ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077c0:	e164      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c6:	e161      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077cc:	e15e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80077ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80077d6:	430b      	orrs	r3, r1
 80077d8:	d155      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80077da:	4b84      	ldr	r3, [pc, #528]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80077dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80077e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077ec:	d013      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x13d6>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077f4:	d844      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077fc:	d013      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007804:	d83c      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2b00      	cmp	r3, #0
 800780a:	d014      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x13f6>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007812:	d014      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 8007814:	e034      	b.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007816:	f107 0318 	add.w	r3, r7, #24
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fb5c 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007824:	e132      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe f9fa 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007834:	e12a      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007836:	f7fd f941 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800783a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800783c:	e126      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800783e:	4b6b      	ldr	r3, [pc, #428]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b20      	cmp	r3, #32
 8007848:	d117      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x143a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800784a:	4b68      	ldr	r3, [pc, #416]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1422>
 8007856:	4b65      	ldr	r3, [pc, #404]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	e006      	b.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8007862:	4b62      	ldr	r3, [pc, #392]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	0e1b      	lsrs	r3, r3, #24
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	4a60      	ldr	r2, [pc, #384]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15b4>)
 8007872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007878:	e108      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800787e:	e105      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007884:	e102      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788a:	1e59      	subs	r1, r3, #1
 800788c:	ea52 0301 	orrs.w	r3, r2, r1
 8007890:	d13c      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007892:	4b56      	ldr	r3, [pc, #344]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007898:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80078a4:	d027      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80078ac:	d82b      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078b4:	d017      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078bc:	d823      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ca:	d004      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80078cc:	e01b      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80078ce:	f7fd f8f5 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 80078d2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80078d4:	e0da      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe f9a2 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078e4:	e0d2      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e6:	f107 0318 	add.w	r3, r7, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe faf4 	bl	8005ed8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078f4:	e0ca      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f6:	f107 030c 	add.w	r3, r7, #12
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fc46 	bl	800618c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007904:	e0c2      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800790a:	e0bf      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800790c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007910:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007914:	430b      	orrs	r3, r1
 8007916:	d131      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007918:	4b34      	ldr	r3, [pc, #208]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800791a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800791e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007922:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007924:	4b31      	ldr	r3, [pc, #196]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d106      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
    {
      frequency = LSE_VALUE;
 8007938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	e0a5      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007940:	4b2a      	ldr	r3, [pc, #168]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800794e:	d112      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x1536>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007956:	d10e      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x1536>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007958:	4b24      	ldr	r3, [pc, #144]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800795a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800795e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007966:	d102      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x152e>
      {
        frequency = LSI_VALUE / 128U;
 8007968:	23fa      	movs	r3, #250	@ 0xfa
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800796c:	e08e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 800796e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007974:	e08a      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
 800797a:	e087      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800797c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007980:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007984:	430b      	orrs	r3, r1
 8007986:	d13b      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007988:	4b18      	ldr	r3, [pc, #96]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800798a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800798e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007992:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007994:	4b15      	ldr	r3, [pc, #84]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800799c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a0:	d105      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
    {
      frequency = HSI48_VALUE;
 80079a8:	4b13      	ldr	r3, [pc, #76]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x15b8>)
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ac:	e06e      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80079ae:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ba:	d106      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c2:	d102      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80079c4:	4b0d      	ldr	r3, [pc, #52]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>)
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	e060      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80079ca:	4b08      	ldr	r3, [pc, #32]	@ (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d6:	d106      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079de:	d102      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
    {
      frequency = HSI_VALUE;
 80079e0:	4b03      	ldr	r3, [pc, #12]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>)
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e4:	e052      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ea:	e04f      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80079ec:	46020c00 	.word	0x46020c00
 80079f0:	00f42400 	.word	0x00f42400
 80079f4:	0801175c 	.word	0x0801175c
 80079f8:	02dc6c00 	.word	0x02dc6c00
 80079fc:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a04:	f1a3 0108 	sub.w	r1, r3, #8
 8007a08:	ea52 0301 	orrs.w	r3, r2, r1
 8007a0c:	d13c      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007a0e:	4b22      	ldr	r3, [pc, #136]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8007a10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a26:	d105      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
    {
      frequency = HSE_VALUE;
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x165c>)
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a32:	e02b      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007a34:	4b18      	ldr	r3, [pc, #96]	@ (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a40:	d106      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a48:	d102      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
    {
      frequency = HSE_VALUE >> 1U ;
 8007a4a:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>)
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a4e:	e01d      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a56:	d107      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1628>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f8e1 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	e011      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007a6e:	d108      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1642>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe f8d5 	bl	8005c24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a80:	e004      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a86:	e001      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3738      	adds	r7, #56	@ 0x38
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	46020c00 	.word	0x46020c00
 8007a9c:	00f42400 	.word	0x00f42400
 8007aa0:	007a1200 	.word	0x007a1200

08007aa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007aac:	4b47      	ldr	r3, [pc, #284]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a46      	ldr	r2, [pc, #280]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ab6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ab8:	f7f9 fb5c 	bl	8001174 <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007abe:	e008      	b.n	8007ad2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ac0:	f7f9 fb58 	bl	8001174 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e077      	b.n	8007bc2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ade:	4b3b      	ldr	r3, [pc, #236]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ae6:	f023 0303 	bic.w	r3, r3, #3
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6811      	ldr	r1, [r2, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6852      	ldr	r2, [r2, #4]
 8007af2:	3a01      	subs	r2, #1
 8007af4:	0212      	lsls	r2, r2, #8
 8007af6:	430a      	orrs	r2, r1
 8007af8:	4934      	ldr	r1, [pc, #208]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007afe:	4b33      	ldr	r3, [pc, #204]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b02:	4b33      	ldr	r3, [pc, #204]	@ (8007bd0 <RCCEx_PLL2_Config+0x12c>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6892      	ldr	r2, [r2, #8]
 8007b0a:	3a01      	subs	r2, #1
 8007b0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	68d2      	ldr	r2, [r2, #12]
 8007b14:	3a01      	subs	r2, #1
 8007b16:	0252      	lsls	r2, r2, #9
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	4311      	orrs	r1, r2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6912      	ldr	r2, [r2, #16]
 8007b20:	3a01      	subs	r2, #1
 8007b22:	0412      	lsls	r2, r2, #16
 8007b24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b28:	4311      	orrs	r1, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6952      	ldr	r2, [r2, #20]
 8007b2e:	3a01      	subs	r2, #1
 8007b30:	0612      	lsls	r2, r2, #24
 8007b32:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b36:	430a      	orrs	r2, r1
 8007b38:	4924      	ldr	r1, [pc, #144]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b3e:	4b23      	ldr	r3, [pc, #140]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b42:	f023 020c 	bic.w	r2, r3, #12
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	4920      	ldr	r1, [pc, #128]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b50:	4b1e      	ldr	r3, [pc, #120]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	491c      	ldr	r1, [pc, #112]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	4a1a      	ldr	r2, [pc, #104]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b64:	f023 0310 	bic.w	r3, r3, #16
 8007b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b6a:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	69d2      	ldr	r2, [r2, #28]
 8007b7a:	00d2      	lsls	r2, r2, #3
 8007b7c:	4913      	ldr	r1, [pc, #76]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b82:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	4a11      	ldr	r2, [pc, #68]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b88:	f043 0310 	orr.w	r3, r3, #16
 8007b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a0e      	ldr	r2, [pc, #56]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007b94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b98:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b9a:	f7f9 faeb 	bl	8001174 <HAL_GetTick>
 8007b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ba0:	e008      	b.n	8007bb4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ba2:	f7f9 fae7 	bl	8001174 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e006      	b.n	8007bc2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb4:	4b05      	ldr	r3, [pc, #20]	@ (8007bcc <RCCEx_PLL2_Config+0x128>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f0      	beq.n	8007ba2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0

}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	46020c00 	.word	0x46020c00
 8007bd0:	80800000 	.word	0x80800000

08007bd4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bdc:	4b47      	ldr	r3, [pc, #284]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a46      	ldr	r2, [pc, #280]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007be6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007be8:	f7f9 fac4 	bl	8001174 <HAL_GetTick>
 8007bec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bee:	e008      	b.n	8007c02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bf0:	f7f9 fac0 	bl	8001174 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e077      	b.n	8007cf2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c02:	4b3e      	ldr	r3, [pc, #248]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f0      	bne.n	8007bf0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6811      	ldr	r1, [r2, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6852      	ldr	r2, [r2, #4]
 8007c22:	3a01      	subs	r2, #1
 8007c24:	0212      	lsls	r2, r2, #8
 8007c26:	430a      	orrs	r2, r1
 8007c28:	4934      	ldr	r1, [pc, #208]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c2e:	4b33      	ldr	r3, [pc, #204]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c32:	4b33      	ldr	r3, [pc, #204]	@ (8007d00 <RCCEx_PLL3_Config+0x12c>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6892      	ldr	r2, [r2, #8]
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68d2      	ldr	r2, [r2, #12]
 8007c44:	3a01      	subs	r2, #1
 8007c46:	0252      	lsls	r2, r2, #9
 8007c48:	b292      	uxth	r2, r2
 8007c4a:	4311      	orrs	r1, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6912      	ldr	r2, [r2, #16]
 8007c50:	3a01      	subs	r2, #1
 8007c52:	0412      	lsls	r2, r2, #16
 8007c54:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c58:	4311      	orrs	r1, r2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6952      	ldr	r2, [r2, #20]
 8007c5e:	3a01      	subs	r2, #1
 8007c60:	0612      	lsls	r2, r2, #24
 8007c62:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c66:	430a      	orrs	r2, r1
 8007c68:	4924      	ldr	r1, [pc, #144]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c6e:	4b23      	ldr	r3, [pc, #140]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	f023 020c 	bic.w	r2, r3, #12
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	4920      	ldr	r1, [pc, #128]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c80:	4b1e      	ldr	r3, [pc, #120]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	491c      	ldr	r1, [pc, #112]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c92:	4a1a      	ldr	r2, [pc, #104]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c94:	f023 0310 	bic.w	r3, r3, #16
 8007c98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c9a:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ca2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	69d2      	ldr	r2, [r2, #28]
 8007caa:	00d2      	lsls	r2, r2, #3
 8007cac:	4913      	ldr	r1, [pc, #76]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007cb2:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	4a11      	ldr	r2, [pc, #68]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007cb8:	f043 0310 	orr.w	r3, r3, #16
 8007cbc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cca:	f7f9 fa53 	bl	8001174 <HAL_GetTick>
 8007cce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd0:	e008      	b.n	8007ce4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cd2:	f7f9 fa4f 	bl	8001174 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e006      	b.n	8007cf2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <RCCEx_PLL3_Config+0x128>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	46020c00 	.word	0x46020c00
 8007d00:	80800000 	.word	0x80800000

08007d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e049      	b.n	8007daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f841 	bl	8007db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fa58 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d001      	beq.n	8007de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e072      	b.n	8007ec6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0201 	orr.w	r2, r2, #1
 8007df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a35      	ldr	r2, [pc, #212]	@ (8007ed4 <HAL_TIM_Base_Start_IT+0x10c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d040      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a34      	ldr	r2, [pc, #208]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0x110>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d03b      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e14:	d036      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e1e:	d031      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2d      	ldr	r2, [pc, #180]	@ (8007edc <HAL_TIM_Base_Start_IT+0x114>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02c      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee0 <HAL_TIM_Base_Start_IT+0x118>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d027      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0x11c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a29      	ldr	r2, [pc, #164]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0x120>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a27      	ldr	r2, [pc, #156]	@ (8007eec <HAL_TIM_Base_Start_IT+0x124>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a26      	ldr	r2, [pc, #152]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0x128>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a24      	ldr	r2, [pc, #144]	@ (8007ef4 <HAL_TIM_Base_Start_IT+0x12c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a23      	ldr	r2, [pc, #140]	@ (8007ef8 <HAL_TIM_Base_Start_IT+0x130>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a21      	ldr	r2, [pc, #132]	@ (8007efc <HAL_TIM_Base_Start_IT+0x134>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0xbc>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a20      	ldr	r2, [pc, #128]	@ (8007f00 <HAL_TIM_Base_Start_IT+0x138>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d115      	bne.n	8007eb0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007f04 <HAL_TIM_Base_Start_IT+0x13c>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d015      	beq.n	8007ec2 <HAL_TIM_Base_Start_IT+0xfa>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9c:	d011      	beq.n	8007ec2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0201 	orr.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eae:	e008      	b.n	8007ec2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e000      	b.n	8007ec4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	40012c00 	.word	0x40012c00
 8007ed8:	50012c00 	.word	0x50012c00
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	50000400 	.word	0x50000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	50000800 	.word	0x50000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	50000c00 	.word	0x50000c00
 8007ef4:	40013400 	.word	0x40013400
 8007ef8:	50013400 	.word	0x50013400
 8007efc:	40014000 	.word	0x40014000
 8007f00:	50014000 	.word	0x50014000
 8007f04:	00010007 	.word	0x00010007

08007f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d020      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01b      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0202 	mvn.w	r2, #2
 8007f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f931 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007f58:	e005      	b.n	8007f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f923 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f934 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d020      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01b      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0204 	mvn.w	r2, #4
 8007f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f90b 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007fa4:	e005      	b.n	8007fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8fd 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f90e 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d020      	beq.n	8008004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01b      	beq.n	8008004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0208 	mvn.w	r2, #8
 8007fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2204      	movs	r2, #4
 8007fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8e5 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8d7 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f8e8 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b00      	cmp	r3, #0
 800800c:	d020      	beq.n	8008050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01b      	beq.n	8008050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0210 	mvn.w	r2, #16
 8008020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2208      	movs	r2, #8
 8008026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8bf 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 800803c:	e005      	b.n	800804a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8b1 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8c2 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0201 	mvn.w	r2, #1
 800806c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7f8 fdae 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00c      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800809a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f9b5 	bl	800840c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f9ad 	bl	8008420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00c      	beq.n	80080ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f87c 	bl	80081e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00c      	beq.n	800810e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f06f 0220 	mvn.w	r2, #32
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f975 	bl	80083f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00c      	beq.n	8008132 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800812a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f981 	bl	8008434 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00c      	beq.n	8008156 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800814e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f979 	bl	8008448 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f971 	bl	800845c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00c      	beq.n	800819e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f969 	bl	8008470 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a6b      	ldr	r2, [pc, #428]	@ (80083b8 <TIM_Base_SetConfig+0x1c0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d02b      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a6a      	ldr	r2, [pc, #424]	@ (80083bc <TIM_Base_SetConfig+0x1c4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d027      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821e:	d023      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008226:	d01f      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a65      	ldr	r2, [pc, #404]	@ (80083c0 <TIM_Base_SetConfig+0x1c8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d01b      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a64      	ldr	r2, [pc, #400]	@ (80083c4 <TIM_Base_SetConfig+0x1cc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d017      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a63      	ldr	r2, [pc, #396]	@ (80083c8 <TIM_Base_SetConfig+0x1d0>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a62      	ldr	r2, [pc, #392]	@ (80083cc <TIM_Base_SetConfig+0x1d4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00f      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a61      	ldr	r2, [pc, #388]	@ (80083d0 <TIM_Base_SetConfig+0x1d8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a60      	ldr	r2, [pc, #384]	@ (80083d4 <TIM_Base_SetConfig+0x1dc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a5f      	ldr	r2, [pc, #380]	@ (80083d8 <TIM_Base_SetConfig+0x1e0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_Base_SetConfig+0x70>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a5e      	ldr	r2, [pc, #376]	@ (80083dc <TIM_Base_SetConfig+0x1e4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d108      	bne.n	800827a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800826e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a4e      	ldr	r2, [pc, #312]	@ (80083b8 <TIM_Base_SetConfig+0x1c0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d043      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a4d      	ldr	r2, [pc, #308]	@ (80083bc <TIM_Base_SetConfig+0x1c4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d03f      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008290:	d03b      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008298:	d037      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a48      	ldr	r2, [pc, #288]	@ (80083c0 <TIM_Base_SetConfig+0x1c8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d033      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a47      	ldr	r2, [pc, #284]	@ (80083c4 <TIM_Base_SetConfig+0x1cc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d02f      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a46      	ldr	r2, [pc, #280]	@ (80083c8 <TIM_Base_SetConfig+0x1d0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d02b      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a45      	ldr	r2, [pc, #276]	@ (80083cc <TIM_Base_SetConfig+0x1d4>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d027      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a44      	ldr	r2, [pc, #272]	@ (80083d0 <TIM_Base_SetConfig+0x1d8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d023      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a43      	ldr	r2, [pc, #268]	@ (80083d4 <TIM_Base_SetConfig+0x1dc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01f      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a42      	ldr	r2, [pc, #264]	@ (80083d8 <TIM_Base_SetConfig+0x1e0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01b      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a41      	ldr	r2, [pc, #260]	@ (80083dc <TIM_Base_SetConfig+0x1e4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d017      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a40      	ldr	r2, [pc, #256]	@ (80083e0 <TIM_Base_SetConfig+0x1e8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a3f      	ldr	r2, [pc, #252]	@ (80083e4 <TIM_Base_SetConfig+0x1ec>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00f      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a3e      	ldr	r2, [pc, #248]	@ (80083e8 <TIM_Base_SetConfig+0x1f0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00b      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a3d      	ldr	r2, [pc, #244]	@ (80083ec <TIM_Base_SetConfig+0x1f4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d007      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a3c      	ldr	r2, [pc, #240]	@ (80083f0 <TIM_Base_SetConfig+0x1f8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_Base_SetConfig+0x112>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a3b      	ldr	r2, [pc, #236]	@ (80083f4 <TIM_Base_SetConfig+0x1fc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d108      	bne.n	800831c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1e      	ldr	r2, [pc, #120]	@ (80083b8 <TIM_Base_SetConfig+0x1c0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d023      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1d      	ldr	r2, [pc, #116]	@ (80083bc <TIM_Base_SetConfig+0x1c4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01f      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a22      	ldr	r2, [pc, #136]	@ (80083d8 <TIM_Base_SetConfig+0x1e0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01b      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a21      	ldr	r2, [pc, #132]	@ (80083dc <TIM_Base_SetConfig+0x1e4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d017      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a20      	ldr	r2, [pc, #128]	@ (80083e0 <TIM_Base_SetConfig+0x1e8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d013      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a1f      	ldr	r2, [pc, #124]	@ (80083e4 <TIM_Base_SetConfig+0x1ec>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00f      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a1e      	ldr	r2, [pc, #120]	@ (80083e8 <TIM_Base_SetConfig+0x1f0>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00b      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a1d      	ldr	r2, [pc, #116]	@ (80083ec <TIM_Base_SetConfig+0x1f4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d007      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a1c      	ldr	r2, [pc, #112]	@ (80083f0 <TIM_Base_SetConfig+0x1f8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d003      	beq.n	800838a <TIM_Base_SetConfig+0x192>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a1b      	ldr	r2, [pc, #108]	@ (80083f4 <TIM_Base_SetConfig+0x1fc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d103      	bne.n	8008392 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f043 0204 	orr.w	r2, r3, #4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	50012c00 	.word	0x50012c00
 80083c0:	40000400 	.word	0x40000400
 80083c4:	50000400 	.word	0x50000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	50000800 	.word	0x50000800
 80083d0:	40000c00 	.word	0x40000c00
 80083d4:	50000c00 	.word	0x50000c00
 80083d8:	40013400 	.word	0x40013400
 80083dc:	50013400 	.word	0x50013400
 80083e0:	40014000 	.word	0x40014000
 80083e4:	50014000 	.word	0x50014000
 80083e8:	40014400 	.word	0x40014400
 80083ec:	50014400 	.word	0x50014400
 80083f0:	40014800 	.word	0x40014800
 80083f4:	50014800 	.word	0x50014800

080083f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e042      	b.n	800851c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7f8 fbc3 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2224      	movs	r2, #36	@ 0x24
 80084b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0201 	bic.w	r2, r2, #1
 80084c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fd1c 	bl	8008f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fb6b 	bl	8008bb0 <UART_SetConfig>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e01b      	b.n	800851c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fd9b 	bl	8009050 <UART_CheckIdleState>
 800851a:	4603      	mov	r3, r0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b0ba      	sub	sp, #232	@ 0xe8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800854a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800854e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008552:	4013      	ands	r3, r2
 8008554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11b      	bne.n	8008598 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800857c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 82e5 	beq.w	8008b58 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
      }
      return;
 8008596:	e2df      	b.n	8008b58 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8123 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085a6:	4b8d      	ldr	r3, [pc, #564]	@ (80087dc <HAL_UART_IRQHandler+0x2b8>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085b2:	4b8b      	ldr	r3, [pc, #556]	@ (80087e0 <HAL_UART_IRQHandler+0x2bc>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8116 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d011      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2201      	movs	r2, #1
 80085da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d011      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2202      	movs	r2, #2
 800860a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008612:	f043 0204 	orr.w	r2, r3, #4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d011      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2204      	movs	r2, #4
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008642:	f043 0202 	orr.w	r2, r3, #2
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008668:	4b5c      	ldr	r3, [pc, #368]	@ (80087dc <HAL_UART_IRQHandler+0x2b8>)
 800866a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2208      	movs	r2, #8
 8008676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008690:	2b00      	cmp	r3, #0
 8008692:	d012      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 824b 	beq.w	8008b5c <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d013      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870e:	2b40      	cmp	r3, #64	@ 0x40
 8008710:	d005      	beq.n	800871e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008716:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871a:	2b00      	cmp	r3, #0
 800871c:	d054      	beq.n	80087c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fdad 	bl	800927e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872e:	2b40      	cmp	r3, #64	@ 0x40
 8008730:	d146      	bne.n	80087c0 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800874c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800875e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800876a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d9      	bne.n	8008732 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	2b00      	cmp	r3, #0
 8008786:	d017      	beq.n	80087b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878e:	4a15      	ldr	r2, [pc, #84]	@ (80087e4 <HAL_UART_IRQHandler+0x2c0>)
 8008790:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008798:	4618      	mov	r0, r3
 800879a:	f7f9 f823 	bl	80017e4 <HAL_DMA_Abort_IT>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d019      	beq.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087b2:	4610      	mov	r0, r2
 80087b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	e00f      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f9e3 	bl	8008b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087be:	e00b      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9df 	bl	8008b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c6:	e007      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9db 	bl	8008b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087d6:	e1c1      	b.n	8008b5c <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	bf00      	nop
    return;
 80087da:	e1bf      	b.n	8008b5c <HAL_UART_IRQHandler+0x638>
 80087dc:	10000001 	.word	0x10000001
 80087e0:	04000120 	.word	0x04000120
 80087e4:	0800934b 	.word	0x0800934b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f040 816a 	bne.w	8008ac6 <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8163 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 815c 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	f040 80d2 	bne.w	80089ca <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008830:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80ac 	beq.w	8008996 <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008848:	429a      	cmp	r2, r3
 800884a:	f080 80a4 	bcs.w	8008996 <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008854:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008860:	2b81      	cmp	r3, #129	@ 0x81
 8008862:	f000 8087 	beq.w	8008974 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800887a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800887e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008890:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008894:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800889c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1da      	bne.n	8008866 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088c2:	f023 0301 	bic.w	r3, r3, #1
 80088c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e1      	bne.n	80088b0 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008910:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008912:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008916:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800891e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e3      	bne.n	80088ec <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008954:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008956:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800895a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e4      	bne.n	8008932 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896e:	4618      	mov	r0, r3
 8008970:	f7f8 febc 	bl	80016ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008986:	b29b      	uxth	r3, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	b29b      	uxth	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f902 	bl	8008b98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008994:	e0e4      	b.n	8008b60 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800899c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089a0:	429a      	cmp	r2, r3
 80089a2:	f040 80dd 	bne.w	8008b60 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ae:	2b81      	cmp	r3, #129	@ 0x81
 80089b0:	f040 80d6 	bne.w	8008b60 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8e8 	bl	8008b98 <HAL_UARTEx_RxEventCallback>
      return;
 80089c8:	e0ca      	b.n	8008b60 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80bc 	beq.w	8008b64 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 80089ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80b7 	beq.w	8008b64 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e4      	bne.n	80089f6 <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3308      	adds	r3, #8
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a54:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e1      	bne.n	8008a2c <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0310 	bic.w	r3, r3, #16
 8008a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	69b9      	ldr	r1, [r7, #24]
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e4      	bne.n	8008a7c <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f86a 	bl	8008b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ac4:	e04e      	b.n	8008b64 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d014      	beq.n	8008afc <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d008      	beq.n	8008afc <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d03a      	beq.n	8008b68 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
    }
    return;
 8008afa:	e035      	b.n	8008b68 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d009      	beq.n	8008b1c <HAL_UART_IRQHandler+0x5f8>
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc2a 	bl	800936e <UART_EndTransmit_IT>
    return;
 8008b1a:	e026      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <HAL_UART_IRQHandler+0x618>
 8008b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fc4f 	bl	80093d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3a:	e016      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d010      	beq.n	8008b6a <HAL_UART_IRQHandler+0x646>
 8008b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da0c      	bge.n	8008b6a <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fc37 	bl	80093c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b56:	e008      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
      return;
 8008b58:	bf00      	nop
 8008b5a:	e006      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
    return;
 8008b5c:	bf00      	nop
 8008b5e:	e004      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
      return;
 8008b60:	bf00      	nop
 8008b62:	e002      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
      return;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <HAL_UART_IRQHandler+0x646>
    return;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	37e8      	adds	r7, #232	@ 0xe8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb4:	b094      	sub	sp, #80	@ 0x50
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	4b83      	ldr	r3, [pc, #524]	@ (8008dd4 <UART_SetConfig+0x224>)
 8008bc6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	497c      	ldr	r1, [pc, #496]	@ (8008dd8 <UART_SetConfig+0x228>)
 8008be8:	4019      	ands	r1, r3
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c00:	68d9      	ldr	r1, [r3, #12]
 8008c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	ea40 0301 	orr.w	r3, r0, r1
 8008c0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b6f      	ldr	r3, [pc, #444]	@ (8008dd4 <UART_SetConfig+0x224>)
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d009      	beq.n	8008c30 <UART_SetConfig+0x80>
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b6e      	ldr	r3, [pc, #440]	@ (8008ddc <UART_SetConfig+0x22c>)
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d004      	beq.n	8008c30 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	6a1a      	ldr	r2, [r3, #32]
 8008c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008c3a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c44:	430b      	orrs	r3, r1
 8008c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4e:	f023 000f 	bic.w	r0, r3, #15
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	ea40 0301 	orr.w	r3, r0, r1
 8008c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4b5e      	ldr	r3, [pc, #376]	@ (8008de0 <UART_SetConfig+0x230>)
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d102      	bne.n	8008c70 <UART_SetConfig+0xc0>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c6e:	e032      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4b5b      	ldr	r3, [pc, #364]	@ (8008de4 <UART_SetConfig+0x234>)
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d102      	bne.n	8008c80 <UART_SetConfig+0xd0>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c7e:	e02a      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4b58      	ldr	r3, [pc, #352]	@ (8008de8 <UART_SetConfig+0x238>)
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d102      	bne.n	8008c90 <UART_SetConfig+0xe0>
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c8e:	e022      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	4b55      	ldr	r3, [pc, #340]	@ (8008dec <UART_SetConfig+0x23c>)
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d102      	bne.n	8008ca0 <UART_SetConfig+0xf0>
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c9e:	e01a      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b52      	ldr	r3, [pc, #328]	@ (8008df0 <UART_SetConfig+0x240>)
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d102      	bne.n	8008cb0 <UART_SetConfig+0x100>
 8008caa:	2310      	movs	r3, #16
 8008cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cae:	e012      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8008df4 <UART_SetConfig+0x244>)
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d103      	bne.n	8008cc2 <UART_SetConfig+0x112>
 8008cba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc0:	e009      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b43      	ldr	r3, [pc, #268]	@ (8008dd4 <UART_SetConfig+0x224>)
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d102      	bne.n	8008cd2 <UART_SetConfig+0x122>
 8008ccc:	2320      	movs	r3, #32
 8008cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cd0:	e001      	b.n	8008cd6 <UART_SetConfig+0x126>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd4 <UART_SetConfig+0x224>)
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d005      	beq.n	8008cec <UART_SetConfig+0x13c>
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8008ddc <UART_SetConfig+0x22c>)
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	f040 8088 	bne.w	8008dfc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cee:	2200      	movs	r2, #0
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cf8:	f7fd fba2 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8008cfc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80eb 	beq.w	8008edc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8008df8 <UART_SetConfig+0x248>)
 8008d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d18:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	4413      	add	r3, r2
 8008d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d305      	bcc.n	8008d36 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d903      	bls.n	8008d3e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d3c:	e048      	b.n	8008dd0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d40:	2200      	movs	r2, #0
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	61fa      	str	r2, [r7, #28]
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008df8 <UART_SetConfig+0x248>)
 8008d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2200      	movs	r2, #0
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	617a      	str	r2, [r7, #20]
 8008d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d60:	f7f7 fbbc 	bl	80004dc <__aeabi_uldivmod>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	020b      	lsls	r3, r1, #8
 8008d76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d7a:	0202      	lsls	r2, r0, #8
 8008d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d7e:	6849      	ldr	r1, [r1, #4]
 8008d80:	0849      	lsrs	r1, r1, #1
 8008d82:	2000      	movs	r0, #0
 8008d84:	460c      	mov	r4, r1
 8008d86:	4605      	mov	r5, r0
 8008d88:	eb12 0804 	adds.w	r8, r2, r4
 8008d8c:	eb43 0905 	adc.w	r9, r3, r5
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	60fa      	str	r2, [r7, #12]
 8008d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fb9b 	bl	80004dc <__aeabi_uldivmod>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4613      	mov	r3, r2
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008db4:	d308      	bcc.n	8008dc8 <UART_SetConfig+0x218>
 8008db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dbc:	d204      	bcs.n	8008dc8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dc4:	60da      	str	r2, [r3, #12]
 8008dc6:	e003      	b.n	8008dd0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008dce:	e085      	b.n	8008edc <UART_SetConfig+0x32c>
 8008dd0:	e084      	b.n	8008edc <UART_SetConfig+0x32c>
 8008dd2:	bf00      	nop
 8008dd4:	46002400 	.word	0x46002400
 8008dd8:	cfff69f3 	.word	0xcfff69f3
 8008ddc:	56002400 	.word	0x56002400
 8008de0:	40013800 	.word	0x40013800
 8008de4:	40004400 	.word	0x40004400
 8008de8:	40004800 	.word	0x40004800
 8008dec:	40004c00 	.word	0x40004c00
 8008df0:	40005000 	.word	0x40005000
 8008df4:	40006400 	.word	0x40006400
 8008df8:	0801181c 	.word	0x0801181c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e04:	d13c      	bne.n	8008e80 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e08:	2200      	movs	r2, #0
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e12:	f7fd fb15 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e16:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d05e      	beq.n	8008edc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e22:	4a39      	ldr	r2, [pc, #228]	@ (8008f08 <UART_SetConfig+0x358>)
 8008e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e30:	005a      	lsls	r2, r3, #1
 8008e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	085b      	lsrs	r3, r3, #1
 8008e38:	441a      	add	r2, r3
 8008e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e46:	2b0f      	cmp	r3, #15
 8008e48:	d916      	bls.n	8008e78 <UART_SetConfig+0x2c8>
 8008e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e50:	d212      	bcs.n	8008e78 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	f023 030f 	bic.w	r3, r3, #15
 8008e5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5e:	085b      	lsrs	r3, r3, #1
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	e031      	b.n	8008edc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e7e:	e02d      	b.n	8008edc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e82:	2200      	movs	r2, #0
 8008e84:	469a      	mov	sl, r3
 8008e86:	4693      	mov	fp, r2
 8008e88:	4650      	mov	r0, sl
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	f7fd fad8 	bl	8006440 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e90:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d021      	beq.n	8008edc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <UART_SetConfig+0x358>)
 8008e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	441a      	add	r2, r3
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ebe:	2b0f      	cmp	r3, #15
 8008ec0:	d909      	bls.n	8008ed6 <UART_SetConfig+0x326>
 8008ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec8:	d205      	bcs.n	8008ed6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60da      	str	r2, [r3, #12]
 8008ed4:	e002      	b.n	8008edc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eee:	2200      	movs	r2, #0
 8008ef0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3750      	adds	r7, #80	@ 0x50
 8008f00:	46bd      	mov	sp, r7
 8008f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f06:	bf00      	nop
 8008f08:	0801181c 	.word	0x0801181c

08008f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01a      	beq.n	8009022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900a:	d10a      	bne.n	8009022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b098      	sub	sp, #96	@ 0x60
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009060:	f7f8 f888 	bl	8001174 <HAL_GetTick>
 8009064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b08      	cmp	r3, #8
 8009072:	d12f      	bne.n	80090d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800907c:	2200      	movs	r2, #0
 800907e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f88e 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d022      	beq.n	80090d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e6      	bne.n	800908e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e063      	b.n	800919c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d149      	bne.n	8009176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ea:	2200      	movs	r2, #0
 80090ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f857 	bl	80091a4 <UART_WaitOnFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d03c      	beq.n	8009176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	623b      	str	r3, [r7, #32]
   return(result);
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911a:	633b      	str	r3, [r7, #48]	@ 0x30
 800911c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e6      	bne.n	80090fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	60fb      	str	r3, [r7, #12]
   return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800914e:	61fa      	str	r2, [r7, #28]
 8009150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	69b9      	ldr	r1, [r7, #24]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	617b      	str	r3, [r7, #20]
   return(result);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e012      	b.n	800919c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3758      	adds	r7, #88	@ 0x58
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b4:	e04f      	b.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d04b      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091be:	f7f7 ffd9 	bl	8001174 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e04e      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d037      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b80      	cmp	r3, #128	@ 0x80
 80091ea:	d034      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d031      	beq.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d110      	bne.n	8009222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2208      	movs	r2, #8
 8009206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f838 	bl	800927e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2208      	movs	r2, #8
 8009212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e029      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800922c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009230:	d111      	bne.n	8009256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800923a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f81e 	bl	800927e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e00f      	b.n	8009276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4013      	ands	r3, r2
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	bf0c      	ite	eq
 8009266:	2301      	moveq	r3, #1
 8009268:	2300      	movne	r3, #0
 800926a:	b2db      	uxtb	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	429a      	cmp	r2, r3
 8009272:	d0a0      	beq.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b095      	sub	sp, #84	@ 0x54
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800929a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e6      	bne.n	8009286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3308      	adds	r3, #8
 80092da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e3      	bne.n	80092b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d118      	bne.n	800932a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	60bb      	str	r3, [r7, #8]
   return(result);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f023 0310 	bic.w	r3, r3, #16
 800930c:	647b      	str	r3, [r7, #68]	@ 0x44
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	613b      	str	r3, [r7, #16]
   return(result);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e6      	bne.n	80092f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800933e:	bf00      	nop
 8009340:	3754      	adds	r7, #84	@ 0x54
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fc0f 	bl	8008b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b088      	sub	sp, #32
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	60bb      	str	r3, [r7, #8]
   return(result);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	61bb      	str	r3, [r7, #24]
 8009396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6979      	ldr	r1, [r7, #20]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	613b      	str	r3, [r7, #16]
   return(result);
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e6      	bne.n	8009376 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fbda 	bl	8008b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093bc:	bf00      	nop
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_UARTEx_DisableFifoMode+0x16>
 80093fe:	2302      	movs	r3, #2
 8009400:	e027      	b.n	8009452 <HAL_UARTEx_DisableFifoMode+0x66>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2224      	movs	r2, #36	@ 0x24
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009472:	2302      	movs	r3, #2
 8009474:	e02d      	b.n	80094d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2224      	movs	r2, #36	@ 0x24
 8009482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f850 	bl	8009558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e02d      	b.n	800954e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2224      	movs	r2, #36	@ 0x24
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0201 	bic.w	r2, r2, #1
 8009518:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f812 	bl	8009558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2220      	movs	r2, #32
 8009540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009564:	2b00      	cmp	r3, #0
 8009566:	d108      	bne.n	800957a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009578:	e031      	b.n	80095de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957a:	2308      	movs	r3, #8
 800957c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800957e:	2308      	movs	r3, #8
 8009580:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	0e5b      	lsrs	r3, r3, #25
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	0f5b      	lsrs	r3, r3, #29
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	7b3a      	ldrb	r2, [r7, #12]
 80095a6:	4911      	ldr	r1, [pc, #68]	@ (80095ec <UARTEx_SetNbDataToProcess+0x94>)
 80095a8:	5c8a      	ldrb	r2, [r1, r2]
 80095aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095ae:	7b3a      	ldrb	r2, [r7, #12]
 80095b0:	490f      	ldr	r1, [pc, #60]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x98>)
 80095b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	7b7a      	ldrb	r2, [r7, #13]
 80095c4:	4909      	ldr	r1, [pc, #36]	@ (80095ec <UARTEx_SetNbDataToProcess+0x94>)
 80095c6:	5c8a      	ldrb	r2, [r1, r2]
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095cc:	7b7a      	ldrb	r2, [r7, #13]
 80095ce:	4908      	ldr	r1, [pc, #32]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x98>)
 80095d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	08011834 	.word	0x08011834
 80095f0:	0801183c 	.word	0x0801183c

080095f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095f4:	b084      	sub	sp, #16
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	f107 001c 	add.w	r0, r7, #28
 8009602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009606:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800960a:	2b03      	cmp	r3, #3
 800960c:	d105      	bne.n	800961a <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 f940 	bl	800a8a0 <USB_CoreReset>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8009624:	7fbb      	ldrb	r3, [r7, #30]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d10b      	bne.n	8009642 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f043 0208 	orr.w	r2, r3, #8
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f043 0220 	orr.w	r2, r3, #32
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800964e:	b004      	add	sp, #16
 8009650:	4770      	bx	lr
	...

08009654 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d165      	bne.n	8009734 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	4a41      	ldr	r2, [pc, #260]	@ (8009770 <USB_SetTurnaroundTime+0x11c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d906      	bls.n	800967e <USB_SetTurnaroundTime+0x2a>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4a40      	ldr	r2, [pc, #256]	@ (8009774 <USB_SetTurnaroundTime+0x120>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d202      	bcs.n	800967e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009678:	230f      	movs	r3, #15
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e062      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	4a3c      	ldr	r2, [pc, #240]	@ (8009774 <USB_SetTurnaroundTime+0x120>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d306      	bcc.n	8009694 <USB_SetTurnaroundTime+0x40>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	4a3b      	ldr	r2, [pc, #236]	@ (8009778 <USB_SetTurnaroundTime+0x124>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d202      	bcs.n	8009694 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800968e:	230e      	movs	r3, #14
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e057      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4a38      	ldr	r2, [pc, #224]	@ (8009778 <USB_SetTurnaroundTime+0x124>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d306      	bcc.n	80096aa <USB_SetTurnaroundTime+0x56>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a37      	ldr	r2, [pc, #220]	@ (800977c <USB_SetTurnaroundTime+0x128>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d202      	bcs.n	80096aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80096a4:	230d      	movs	r3, #13
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e04c      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4a33      	ldr	r2, [pc, #204]	@ (800977c <USB_SetTurnaroundTime+0x128>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d306      	bcc.n	80096c0 <USB_SetTurnaroundTime+0x6c>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4a32      	ldr	r2, [pc, #200]	@ (8009780 <USB_SetTurnaroundTime+0x12c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d802      	bhi.n	80096c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80096ba:	230c      	movs	r3, #12
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	e041      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009780 <USB_SetTurnaroundTime+0x12c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d906      	bls.n	80096d6 <USB_SetTurnaroundTime+0x82>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009784 <USB_SetTurnaroundTime+0x130>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d802      	bhi.n	80096d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096d0:	230b      	movs	r3, #11
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e036      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4a2a      	ldr	r2, [pc, #168]	@ (8009784 <USB_SetTurnaroundTime+0x130>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d906      	bls.n	80096ec <USB_SetTurnaroundTime+0x98>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	4a29      	ldr	r2, [pc, #164]	@ (8009788 <USB_SetTurnaroundTime+0x134>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d802      	bhi.n	80096ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096e6:	230a      	movs	r3, #10
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e02b      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4a26      	ldr	r2, [pc, #152]	@ (8009788 <USB_SetTurnaroundTime+0x134>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d906      	bls.n	8009702 <USB_SetTurnaroundTime+0xae>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4a25      	ldr	r2, [pc, #148]	@ (800978c <USB_SetTurnaroundTime+0x138>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d202      	bcs.n	8009702 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096fc:	2309      	movs	r3, #9
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e020      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4a21      	ldr	r2, [pc, #132]	@ (800978c <USB_SetTurnaroundTime+0x138>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d306      	bcc.n	8009718 <USB_SetTurnaroundTime+0xc4>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4a20      	ldr	r2, [pc, #128]	@ (8009790 <USB_SetTurnaroundTime+0x13c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d802      	bhi.n	8009718 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009712:	2308      	movs	r3, #8
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e015      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4a1d      	ldr	r2, [pc, #116]	@ (8009790 <USB_SetTurnaroundTime+0x13c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d906      	bls.n	800972e <USB_SetTurnaroundTime+0xda>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4a1c      	ldr	r2, [pc, #112]	@ (8009794 <USB_SetTurnaroundTime+0x140>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d202      	bcs.n	800972e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009728:	2307      	movs	r3, #7
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e00a      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800972e:	2306      	movs	r3, #6
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	e007      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800973a:	2309      	movs	r3, #9
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e001      	b.n	8009744 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009740:	2309      	movs	r3, #9
 8009742:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	029b      	lsls	r3, r3, #10
 8009758:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	00d8acbf 	.word	0x00d8acbf
 8009774:	00e4e1c0 	.word	0x00e4e1c0
 8009778:	00f42400 	.word	0x00f42400
 800977c:	01067380 	.word	0x01067380
 8009780:	011a499f 	.word	0x011a499f
 8009784:	01312cff 	.word	0x01312cff
 8009788:	014ca43f 	.word	0x014ca43f
 800978c:	016e3600 	.word	0x016e3600
 8009790:	01a6ab1f 	.word	0x01a6ab1f
 8009794:	01e84800 	.word	0x01e84800

08009798 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f023 0201 	bic.w	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d115      	bne.n	8009808 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097e8:	200a      	movs	r0, #10
 80097ea:	f7f7 fccf 	bl	800118c <HAL_Delay>
      ms += 10U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	330a      	adds	r3, #10
 80097f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 ffc3 	bl	800a780 <USB_GetMode>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d01e      	beq.n	800983e <USB_SetCurrentMode+0x84>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2bc7      	cmp	r3, #199	@ 0xc7
 8009804:	d9f0      	bls.n	80097e8 <USB_SetCurrentMode+0x2e>
 8009806:	e01a      	b.n	800983e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d115      	bne.n	800983a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800981a:	200a      	movs	r0, #10
 800981c:	f7f7 fcb6 	bl	800118c <HAL_Delay>
      ms += 10U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	330a      	adds	r3, #10
 8009824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 ffaa 	bl	800a780 <USB_GetMode>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <USB_SetCurrentMode+0x84>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2bc7      	cmp	r3, #199	@ 0xc7
 8009836:	d9f0      	bls.n	800981a <USB_SetCurrentMode+0x60>
 8009838:	e001      	b.n	800983e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e005      	b.n	800984a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2bc8      	cmp	r3, #200	@ 0xc8
 8009842:	d101      	bne.n	8009848 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009854:	b084      	sub	sp, #16
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800986e:	2300      	movs	r3, #0
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	e009      	b.n	8009888 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	3340      	adds	r3, #64	@ 0x40
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	2200      	movs	r2, #0
 8009880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	3301      	adds	r3, #1
 8009886:	613b      	str	r3, [r7, #16]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b0e      	cmp	r3, #14
 800988c:	d9f2      	bls.n	8009874 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800989a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d11c      	bne.n	80098dc <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80098da:	e011      	b.n	8009900 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009906:	461a      	mov	r2, r3
 8009908:	2300      	movs	r3, #0
 800990a:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800990c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009910:	2b03      	cmp	r3, #3
 8009912:	d10d      	bne.n	8009930 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f968 	bl	8009bf4 <USB_SetDevSpeed>
 8009924:	e008      	b.n	8009938 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009926:	2101      	movs	r1, #1
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f963 	bl	8009bf4 <USB_SetDevSpeed>
 800992e:	e003      	b.n	8009938 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009930:	2103      	movs	r1, #3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f95e 	bl	8009bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009938:	2110      	movs	r1, #16
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f8fa 	bl	8009b34 <USB_FlushTxFifo>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f924 	bl	8009b98 <USB_FlushRxFifo>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	461a      	mov	r2, r3
 800996e:	2300      	movs	r3, #0
 8009970:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009978:	461a      	mov	r2, r3
 800997a:	2300      	movs	r3, #0
 800997c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	e043      	b.n	8009a0c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800999a:	d118      	bne.n	80099ce <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ae:	461a      	mov	r2, r3
 80099b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	e013      	b.n	80099e0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c4:	461a      	mov	r2, r3
 80099c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e008      	b.n	80099e0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099da:	461a      	mov	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ec:	461a      	mov	r2, r3
 80099ee:	2300      	movs	r3, #0
 80099f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fe:	461a      	mov	r2, r3
 8009a00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a10:	461a      	mov	r2, r3
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d3b5      	bcc.n	8009984 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	e043      	b.n	8009aa6 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a34:	d118      	bne.n	8009a68 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	e013      	b.n	8009a7a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	e008      	b.n	8009a7a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a74:	461a      	mov	r2, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a86:	461a      	mov	r2, r3
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009aaa:	461a      	mov	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d3b5      	bcc.n	8009a1e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ac4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ad2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f043 0210 	orr.w	r2, r3, #16
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	4b10      	ldr	r3, [pc, #64]	@ (8009b30 <USB_DevInit+0x2dc>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f043 0208 	orr.w	r2, r3, #8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d107      	bne.n	8009b20 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b18:	f043 0304 	orr.w	r3, r3, #4
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b2c:	b004      	add	sp, #16
 8009b2e:	4770      	bx	lr
 8009b30:	803c3800 	.word	0x803c3800

08009b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b4e:	d901      	bls.n	8009b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e01b      	b.n	8009b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	daf2      	bge.n	8009b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	019b      	lsls	r3, r3, #6
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b78:	d901      	bls.n	8009b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e006      	b.n	8009b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	d0f0      	beq.n	8009b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bb0:	d901      	bls.n	8009bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e018      	b.n	8009be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	daf2      	bge.n	8009ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2210      	movs	r2, #16
 8009bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bd4:	d901      	bls.n	8009bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e006      	b.n	8009be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d0f0      	beq.n	8009bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 0306 	and.w	r3, r3, #6
 8009c3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
 8009c4a:	e00a      	b.n	8009c62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d002      	beq.n	8009c58 <USB_GetDevSpeed+0x32>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b06      	cmp	r3, #6
 8009c56:	d102      	bne.n	8009c5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	75fb      	strb	r3, [r7, #23]
 8009c5c:	e001      	b.n	8009c62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c5e:	230f      	movs	r3, #15
 8009c60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d13a      	bne.n	8009d02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009caa:	4313      	orrs	r3, r2
 8009cac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d155      	bne.n	8009d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ce0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	e036      	b.n	8009d70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d08:	69da      	ldr	r2, [r3, #28]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	2101      	movs	r1, #1
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	041b      	lsls	r3, r3, #16
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d11a      	bne.n	8009d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d56:	430b      	orrs	r3, r1
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	0151      	lsls	r1, r2, #5
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	440a      	add	r2, r1
 8009d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	@ 0x28
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	f040 817f 	bne.w	800a0a0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d132      	bne.n	8009e10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dc4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dc8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	69ba      	ldr	r2, [r7, #24]
 8009dde:	0151      	lsls	r1, r2, #5
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	440a      	add	r2, r1
 8009de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009de8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	0151      	lsls	r1, r2, #5
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	440a      	add	r2, r1
 8009e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e08:	0cdb      	lsrs	r3, r3, #19
 8009e0a:	04db      	lsls	r3, r3, #19
 8009e0c:	6113      	str	r3, [r2, #16]
 8009e0e:	e097      	b.n	8009f40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2a:	0cdb      	lsrs	r3, r3, #19
 8009e2c:	04db      	lsls	r3, r3, #19
 8009e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d11a      	bne.n	8009e90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d903      	bls.n	8009e6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	0151      	lsls	r1, r2, #5
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	440a      	add	r2, r1
 8009e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e8c:	6113      	str	r3, [r2, #16]
 8009e8e:	e044      	b.n	8009f1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4413      	add	r3, r2
 8009e9a:	1e5a      	subs	r2, r3, #1
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb2:	691a      	ldr	r2, [r3, #16]
 8009eb4:	8afb      	ldrh	r3, [r7, #22]
 8009eb6:	04d9      	lsls	r1, r3, #19
 8009eb8:	4ba4      	ldr	r3, [pc, #656]	@ (800a14c <USB_EPStartXfer+0x3cc>)
 8009eba:	400b      	ands	r3, r1
 8009ebc:	69b9      	ldr	r1, [r7, #24]
 8009ebe:	0148      	lsls	r0, r1, #5
 8009ec0:	69f9      	ldr	r1, [r7, #28]
 8009ec2:	4401      	add	r1, r0
 8009ec4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	791b      	ldrb	r3, [r3, #4]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d122      	bne.n	8009f1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	0151      	lsls	r1, r2, #5
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	440a      	add	r2, r1
 8009eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ef2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	8afb      	ldrh	r3, [r7, #22]
 8009f04:	075b      	lsls	r3, r3, #29
 8009f06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009f0a:	69b9      	ldr	r1, [r7, #24]
 8009f0c:	0148      	lsls	r0, r1, #5
 8009f0e:	69f9      	ldr	r1, [r7, #28]
 8009f10:	4401      	add	r1, r0
 8009f12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f16:	4313      	orrs	r3, r2
 8009f18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f30:	69b9      	ldr	r1, [r7, #24]
 8009f32:	0148      	lsls	r0, r1, #5
 8009f34:	69f9      	ldr	r1, [r7, #28]
 8009f36:	4401      	add	r1, r0
 8009f38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d14b      	bne.n	8009fde <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	791b      	ldrb	r3, [r3, #4]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d128      	bne.n	8009fbc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d110      	bne.n	8009f9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	e00f      	b.n	8009fbc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	e166      	b.n	800a2ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ffc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	791b      	ldrb	r3, [r3, #4]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d015      	beq.n	800a032 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 814e 	beq.w	800a2ac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f003 030f 	and.w	r3, r3, #15
 800a020:	2101      	movs	r1, #1
 800a022:	fa01 f303 	lsl.w	r3, r1, r3
 800a026:	69f9      	ldr	r1, [r7, #28]
 800a028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a02c:	4313      	orrs	r3, r2
 800a02e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a030:	e13c      	b.n	800a2ac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d110      	bne.n	800a064 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	0151      	lsls	r1, r2, #5
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	440a      	add	r2, r1
 800a058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a05c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	e00f      	b.n	800a084 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a082:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	68d9      	ldr	r1, [r3, #12]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	b298      	uxth	r0, r3
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	4603      	mov	r3, r0
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f9b9 	bl	800a410 <USB_WritePacket>
 800a09e:	e105      	b.n	800a2ac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	0151      	lsls	r1, r2, #5
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	440a      	add	r2, r1
 800a0b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ba:	0cdb      	lsrs	r3, r3, #19
 800a0bc:	04db      	lsls	r3, r3, #19
 800a0be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	0151      	lsls	r1, r2, #5
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	440a      	add	r2, r1
 800a0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0e2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d132      	bne.n	800a150 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10e:	691a      	ldr	r2, [r3, #16]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a118:	69b9      	ldr	r1, [r7, #24]
 800a11a:	0148      	lsls	r0, r1, #5
 800a11c:	69f9      	ldr	r1, [r7, #28]
 800a11e:	4401      	add	r1, r0
 800a120:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a124:	4313      	orrs	r3, r2
 800a126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a146:	6113      	str	r3, [r2, #16]
 800a148:	e062      	b.n	800a210 <USB_EPStartXfer+0x490>
 800a14a:	bf00      	nop
 800a14c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d123      	bne.n	800a1a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a164:	691a      	ldr	r2, [r3, #16]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a16e:	69b9      	ldr	r1, [r7, #24]
 800a170:	0148      	lsls	r0, r1, #5
 800a172:	69f9      	ldr	r1, [r7, #28]
 800a174:	4401      	add	r1, r0
 800a176:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a17a:	4313      	orrs	r3, r2
 800a17c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a19c:	6113      	str	r3, [r2, #16]
 800a19e:	e037      	b.n	800a210 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	1e5a      	subs	r2, r3, #1
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	8afa      	ldrh	r2, [r7, #22]
 800a1bc:	fb03 f202 	mul.w	r2, r3, r2
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d0:	691a      	ldr	r2, [r3, #16]
 800a1d2:	8afb      	ldrh	r3, [r7, #22]
 800a1d4:	04d9      	lsls	r1, r3, #19
 800a1d6:	4b38      	ldr	r3, [pc, #224]	@ (800a2b8 <USB_EPStartXfer+0x538>)
 800a1d8:	400b      	ands	r3, r1
 800a1da:	69b9      	ldr	r1, [r7, #24]
 800a1dc:	0148      	lsls	r0, r1, #5
 800a1de:	69f9      	ldr	r1, [r7, #28]
 800a1e0:	4401      	add	r1, r0
 800a1e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a200:	69b9      	ldr	r1, [r7, #24]
 800a202:	0148      	lsls	r0, r1, #5
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	4401      	add	r1, r0
 800a208:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a20c:	4313      	orrs	r3, r2
 800a20e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d10d      	bne.n	800a232 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d009      	beq.n	800a232 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	68d9      	ldr	r1, [r3, #12]
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22e:	460a      	mov	r2, r1
 800a230:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d128      	bne.n	800a28c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a246:	2b00      	cmp	r3, #0
 800a248:	d110      	bne.n	800a26c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	e00f      	b.n	800a28c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a28a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	1ff80000 	.word	0x1ff80000

0800a2bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d14a      	bne.n	800a370 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2f2:	f040 8086 	bne.w	800a402 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	7812      	ldrb	r2, [r2, #0]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a314:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a318:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	7812      	ldrb	r2, [r2, #0]
 800a32e:	0151      	lsls	r1, r2, #5
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	440a      	add	r2, r1
 800a334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a338:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a33c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d902      	bls.n	800a354 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	75fb      	strb	r3, [r7, #23]
          break;
 800a352:	e056      	b.n	800a402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a36c:	d0e7      	beq.n	800a33e <USB_EPStopXfer+0x82>
 800a36e:	e048      	b.n	800a402 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a388:	d13b      	bne.n	800a402 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	0151      	lsls	r1, r2, #5
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	440a      	add	r2, r1
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d902      	bls.n	800a3e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3e6:	e00c      	b.n	800a402 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a400:	d0e7      	beq.n	800a3d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a402:	7dfb      	ldrb	r3, [r7, #23]
}
 800a404:	4618      	mov	r0, r3
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a410:	b480      	push	{r7}
 800a412:	b089      	sub	sp, #36	@ 0x24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4611      	mov	r1, r2
 800a41c:	461a      	mov	r2, r3
 800a41e:	460b      	mov	r3, r1
 800a420:	71fb      	strb	r3, [r7, #7]
 800a422:	4613      	mov	r3, r2
 800a424:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a42e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d123      	bne.n	800a47e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a436:	88bb      	ldrh	r3, [r7, #4]
 800a438:	3303      	adds	r3, #3
 800a43a:	089b      	lsrs	r3, r3, #2
 800a43c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a43e:	2300      	movs	r3, #0
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	e018      	b.n	800a476 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	031a      	lsls	r2, r3, #12
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a450:	461a      	mov	r2, r3
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	3301      	adds	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	3301      	adds	r3, #1
 800a462:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	3301      	adds	r3, #1
 800a468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	3301      	adds	r3, #1
 800a46e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	3301      	adds	r3, #1
 800a474:	61bb      	str	r3, [r7, #24]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d3e2      	bcc.n	800a444 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3724      	adds	r7, #36	@ 0x24
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b08b      	sub	sp, #44	@ 0x2c
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	089b      	lsrs	r3, r3, #2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4aa:	88fb      	ldrh	r3, [r7, #6]
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	623b      	str	r3, [r7, #32]
 800a4b6:	e014      	b.n	800a4e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	3301      	adds	r3, #1
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	623b      	str	r3, [r7, #32]
 800a4e2:	6a3a      	ldr	r2, [r7, #32]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d3e6      	bcc.n	800a4b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4ea:	8bfb      	ldrh	r3, [r7, #30]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01e      	beq.n	800a52e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f107 0310 	add.w	r3, r7, #16
 800a500:	6812      	ldr	r2, [r2, #0]
 800a502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	00db      	lsls	r3, r3, #3
 800a50c:	fa22 f303 	lsr.w	r3, r2, r3
 800a510:	b2da      	uxtb	r2, r3
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	701a      	strb	r2, [r3, #0]
      i++;
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	3301      	adds	r3, #1
 800a51a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	3301      	adds	r3, #1
 800a520:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a522:	8bfb      	ldrh	r3, [r7, #30]
 800a524:	3b01      	subs	r3, #1
 800a526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a528:	8bfb      	ldrh	r3, [r7, #30]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1ea      	bne.n	800a504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a530:	4618      	mov	r0, r3
 800a532:	372c      	adds	r7, #44	@ 0x2c
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	785b      	ldrb	r3, [r3, #1]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d12c      	bne.n	800a5b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	db12      	blt.n	800a590 <USB_EPSetStall+0x54>
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00f      	beq.n	800a590 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a58a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a58e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	e02b      	b.n	800a60a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	db12      	blt.n	800a5ea <USB_EPSetStall+0xae>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00f      	beq.n	800a5ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	0151      	lsls	r1, r2, #5
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	440a      	add	r2, r1
 800a600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a608:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a632:	f023 0303 	bic.w	r3, r3, #3
 800a636:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a646:	f043 0302 	orr.w	r3, r3, #2
 800a64a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4013      	ands	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a672:	68fb      	ldr	r3, [r7, #12]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	0c1b      	lsrs	r3, r3, #16
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	b29b      	uxth	r3, r3
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	4013      	ands	r3, r2
 800a714:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a716:	68bb      	ldr	r3, [r7, #8]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a746:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
 800a754:	01db      	lsls	r3, r3, #7
 800a756:	b2db      	uxtb	r3, r3
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4013      	ands	r3, r2
 800a770:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a772:	68bb      	ldr	r3, [r7, #8]
}
 800a774:	4618      	mov	r0, r3
 800a776:	371c      	adds	r7, #28
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	f003 0301 	and.w	r3, r3, #1
}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	333c      	adds	r3, #60	@ 0x3c
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	4a26      	ldr	r2, [pc, #152]	@ (800a89c <USB_EP0_OutStart+0xb8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d90a      	bls.n	800a81e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a818:	d101      	bne.n	800a81e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e037      	b.n	800a88e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a824:	461a      	mov	r2, r3
 800a826:	2300      	movs	r3, #0
 800a828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a838:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a83c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a84c:	f043 0318 	orr.w	r3, r3, #24
 800a850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a860:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a864:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d10f      	bne.n	800a88c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a886:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a88a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	4f54300a 	.word	0x4f54300a

0800a8a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8b8:	d901      	bls.n	800a8be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e01b      	b.n	800a8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	daf2      	bge.n	800a8ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f043 0201 	orr.w	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8e2:	d901      	bls.n	800a8e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e006      	b.n	800a8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d0f0      	beq.n	800a8d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
	...

0800a904 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b096      	sub	sp, #88	@ 0x58
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3303      	adds	r3, #3
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a91c:	f3ef 8310 	mrs	r3, PRIMASK
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800a922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800a924:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a926:	b672      	cpsid	i
#endif
    return(int_posture);
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a92a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a92c:	4b55      	ldr	r3, [pc, #340]	@ (800aa84 <_tx_byte_allocate+0x180>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a93a:	621a      	str	r2, [r3, #32]
 800a93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a93e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	f383 8810 	msr	PRIMASK, r3
}
 800a946:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f9b2 	bl	800acb4 <_tx_byte_pool_search>
 800a950:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a952:	f3ef 8310 	mrs	r3, PRIMASK
 800a956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a95a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a95c:	b672      	cpsid	i
    return(int_posture);
 800a95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a960:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a96c:	e006      	b.n	800a97c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a974:	429a      	cmp	r2, r3
 800a976:	d101      	bne.n	800a97c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a978:	2301      	movs	r3, #1
 800a97a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0d9      	beq.n	800a936 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a986:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d008      	beq.n	800a9a0 <_tx_byte_allocate+0x9c>
 800a98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a990:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	f383 8810 	msr	PRIMASK, r3
}
 800a998:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a99a:	2300      	movs	r3, #0
 800a99c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a99e:	e06c      	b.n	800aa7a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d061      	beq.n	800aa6a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a9a6:	4b38      	ldr	r3, [pc, #224]	@ (800aa88 <_tx_byte_allocate+0x184>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f383 8810 	msr	PRIMASK, r3
}
 800a9bc:	e05d      	b.n	800aa7a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a9be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9c0:	4a32      	ldr	r2, [pc, #200]	@ (800aa8c <_tx_byte_allocate+0x188>)
 800a9c2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a9d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9dc:	1c5a      	adds	r2, r3, #1
 800a9de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9fe:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800aa00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa04:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800aa06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa0a:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa0c:	e011      	b.n	800aa32 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800aa14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa18:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800aa1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa1e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800aa20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa24:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa2a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800aa2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa30:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800aa32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa34:	2209      	movs	r2, #9
 800aa36:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aa38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800aa3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800aa44:	4b10      	ldr	r3, [pc, #64]	@ (800aa88 <_tx_byte_allocate+0x184>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa88 <_tx_byte_allocate+0x184>)
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	f383 8810 	msr	PRIMASK, r3
}
 800aa58:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800aa5a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800aa5c:	f001 fd7a 	bl	800c554 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800aa60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa66:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa68:	e007      	b.n	800aa7a <_tx_byte_allocate+0x176>
 800aa6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f383 8810 	msr	PRIMASK, r3
}
 800aa74:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800aa76:	2310      	movs	r3, #16
 800aa78:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800aa7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3758      	adds	r7, #88	@ 0x58
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20003018 	.word	0x20003018
 800aa88:	200030b0 	.word	0x200030b0
 800aa8c:	0800aa91 	.word	0x0800aa91

0800aa90 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08e      	sub	sp, #56	@ 0x38
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa9a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9e:	623b      	str	r3, [r7, #32]
    return(posture);
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aaa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aaa4:	b672      	cpsid	i
    return(int_posture);
 800aaa6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaae:	4a33      	ldr	r2, [pc, #204]	@ (800ab7c <_tx_byte_pool_cleanup+0xec>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d158      	bne.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d152      	bne.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aac4:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d04c      	beq.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800aacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a2b      	ldr	r2, [pc, #172]	@ (800ab80 <_tx_byte_pool_cleanup+0xf0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d147      	bne.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d043      	beq.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaec:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800aaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d103      	bne.n	800ab02 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	2200      	movs	r2, #0
 800aafe:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab00:	e013      	b.n	800ab2a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab06:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab0c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab12:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab18:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d102      	bne.n	800ab2a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab28:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d119      	bne.n	800ab66 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2210      	movs	r2, #16
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ab3a:	4b12      	ldr	r3, [pc, #72]	@ (800ab84 <_tx_byte_pool_cleanup+0xf4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	4a10      	ldr	r2, [pc, #64]	@ (800ab84 <_tx_byte_pool_cleanup+0xf4>)
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab46:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f383 8810 	msr	PRIMASK, r3
}
 800ab4e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 fbff 	bl	800c354 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab56:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab5c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab5e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab60:	b672      	cpsid	i
    return(int_posture);
 800ab62:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f383 8810 	msr	PRIMASK, r3
}
 800ab70:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ab72:	bf00      	nop
 800ab74:	3738      	adds	r7, #56	@ 0x38
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	0800aa91 	.word	0x0800aa91
 800ab80:	42595445 	.word	0x42595445
 800ab84:	200030b0 	.word	0x200030b0

0800ab88 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	@ 0x38
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ab96:	2234      	movs	r2, #52	@ 0x34
 800ab98:	2100      	movs	r1, #0
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f006 fd10 	bl	80115c0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	f1a3 0208 	sub.w	r2, r3, #8
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2202      	movs	r2, #2
 800abd4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800abda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	4413      	add	r3, r2
 800abe0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800abe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abe4:	3b04      	subs	r3, #4
 800abe6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800abec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800abf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800abf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf8:	3b04      	subs	r3, #4
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac12:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ac18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac20:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <_tx_byte_pool_create+0x11c>)
 800ac26:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac32:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ac34:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ac36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac38:	b672      	cpsid	i
    return(int_posture);
 800ac3a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ac3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4a19      	ldr	r2, [pc, #100]	@ (800aca8 <_tx_byte_pool_create+0x120>)
 800ac42:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ac44:	4b19      	ldr	r3, [pc, #100]	@ (800acac <_tx_byte_pool_create+0x124>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ac4c:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <_tx_byte_pool_create+0x128>)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac5e:	e011      	b.n	800ac84 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ac60:	4b13      	ldr	r3, [pc, #76]	@ (800acb0 <_tx_byte_pool_create+0x128>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac6a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6a3a      	ldr	r2, [r7, #32]
 800ac82:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ac84:	4b09      	ldr	r3, [pc, #36]	@ (800acac <_tx_byte_pool_create+0x124>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	4a08      	ldr	r2, [pc, #32]	@ (800acac <_tx_byte_pool_create+0x124>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f383 8810 	msr	PRIMASK, r3
}
 800ac98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3738      	adds	r7, #56	@ 0x38
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	ffffeeee 	.word	0xffffeeee
 800aca8:	42595445 	.word	0x42595445
 800acac:	2000300c 	.word	0x2000300c
 800acb0:	20003008 	.word	0x20003008

0800acb4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b097      	sub	sp, #92	@ 0x5c
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800acbe:	2300      	movs	r3, #0
 800acc0:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acc2:	f3ef 8310 	mrs	r3, PRIMASK
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800acca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800accc:	b672      	cpsid	i
    return(int_posture);
 800acce:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800acd0:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689a      	ldr	r2, [r3, #8]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	3b02      	subs	r3, #2
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4413      	add	r3, r2
 800ace0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d308      	bcc.n	800acfc <_tx_byte_pool_search+0x48>
 800acea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	f383 8810 	msr	PRIMASK, r3
}
 800acf4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	653b      	str	r3, [r7, #80]	@ 0x50
 800acfa:	e0dd      	b.n	800aeb8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800acfc:	4b72      	ldr	r3, [pc, #456]	@ (800aec8 <_tx_byte_pool_search+0x214>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad06:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	3301      	adds	r3, #1
 800ad14:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800ad16:	2300      	movs	r3, #0
 800ad18:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ad1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ad20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a68      	ldr	r2, [pc, #416]	@ (800aecc <_tx_byte_pool_search+0x218>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d143      	bne.n	800adb6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ad2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad38:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ad3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad40:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800ad42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800ad48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ad50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad52:	3b08      	subs	r3, #8
 800ad54:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800ad56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d257      	bcs.n	800ae0e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800ad5e:	2300      	movs	r3, #0
 800ad60:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ad62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad64:	3304      	adds	r3, #4
 800ad66:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ad68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ad6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a56      	ldr	r2, [pc, #344]	@ (800aecc <_tx_byte_pool_search+0x218>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d113      	bne.n	800ad9e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ad76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad78:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	1e5a      	subs	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d114      	bne.n	800adc0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad9a:	615a      	str	r2, [r3, #20]
 800ad9c:	e010      	b.n	800adc0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ada8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d008      	beq.n	800adc0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800adae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb0:	3b01      	subs	r3, #1
 800adb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adb4:	e004      	b.n	800adc0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800adb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adb8:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800adba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800adc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800adc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc8:	3b01      	subs	r3, #1
 800adca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f383 8810 	msr	PRIMASK, r3
}
 800add6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800add8:	f3ef 8310 	mrs	r3, PRIMASK
 800addc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800adde:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ade0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ade2:	b672      	cpsid	i
    return(int_posture);
 800ade4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ade6:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a1b      	ldr	r3, [r3, #32]
 800adec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adee:	429a      	cmp	r2, r3
 800adf0:	d009      	beq.n	800ae06 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	3301      	adds	r3, #1
 800adfe:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae04:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ae06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d186      	bne.n	800ad1a <_tx_byte_pool_search+0x66>
 800ae0c:	e000      	b.n	800ae10 <_tx_byte_pool_search+0x15c>
                    break;
 800ae0e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ae10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d048      	beq.n	800aea8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ae16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b13      	cmp	r3, #19
 800ae1e:	d91e      	bls.n	800ae5e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae26:	4413      	add	r3, r2
 800ae28:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ae2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae30:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae38:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae42:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	4a21      	ldr	r2, [pc, #132]	@ (800aecc <_tx_byte_pool_search+0x218>)
 800ae48:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae58:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ae5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae60:	3304      	adds	r3, #4
 800ae62:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ae64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae66:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689a      	ldr	r2, [r3, #8]
 800ae72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	f1a3 0208 	sub.w	r2, r3, #8
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d105      	bne.n	800ae94 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ae88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae8a:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	615a      	str	r2, [r3, #20]
 800ae94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f383 8810 	msr	PRIMASK, r3
}
 800ae9e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800aea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea2:	3308      	adds	r3, #8
 800aea4:	653b      	str	r3, [r7, #80]	@ 0x50
 800aea6:	e007      	b.n	800aeb8 <_tx_byte_pool_search+0x204>
 800aea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeaa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f383 8810 	msr	PRIMASK, r3
}
 800aeb2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800aeb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	375c      	adds	r7, #92	@ 0x5c
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20003018 	.word	0x20003018
 800aecc:	ffffeeee 	.word	0xffffeeee

0800aed0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800aed4:	f001 f8fc 	bl	800c0d0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800aed8:	f001 fd04 	bl	800c8e4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800aedc:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <_tx_initialize_high_level+0x58>)
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	4b12      	ldr	r3, [pc, #72]	@ (800af2c <_tx_initialize_high_level+0x5c>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800aee8:	4b11      	ldr	r3, [pc, #68]	@ (800af30 <_tx_initialize_high_level+0x60>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	4b11      	ldr	r3, [pc, #68]	@ (800af34 <_tx_initialize_high_level+0x64>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800aef4:	4b10      	ldr	r3, [pc, #64]	@ (800af38 <_tx_initialize_high_level+0x68>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	4b10      	ldr	r3, [pc, #64]	@ (800af3c <_tx_initialize_high_level+0x6c>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800af00:	4b0f      	ldr	r3, [pc, #60]	@ (800af40 <_tx_initialize_high_level+0x70>)
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <_tx_initialize_high_level+0x74>)
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800af0c:	4b0e      	ldr	r3, [pc, #56]	@ (800af48 <_tx_initialize_high_level+0x78>)
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	4b0e      	ldr	r3, [pc, #56]	@ (800af4c <_tx_initialize_high_level+0x7c>)
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800af18:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <_tx_initialize_high_level+0x80>)
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <_tx_initialize_high_level+0x84>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
#endif
}
 800af24:	bf00      	nop
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20002fe0 	.word	0x20002fe0
 800af2c:	20002fe4 	.word	0x20002fe4
 800af30:	20002fe8 	.word	0x20002fe8
 800af34:	20002fec 	.word	0x20002fec
 800af38:	20002ff0 	.word	0x20002ff0
 800af3c:	20002ff4 	.word	0x20002ff4
 800af40:	20003000 	.word	0x20003000
 800af44:	20003004 	.word	0x20003004
 800af48:	20003008 	.word	0x20003008
 800af4c:	2000300c 	.word	0x2000300c
 800af50:	20002ff8 	.word	0x20002ff8
 800af54:	20002ffc 	.word	0x20002ffc

0800af58 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800af5c:	4b10      	ldr	r3, [pc, #64]	@ (800afa0 <_tx_initialize_kernel_enter+0x48>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800af64:	d00c      	beq.n	800af80 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800af66:	4b0e      	ldr	r3, [pc, #56]	@ (800afa0 <_tx_initialize_kernel_enter+0x48>)
 800af68:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800af6c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800af6e:	f7f5 f98f 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800af72:	f7ff ffad 	bl	800aed0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800af76:	4b0b      	ldr	r3, [pc, #44]	@ (800afa4 <_tx_initialize_kernel_enter+0x4c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3301      	adds	r3, #1
 800af7c:	4a09      	ldr	r2, [pc, #36]	@ (800afa4 <_tx_initialize_kernel_enter+0x4c>)
 800af7e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <_tx_initialize_kernel_enter+0x48>)
 800af82:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800af86:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800af88:	4b07      	ldr	r3, [pc, #28]	@ (800afa8 <_tx_initialize_kernel_enter+0x50>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7f5 fc41 	bl	8000814 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800af92:	4b03      	ldr	r3, [pc, #12]	@ (800afa0 <_tx_initialize_kernel_enter+0x48>)
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800af98:	f7f5 f9b6 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800af9c:	bf00      	nop
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	2000000c 	.word	0x2000000c
 800afa4:	200030b0 	.word	0x200030b0
 800afa8:	20003010 	.word	0x20003010

0800afac <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08e      	sub	sp, #56	@ 0x38
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afb6:	f3ef 8310 	mrs	r3, PRIMASK
 800afba:	623b      	str	r3, [r7, #32]
    return(posture);
 800afbc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800afbe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afc0:	b672      	cpsid	i
    return(int_posture);
 800afc2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afca:	4a33      	ldr	r2, [pc, #204]	@ (800b098 <_tx_mutex_cleanup+0xec>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d158      	bne.n	800b082 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d152      	bne.n	800b082 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afe0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800afe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d04c      	beq.n	800b082 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a2b      	ldr	r2, [pc, #172]	@ (800b09c <_tx_mutex_cleanup+0xf0>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d147      	bne.n	800b082 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d043      	beq.n	800b082 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	619a      	str	r2, [r3, #24]
 800b01c:	e013      	b.n	800b046 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b022:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b028:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b02e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b034:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d102      	bne.n	800b046 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800b040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b044:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04a:	2b0d      	cmp	r3, #13
 800b04c:	d119      	bne.n	800b082 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	221d      	movs	r2, #29
 800b052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b056:	4b12      	ldr	r3, [pc, #72]	@ (800b0a0 <_tx_mutex_cleanup+0xf4>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3301      	adds	r3, #1
 800b05c:	4a10      	ldr	r2, [pc, #64]	@ (800b0a0 <_tx_mutex_cleanup+0xf4>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b062:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f383 8810 	msr	PRIMASK, r3
}
 800b06a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f971 	bl	800c354 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b072:	f3ef 8310 	mrs	r3, PRIMASK
 800b076:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b078:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b07a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b07c:	b672      	cpsid	i
    return(int_posture);
 800b07e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
 800b082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b084:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f383 8810 	msr	PRIMASK, r3
}
 800b08c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b08e:	bf00      	nop
 800b090:	3738      	adds	r7, #56	@ 0x38
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800afad 	.word	0x0800afad
 800b09c:	4d555445 	.word	0x4d555445
 800b0a0:	200030b0 	.word	0x200030b0

0800b0a4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	@ 0x28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b0b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b0b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b0b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0b6:	b672      	cpsid	i
    return(int_posture);
 800b0b8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800b0ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b128 <_tx_mutex_thread_release+0x84>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	4a19      	ldr	r2, [pc, #100]	@ (800b128 <_tx_mutex_thread_release+0x84>)
 800b0c4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0cc:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d017      	beq.n	800b104 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	609a      	str	r2, [r3, #8]
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f383 8810 	msr	PRIMASK, r3
}
 800b0e4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800b0e6:	6a38      	ldr	r0, [r7, #32]
 800b0e8:	f000 fb9c 	bl	800b824 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f0:	617b      	str	r3, [r7, #20]
    return(posture);
 800b0f2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b0f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0f6:	b672      	cpsid	i
    return(int_posture);
 800b0f8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b102:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1dd      	bne.n	800b0c6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800b10a:	4b07      	ldr	r3, [pc, #28]	@ (800b128 <_tx_mutex_thread_release+0x84>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3b01      	subs	r3, #1
 800b110:	4a05      	ldr	r2, [pc, #20]	@ (800b128 <_tx_mutex_thread_release+0x84>)
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f383 8810 	msr	PRIMASK, r3
}
 800b11e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b120:	bf00      	nop
 800b122:	3728      	adds	r7, #40	@ 0x28
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	200030b0 	.word	0x200030b0

0800b12c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	@ 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800b138:	2234      	movs	r2, #52	@ 0x34
 800b13a:	2100      	movs	r1, #0
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f006 fa3f 	bl	80115c0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b14e:	f3ef 8310 	mrs	r3, PRIMASK
 800b152:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b154:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b156:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b158:	b672      	cpsid	i
    return(int_posture);
 800b15a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4a1a      	ldr	r2, [pc, #104]	@ (800b1cc <_tx_mutex_create+0xa0>)
 800b162:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800b164:	4b1a      	ldr	r3, [pc, #104]	@ (800b1d0 <_tx_mutex_create+0xa4>)
 800b166:	4a1b      	ldr	r2, [pc, #108]	@ (800b1d4 <_tx_mutex_create+0xa8>)
 800b168:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800b16a:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d8 <_tx_mutex_create+0xac>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800b172:	4a1a      	ldr	r2, [pc, #104]	@ (800b1dc <_tx_mutex_create+0xb0>)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	625a      	str	r2, [r3, #36]	@ 0x24
 800b184:	e011      	b.n	800b1aa <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800b186:	4b15      	ldr	r3, [pc, #84]	@ (800b1dc <_tx_mutex_create+0xb0>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b190:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	69fa      	ldr	r2, [r7, #28]
 800b1a2:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6a3a      	ldr	r2, [r7, #32]
 800b1a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d8 <_tx_mutex_create+0xac>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	4a09      	ldr	r2, [pc, #36]	@ (800b1d8 <_tx_mutex_create+0xac>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f383 8810 	msr	PRIMASK, r3
}
 800b1be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3728      	adds	r7, #40	@ 0x28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	4d555445 	.word	0x4d555445
 800b1d0:	200030b4 	.word	0x200030b4
 800b1d4:	0800b0a5 	.word	0x0800b0a5
 800b1d8:	20002ffc 	.word	0x20002ffc
 800b1dc:	20002ff8 	.word	0x20002ff8

0800b1e0 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b096      	sub	sp, #88	@ 0x58
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800b1f0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1f2:	b672      	cpsid	i
    return(int_posture);
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800b1f6:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800b1fe:	4b4a      	ldr	r3, [pc, #296]	@ (800b328 <_tx_mutex_delete+0x148>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3b01      	subs	r3, #1
 800b204:	4a48      	ldr	r2, [pc, #288]	@ (800b328 <_tx_mutex_delete+0x148>)
 800b206:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800b208:	4b47      	ldr	r3, [pc, #284]	@ (800b328 <_tx_mutex_delete+0x148>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d103      	bne.n	800b218 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800b210:	4b46      	ldr	r3, [pc, #280]	@ (800b32c <_tx_mutex_delete+0x14c>)
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	e013      	b.n	800b240 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b222:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800b224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b228:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800b22a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b22c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b22e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800b230:	4b3e      	ldr	r3, [pc, #248]	@ (800b32c <_tx_mutex_delete+0x14c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	429a      	cmp	r2, r3
 800b238:	d102      	bne.n	800b240 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800b23a:	4a3c      	ldr	r2, [pc, #240]	@ (800b32c <_tx_mutex_delete+0x14c>)
 800b23c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b23e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b240:	4b3b      	ldr	r3, [pc, #236]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3301      	adds	r3, #1
 800b246:	4a3a      	ldr	r2, [pc, #232]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b248:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800b268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d013      	beq.n	800b296 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b276:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27a:	f383 8810 	msr	PRIMASK, r3
}
 800b27e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 facf 	bl	800b824 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b286:	f3ef 8310 	mrs	r3, PRIMASK
 800b28a:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800b28e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b290:	b672      	cpsid	i
    return(int_posture);
 800b292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800b294:	657b      	str	r3, [r7, #84]	@ 0x54
 800b296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b298:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	f383 8810 	msr	PRIMASK, r3
}
 800b2a0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800b2a2:	e024      	b.n	800b2ee <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800b2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ae:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b2b0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b2b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2b4:	b672      	cpsid	i
    return(int_posture);
 800b2b6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800b2b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b2ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2bc:	2200      	movs	r2, #0
 800b2be:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800b2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800b2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800b2ce:	4b18      	ldr	r3, [pc, #96]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	4a16      	ldr	r2, [pc, #88]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	f383 8810 	msr	PRIMASK, r3
}
 800b2e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b2e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b2e6:	f001 f835 	bl	800c354 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800b2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ec:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 800b2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1d7      	bne.n	800b2a4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2f8:	613b      	str	r3, [r7, #16]
    return(posture);
 800b2fa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b2fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2fe:	b672      	cpsid	i
    return(int_posture);
 800b300:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800b302:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800b304:	4b0a      	ldr	r3, [pc, #40]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3b01      	subs	r3, #1
 800b30a:	4a09      	ldr	r2, [pc, #36]	@ (800b330 <_tx_mutex_delete+0x150>)
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b310:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f383 8810 	msr	PRIMASK, r3
}
 800b318:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800b31a:	f000 ffe1 	bl	800c2e0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3758      	adds	r7, #88	@ 0x58
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20002ffc 	.word	0x20002ffc
 800b32c:	20002ff8 	.word	0x20002ff8
 800b330:	200030b0 	.word	0x200030b0

0800b334 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b092      	sub	sp, #72	@ 0x48
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b33e:	f3ef 8310 	mrs	r3, PRIMASK
 800b342:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800b346:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b348:	b672      	cpsid	i
    return(int_posture);
 800b34a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800b34c:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b34e:	4b7a      	ldr	r3, [pc, #488]	@ (800b538 <_tx_mutex_get+0x204>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d144      	bne.n	800b3e6 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b366:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800b368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d032      	beq.n	800b3d4 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d106      	bne.n	800b384 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800b376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800b384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b38a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800b38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00f      	beq.n	800b3b2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800b392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b396:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800b398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3a8:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3b0:	e009      	b.n	800b3c6 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800b3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800b3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	f383 8810 	msr	PRIMASK, r3
}
 800b3de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3e4:	e0a2      	b.n	800b52c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d10d      	bne.n	800b40c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	609a      	str	r2, [r3, #8]
 800b3fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	f383 8810 	msr	PRIMASK, r3
}
 800b404:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800b406:	2300      	movs	r3, #0
 800b408:	647b      	str	r3, [r7, #68]	@ 0x44
 800b40a:	e08f      	b.n	800b52c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f000 8084 	beq.w	800b51c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b414:	4b49      	ldr	r3, [pc, #292]	@ (800b53c <_tx_mutex_get+0x208>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d008      	beq.n	800b42e <_tx_mutex_get+0xfa>
 800b41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b41e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f383 8810 	msr	PRIMASK, r3
}
 800b426:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800b428:	231d      	movs	r3, #29
 800b42a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b42c:	e07e      	b.n	800b52c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800b434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b436:	4a42      	ldr	r2, [pc, #264]	@ (800b540 <_tx_mutex_get+0x20c>)
 800b438:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b44a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b45a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b460:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b466:	675a      	str	r2, [r3, #116]	@ 0x74
 800b468:	e011      	b.n	800b48e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b474:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b47a:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b47e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b480:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b486:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b48c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800b498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49a:	220d      	movs	r2, #13
 800b49c:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4aa:	4b24      	ldr	r3, [pc, #144]	@ (800b53c <_tx_mutex_get+0x208>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	4a22      	ldr	r2, [pc, #136]	@ (800b53c <_tx_mutex_get+0x208>)
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f383 8810 	msr	PRIMASK, r3
}
 800b4be:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d121      	bne.n	800b50c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d903      	bls.n	800b4dc <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800b4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800b4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d204      	bcs.n	800b4f4 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d905      	bls.n	800b50c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800b500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b504:	4619      	mov	r1, r3
 800b506:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b508:	f000 f8ce 	bl	800b6a8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b50c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b50e:	f001 f821 	bl	800c554 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b518:	647b      	str	r3, [r7, #68]	@ 0x44
 800b51a:	e007      	b.n	800b52c <_tx_mutex_get+0x1f8>
 800b51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f383 8810 	msr	PRIMASK, r3
}
 800b526:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800b528:	231d      	movs	r3, #29
 800b52a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800b52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3748      	adds	r7, #72	@ 0x48
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20003018 	.word	0x20003018
 800b53c:	200030b0 	.word	0x200030b0
 800b540:	0800afad 	.word	0x0800afad

0800b544 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b092      	sub	sp, #72	@ 0x48
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b54c:	f3ef 8310 	mrs	r3, PRIMASK
 800b550:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800b554:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b556:	b672      	cpsid	i
    return(int_posture);
 800b558:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800b55a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800b562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b564:	2b01      	cmp	r3, #1
 800b566:	d805      	bhi.n	800b574 <_tx_mutex_prioritize+0x30>
 800b568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b56a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	f383 8810 	msr	PRIMASK, r3
}
 800b572:	e092      	b.n	800b69a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800b574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b576:	2b02      	cmp	r3, #2
 800b578:	d114      	bne.n	800b5a4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b584:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d202      	bcs.n	800b598 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b596:	619a      	str	r2, [r3, #24]
 800b598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b59a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	e07a      	b.n	800b69a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5b2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800b5b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b6a4 <_tx_mutex_prioritize+0x160>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a3a      	ldr	r2, [pc, #232]	@ (800b6a4 <_tx_mutex_prioritize+0x160>)
 800b5bc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800b5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d201      	bcs.n	800b5d2 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800b5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f383 8810 	msr	PRIMASK, r3
}
 800b5dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5de:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e2:	617b      	str	r3, [r7, #20]
    return(posture);
 800b5e4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b5e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5e8:	b672      	cpsid	i
    return(int_posture);
 800b5ea:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b5ec:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d002      	beq.n	800b5fe <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5fc:	e006      	b.n	800b60c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b604:	429a      	cmp	r2, r3
 800b606:	d001      	beq.n	800b60c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800b608:	2301      	movs	r3, #1
 800b60a:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800b60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d103      	bne.n	800b61a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b616:	643b      	str	r3, [r7, #64]	@ 0x40
 800b618:	e00c      	b.n	800b634 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800b62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b62e:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800b630:	2300      	movs	r3, #0
 800b632:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 800b634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	429a      	cmp	r2, r3
 800b63a:	d1c2      	bne.n	800b5c2 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800b63c:	4b19      	ldr	r3, [pc, #100]	@ (800b6a4 <_tx_mutex_prioritize+0x160>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3b01      	subs	r3, #1
 800b642:	4a18      	ldr	r2, [pc, #96]	@ (800b6a4 <_tx_mutex_prioritize+0x160>)
 800b644:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800b646:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d01d      	beq.n	800b68a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800b64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b652:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800b654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b658:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b65e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800b660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b664:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800b666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b66a:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800b66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b670:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800b672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b676:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800b678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b67c:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800b67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b680:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b682:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b688:	619a      	str	r2, [r3, #24]
 800b68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b68c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f383 8810 	msr	PRIMASK, r3
}
 800b694:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b696:	f000 fe23 	bl	800c2e0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b69a:	2300      	movs	r3, #0
#endif
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3748      	adds	r7, #72	@ 0x48
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	200030b0 	.word	0x200030b0

0800b6a8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b090      	sub	sp, #64	@ 0x40
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6bc:	b672      	cpsid	i
    return(int_posture);
 800b6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d017      	beq.n	800b6fa <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d905      	bls.n	800b6e8 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b6e6:	e002      	b.n	800b6ee <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	f383 8810 	msr	PRIMASK, r3
}
 800b6f8:	e089      	b.n	800b80e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800b6fa:	4b47      	ldr	r3, [pc, #284]	@ (800b818 <_tx_mutex_priority_change+0x170>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800b706:	4b45      	ldr	r3, [pc, #276]	@ (800b81c <_tx_mutex_priority_change+0x174>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3302      	adds	r3, #2
 800b70c:	4a43      	ldr	r2, [pc, #268]	@ (800b81c <_tx_mutex_priority_change+0x174>)
 800b70e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	220e      	movs	r2, #14
 800b714:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b724:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	f383 8810 	msr	PRIMASK, r3
}
 800b72c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 ff10 	bl	800c554 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b734:	f3ef 8310 	mrs	r3, PRIMASK
 800b738:	623b      	str	r3, [r7, #32]
    return(posture);
 800b73a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b73c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b73e:	b672      	cpsid	i
    return(int_posture);
 800b740:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800b742:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d905      	bls.n	800b762 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b760:	e002      	b.n	800b768 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f383 8810 	msr	PRIMASK, r3
}
 800b772:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fded 	bl	800c354 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b77a:	f3ef 8310 	mrs	r3, PRIMASK
 800b77e:	617b      	str	r3, [r7, #20]
    return(posture);
 800b780:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b782:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b784:	b672      	cpsid	i
    return(int_posture);
 800b786:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800b78a:	4b23      	ldr	r3, [pc, #140]	@ (800b818 <_tx_mutex_priority_change+0x170>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b794:	429a      	cmp	r2, r3
 800b796:	d034      	beq.n	800b802 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d130      	bne.n	800b802 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d811      	bhi.n	800b7d0 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d126      	bne.n	800b802 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800b7b4:	4a18      	ldr	r2, [pc, #96]	@ (800b818 <_tx_mutex_priority_change+0x170>)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800b7ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d21f      	bcs.n	800b802 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c6:	4916      	ldr	r1, [pc, #88]	@ (800b820 <_tx_mutex_priority_change+0x178>)
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b7ce:	e018      	b.n	800b802 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d212      	bcs.n	800b802 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d80c      	bhi.n	800b802 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b7e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b818 <_tx_mutex_priority_change+0x170>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800b7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d205      	bcs.n	800b802 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fa:	4909      	ldr	r1, [pc, #36]	@ (800b820 <_tx_mutex_priority_change+0x178>)
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b804:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f383 8810 	msr	PRIMASK, r3
}
 800b80c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b80e:	bf00      	nop
 800b810:	3740      	adds	r7, #64	@ 0x40
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	2000301c 	.word	0x2000301c
 800b81c:	200030b0 	.word	0x200030b0
 800b820:	20003030 	.word	0x20003030

0800b824 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b0a6      	sub	sp, #152	@ 0x98
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800b82c:	2320      	movs	r3, #32
 800b82e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b832:	f3ef 8310 	mrs	r3, PRIMASK
 800b836:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 800b838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 800b83a:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800b83c:	b672      	cpsid	i
    return(int_posture);
 800b83e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800b840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 81ff 	beq.w	800bc4c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b854:	4ba3      	ldr	r3, [pc, #652]	@ (800bae4 <_tx_mutex_put+0x2c0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b860:	429a      	cmp	r2, r3
 800b862:	d00d      	beq.n	800b880 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800b864:	4ba0      	ldr	r3, [pc, #640]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d109      	bne.n	800b880 <_tx_mutex_put+0x5c>
 800b86c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b870:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b874:	f383 8810 	msr	PRIMASK, r3
}
 800b878:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800b87a:	231e      	movs	r3, #30
 800b87c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800b880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b884:	2b20      	cmp	r3, #32
 800b886:	f040 81eb 	bne.w	800bc60 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	1e5a      	subs	r2, r3, #1
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00a      	beq.n	800b8b2 <_tx_mutex_put+0x8e>
 800b89c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b8a0:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8a4:	f383 8810 	msr	PRIMASK, r3
}
 800b8a8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b8b0:	e1d6      	b.n	800bc60 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800b8b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <_tx_mutex_put+0xaa>
 800b8b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c0:	f383 8810 	msr	PRIMASK, r3
}
 800b8c4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b8cc:	e1c8      	b.n	800bc60 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800b8ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8d4:	1e5a      	subs	r2, r3, #1
 800b8d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800b8dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d104      	bne.n	800b8f0 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800b8e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800b8ee:	e019      	b.n	800b924 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fc:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800b8fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b902:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b904:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800b906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b908:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b90c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800b90e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	429a      	cmp	r2, r3
 800b918:	d104      	bne.n	800b924 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800b91a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b91c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b920:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d110      	bne.n	800b94e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10c      	bne.n	800b94e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	60da      	str	r2, [r3, #12]
 800b93a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b93e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b942:	f383 8810 	msr	PRIMASK, r3
}
 800b946:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800b94e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b952:	2b20      	cmp	r3, #32
 800b954:	f040 8184 	bne.w	800bc60 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800b95e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d155      	bne.n	800ba1c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b970:	4b5d      	ldr	r3, [pc, #372]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a5c      	ldr	r2, [pc, #368]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b97e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b982:	f383 8810 	msr	PRIMASK, r3
}
 800b986:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b988:	2320      	movs	r3, #32
 800b98a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800b98e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 800b998:	e01f      	b.n	800b9da <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800b99a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d10b      	bne.n	800b9bc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800b9a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d904      	bls.n	800b9bc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800b9b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800b9bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800b9c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d102      	bne.n	800b9da <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 800b9da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1db      	bne.n	800b99a <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800b9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800b9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9ec:	b672      	cpsid	i
    return(int_posture);
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b9f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800b9f4:	4b3c      	ldr	r3, [pc, #240]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	4a3b      	ldr	r2, [pc, #236]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800b9fc:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800b9fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ba00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800ba08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d203      	bcs.n	800ba1c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800ba14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d920      	bls.n	800ba66 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d11c      	bne.n	800ba66 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800ba2c:	4b2e      	ldr	r3, [pc, #184]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3301      	adds	r3, #1
 800ba32:	4a2d      	ldr	r2, [pc, #180]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba3a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	f383 8810 	msr	PRIMASK, r3
}
 800ba42:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fd7d 	bl	800b544 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800ba52:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba54:	b672      	cpsid	i
    return(int_posture);
 800ba56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800ba58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800ba5c:	4b22      	ldr	r3, [pc, #136]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	4a21      	ldr	r2, [pc, #132]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba64:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d13e      	bne.n	800baec <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ba6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a1c      	ldr	r2, [pc, #112]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba80:	f383 8810 	msr	PRIMASK, r3
}
 800ba84:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2220      	movs	r2, #32
 800ba8a:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba92:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d006      	beq.n	800baa8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fe00 	bl	800b6a8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baa8:	f3ef 8310 	mrs	r3, PRIMASK
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800bab0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bab2:	b672      	cpsid	i
    return(int_posture);
 800bab4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800bab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800baba:	4b0b      	ldr	r3, [pc, #44]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3b01      	subs	r3, #1
 800bac0:	4a09      	ldr	r2, [pc, #36]	@ (800bae8 <_tx_mutex_put+0x2c4>)
 800bac2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	60da      	str	r2, [r3, #12]
 800baca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bace:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad2:	f383 8810 	msr	PRIMASK, r3
}
 800bad6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800bad8:	f000 fc02 	bl	800c2e0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800badc:	2300      	movs	r3, #0
 800bade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bae2:	e0bd      	b.n	800bc60 <_tx_mutex_put+0x43c>
 800bae4:	20003018 	.word	0x20003018
 800bae8:	200030b0 	.word	0x200030b0
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d10a      	bne.n	800bb10 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800bb02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800bb10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb16:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800bb18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800bb1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb32:	e016      	b.n	800bb62 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800bb34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800bb3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb44:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800bb46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800bb4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bb58:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bb60:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800bb62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bb76:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	1e5a      	subs	r2, r3, #1
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800bb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d103      	bne.n	800bb96 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	619a      	str	r2, [r3, #24]
 800bb94:	e00e      	b.n	800bbb4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800bb96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb9a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bba0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bba6:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bbaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bbac:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800bbae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bbb2:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bbba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bbc2:	4b2a      	ldr	r3, [pc, #168]	@ (800bc6c <_tx_mutex_put+0x448>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	4a28      	ldr	r2, [pc, #160]	@ (800bc6c <_tx_mutex_put+0x448>)
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbd0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	f383 8810 	msr	PRIMASK, r3
}
 800bbd8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d12d      	bne.n	800bc3e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d01c      	beq.n	800bc24 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fcaa 	bl	800b544 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bbf6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bbf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbfa:	b672      	cpsid	i
    return(int_posture);
 800bbfc:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800bbfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 800bc08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800bc0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	629a      	str	r2, [r3, #40]	@ 0x28
 800bc16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f383 8810 	msr	PRIMASK, r3
}
 800bc22:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800bc24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d005      	beq.n	800bc3e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800bc32:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800bc36:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800bc3a:	f7ff fd35 	bl	800b6a8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800bc3e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800bc40:	f000 fb88 	bl	800c354 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800bc44:	2300      	movs	r3, #0
 800bc46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc4a:	e009      	b.n	800bc60 <_tx_mutex_put+0x43c>
 800bc4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f383 8810 	msr	PRIMASK, r3
}
 800bc58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800bc5a:	231e      	movs	r3, #30
 800bc5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 800bc60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3798      	adds	r7, #152	@ 0x98
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	200030b0 	.word	0x200030b0

0800bc70 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08a      	sub	sp, #40	@ 0x28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800bc7c:	221c      	movs	r2, #28
 800bc7e:	2100      	movs	r1, #0
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f005 fc9d 	bl	80115c0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc92:	f3ef 8310 	mrs	r3, PRIMASK
 800bc96:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bc98:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bc9a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc9c:	b672      	cpsid	i
    return(int_posture);
 800bc9e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800bca0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	4a18      	ldr	r2, [pc, #96]	@ (800bd08 <_tx_semaphore_create+0x98>)
 800bca6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800bca8:	4b18      	ldr	r3, [pc, #96]	@ (800bd0c <_tx_semaphore_create+0x9c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800bcb0:	4a17      	ldr	r2, [pc, #92]	@ (800bd10 <_tx_semaphore_create+0xa0>)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	619a      	str	r2, [r3, #24]
 800bcc2:	e011      	b.n	800bce8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800bcc4:	4b12      	ldr	r3, [pc, #72]	@ (800bd10 <_tx_semaphore_create+0xa0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6a3a      	ldr	r2, [r7, #32]
 800bce6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800bce8:	4b08      	ldr	r3, [pc, #32]	@ (800bd0c <_tx_semaphore_create+0x9c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3301      	adds	r3, #1
 800bcee:	4a07      	ldr	r2, [pc, #28]	@ (800bd0c <_tx_semaphore_create+0x9c>)
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f383 8810 	msr	PRIMASK, r3
}
 800bcfc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3728      	adds	r7, #40	@ 0x28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	53454d41 	.word	0x53454d41
 800bd0c:	20002fe4 	.word	0x20002fe4
 800bd10:	20002fe0 	.word	0x20002fe0

0800bd14 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b092      	sub	sp, #72	@ 0x48
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd1c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd26:	b672      	cpsid	i
    return(int_posture);
 800bd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800bd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800bd32:	4b3d      	ldr	r3, [pc, #244]	@ (800be28 <_tx_semaphore_delete+0x114>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4a3b      	ldr	r2, [pc, #236]	@ (800be28 <_tx_semaphore_delete+0x114>)
 800bd3a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800bd3c:	4b3a      	ldr	r3, [pc, #232]	@ (800be28 <_tx_semaphore_delete+0x114>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800bd44:	4b39      	ldr	r3, [pc, #228]	@ (800be2c <_tx_semaphore_delete+0x118>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	e013      	b.n	800bd74 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd5c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800bd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd62:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800bd64:	4b31      	ldr	r3, [pc, #196]	@ (800be2c <_tx_semaphore_delete+0x118>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d102      	bne.n	800bd74 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800bd6e:	4a2f      	ldr	r2, [pc, #188]	@ (800be2c <_tx_semaphore_delete+0x118>)
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bd74:	4b2e      	ldr	r3, [pc, #184]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	4a2d      	ldr	r2, [pc, #180]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800bd7c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	647b      	str	r3, [r7, #68]	@ 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	643b      	str	r3, [r7, #64]	@ 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	611a      	str	r2, [r3, #16]
 800bd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd98:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	f383 8810 	msr	PRIMASK, r3
}
 800bda0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800bda2:	e024      	b.n	800bdee <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800bda4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bda6:	3b01      	subs	r3, #1
 800bda8:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdaa:	f3ef 8310 	mrs	r3, PRIMASK
 800bdae:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bdb0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bdb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdb4:	b672      	cpsid	i
    return(int_posture);
 800bdb6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800bdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bdba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800bdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdcc:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800bdce:	4b18      	ldr	r3, [pc, #96]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	4a16      	ldr	r2, [pc, #88]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdda:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bddc:	6a3b      	ldr	r3, [r7, #32]
 800bdde:	f383 8810 	msr	PRIMASK, r3
}
 800bde2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bde4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bde6:	f000 fab5 	bl	800c354 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800bdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1d7      	bne.n	800bda4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdf4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf8:	613b      	str	r3, [r7, #16]
    return(posture);
 800bdfa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bdfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdfe:	b672      	cpsid	i
    return(int_posture);
 800be00:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800be04:	4b0a      	ldr	r3, [pc, #40]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3b01      	subs	r3, #1
 800be0a:	4a09      	ldr	r2, [pc, #36]	@ (800be30 <_tx_semaphore_delete+0x11c>)
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f383 8810 	msr	PRIMASK, r3
}
 800be18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800be1a:	f000 fa61 	bl	800c2e0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3748      	adds	r7, #72	@ 0x48
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20002fe4 	.word	0x20002fe4
 800be2c:	20002fe0 	.word	0x20002fe0
 800be30:	200030b0 	.word	0x200030b0

0800be34 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08c      	sub	sp, #48	@ 0x30
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be3c:	f3ef 8310 	mrs	r3, PRIMASK
 800be40:	61bb      	str	r3, [r7, #24]
    return(posture);
 800be42:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800be44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be46:	b672      	cpsid	i
    return(int_posture);
 800be48:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800be4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10a      	bne.n	800be6e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	609a      	str	r2, [r3, #8]
 800be62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f383 8810 	msr	PRIMASK, r3
}
 800be6c:	e033      	b.n	800bed6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800be74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be76:	3b01      	subs	r3, #1
 800be78:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800be7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d103      	bne.n	800be88 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	60da      	str	r2, [r3, #12]
 800be86:	e00e      	b.n	800bea6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be8c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a3a      	ldr	r2, [r7, #32]
 800be92:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be98:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	69fa      	ldr	r2, [r7, #28]
 800be9e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	6a3a      	ldr	r2, [r7, #32]
 800bea4:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beaa:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800beac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beae:	2200      	movs	r2, #0
 800beb0:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb4:	2200      	movs	r2, #0
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800beba:	4b09      	ldr	r3, [pc, #36]	@ (800bee0 <_tx_semaphore_put+0xac>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3301      	adds	r3, #1
 800bec0:	4a07      	ldr	r2, [pc, #28]	@ (800bee0 <_tx_semaphore_put+0xac>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f383 8810 	msr	PRIMASK, r3
}
 800bece:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bed0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bed2:	f000 fa3f 	bl	800c354 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3730      	adds	r7, #48	@ 0x30
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	200030b0 	.word	0x200030b0

0800bee4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b092      	sub	sp, #72	@ 0x48
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800bef2:	2300      	movs	r3, #0
 800bef4:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800bef6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bef8:	21ef      	movs	r1, #239	@ 0xef
 800befa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800befc:	f005 fb60 	bl	80115c0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800bf00:	22b0      	movs	r2, #176	@ 0xb0
 800bf02:	2100      	movs	r1, #0
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f005 fb5b 	bl	80115c0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf20:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf26:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf3a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf40:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bf4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800bf4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf50:	3b01      	subs	r3, #1
 800bf52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf54:	4413      	add	r3, r2
 800bf56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf5c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800bf5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d007      	beq.n	800bf76 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800bf74:	e006      	b.n	800bf84 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2203      	movs	r2, #3
 800bf88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	4a48      	ldr	r2, [pc, #288]	@ (800c0b0 <_tx_thread_create+0x1cc>)
 800bf8e:	655a      	str	r2, [r3, #84]	@ 0x54
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800bf96:	4947      	ldr	r1, [pc, #284]	@ (800c0b4 <_tx_thread_create+0x1d0>)
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7f4 fa1b 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bfa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfa8:	b672      	cpsid	i
    return(int_posture);
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800bfac:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	4a41      	ldr	r2, [pc, #260]	@ (800c0b8 <_tx_thread_create+0x1d4>)
 800bfb2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800bfb4:	4b41      	ldr	r3, [pc, #260]	@ (800c0bc <_tx_thread_create+0x1d8>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800bfbc:	4a40      	ldr	r2, [pc, #256]	@ (800c0c0 <_tx_thread_create+0x1dc>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800bfd2:	e016      	b.n	800c002 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800bfd4:	4b3a      	ldr	r3, [pc, #232]	@ (800c0c0 <_tx_thread_create+0x1dc>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800bfda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfe0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c002:	4b2e      	ldr	r3, [pc, #184]	@ (800c0bc <_tx_thread_create+0x1d8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a2c      	ldr	r2, [pc, #176]	@ (800c0bc <_tx_thread_create+0x1d8>)
 800c00a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c00c:	4b2d      	ldr	r3, [pc, #180]	@ (800c0c4 <_tx_thread_create+0x1e0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	3301      	adds	r3, #1
 800c012:	4a2c      	ldr	r2, [pc, #176]	@ (800c0c4 <_tx_thread_create+0x1e0>)
 800c014:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800c016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d129      	bne.n	800c070 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c01c:	f3ef 8305 	mrs	r3, IPSR
 800c020:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800c022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c024:	4b28      	ldr	r3, [pc, #160]	@ (800c0c8 <_tx_thread_create+0x1e4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4313      	orrs	r3, r2
 800c02a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c02e:	d30d      	bcc.n	800c04c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800c030:	4b26      	ldr	r3, [pc, #152]	@ (800c0cc <_tx_thread_create+0x1e8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800c036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d009      	beq.n	800c050 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800c03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c040:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800c042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c048:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c04a:	e001      	b.n	800c050 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f979 	bl	800c354 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800c062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01e      	beq.n	800c0a6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800c068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c06a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c06c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c06e:	e01a      	b.n	800c0a6 <_tx_thread_create+0x1c2>
 800c070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c072:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	f383 8810 	msr	PRIMASK, r3
}
 800c07a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c07c:	f3ef 8310 	mrs	r3, PRIMASK
 800c080:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c082:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c084:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c086:	b672      	cpsid	i
    return(int_posture);
 800c088:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800c08a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800c08c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <_tx_thread_create+0x1e0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3b01      	subs	r3, #1
 800c092:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c4 <_tx_thread_create+0x1e0>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c098:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	f383 8810 	msr	PRIMASK, r3
}
 800c0a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c0a2:	f000 f91d 	bl	800c2e0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3748      	adds	r7, #72	@ 0x48
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	0800c829 	.word	0x0800c829
 800c0b4:	0800c149 	.word	0x0800c149
 800c0b8:	54485244 	.word	0x54485244
 800c0bc:	20003024 	.word	0x20003024
 800c0c0:	20003020 	.word	0x20003020
 800c0c4:	200030b0 	.word	0x200030b0
 800c0c8:	2000000c 	.word	0x2000000c
 800c0cc:	2000301c 	.word	0x2000301c

0800c0d0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800c0d4:	4b12      	ldr	r3, [pc, #72]	@ (800c120 <_tx_thread_initialize+0x50>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800c0da:	4b12      	ldr	r3, [pc, #72]	@ (800c124 <_tx_thread_initialize+0x54>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800c0e0:	4b11      	ldr	r3, [pc, #68]	@ (800c128 <_tx_thread_initialize+0x58>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c0e6:	4b11      	ldr	r3, [pc, #68]	@ (800c12c <_tx_thread_initialize+0x5c>)
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800c0ec:	2280      	movs	r2, #128	@ 0x80
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	480f      	ldr	r0, [pc, #60]	@ (800c130 <_tx_thread_initialize+0x60>)
 800c0f2:	f005 fa65 	bl	80115c0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800c0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c134 <_tx_thread_initialize+0x64>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800c0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <_tx_thread_initialize+0x68>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800c102:	4b0e      	ldr	r3, [pc, #56]	@ (800c13c <_tx_thread_initialize+0x6c>)
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800c108:	4b0d      	ldr	r3, [pc, #52]	@ (800c140 <_tx_thread_initialize+0x70>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800c10e:	4b0d      	ldr	r3, [pc, #52]	@ (800c144 <_tx_thread_initialize+0x74>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800c116:	4a0b      	ldr	r2, [pc, #44]	@ (800c144 <_tx_thread_initialize+0x74>)
 800c118:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800c11a:	bf00      	nop
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20003018 	.word	0x20003018
 800c124:	2000301c 	.word	0x2000301c
 800c128:	20003028 	.word	0x20003028
 800c12c:	2000302c 	.word	0x2000302c
 800c130:	20003030 	.word	0x20003030
 800c134:	20003020 	.word	0x20003020
 800c138:	20003024 	.word	0x20003024
 800c13c:	200030b0 	.word	0x200030b0
 800c140:	200030b4 	.word	0x200030b4
 800c144:	200030b8 	.word	0x200030b8

0800c148 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c14e:	4b21      	ldr	r3, [pc, #132]	@ (800c1d4 <_tx_thread_shell_entry+0x8c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c158:	69fa      	ldr	r2, [r7, #28]
 800c15a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c15c:	4610      	mov	r0, r2
 800c15e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800c160:	4b1d      	ldr	r3, [pc, #116]	@ (800c1d8 <_tx_thread_shell_entry+0x90>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d003      	beq.n	800c170 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800c168:	4b1b      	ldr	r3, [pc, #108]	@ (800c1d8 <_tx_thread_shell_entry+0x90>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69f8      	ldr	r0, [r7, #28]
 800c16e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c170:	f3ef 8310 	mrs	r3, PRIMASK
 800c174:	607b      	str	r3, [r7, #4]
    return(posture);
 800c176:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c178:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c17a:	b672      	cpsid	i
    return(int_posture);
 800c17c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800c17e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	2201      	movs	r2, #1
 800c184:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	2201      	movs	r2, #1
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	2200      	movs	r2, #0
 800c190:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c192:	4b12      	ldr	r3, [pc, #72]	@ (800c1dc <_tx_thread_shell_entry+0x94>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3301      	adds	r3, #1
 800c198:	4a10      	ldr	r2, [pc, #64]	@ (800c1dc <_tx_thread_shell_entry+0x94>)
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f383 8810 	msr	PRIMASK, r3
}
 800c1a6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800c1a8:	f3ef 8314 	mrs	r3, CONTROL
 800c1ac:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800c1ae:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800c1b0:	617b      	str	r3, [r7, #20]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f023 0304 	bic.w	r3, r3, #4
 800c1b8:	617b      	str	r3, [r7, #20]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f383 8814 	msr	CONTROL, r3
}
 800c1c4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800c1c6:	69f8      	ldr	r0, [r7, #28]
 800c1c8:	f000 f9c4 	bl	800c554 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c1cc:	bf00      	nop
 800c1ce:	3720      	adds	r7, #32
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	20003018 	.word	0x20003018
 800c1d8:	200030b4 	.word	0x200030b4
 800c1dc:	200030b0 	.word	0x200030b0

0800c1e0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08e      	sub	sp, #56	@ 0x38
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c1f0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1f2:	b672      	cpsid	i
    return(int_posture);
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c1f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c1f8:	4b35      	ldr	r3, [pc, #212]	@ (800c2d0 <_tx_thread_sleep+0xf0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800c1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c200:	2b00      	cmp	r3, #0
 800c202:	d108      	bne.n	800c216 <_tx_thread_sleep+0x36>
 800c204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c206:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800c210:	2313      	movs	r3, #19
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
 800c214:	e056      	b.n	800c2c4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c216:	f3ef 8305 	mrs	r3, IPSR
 800c21a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c21c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c21e:	4b2d      	ldr	r3, [pc, #180]	@ (800c2d4 <_tx_thread_sleep+0xf4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4313      	orrs	r3, r2
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <_tx_thread_sleep+0x5a>
 800c228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	f383 8810 	msr	PRIMASK, r3
}
 800c232:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800c234:	2313      	movs	r3, #19
 800c236:	637b      	str	r3, [r7, #52]	@ 0x34
 800c238:	e044      	b.n	800c2c4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	4a26      	ldr	r2, [pc, #152]	@ (800c2d8 <_tx_thread_sleep+0xf8>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d108      	bne.n	800c254 <_tx_thread_sleep+0x74>
 800c242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c244:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	f383 8810 	msr	PRIMASK, r3
}
 800c24c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800c24e:	2313      	movs	r3, #19
 800c250:	637b      	str	r3, [r7, #52]	@ 0x34
 800c252:	e037      	b.n	800c2c4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d108      	bne.n	800c26c <_tx_thread_sleep+0x8c>
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f383 8810 	msr	PRIMASK, r3
}
 800c264:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800c266:	2300      	movs	r3, #0
 800c268:	637b      	str	r3, [r7, #52]	@ 0x34
 800c26a:	e02b      	b.n	800c2c4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c26c:	4b1b      	ldr	r3, [pc, #108]	@ (800c2dc <_tx_thread_sleep+0xfc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d008      	beq.n	800c286 <_tx_thread_sleep+0xa6>
 800c274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c276:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f383 8810 	msr	PRIMASK, r3
}
 800c27e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800c280:	2313      	movs	r3, #19
 800c282:	637b      	str	r3, [r7, #52]	@ 0x34
 800c284:	e01e      	b.n	800c2c4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800c286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c288:	2204      	movs	r2, #4
 800c28a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	2201      	movs	r2, #1
 800c290:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c294:	2200      	movs	r2, #0
 800c296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800c29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c2a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2dc <_tx_thread_sleep+0xfc>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4a0d      	ldr	r2, [pc, #52]	@ (800c2dc <_tx_thread_sleep+0xfc>)
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	f383 8810 	msr	PRIMASK, r3
}
 800c2b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c2b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2b8:	f000 f94c 	bl	800c554 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800c2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3738      	adds	r7, #56	@ 0x38
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20003018 	.word	0x20003018
 800c2d4:	2000000c 	.word	0x2000000c
 800c2d8:	20003160 	.word	0x20003160
 800c2dc:	200030b0 	.word	0x200030b0

0800c2e0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b089      	sub	sp, #36	@ 0x24
 800c2e4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c2e6:	4b17      	ldr	r3, [pc, #92]	@ (800c344 <_tx_thread_system_preempt_check+0x64>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d121      	bne.n	800c336 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c2f2:	4b15      	ldr	r3, [pc, #84]	@ (800c348 <_tx_thread_system_preempt_check+0x68>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800c2f8:	4b14      	ldr	r3, [pc, #80]	@ (800c34c <_tx_thread_system_preempt_check+0x6c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	429a      	cmp	r2, r3
 800c304:	d017      	beq.n	800c336 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c306:	4b12      	ldr	r3, [pc, #72]	@ (800c350 <_tx_thread_system_preempt_check+0x70>)
 800c308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c30e:	f3ef 8305 	mrs	r3, IPSR
 800c312:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c314:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10c      	bne.n	800c334 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c31a:	f3ef 8310 	mrs	r3, PRIMASK
 800c31e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c320:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800c322:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c324:	b662      	cpsie	i
}
 800c326:	bf00      	nop
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f383 8810 	msr	PRIMASK, r3
}
 800c332:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800c334:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800c336:	bf00      	nop
 800c338:	3724      	adds	r7, #36	@ 0x24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	200030b0 	.word	0x200030b0
 800c348:	20003018 	.word	0x20003018
 800c34c:	2000301c 	.word	0x2000301c
 800c350:	e000ed04 	.word	0xe000ed04

0800c354 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b096      	sub	sp, #88	@ 0x58
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c35c:	f3ef 8310 	mrs	r3, PRIMASK
 800c360:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800c362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800c364:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c366:	b672      	cpsid	i
    return(int_posture);
 800c368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c36a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c370:	2b00      	cmp	r3, #0
 800c372:	d005      	beq.n	800c380 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	334c      	adds	r3, #76	@ 0x4c
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fb91 	bl	800caa0 <_tx_timer_system_deactivate>
 800c37e:	e002      	b.n	800c386 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c386:	4b6c      	ldr	r3, [pc, #432]	@ (800c538 <_tx_thread_system_resume+0x1e4>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	4a6a      	ldr	r2, [pc, #424]	@ (800c538 <_tx_thread_system_resume+0x1e4>)
 800c38e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c394:	2b00      	cmp	r3, #0
 800c396:	f040 8083 	bne.w	800c4a0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 8097 	beq.w	800c4d2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d172      	bne.n	800c492 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b6:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800c3b8:	4a60      	ldr	r2, [pc, #384]	@ (800c53c <_tx_thread_system_resume+0x1e8>)
 800c3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800c3c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d154      	bne.n	800c472 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800c3c8:	495c      	ldr	r1, [pc, #368]	@ (800c53c <_tx_thread_system_resume+0x1e8>)
 800c3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800c3de:	2201      	movs	r2, #1
 800c3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e6:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800c3e8:	4b55      	ldr	r3, [pc, #340]	@ (800c540 <_tx_thread_system_resume+0x1ec>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	4a53      	ldr	r2, [pc, #332]	@ (800c540 <_tx_thread_system_resume+0x1ec>)
 800c3f2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800c3f4:	4b53      	ldr	r3, [pc, #332]	@ (800c544 <_tx_thread_system_resume+0x1f0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d269      	bcs.n	800c4d2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800c3fe:	4a51      	ldr	r2, [pc, #324]	@ (800c544 <_tx_thread_system_resume+0x1f0>)
 800c400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c402:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c404:	4b50      	ldr	r3, [pc, #320]	@ (800c548 <_tx_thread_system_resume+0x1f4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c410:	4a4d      	ldr	r2, [pc, #308]	@ (800c548 <_tx_thread_system_resume+0x1f4>)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	e05c      	b.n	800c4d2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c41c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c41e:	429a      	cmp	r2, r3
 800c420:	d257      	bcs.n	800c4d2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c422:	4a49      	ldr	r2, [pc, #292]	@ (800c548 <_tx_thread_system_resume+0x1f4>)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42e:	f383 8810 	msr	PRIMASK, r3
}
 800c432:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c434:	4b40      	ldr	r3, [pc, #256]	@ (800c538 <_tx_thread_system_resume+0x1e4>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d174      	bne.n	800c52a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c440:	4b42      	ldr	r3, [pc, #264]	@ (800c54c <_tx_thread_system_resume+0x1f8>)
 800c442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c446:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c448:	f3ef 8305 	mrs	r3, IPSR
 800c44c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10c      	bne.n	800c46e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c454:	f3ef 8310 	mrs	r3, PRIMASK
 800c458:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800c45c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c45e:	b662      	cpsie	i
}
 800c460:	bf00      	nop
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	f383 8810 	msr	PRIMASK, r3
}
 800c46c:	bf00      	nop
}
 800c46e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c470:	e05b      	b.n	800c52a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c476:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c488:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c48e:	621a      	str	r2, [r3, #32]
 800c490:	e01f      	b.n	800c4d2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2203      	movs	r2, #3
 800c49c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c49e:	e018      	b.n	800c4d2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d014      	beq.n	800c4d2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d010      	beq.n	800c4d2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	631a      	str	r2, [r3, #48]	@ 0x30
 800c4c4:	e005      	b.n	800c4d2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2203      	movs	r2, #3
 800c4d0:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c4d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c550 <_tx_thread_system_resume+0x1fc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	f383 8810 	msr	PRIMASK, r3
}
 800c4e2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c4e4:	4b18      	ldr	r3, [pc, #96]	@ (800c548 <_tx_thread_system_resume+0x1f4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d020      	beq.n	800c530 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c4ee:	4b12      	ldr	r3, [pc, #72]	@ (800c538 <_tx_thread_system_resume+0x1e4>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d11a      	bne.n	800c530 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c4fa:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <_tx_thread_system_resume+0x1f8>)
 800c4fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c500:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c502:	f3ef 8305 	mrs	r3, IPSR
 800c506:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c508:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10f      	bne.n	800c52e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c50e:	f3ef 8310 	mrs	r3, PRIMASK
 800c512:	613b      	str	r3, [r7, #16]
    return(posture);
 800c514:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c516:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c518:	b662      	cpsie	i
}
 800c51a:	bf00      	nop
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	f383 8810 	msr	PRIMASK, r3
}
 800c526:	bf00      	nop
}
 800c528:	e001      	b.n	800c52e <_tx_thread_system_resume+0x1da>
                                return;
 800c52a:	bf00      	nop
 800c52c:	e000      	b.n	800c530 <_tx_thread_system_resume+0x1dc>
 800c52e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c530:	3758      	adds	r7, #88	@ 0x58
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	200030b0 	.word	0x200030b0
 800c53c:	20003030 	.word	0x20003030
 800c540:	20003028 	.word	0x20003028
 800c544:	2000302c 	.word	0x2000302c
 800c548:	2000301c 	.word	0x2000301c
 800c54c:	e000ed04 	.word	0xe000ed04
 800c550:	20003018 	.word	0x20003018

0800c554 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b09e      	sub	sp, #120	@ 0x78
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c55c:	4b81      	ldr	r3, [pc, #516]	@ (800c764 <_tx_thread_system_suspend+0x210>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c562:	f3ef 8310 	mrs	r3, PRIMASK
 800c566:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800c568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800c56a:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c56c:	b672      	cpsid	i
    return(int_posture);
 800c56e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c570:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c576:	429a      	cmp	r2, r3
 800c578:	d112      	bne.n	800c5a0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c57e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c582:	2b00      	cmp	r3, #0
 800c584:	d008      	beq.n	800c598 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58c:	d004      	beq.n	800c598 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	334c      	adds	r3, #76	@ 0x4c
 800c592:	4618      	mov	r0, r3
 800c594:	f000 fa22 	bl	800c9dc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	4a72      	ldr	r2, [pc, #456]	@ (800c768 <_tx_thread_system_suspend+0x214>)
 800c59e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c5a0:	4b72      	ldr	r3, [pc, #456]	@ (800c76c <_tx_thread_system_suspend+0x218>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	4a71      	ldr	r2, [pc, #452]	@ (800c76c <_tx_thread_system_suspend+0x218>)
 800c5a8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	f040 80a6 	bne.w	800c700 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5be:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c5c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d015      	beq.n	800c5fa <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c5d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c5d8:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c5da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5de:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c5e0:	4a63      	ldr	r2, [pc, #396]	@ (800c770 <_tx_thread_system_suspend+0x21c>)
 800c5e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d157      	bne.n	800c69e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c5ee:	4960      	ldr	r1, [pc, #384]	@ (800c770 <_tx_thread_system_suspend+0x21c>)
 800c5f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c5f8:	e051      	b.n	800c69e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c5fa:	4a5d      	ldr	r2, [pc, #372]	@ (800c770 <_tx_thread_system_suspend+0x21c>)
 800c5fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5fe:	2100      	movs	r1, #0
 800c600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c604:	2201      	movs	r2, #1
 800c606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c608:	fa02 f303 	lsl.w	r3, r2, r3
 800c60c:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c60e:	4b59      	ldr	r3, [pc, #356]	@ (800c774 <_tx_thread_system_suspend+0x220>)
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c614:	43db      	mvns	r3, r3
 800c616:	4013      	ands	r3, r2
 800c618:	4a56      	ldr	r2, [pc, #344]	@ (800c774 <_tx_thread_system_suspend+0x220>)
 800c61a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c61c:	2300      	movs	r3, #0
 800c61e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c620:	4b54      	ldr	r3, [pc, #336]	@ (800c774 <_tx_thread_system_suspend+0x220>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d12b      	bne.n	800c684 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c62c:	4b52      	ldr	r3, [pc, #328]	@ (800c778 <_tx_thread_system_suspend+0x224>)
 800c62e:	2220      	movs	r2, #32
 800c630:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c632:	4b52      	ldr	r3, [pc, #328]	@ (800c77c <_tx_thread_system_suspend+0x228>)
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c63a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c63c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c63e:	f383 8810 	msr	PRIMASK, r3
}
 800c642:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c644:	4b49      	ldr	r3, [pc, #292]	@ (800c76c <_tx_thread_system_suspend+0x218>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800c64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f040 8081 	bne.w	800c754 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c652:	4b4b      	ldr	r3, [pc, #300]	@ (800c780 <_tx_thread_system_suspend+0x22c>)
 800c654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c658:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c65a:	f3ef 8305 	mrs	r3, IPSR
 800c65e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800c660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10c      	bne.n	800c680 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c666:	f3ef 8310 	mrs	r3, PRIMASK
 800c66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800c66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c670:	b662      	cpsie	i
}
 800c672:	bf00      	nop
 800c674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c676:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	f383 8810 	msr	PRIMASK, r3
}
 800c67e:	bf00      	nop
}
 800c680:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c682:	e067      	b.n	800c754 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c686:	fa93 f3a3 	rbit	r3, r3
 800c68a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c68c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c68e:	fab3 f383 	clz	r3, r3
 800c692:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c694:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c698:	4413      	add	r3, r2
 800c69a:	4a37      	ldr	r2, [pc, #220]	@ (800c778 <_tx_thread_system_suspend+0x224>)
 800c69c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c69e:	4b37      	ldr	r3, [pc, #220]	@ (800c77c <_tx_thread_system_suspend+0x228>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d12b      	bne.n	800c700 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c6a8:	4b33      	ldr	r3, [pc, #204]	@ (800c778 <_tx_thread_system_suspend+0x224>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a30      	ldr	r2, [pc, #192]	@ (800c770 <_tx_thread_system_suspend+0x21c>)
 800c6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b2:	4a32      	ldr	r2, [pc, #200]	@ (800c77c <_tx_thread_system_suspend+0x228>)
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6b8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6bc:	f383 8810 	msr	PRIMASK, r3
}
 800c6c0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c6c2:	4b2a      	ldr	r3, [pc, #168]	@ (800c76c <_tx_thread_system_suspend+0x218>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800c6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d144      	bne.n	800c758 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c780 <_tx_thread_system_suspend+0x22c>)
 800c6d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6d6:	f3ef 8305 	mrs	r3, IPSR
 800c6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800c6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10c      	bne.n	800c6fc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800c6ea:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c6ec:	b662      	cpsie	i
}
 800c6ee:	bf00      	nop
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	f383 8810 	msr	PRIMASK, r3
}
 800c6fa:	bf00      	nop
}
 800c6fc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c6fe:	e02b      	b.n	800c758 <_tx_thread_system_suspend+0x204>
 800c700:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c702:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f383 8810 	msr	PRIMASK, r3
}
 800c70a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c70c:	4b1b      	ldr	r3, [pc, #108]	@ (800c77c <_tx_thread_system_suspend+0x228>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c712:	429a      	cmp	r2, r3
 800c714:	d022      	beq.n	800c75c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c716:	4b15      	ldr	r3, [pc, #84]	@ (800c76c <_tx_thread_system_suspend+0x218>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800c71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d11c      	bne.n	800c75c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c722:	4b17      	ldr	r3, [pc, #92]	@ (800c780 <_tx_thread_system_suspend+0x22c>)
 800c724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c728:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c72a:	f3ef 8305 	mrs	r3, IPSR
 800c72e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c730:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10c      	bne.n	800c750 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c736:	f3ef 8310 	mrs	r3, PRIMASK
 800c73a:	617b      	str	r3, [r7, #20]
    return(posture);
 800c73c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c73e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c740:	b662      	cpsie	i
}
 800c742:	bf00      	nop
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f383 8810 	msr	PRIMASK, r3
}
 800c74e:	bf00      	nop
}
 800c750:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c752:	e003      	b.n	800c75c <_tx_thread_system_suspend+0x208>
                return;
 800c754:	bf00      	nop
 800c756:	e002      	b.n	800c75e <_tx_thread_system_suspend+0x20a>
            return;
 800c758:	bf00      	nop
 800c75a:	e000      	b.n	800c75e <_tx_thread_system_suspend+0x20a>
    return;
 800c75c:	bf00      	nop
}
 800c75e:	3778      	adds	r7, #120	@ 0x78
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20003018 	.word	0x20003018
 800c768:	2000361c 	.word	0x2000361c
 800c76c:	200030b0 	.word	0x200030b0
 800c770:	20003030 	.word	0x20003030
 800c774:	20003028 	.word	0x20003028
 800c778:	2000302c 	.word	0x2000302c
 800c77c:	2000301c 	.word	0x2000301c
 800c780:	e000ed04 	.word	0xe000ed04

0800c784 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c784:	b480      	push	{r7}
 800c786:	b087      	sub	sp, #28
 800c788:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c78a:	4b21      	ldr	r3, [pc, #132]	@ (800c810 <_tx_thread_time_slice+0x8c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c790:	f3ef 8310 	mrs	r3, PRIMASK
 800c794:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c796:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c798:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c79a:	b672      	cpsid	i
    return(int_posture);
 800c79c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c79e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c7a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c814 <_tx_thread_time_slice+0x90>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d024      	beq.n	800c7f6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d120      	bne.n	800c7f6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	69da      	ldr	r2, [r3, #28]
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	4a15      	ldr	r2, [pc, #84]	@ (800c818 <_tx_thread_time_slice+0x94>)
 800c7c2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d013      	beq.n	800c7f6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d10d      	bne.n	800c7f6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	6a12      	ldr	r2, [r2, #32]
 800c7e2:	490e      	ldr	r1, [pc, #56]	@ (800c81c <_tx_thread_time_slice+0x98>)
 800c7e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <_tx_thread_time_slice+0x9c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a0b      	ldr	r2, [pc, #44]	@ (800c81c <_tx_thread_time_slice+0x98>)
 800c7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800c824 <_tx_thread_time_slice+0xa0>)
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f383 8810 	msr	PRIMASK, r3
}
 800c800:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c802:	bf00      	nop
 800c804:	371c      	adds	r7, #28
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20003018 	.word	0x20003018
 800c814:	200030c0 	.word	0x200030c0
 800c818:	2000361c 	.word	0x2000361c
 800c81c:	20003030 	.word	0x20003030
 800c820:	2000302c 	.word	0x2000302c
 800c824:	2000301c 	.word	0x2000301c

0800c828 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	@ 0x28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c834:	f3ef 8310 	mrs	r3, PRIMASK
 800c838:	617b      	str	r3, [r7, #20]
    return(posture);
 800c83a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c83c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c83e:	b672      	cpsid	i
    return(int_posture);
 800c840:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c842:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d10e      	bne.n	800c86a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c84c:	4b13      	ldr	r3, [pc, #76]	@ (800c89c <_tx_thread_timeout+0x74>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3301      	adds	r3, #1
 800c852:	4a12      	ldr	r2, [pc, #72]	@ (800c89c <_tx_thread_timeout+0x74>)
 800c854:	6013      	str	r3, [r2, #0]
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f383 8810 	msr	PRIMASK, r3
}
 800c860:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c864:	f7ff fd76 	bl	800c354 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c868:	e013      	b.n	800c892 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c86e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c876:	61bb      	str	r3, [r7, #24]
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	69b9      	ldr	r1, [r7, #24]
 800c88e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c890:	4798      	blx	r3
}
 800c892:	bf00      	nop
 800c894:	3728      	adds	r7, #40	@ 0x28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200030b0 	.word	0x200030b0

0800c8a0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8aa:	607b      	str	r3, [r7, #4]
    return(posture);
 800c8ac:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c8ae:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8b0:	b672      	cpsid	i
    return(int_posture);
 800c8b2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c8b4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c8b6:	4b09      	ldr	r3, [pc, #36]	@ (800c8dc <_tx_timer_expiration_process+0x3c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	4a07      	ldr	r2, [pc, #28]	@ (800c8dc <_tx_timer_expiration_process+0x3c>)
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f383 8810 	msr	PRIMASK, r3
}
 800c8ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c8cc:	4804      	ldr	r0, [pc, #16]	@ (800c8e0 <_tx_timer_expiration_process+0x40>)
 800c8ce:	f7ff fd41 	bl	800c354 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c8d2:	bf00      	nop
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	200030b0 	.word	0x200030b0
 800c8e0:	20003160 	.word	0x20003160

0800c8e4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b089      	sub	sp, #36	@ 0x24
 800c8e8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c8ea:	4b28      	ldr	r3, [pc, #160]	@ (800c98c <_tx_timer_initialize+0xa8>)
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c8f0:	4b27      	ldr	r3, [pc, #156]	@ (800c990 <_tx_timer_initialize+0xac>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c8f6:	4b27      	ldr	r3, [pc, #156]	@ (800c994 <_tx_timer_initialize+0xb0>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c8fc:	4b26      	ldr	r3, [pc, #152]	@ (800c998 <_tx_timer_initialize+0xb4>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c902:	4b26      	ldr	r3, [pc, #152]	@ (800c99c <_tx_timer_initialize+0xb8>)
 800c904:	2200      	movs	r2, #0
 800c906:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c908:	2280      	movs	r2, #128	@ 0x80
 800c90a:	2100      	movs	r1, #0
 800c90c:	4824      	ldr	r0, [pc, #144]	@ (800c9a0 <_tx_timer_initialize+0xbc>)
 800c90e:	f004 fe57 	bl	80115c0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c912:	4b24      	ldr	r3, [pc, #144]	@ (800c9a4 <_tx_timer_initialize+0xc0>)
 800c914:	4a22      	ldr	r2, [pc, #136]	@ (800c9a0 <_tx_timer_initialize+0xbc>)
 800c916:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c918:	4b23      	ldr	r3, [pc, #140]	@ (800c9a8 <_tx_timer_initialize+0xc4>)
 800c91a:	4a21      	ldr	r2, [pc, #132]	@ (800c9a0 <_tx_timer_initialize+0xbc>)
 800c91c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c91e:	4b23      	ldr	r3, [pc, #140]	@ (800c9ac <_tx_timer_initialize+0xc8>)
 800c920:	4a23      	ldr	r2, [pc, #140]	@ (800c9b0 <_tx_timer_initialize+0xcc>)
 800c922:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c924:	4b21      	ldr	r3, [pc, #132]	@ (800c9ac <_tx_timer_initialize+0xc8>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3304      	adds	r3, #4
 800c92a:	4a20      	ldr	r2, [pc, #128]	@ (800c9ac <_tx_timer_initialize+0xc8>)
 800c92c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c92e:	4b21      	ldr	r3, [pc, #132]	@ (800c9b4 <_tx_timer_initialize+0xd0>)
 800c930:	4a21      	ldr	r2, [pc, #132]	@ (800c9b8 <_tx_timer_initialize+0xd4>)
 800c932:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c934:	4b21      	ldr	r3, [pc, #132]	@ (800c9bc <_tx_timer_initialize+0xd8>)
 800c936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c93a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c93c:	4b20      	ldr	r3, [pc, #128]	@ (800c9c0 <_tx_timer_initialize+0xdc>)
 800c93e:	2200      	movs	r2, #0
 800c940:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c942:	4b1c      	ldr	r3, [pc, #112]	@ (800c9b4 <_tx_timer_initialize+0xd0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a1d      	ldr	r2, [pc, #116]	@ (800c9bc <_tx_timer_initialize+0xd8>)
 800c948:	6812      	ldr	r2, [r2, #0]
 800c94a:	491d      	ldr	r1, [pc, #116]	@ (800c9c0 <_tx_timer_initialize+0xdc>)
 800c94c:	6809      	ldr	r1, [r1, #0]
 800c94e:	481c      	ldr	r0, [pc, #112]	@ (800c9c0 <_tx_timer_initialize+0xdc>)
 800c950:	6800      	ldr	r0, [r0, #0]
 800c952:	2400      	movs	r4, #0
 800c954:	9405      	str	r4, [sp, #20]
 800c956:	2400      	movs	r4, #0
 800c958:	9404      	str	r4, [sp, #16]
 800c95a:	9003      	str	r0, [sp, #12]
 800c95c:	9102      	str	r1, [sp, #8]
 800c95e:	9201      	str	r2, [sp, #4]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4b18      	ldr	r3, [pc, #96]	@ (800c9c4 <_tx_timer_initialize+0xe0>)
 800c964:	4a18      	ldr	r2, [pc, #96]	@ (800c9c8 <_tx_timer_initialize+0xe4>)
 800c966:	4919      	ldr	r1, [pc, #100]	@ (800c9cc <_tx_timer_initialize+0xe8>)
 800c968:	4819      	ldr	r0, [pc, #100]	@ (800c9d0 <_tx_timer_initialize+0xec>)
 800c96a:	f7ff fabb 	bl	800bee4 <_tx_thread_create>
 800c96e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1e5      	bne.n	800c942 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c976:	4b17      	ldr	r3, [pc, #92]	@ (800c9d4 <_tx_timer_initialize+0xf0>)
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c97c:	4b16      	ldr	r3, [pc, #88]	@ (800c9d8 <_tx_timer_initialize+0xf4>)
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	bd90      	pop	{r4, r7, pc}
 800c98a:	bf00      	nop
 800c98c:	200030bc 	.word	0x200030bc
 800c990:	2000361c 	.word	0x2000361c
 800c994:	200030c0 	.word	0x200030c0
 800c998:	20003150 	.word	0x20003150
 800c99c:	2000315c 	.word	0x2000315c
 800c9a0:	200030c4 	.word	0x200030c4
 800c9a4:	20003144 	.word	0x20003144
 800c9a8:	2000314c 	.word	0x2000314c
 800c9ac:	20003148 	.word	0x20003148
 800c9b0:	20003140 	.word	0x20003140
 800c9b4:	20003210 	.word	0x20003210
 800c9b8:	2000321c 	.word	0x2000321c
 800c9bc:	20003214 	.word	0x20003214
 800c9c0:	20003218 	.word	0x20003218
 800c9c4:	4154494d 	.word	0x4154494d
 800c9c8:	0800cb11 	.word	0x0800cb11
 800c9cc:	08011664 	.word	0x08011664
 800c9d0:	20003160 	.word	0x20003160
 800c9d4:	20003154 	.word	0x20003154
 800c9d8:	20003158 	.word	0x20003158

0800c9dc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b089      	sub	sp, #36	@ 0x24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d04a      	beq.n	800ca86 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f6:	d046      	beq.n	800ca86 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d142      	bne.n	800ca86 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2b20      	cmp	r3, #32
 800ca04:	d902      	bls.n	800ca0c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800ca06:	231f      	movs	r3, #31
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	e002      	b.n	800ca12 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800ca12:	4b20      	ldr	r3, [pc, #128]	@ (800ca94 <_tx_timer_system_activate+0xb8>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800ca1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca98 <_tx_timer_system_activate+0xbc>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d30b      	bcc.n	800ca40 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ca28:	4b1b      	ldr	r3, [pc, #108]	@ (800ca98 <_tx_timer_system_activate+0xbc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	69fa      	ldr	r2, [r7, #28]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	109b      	asrs	r3, r3, #2
 800ca32:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800ca34:	4b19      	ldr	r3, [pc, #100]	@ (800ca9c <_tx_timer_system_activate+0xc0>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	e011      	b.n	800ca80 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	69fa      	ldr	r2, [r7, #28]
 800ca84:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800ca86:	bf00      	nop
 800ca88:	3724      	adds	r7, #36	@ 0x24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	2000314c 	.word	0x2000314c
 800ca98:	20003148 	.word	0x20003148
 800ca9c:	20003144 	.word	0x20003144

0800caa0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d026      	beq.n	800cb02 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d108      	bne.n	800cad4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d117      	bne.n	800cafc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	e013      	b.n	800cafc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d105      	bne.n	800cafc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	619a      	str	r2, [r3, #24]
    }
}
 800cb02:	bf00      	nop
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
	...

0800cb10 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b098      	sub	sp, #96	@ 0x60
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a73      	ldr	r2, [pc, #460]	@ (800ccec <_tx_timer_thread_entry+0x1dc>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	f040 80de 	bne.w	800cce2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb26:	f3ef 8310 	mrs	r3, PRIMASK
 800cb2a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800cb2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800cb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb30:	b672      	cpsid	i
    return(int_posture);
 800cb32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800cb34:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800cb36:	4b6e      	ldr	r3, [pc, #440]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f107 020c 	add.w	r2, r7, #12
 800cb4a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800cb4c:	4b68      	ldr	r3, [pc, #416]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800cb54:	4b66      	ldr	r3, [pc, #408]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4a65      	ldr	r2, [pc, #404]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb5c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800cb5e:	4b64      	ldr	r3, [pc, #400]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	4b64      	ldr	r3, [pc, #400]	@ (800ccf4 <_tx_timer_thread_entry+0x1e4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d103      	bne.n	800cb72 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800cb6a:	4b63      	ldr	r3, [pc, #396]	@ (800ccf8 <_tx_timer_thread_entry+0x1e8>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a60      	ldr	r2, [pc, #384]	@ (800ccf0 <_tx_timer_thread_entry+0x1e0>)
 800cb70:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800cb72:	4b62      	ldr	r3, [pc, #392]	@ (800ccfc <_tx_timer_thread_entry+0x1ec>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	f383 8810 	msr	PRIMASK, r3
}
 800cb82:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb84:	f3ef 8310 	mrs	r3, PRIMASK
 800cb88:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb8e:	b672      	cpsid	i
    return(int_posture);
 800cb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800cb92:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800cb94:	e07f      	b.n	800cc96 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800cba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d102      	bne.n	800cbb2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e00e      	b.n	800cbd0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800cbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cbb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbbc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbc2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800cbc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbc6:	f107 020c 	add.w	r2, r7, #12
 800cbca:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800cbcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbce:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d911      	bls.n	800cbfc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800cbd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800cbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800cbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbea:	f107 0208 	add.w	r2, r7, #8
 800cbee:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800cbf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbf4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800cbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbf8:	60bb      	str	r3, [r7, #8]
 800cbfa:	e01a      	b.n	800cc32 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800cbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800cc02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800cc08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc0e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800cc10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d009      	beq.n	800cc2c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800cc18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc1a:	f107 0208 	add.w	r2, r7, #8
 800cc1e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800cc20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc24:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800cc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc28:	60bb      	str	r3, [r7, #8]
 800cc2a:	e002      	b.n	800cc32 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800cc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc2e:	2200      	movs	r2, #0
 800cc30:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800cc32:	4a33      	ldr	r2, [pc, #204]	@ (800cd00 <_tx_timer_thread_entry+0x1f0>)
 800cc34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	f383 8810 	msr	PRIMASK, r3
}
 800cc42:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800cc44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800cc4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cc4e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc50:	f3ef 8310 	mrs	r3, PRIMASK
 800cc54:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800cc58:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc5a:	b672      	cpsid	i
    return(int_posture);
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cc5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800cc60:	4b27      	ldr	r3, [pc, #156]	@ (800cd00 <_tx_timer_thread_entry+0x1f0>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d105      	bne.n	800cc7a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800cc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc70:	2200      	movs	r2, #0
 800cc72:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800cc74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cc76:	f7ff feb1 	bl	800c9dc <_tx_timer_system_activate>
 800cc7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	f383 8810 	msr	PRIMASK, r3
}
 800cc84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc86:	f3ef 8310 	mrs	r3, PRIMASK
 800cc8a:	623b      	str	r3, [r7, #32]
    return(posture);
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cc8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc90:	b672      	cpsid	i
    return(int_posture);
 800cc92:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cc94:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f47f af7c 	bne.w	800cb96 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800cc9e:	4b17      	ldr	r3, [pc, #92]	@ (800ccfc <_tx_timer_thread_entry+0x1ec>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d116      	bne.n	800ccd4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800cca6:	4b17      	ldr	r3, [pc, #92]	@ (800cd04 <_tx_timer_thread_entry+0x1f4>)
 800cca8:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccac:	2203      	movs	r2, #3
 800ccae:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ccb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800ccb6:	4b14      	ldr	r3, [pc, #80]	@ (800cd08 <_tx_timer_thread_entry+0x1f8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	4a12      	ldr	r2, [pc, #72]	@ (800cd08 <_tx_timer_thread_entry+0x1f8>)
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f383 8810 	msr	PRIMASK, r3
}
 800ccca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800cccc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ccce:	f7ff fc41 	bl	800c554 <_tx_thread_system_suspend>
 800ccd2:	e728      	b.n	800cb26 <_tx_timer_thread_entry+0x16>
 800ccd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f383 8810 	msr	PRIMASK, r3
}
 800ccde:	bf00      	nop
            TX_DISABLE
 800cce0:	e721      	b.n	800cb26 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800cce2:	bf00      	nop
 800cce4:	3760      	adds	r7, #96	@ 0x60
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	4154494d 	.word	0x4154494d
 800ccf0:	2000314c 	.word	0x2000314c
 800ccf4:	20003148 	.word	0x20003148
 800ccf8:	20003144 	.word	0x20003144
 800ccfc:	20003150 	.word	0x20003150
 800cd00:	2000315c 	.word	0x2000315c
 800cd04:	20003160 	.word	0x20003160
 800cd08:	200030b0 	.word	0x200030b0

0800cd0c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08a      	sub	sp, #40	@ 0x28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cd24:	2302      	movs	r3, #2
 800cd26:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd28:	e029      	b.n	800cd7e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a2d      	ldr	r2, [pc, #180]	@ (800cde4 <_txe_byte_allocate+0xd8>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d002      	beq.n	800cd3a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cd34:	2302      	movs	r3, #2
 800cd36:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd38:	e021      	b.n	800cd7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cd40:	2303      	movs	r3, #3
 800cd42:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd44:	e01b      	b.n	800cd7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cd4c:	2305      	movs	r3, #5
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd50:	e015      	b.n	800cd7e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d902      	bls.n	800cd62 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cd5c:	2305      	movs	r3, #5
 800cd5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd60:	e00d      	b.n	800cd7e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00a      	beq.n	800cd7e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd68:	f3ef 8305 	mrs	r3, IPSR
 800cd6c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cd6e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cd70:	4b1d      	ldr	r3, [pc, #116]	@ (800cde8 <_txe_byte_allocate+0xdc>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cd7a:	2304      	movs	r3, #4
 800cd7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d108      	bne.n	800cd96 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cd84:	4b19      	ldr	r3, [pc, #100]	@ (800cdec <_txe_byte_allocate+0xe0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	4a18      	ldr	r2, [pc, #96]	@ (800cdf0 <_txe_byte_allocate+0xe4>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d101      	bne.n	800cd96 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cd92:	2313      	movs	r3, #19
 800cd94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d114      	bne.n	800cdc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd9c:	f3ef 8305 	mrs	r3, IPSR
 800cda0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cda2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cda4:	4b10      	ldr	r3, [pc, #64]	@ (800cde8 <_txe_byte_allocate+0xdc>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00b      	beq.n	800cdc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdae:	f3ef 8305 	mrs	r3, IPSR
 800cdb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cdb4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cdb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cde8 <_txe_byte_allocate+0xdc>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cdc0:	d201      	bcs.n	800cdc6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cdc2:	2313      	movs	r3, #19
 800cdc4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d106      	bne.n	800cdda <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7fd fd96 	bl	800a904 <_tx_byte_allocate>
 800cdd8:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800cdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3728      	adds	r7, #40	@ 0x28
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	42595445 	.word	0x42595445
 800cde8:	2000000c 	.word	0x2000000c
 800cdec:	20003018 	.word	0x20003018
 800cdf0:	20003160 	.word	0x20003160

0800cdf4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b092      	sub	sp, #72	@ 0x48
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ce02:	2300      	movs	r3, #0
 800ce04:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d102      	bne.n	800ce12 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce10:	e075      	b.n	800cefe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800ce12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce14:	2b34      	cmp	r3, #52	@ 0x34
 800ce16:	d002      	beq.n	800ce1e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce1c:	e06f      	b.n	800cefe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ce26:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce28:	b672      	cpsid	i
    return(int_posture);
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ce2c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ce2e:	4b3b      	ldr	r3, [pc, #236]	@ (800cf1c <_txe_byte_pool_create+0x128>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3301      	adds	r3, #1
 800ce34:	4a39      	ldr	r2, [pc, #228]	@ (800cf1c <_txe_byte_pool_create+0x128>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	f383 8810 	msr	PRIMASK, r3
}
 800ce42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800ce44:	4b36      	ldr	r3, [pc, #216]	@ (800cf20 <_txe_byte_pool_create+0x12c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce4e:	e009      	b.n	800ce64 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d00b      	beq.n	800ce70 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800ce58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800ce5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce60:	3301      	adds	r3, #1
 800ce62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce64:	4b2f      	ldr	r3, [pc, #188]	@ (800cf24 <_txe_byte_pool_create+0x130>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d3f0      	bcc.n	800ce50 <_txe_byte_pool_create+0x5c>
 800ce6e:	e000      	b.n	800ce72 <_txe_byte_pool_create+0x7e>
                break;
 800ce70:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce72:	f3ef 8310 	mrs	r3, PRIMASK
 800ce76:	623b      	str	r3, [r7, #32]
    return(posture);
 800ce78:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ce7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce7c:	b672      	cpsid	i
    return(int_posture);
 800ce7e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ce80:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ce82:	4b26      	ldr	r3, [pc, #152]	@ (800cf1c <_txe_byte_pool_create+0x128>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	4a24      	ldr	r2, [pc, #144]	@ (800cf1c <_txe_byte_pool_create+0x128>)
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce92:	f383 8810 	msr	PRIMASK, r3
}
 800ce96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ce98:	f7ff fa22 	bl	800c2e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d102      	bne.n	800ceaa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800cea4:	2302      	movs	r3, #2
 800cea6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cea8:	e029      	b.n	800cefe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceb4:	e023      	b.n	800cefe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b63      	cmp	r3, #99	@ 0x63
 800ceba:	d802      	bhi.n	800cec2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800cebc:	2305      	movs	r3, #5
 800cebe:	647b      	str	r3, [r7, #68]	@ 0x44
 800cec0:	e01d      	b.n	800cefe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cec2:	4b19      	ldr	r3, [pc, #100]	@ (800cf28 <_txe_byte_pool_create+0x134>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceca:	4a18      	ldr	r2, [pc, #96]	@ (800cf2c <_txe_byte_pool_create+0x138>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d101      	bne.n	800ced4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ced0:	2313      	movs	r3, #19
 800ced2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ced4:	f3ef 8305 	mrs	r3, IPSR
 800ced8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ceda:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cedc:	4b14      	ldr	r3, [pc, #80]	@ (800cf30 <_txe_byte_pool_create+0x13c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00b      	beq.n	800cefe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cee6:	f3ef 8305 	mrs	r3, IPSR
 800ceea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ceec:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ceee:	4b10      	ldr	r3, [pc, #64]	@ (800cf30 <_txe_byte_pool_create+0x13c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cef8:	d201      	bcs.n	800cefe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cefa:	2313      	movs	r3, #19
 800cefc:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cefe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	68b9      	ldr	r1, [r7, #8]
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7fd fe3c 	bl	800ab88 <_tx_byte_pool_create>
 800cf10:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800cf12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3748      	adds	r7, #72	@ 0x48
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	200030b0 	.word	0x200030b0
 800cf20:	20003008 	.word	0x20003008
 800cf24:	2000300c 	.word	0x2000300c
 800cf28:	20003018 	.word	0x20003018
 800cf2c:	20003160 	.word	0x20003160
 800cf30:	2000000c 	.word	0x2000000c

0800cf34 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b092      	sub	sp, #72	@ 0x48
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cf42:	2300      	movs	r3, #0
 800cf44:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800cf4c:	231c      	movs	r3, #28
 800cf4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf50:	e053      	b.n	800cffa <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b34      	cmp	r3, #52	@ 0x34
 800cf56:	d002      	beq.n	800cf5e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800cf58:	231c      	movs	r3, #28
 800cf5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf5c:	e04d      	b.n	800cffa <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf5e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cf64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cf66:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf68:	b672      	cpsid	i
    return(int_posture);
 800cf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cf6c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cf6e:	4b3a      	ldr	r3, [pc, #232]	@ (800d058 <_txe_mutex_create+0x124>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a38      	ldr	r2, [pc, #224]	@ (800d058 <_txe_mutex_create+0x124>)
 800cf76:	6013      	str	r3, [r2, #0]
 800cf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7e:	f383 8810 	msr	PRIMASK, r3
}
 800cf82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800cf84:	4b35      	ldr	r3, [pc, #212]	@ (800d05c <_txe_mutex_create+0x128>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf8e:	e009      	b.n	800cfa4 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d00b      	beq.n	800cfb0 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800cf98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800cf9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfa4:	4b2e      	ldr	r3, [pc, #184]	@ (800d060 <_txe_mutex_create+0x12c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d3f0      	bcc.n	800cf90 <_txe_mutex_create+0x5c>
 800cfae:	e000      	b.n	800cfb2 <_txe_mutex_create+0x7e>
                break;
 800cfb0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cfb6:	623b      	str	r3, [r7, #32]
    return(posture);
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cfba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfbc:	b672      	cpsid	i
    return(int_posture);
 800cfbe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cfc0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cfc2:	4b25      	ldr	r3, [pc, #148]	@ (800d058 <_txe_mutex_create+0x124>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	4a23      	ldr	r2, [pc, #140]	@ (800d058 <_txe_mutex_create+0x124>)
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	f383 8810 	msr	PRIMASK, r3
}
 800cfd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cfd8:	f7ff f982 	bl	800c2e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d102      	bne.n	800cfea <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800cfe4:	231c      	movs	r3, #28
 800cfe6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfe8:	e007      	b.n	800cffa <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d004      	beq.n	800cffa <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800cff6:	231f      	movs	r3, #31
 800cff8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d11d      	bne.n	800d03c <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d000:	4b18      	ldr	r3, [pc, #96]	@ (800d064 <_txe_mutex_create+0x130>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d008:	4a17      	ldr	r2, [pc, #92]	@ (800d068 <_txe_mutex_create+0x134>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d101      	bne.n	800d012 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d00e:	2313      	movs	r3, #19
 800d010:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d012:	f3ef 8305 	mrs	r3, IPSR
 800d016:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d018:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d01a:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <_txe_mutex_create+0x138>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4313      	orrs	r3, r2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00b      	beq.n	800d03c <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d024:	f3ef 8305 	mrs	r3, IPSR
 800d028:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d02a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d02c:	4b0f      	ldr	r3, [pc, #60]	@ (800d06c <_txe_mutex_create+0x138>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4313      	orrs	r3, r2
 800d032:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d036:	d201      	bcs.n	800d03c <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d038:	2313      	movs	r3, #19
 800d03a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d105      	bne.n	800d04e <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	68b9      	ldr	r1, [r7, #8]
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f7fe f870 	bl	800b12c <_tx_mutex_create>
 800d04c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800d04e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d050:	4618      	mov	r0, r3
 800d052:	3748      	adds	r7, #72	@ 0x48
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	200030b0 	.word	0x200030b0
 800d05c:	20002ff8 	.word	0x20002ff8
 800d060:	20002ffc 	.word	0x20002ffc
 800d064:	20003018 	.word	0x20003018
 800d068:	20003160 	.word	0x20003160
 800d06c:	2000000c 	.word	0x2000000c

0800d070 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d082:	231c      	movs	r3, #28
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	e023      	b.n	800d0d0 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a13      	ldr	r2, [pc, #76]	@ (800d0dc <_txe_mutex_delete+0x6c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d002      	beq.n	800d098 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d092:	231c      	movs	r3, #28
 800d094:	617b      	str	r3, [r7, #20]
 800d096:	e01b      	b.n	800d0d0 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d098:	f3ef 8305 	mrs	r3, IPSR
 800d09c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d09e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d0e0 <_txe_mutex_delete+0x70>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d0aa:	2313      	movs	r3, #19
 800d0ac:	617b      	str	r3, [r7, #20]
 800d0ae:	e00f      	b.n	800d0d0 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e4 <_txe_mutex_delete+0x74>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	4a0b      	ldr	r2, [pc, #44]	@ (800d0e8 <_txe_mutex_delete+0x78>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d101      	bne.n	800d0c2 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d0be:	2313      	movs	r3, #19
 800d0c0:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d103      	bne.n	800d0d0 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7fe f889 	bl	800b1e0 <_tx_mutex_delete>
 800d0ce:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800d0d0:	697b      	ldr	r3, [r7, #20]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	4d555445 	.word	0x4d555445
 800d0e0:	2000000c 	.word	0x2000000c
 800d0e4:	20003018 	.word	0x20003018
 800d0e8:	20003160 	.word	0x20003160

0800d0ec <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d100:	231c      	movs	r3, #28
 800d102:	61fb      	str	r3, [r7, #28]
 800d104:	e01f      	b.n	800d146 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a21      	ldr	r2, [pc, #132]	@ (800d190 <_txe_mutex_get+0xa4>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d002      	beq.n	800d116 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d110:	231c      	movs	r3, #28
 800d112:	61fb      	str	r3, [r7, #28]
 800d114:	e017      	b.n	800d146 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d014      	beq.n	800d146 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d11c:	f3ef 8305 	mrs	r3, IPSR
 800d120:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d122:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d124:	4b1b      	ldr	r3, [pc, #108]	@ (800d194 <_txe_mutex_get+0xa8>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4313      	orrs	r3, r2
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d12e:	2304      	movs	r3, #4
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	e008      	b.n	800d146 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d134:	4b18      	ldr	r3, [pc, #96]	@ (800d198 <_txe_mutex_get+0xac>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	4a17      	ldr	r2, [pc, #92]	@ (800d19c <_txe_mutex_get+0xb0>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d101      	bne.n	800d146 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d142:	2304      	movs	r3, #4
 800d144:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d114      	bne.n	800d176 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d14c:	f3ef 8305 	mrs	r3, IPSR
 800d150:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d152:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d154:	4b0f      	ldr	r3, [pc, #60]	@ (800d194 <_txe_mutex_get+0xa8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4313      	orrs	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d15e:	f3ef 8305 	mrs	r3, IPSR
 800d162:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d164:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d166:	4b0b      	ldr	r3, [pc, #44]	@ (800d194 <_txe_mutex_get+0xa8>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d170:	d201      	bcs.n	800d176 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d172:	2313      	movs	r3, #19
 800d174:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d104      	bne.n	800d186 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7fe f8d8 	bl	800b334 <_tx_mutex_get>
 800d184:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d186:	69fb      	ldr	r3, [r7, #28]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3720      	adds	r7, #32
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	4d555445 	.word	0x4d555445
 800d194:	2000000c 	.word	0x2000000c
 800d198:	20003018 	.word	0x20003018
 800d19c:	20003160 	.word	0x20003160

0800d1a0 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b086      	sub	sp, #24
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d1b2:	231c      	movs	r3, #28
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e01c      	b.n	800d1f2 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a13      	ldr	r2, [pc, #76]	@ (800d20c <_txe_mutex_put+0x6c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d002      	beq.n	800d1c8 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800d1c2:	231c      	movs	r3, #28
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	e014      	b.n	800d1f2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1c8:	f3ef 8305 	mrs	r3, IPSR
 800d1cc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d1ce:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d210 <_txe_mutex_put+0x70>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1da:	f3ef 8305 	mrs	r3, IPSR
 800d1de:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d1e0:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <_txe_mutex_put+0x70>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d1ec:	d201      	bcs.n	800d1f2 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d1ee:	2313      	movs	r3, #19
 800d1f0:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7fe fb13 	bl	800b824 <_tx_mutex_put>
 800d1fe:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d200:	697b      	ldr	r3, [r7, #20]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	4d555445 	.word	0x4d555445
 800d210:	2000000c 	.word	0x2000000c

0800d214 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b092      	sub	sp, #72	@ 0x48
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d222:	2300      	movs	r3, #0
 800d224:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d22c:	230c      	movs	r3, #12
 800d22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d230:	e054      	b.n	800d2dc <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b1c      	cmp	r3, #28
 800d236:	d002      	beq.n	800d23e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d238:	230c      	movs	r3, #12
 800d23a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d23c:	e04e      	b.n	800d2dc <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d23e:	f3ef 8310 	mrs	r3, PRIMASK
 800d242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800d246:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d248:	b672      	cpsid	i
    return(int_posture);
 800d24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d24c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d24e:	4b36      	ldr	r3, [pc, #216]	@ (800d328 <_txe_semaphore_create+0x114>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	4a34      	ldr	r2, [pc, #208]	@ (800d328 <_txe_semaphore_create+0x114>)
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25e:	f383 8810 	msr	PRIMASK, r3
}
 800d262:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800d264:	4b31      	ldr	r3, [pc, #196]	@ (800d32c <_txe_semaphore_create+0x118>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d26a:	2300      	movs	r3, #0
 800d26c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d26e:	e009      	b.n	800d284 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d274:	429a      	cmp	r2, r3
 800d276:	d00b      	beq.n	800d290 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800d278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d27e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d280:	3301      	adds	r3, #1
 800d282:	643b      	str	r3, [r7, #64]	@ 0x40
 800d284:	4b2a      	ldr	r3, [pc, #168]	@ (800d330 <_txe_semaphore_create+0x11c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d3f0      	bcc.n	800d270 <_txe_semaphore_create+0x5c>
 800d28e:	e000      	b.n	800d292 <_txe_semaphore_create+0x7e>
                break;
 800d290:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d292:	f3ef 8310 	mrs	r3, PRIMASK
 800d296:	623b      	str	r3, [r7, #32]
    return(posture);
 800d298:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d29a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d29c:	b672      	cpsid	i
    return(int_posture);
 800d29e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d2a0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d2a2:	4b21      	ldr	r3, [pc, #132]	@ (800d328 <_txe_semaphore_create+0x114>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d328 <_txe_semaphore_create+0x114>)
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	f383 8810 	msr	PRIMASK, r3
}
 800d2b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d2b8:	f7ff f812 	bl	800c2e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d102      	bne.n	800d2ca <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800d2c4:	230c      	movs	r3, #12
 800d2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2c8:	e008      	b.n	800d2dc <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <_txe_semaphore_create+0x120>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d2:	4a19      	ldr	r2, [pc, #100]	@ (800d338 <_txe_semaphore_create+0x124>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d101      	bne.n	800d2dc <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d2d8:	2313      	movs	r3, #19
 800d2da:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d2dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d114      	bne.n	800d30c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2e2:	f3ef 8305 	mrs	r3, IPSR
 800d2e6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d2e8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2ea:	4b14      	ldr	r3, [pc, #80]	@ (800d33c <_txe_semaphore_create+0x128>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2f4:	f3ef 8305 	mrs	r3, IPSR
 800d2f8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d2fa:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d2fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d33c <_txe_semaphore_create+0x128>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4313      	orrs	r3, r2
 800d302:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d306:	d201      	bcs.n	800d30c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d308:	2313      	movs	r3, #19
 800d30a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f7fe fcaa 	bl	800bc70 <_tx_semaphore_create>
 800d31c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800d31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d320:	4618      	mov	r0, r3
 800d322:	3748      	adds	r7, #72	@ 0x48
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200030b0 	.word	0x200030b0
 800d32c:	20002fe0 	.word	0x20002fe0
 800d330:	20002fe4 	.word	0x20002fe4
 800d334:	20003018 	.word	0x20003018
 800d338:	20003160 	.word	0x20003160
 800d33c:	2000000c 	.word	0x2000000c

0800d340 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d348:	2300      	movs	r3, #0
 800d34a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d352:	230c      	movs	r3, #12
 800d354:	617b      	str	r3, [r7, #20]
 800d356:	e01c      	b.n	800d392 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a13      	ldr	r2, [pc, #76]	@ (800d3ac <_txe_semaphore_delete+0x6c>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d002      	beq.n	800d368 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d362:	230c      	movs	r3, #12
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	e014      	b.n	800d392 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d368:	f3ef 8305 	mrs	r3, IPSR
 800d36c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d36e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d370:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <_txe_semaphore_delete+0x70>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4313      	orrs	r3, r2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d37a:	2313      	movs	r3, #19
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e008      	b.n	800d392 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d380:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b4 <_txe_semaphore_delete+0x74>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	4a0b      	ldr	r2, [pc, #44]	@ (800d3b8 <_txe_semaphore_delete+0x78>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d101      	bne.n	800d392 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d38e:	2313      	movs	r3, #19
 800d390:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d103      	bne.n	800d3a0 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7fe fcbb 	bl	800bd14 <_tx_semaphore_delete>
 800d39e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d3a0:	697b      	ldr	r3, [r7, #20]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	53454d41 	.word	0x53454d41
 800d3b0:	2000000c 	.word	0x2000000c
 800d3b4:	20003018 	.word	0x20003018
 800d3b8:	20003160 	.word	0x20003160

0800d3bc <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d102      	bne.n	800d3d0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	e00b      	b.n	800d3e8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a07      	ldr	r2, [pc, #28]	@ (800d3f4 <_txe_semaphore_put+0x38>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d002      	beq.n	800d3e0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d3da:	230c      	movs	r3, #12
 800d3dc:	60fb      	str	r3, [r7, #12]
 800d3de:	e003      	b.n	800d3e8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7fe fd27 	bl	800be34 <_tx_semaphore_put>
 800d3e6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	53454d41 	.word	0x53454d41

0800d3f8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b09a      	sub	sp, #104	@ 0x68
 800d3fc:	af06      	add	r7, sp, #24
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d406:	2300      	movs	r3, #0
 800d408:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d410:	230e      	movs	r3, #14
 800d412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d414:	e0bb      	b.n	800d58e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d418:	2bb0      	cmp	r3, #176	@ 0xb0
 800d41a:	d002      	beq.n	800d422 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d41c:	230e      	movs	r3, #14
 800d41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d420:	e0b5      	b.n	800d58e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d422:	f3ef 8310 	mrs	r3, PRIMASK
 800d426:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800d42a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d42c:	b672      	cpsid	i
    return(int_posture);
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d430:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d432:	4b64      	ldr	r3, [pc, #400]	@ (800d5c4 <_txe_thread_create+0x1cc>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3301      	adds	r3, #1
 800d438:	4a62      	ldr	r2, [pc, #392]	@ (800d5c4 <_txe_thread_create+0x1cc>)
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d442:	f383 8810 	msr	PRIMASK, r3
}
 800d446:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d448:	2300      	movs	r3, #0
 800d44a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800d44c:	4b5e      	ldr	r3, [pc, #376]	@ (800d5c8 <_txe_thread_create+0x1d0>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d454:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d458:	3b01      	subs	r3, #1
 800d45a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d45c:	4413      	add	r3, r2
 800d45e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d464:	2300      	movs	r3, #0
 800d466:	647b      	str	r3, [r7, #68]	@ 0x44
 800d468:	e02b      	b.n	800d4c2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d46e:	429a      	cmp	r2, r3
 800d470:	d101      	bne.n	800d476 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d472:	2301      	movs	r3, #1
 800d474:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d028      	beq.n	800d4ce <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d482:	429a      	cmp	r2, r3
 800d484:	d308      	bcc.n	800d498 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d203      	bcs.n	800d498 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d490:	2300      	movs	r3, #0
 800d492:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d494:	2301      	movs	r3, #1
 800d496:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d308      	bcc.n	800d4b4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d203      	bcs.n	800d4b4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d4b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4ba:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d4bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4be:	3301      	adds	r3, #1
 800d4c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4c2:	4b42      	ldr	r3, [pc, #264]	@ (800d5cc <_txe_thread_create+0x1d4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3ce      	bcc.n	800d46a <_txe_thread_create+0x72>
 800d4cc:	e000      	b.n	800d4d0 <_txe_thread_create+0xd8>
                break;
 800d4ce:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4d4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d4d6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d4d8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4da:	b672      	cpsid	i
    return(int_posture);
 800d4dc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d4de:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d4e0:	4b38      	ldr	r3, [pc, #224]	@ (800d5c4 <_txe_thread_create+0x1cc>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4a37      	ldr	r2, [pc, #220]	@ (800d5c4 <_txe_thread_create+0x1cc>)
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	f383 8810 	msr	PRIMASK, r3
}
 800d4f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d4f6:	f7fe fef3 	bl	800c2e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d102      	bne.n	800d508 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d502:	230e      	movs	r3, #14
 800d504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d506:	e042      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d102      	bne.n	800d514 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d50e:	2303      	movs	r3, #3
 800d510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d512:	e03c      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d51a:	2303      	movs	r3, #3
 800d51c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d51e:	e036      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d522:	2bc7      	cmp	r3, #199	@ 0xc7
 800d524:	d802      	bhi.n	800d52c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d526:	2305      	movs	r3, #5
 800d528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d52a:	e030      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d52c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d52e:	2b1f      	cmp	r3, #31
 800d530:	d902      	bls.n	800d538 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d532:	230f      	movs	r3, #15
 800d534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d536:	e02a      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d538:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d53a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d902      	bls.n	800d546 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d540:	2318      	movs	r3, #24
 800d542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d544:	e023      	b.n	800d58e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d902      	bls.n	800d552 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d54c:	2310      	movs	r3, #16
 800d54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d550:	e01d      	b.n	800d58e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d552:	4b1f      	ldr	r3, [pc, #124]	@ (800d5d0 <_txe_thread_create+0x1d8>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55a:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d4 <_txe_thread_create+0x1dc>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d101      	bne.n	800d564 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d560:	2313      	movs	r3, #19
 800d562:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d564:	f3ef 8305 	mrs	r3, IPSR
 800d568:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d56a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d56c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d8 <_txe_thread_create+0x1e0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4313      	orrs	r3, r2
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00b      	beq.n	800d58e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d576:	f3ef 8305 	mrs	r3, IPSR
 800d57a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d57c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d57e:	4b16      	ldr	r3, [pc, #88]	@ (800d5d8 <_txe_thread_create+0x1e0>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4313      	orrs	r3, r2
 800d584:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d588:	d201      	bcs.n	800d58e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d58a:	2313      	movs	r3, #19
 800d58c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d590:	2b00      	cmp	r3, #0
 800d592:	d112      	bne.n	800d5ba <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d596:	9305      	str	r3, [sp, #20]
 800d598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d59e:	9303      	str	r3, [sp, #12]
 800d5a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d5a2:	9302      	str	r3, [sp, #8]
 800d5a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f7fe fc96 	bl	800bee4 <_tx_thread_create>
 800d5b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d5ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3750      	adds	r7, #80	@ 0x50
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	200030b0 	.word	0x200030b0
 800d5c8:	20003020 	.word	0x20003020
 800d5cc:	20003024 	.word	0x20003024
 800d5d0:	20003018 	.word	0x20003018
 800d5d4:	20003160 	.word	0x20003160
 800d5d8:	2000000c 	.word	0x2000000c

0800d5dc <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d5e4:	4b1b      	ldr	r3, [pc, #108]	@ (800d654 <_ux_device_stack_alternate_setting_get+0x78>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3320      	adds	r3, #32
 800d5ea:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	d129      	bne.n	800d648 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d5fa:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800d5fc:	e021      	b.n	800d642 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	7b9b      	ldrb	r3, [r3, #14]
 800d602:	461a      	mov	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4293      	cmp	r3, r2
 800d608:	d118      	bne.n	800d63c <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	3318      	adds	r3, #24
 800d60e:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	3320      	adds	r3, #32
 800d614:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800d61a:	69fa      	ldr	r2, [r7, #28]
 800d61c:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800d61e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	2201      	movs	r2, #1
 800d624:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	2203      	movs	r2, #3
 800d62a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800d62c:	2201      	movs	r2, #1
 800d62e:	2101      	movs	r1, #1
 800d630:	6938      	ldr	r0, [r7, #16]
 800d632:	f001 fccb 	bl	800efcc <_ux_device_stack_transfer_request>
 800d636:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	e006      	b.n	800d64a <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1da      	bne.n	800d5fe <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800d648:	23ff      	movs	r3, #255	@ 0xff
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	20003620 	.word	0x20003620

0800d658 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b0a4      	sub	sp, #144	@ 0x90
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d662:	4bb5      	ldr	r3, [pc, #724]	@ (800d938 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3320      	adds	r3, #32
 800d668:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800d66a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d001      	beq.n	800d676 <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800d672:	2354      	movs	r3, #84	@ 0x54
 800d674:	e1ef      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800d676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d67c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800d680:	e00b      	b.n	800d69a <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800d682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d686:	7b9b      	ldrb	r3, [r3, #14]
 800d688:	461a      	mov	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d009      	beq.n	800d6a4 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800d690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 800d69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1ef      	bne.n	800d682 <_ux_device_stack_alternate_setting_set+0x2a>
 800d6a2:	e000      	b.n	800d6a6 <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 800d6a4:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800d6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800d6ae:	2252      	movs	r2, #82	@ 0x52
 800d6b0:	2107      	movs	r1, #7
 800d6b2:	2002      	movs	r0, #2
 800d6b4:	f001 fd14 	bl	800f0e0 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800d6b8:	2352      	movs	r3, #82	@ 0x52
 800d6ba:	e1cc      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800d6bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6c0:	7bdb      	ldrb	r3, [r3, #15]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d101      	bne.n	800d6ce <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e1c3      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800d6ce:	4b9a      	ldr	r3, [pc, #616]	@ (800d938 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800d6d4:	4b98      	ldr	r3, [pc, #608]	@ (800d938 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800d6e0:	4b95      	ldr	r3, [pc, #596]	@ (800d938 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800d6ec:	e1ad      	b.n	800da4a <_ux_device_stack_alternate_setting_set+0x3f2>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800d6ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800d6f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6fa:	785b      	ldrb	r3, [r3, #1]
 800d6fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800d700:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d704:	2b02      	cmp	r3, #2
 800d706:	f040 8194 	bne.w	800da32 <_ux_device_stack_alternate_setting_set+0x3da>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800d70a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800d70e:	2208      	movs	r2, #8
 800d710:	498a      	ldr	r1, [pc, #552]	@ (800d93c <_ux_device_stack_alternate_setting_set+0x2e4>)
 800d712:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800d716:	f001 fddd 	bl	800f2d4 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800d71a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d71e:	461a      	mov	r2, r3
 800d720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d726:	429a      	cmp	r2, r3
 800d728:	f040 8183 	bne.w	800da32 <_ux_device_stack_alternate_setting_set+0x3da>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800d72c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800d734:	e177      	b.n	800da26 <_ux_device_stack_alternate_setting_set+0x3ce>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800d736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800d73e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d742:	785b      	ldrb	r3, [r3, #1]
 800d744:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800d748:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d74c:	2b04      	cmp	r3, #4
 800d74e:	f040 815e 	bne.w	800da0e <_ux_device_stack_alternate_setting_set+0x3b6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800d752:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d756:	2209      	movs	r2, #9
 800d758:	4979      	ldr	r1, [pc, #484]	@ (800d940 <_ux_device_stack_alternate_setting_set+0x2e8>)
 800d75a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800d75e:	f001 fdb9 	bl	800f2d4 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800d762:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800d766:	461a      	mov	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4293      	cmp	r3, r2
 800d76c:	f040 814f 	bne.w	800da0e <_ux_device_stack_alternate_setting_set+0x3b6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800d770:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d774:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	4293      	cmp	r3, r2
 800d77a:	f040 8148 	bne.w	800da0e <_ux_device_stack_alternate_setting_set+0x3b6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d77e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800d788:	e026      	b.n	800d7d8 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800d78a:	2126      	movs	r1, #38	@ 0x26
 800d78c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d790:	f001 fc0a 	bl	800efa8 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800d794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d79c:	210f      	movs	r1, #15
 800d79e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d7a0:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800d7a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800d7aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800d7b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800d7ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7be:	2200      	movs	r2, #0
 800d7c0:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800d7c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800d7ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800d7d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800d7d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d1d4      	bne.n	800d78a <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800d7e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800d7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 800d7fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d806:	4413      	add	r3, r2
 800d808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800d80c:	e0c9      	b.n	800d9a2 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800d80e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800d816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d81a:	785b      	ldrb	r3, [r3, #1]
 800d81c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800d820:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d824:	2b05      	cmp	r3, #5
 800d826:	d009      	beq.n	800d83c <_ux_device_stack_alternate_setting_set+0x1e4>
 800d828:	2b05      	cmp	r3, #5
 800d82a:	f300 80ad 	bgt.w	800d988 <_ux_device_stack_alternate_setting_set+0x330>
 800d82e:	2b02      	cmp	r3, #2
 800d830:	f000 80a6 	beq.w	800d980 <_ux_device_stack_alternate_setting_set+0x328>
 800d834:	2b04      	cmp	r3, #4
 800d836:	f000 80a3 	beq.w	800d980 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800d83a:	e0a5      	b.n	800d988 <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800d83c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d83e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800d846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d84c:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800d84e:	e011      	b.n	800d874 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800d850:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d104      	bne.n	800d864 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800d85a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d85e:	2201      	movs	r2, #1
 800d860:	601a      	str	r2, [r3, #0]
                                            break;
 800d862:	e00a      	b.n	800d87a <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 800d864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d868:	3380      	adds	r3, #128	@ 0x80
 800d86a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 800d86e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d870:	3b01      	subs	r3, #1
 800d872:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800d874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1ea      	bne.n	800d850 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 800d87a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800d880:	2312      	movs	r3, #18
 800d882:	e0e8      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800d884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d888:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800d88a:	2206      	movs	r2, #6
 800d88c:	492d      	ldr	r1, [pc, #180]	@ (800d944 <_ux_device_stack_alternate_setting_set+0x2ec>)
 800d88e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800d892:	f001 fd1f 	bl	800f2d4 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d89a:	3320      	adds	r3, #32
 800d89c:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800d89e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8a2:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 800d8a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8a8:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800d8aa:	4b23      	ldr	r3, [pc, #140]	@ (800d938 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d11a      	bne.n	800d8ec <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800d8b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8ba:	7bdb      	ldrb	r3, [r3, #15]
 800d8bc:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d013      	beq.n	800d8ec <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800d8c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8c8:	8a1b      	ldrh	r3, [r3, #16]
 800d8ca:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800d8ce:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 800d8d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00a      	beq.n	800d8ec <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800d8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d8:	0adb      	lsrs	r3, r3, #11
 800d8da:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 800d8dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8de:	3301      	adds	r3, #1
 800d8e0:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 800d8e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d8e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8e6:	fb02 f303 	mul.w	r3, r2, r3
 800d8ea:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800d8ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d8f0:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800d8f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8f8:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800d8fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d900:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800d902:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d906:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d90a:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800d90c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d910:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d912:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800d914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d91c:	210e      	movs	r1, #14
 800d91e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d920:	4798      	blx	r3
 800d922:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 800d924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00e      	beq.n	800d948 <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800d92a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d92e:	2200      	movs	r2, #0
 800d930:	601a      	str	r2, [r3, #0]
                                        return(status);
 800d932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d934:	e08f      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>
 800d936:	bf00      	nop
 800d938:	20003620 	.word	0x20003620
 800d93c:	20000040 	.word	0x20000040
 800d940:	20000048 	.word	0x20000048
 800d944:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800d948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800d952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d956:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d95a:	61da      	str	r2, [r3, #28]
                                    break;
 800d95c:	e015      	b.n	800d98a <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d95e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d962:	69db      	ldr	r3, [r3, #28]
 800d964:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800d966:	e002      	b.n	800d96e <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800d968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800d96e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1f8      	bne.n	800d968 <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800d976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d978:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d97c:	615a      	str	r2, [r3, #20]
                                    break;
 800d97e:	e004      	b.n	800d98a <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 800d980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 800d986:	e000      	b.n	800d98a <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 800d988:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800d98a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d98e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800d996:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d99a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d99c:	4413      	add	r3, r2
 800d99e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 800d9a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f47f af31 	bne.w	800d80e <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800d9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9b0:	330c      	adds	r3, #12
 800d9b2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800d9b6:	220c      	movs	r2, #12
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f001 ff2f 	bl	800f81c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800d9be:	4b28      	ldr	r3, [pc, #160]	@ (800da60 <_ux_device_stack_alternate_setting_set+0x408>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9c6:	7b9b      	ldrb	r3, [r3, #14]
 800d9c8:	3344      	adds	r3, #68	@ 0x44
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4413      	add	r3, r2
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800d9d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <_ux_device_stack_alternate_setting_set+0x388>
 800d9d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d101      	bne.n	800d9e4 <_ux_device_stack_alternate_setting_set+0x38c>
                            {

                                return (UX_NO_CLASS_MATCH);
 800d9e0:	2357      	movs	r3, #87	@ 0x57
 800d9e2:	e038      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800d9e4:	2306      	movs	r3, #6
 800d9e6:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800d9e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9ec:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800d9ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800d9f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d9f8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800d9fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da00:	f107 020c 	add.w	r2, r7, #12
 800da04:	4610      	mov	r0, r2
 800da06:	4798      	blx	r3
 800da08:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800da0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da0c:	e023      	b.n	800da56 <_ux_device_stack_alternate_setting_set+0x3fe>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800da0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800da12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800da1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da20:	4413      	add	r3, r2
 800da22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 800da26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f ae83 	bne.w	800d736 <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800da30:	e010      	b.n	800da54 <_ux_device_stack_alternate_setting_set+0x3fc>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800da32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800da36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800da3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800da42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da44:	4413      	add	r3, r2
 800da46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 800da4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f47f ae4d 	bne.w	800d6ee <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800da54:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 800da56:	4618      	mov	r0, r3
 800da58:	3790      	adds	r7, #144	@ 0x90
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20003620 	.word	0x20003620

0800da64 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b092      	sub	sp, #72	@ 0x48
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800da72:	2300      	movs	r3, #0
 800da74:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800da76:	f107 0310 	add.w	r3, r7, #16
 800da7a:	223f      	movs	r2, #63	@ 0x3f
 800da7c:	4619      	mov	r1, r3
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f002 f81b 	bl	800faba <_ux_utility_string_length_check>
 800da84:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 800da86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <_ux_device_stack_class_register+0x2c>
        return(status);
 800da8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da8e:	e035      	b.n	800dafc <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800da90:	4b1c      	ldr	r3, [pc, #112]	@ (800db04 <_ux_device_stack_class_register+0xa0>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800da98:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800da9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d12b      	bne.n	800dafa <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800daa2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	3301      	adds	r3, #1
 800daa8:	461a      	mov	r2, r3
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	f001 feb6 	bl	800f81c <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800dab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800dab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800daba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800dabe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800dac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800dace:	2305      	movs	r3, #5
 800dad0:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 800dad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dad4:	63bb      	str	r3, [r7, #56]	@ 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800dad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dad8:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800dada:	f107 0214 	add.w	r2, r7, #20
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	4610      	mov	r0, r2
 800dae2:	4798      	blx	r3
 800dae4:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800dae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <_ux_device_stack_class_register+0x8c>
                return(status);
 800daec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daee:	e005      	b.n	800dafc <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800daf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daf2:	2201      	movs	r2, #1
 800daf4:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800daf6:	2300      	movs	r3, #0
 800daf8:	e000      	b.n	800dafc <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800dafa:	2312      	movs	r3, #18
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3748      	adds	r7, #72	@ 0x48
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	20003620 	.word	0x20003620

0800db08 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b08a      	sub	sp, #40	@ 0x28
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800db14:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc4 <_ux_device_stack_clear_feature+0xbc>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800db1a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbc4 <_ux_device_stack_clear_feature+0xbc>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3320      	adds	r3, #32
 800db20:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	3318      	adds	r3, #24
 800db26:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 0303 	and.w	r3, r3, #3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <_ux_device_stack_clear_feature+0x30>
 800db32:	2b02      	cmp	r3, #2
 800db34:	d011      	beq.n	800db5a <_ux_device_stack_clear_feature+0x52>
 800db36:	e036      	b.n	800dba6 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d13b      	bne.n	800dbb6 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800db3e:	4b21      	ldr	r3, [pc, #132]	@ (800dbc4 <_ux_device_stack_clear_feature+0xbc>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800db4a:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc4 <_ux_device_stack_clear_feature+0xbc>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2200      	movs	r2, #0
 800db50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800db54:	e02f      	b.n	800dbb6 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800db56:	2354      	movs	r3, #84	@ 0x54
 800db58:	e02f      	b.n	800dbba <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db60:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800db62:	e01d      	b.n	800dba0 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db66:	69db      	ldr	r3, [r3, #28]
 800db68:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800db6a:	e013      	b.n	800db94 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	7b9b      	ldrb	r3, [r3, #14]
 800db70:	461a      	mov	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4293      	cmp	r3, r2
 800db76:	d10a      	bne.n	800db8e <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	6a3a      	ldr	r2, [r7, #32]
 800db7e:	2110      	movs	r1, #16
 800db80:	69f8      	ldr	r0, [r7, #28]
 800db82:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	2200      	movs	r2, #0
 800db88:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800db8a:	2300      	movs	r3, #0
 800db8c:	e015      	b.n	800dbba <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	695b      	ldr	r3, [r3, #20]
 800db92:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800db94:	6a3b      	ldr	r3, [r7, #32]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1e8      	bne.n	800db6c <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800dba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1de      	bne.n	800db64 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	2114      	movs	r1, #20
 800dbae:	69f8      	ldr	r0, [r7, #28]
 800dbb0:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e001      	b.n	800dbba <_ux_device_stack_clear_feature+0xb2>
        break;
 800dbb6:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3728      	adds	r7, #40	@ 0x28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20003620 	.word	0x20003620

0800dbc8 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dbce:	4b0f      	ldr	r3, [pc, #60]	@ (800dc0c <_ux_device_stack_configuration_get+0x44>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	3320      	adds	r3, #32
 800dbd4:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3318      	adds	r3, #24
 800dbda:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	3320      	adds	r3, #32
 800dbe0:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800dbec:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800dbee:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f001 f9e6 	bl	800efcc <_ux_device_stack_transfer_request>
 800dc00:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800dc02:	683b      	ldr	r3, [r7, #0]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20003620 	.word	0x20003620

0800dc10 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b0a0      	sub	sp, #128	@ 0x80
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800dc18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800dc24:	2300      	movs	r3, #0
 800dc26:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dc30:	4b84      	ldr	r3, [pc, #528]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dc36:	4b83      	ldr	r3, [pc, #524]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3320      	adds	r3, #32
 800dc3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800dc42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d101      	bne.n	800dc52 <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e139      	b.n	800dec6 <_ux_device_stack_configuration_set+0x2b6>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800dc52:	4b7c      	ldr	r3, [pc, #496]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800dc5c:	4b79      	ldr	r3, [pc, #484]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc64:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800dc66:	e01f      	b.n	800dca8 <_ux_device_stack_configuration_set+0x98>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800dc68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800dc6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc70:	785b      	ldrb	r3, [r3, #1]
 800dc72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800dc76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d10c      	bne.n	800dc98 <_ux_device_stack_configuration_set+0x88>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800dc7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc82:	2208      	movs	r2, #8
 800dc84:	4970      	ldr	r1, [pc, #448]	@ (800de48 <_ux_device_stack_configuration_set+0x238>)
 800dc86:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dc88:	f001 fb24 	bl	800f2d4 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800dc8c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800dc90:	461a      	mov	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d00b      	beq.n	800dcb0 <_ux_device_stack_configuration_set+0xa0>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800dc98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dc9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800dca0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dca4:	4413      	add	r3, r2
 800dca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800dca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1dc      	bne.n	800dc68 <_ux_device_stack_configuration_set+0x58>
 800dcae:	e000      	b.n	800dcb2 <_ux_device_stack_configuration_set+0xa2>
                break;
 800dcb0:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800dcb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d104      	bne.n	800dcc2 <_ux_device_stack_configuration_set+0xb2>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <_ux_device_stack_configuration_set+0xb2>
        return(UX_ERROR);
 800dcbe:	23ff      	movs	r3, #255	@ 0xff
 800dcc0:	e101      	b.n	800dec6 <_ux_device_stack_configuration_set+0x2b6>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800dcc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d021      	beq.n	800dd10 <_ux_device_stack_configuration_set+0x100>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800dccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dcd2:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800dcd4:	e019      	b.n	800dd0a <_ux_device_stack_configuration_set+0xfa>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800dcda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dcdc:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800dcde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800dce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dce6:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800dce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d005      	beq.n	800dcfa <_ux_device_stack_configuration_set+0xea>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800dcee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcf2:	f107 0208 	add.w	r2, r7, #8
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800dcfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800dd00:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800dd02:	f000 ff0f 	bl	800eb24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800dd06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd08:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 800dd0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1e2      	bne.n	800dcd6 <_ux_device_stack_configuration_set+0xc6>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800dd10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800dd18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800dd1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	2201      	movs	r2, #1
 800dd24:	2113      	movs	r1, #19
 800dd26:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dd28:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <_ux_device_stack_configuration_set+0x124>
        return(UX_SUCCESS);
 800dd30:	2300      	movs	r3, #0
 800dd32:	e0c8      	b.n	800dec6 <_ux_device_stack_configuration_set+0x2b6>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800dd34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800dd3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd3e:	339c      	adds	r3, #156	@ 0x9c
    _ux_utility_descriptor_parse(device_framework,
 800dd40:	2208      	movs	r2, #8
 800dd42:	4941      	ldr	r1, [pc, #260]	@ (800de48 <_ux_device_stack_configuration_set+0x238>)
 800dd44:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dd46:	f001 fac5 	bl	800f2d4 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800dd4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dd4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <_ux_device_stack_configuration_set+0x14a>
 800dd56:	2202      	movs	r2, #2
 800dd58:	e000      	b.n	800dd5c <_ux_device_stack_configuration_set+0x14c>
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	4b39      	ldr	r3, [pc, #228]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800dd64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dd68:	115b      	asrs	r3, r3, #5
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4b35      	ldr	r3, [pc, #212]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f002 0201 	and.w	r2, r2, #1
 800dd74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800dd78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd7c:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800dd7e:	e094      	b.n	800deaa <_ux_device_stack_configuration_set+0x29a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800dd80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800dd86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dd88:	785b      	ldrb	r3, [r3, #1]
 800dd8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800dd8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd92:	2b0b      	cmp	r3, #11
 800dd94:	d109      	bne.n	800ddaa <_ux_device_stack_configuration_set+0x19a>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800dd96:	2301      	movs	r3, #1
 800dd98:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800dd9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dd9c:	3302      	adds	r3, #2
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800dda2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dda4:	3303      	adds	r3, #3
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800ddaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d173      	bne.n	800de9a <_ux_device_stack_configuration_set+0x28a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800ddb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ddb6:	2209      	movs	r2, #9
 800ddb8:	4924      	ldr	r1, [pc, #144]	@ (800de4c <_ux_device_stack_configuration_set+0x23c>)
 800ddba:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ddbc:	f001 fa8a 	bl	800f2d4 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800ddc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d168      	bne.n	800de9a <_ux_device_stack_configuration_set+0x28a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800ddc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d140      	bne.n	800de50 <_ux_device_stack_configuration_set+0x240>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800ddce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d122      	bne.n	800de20 <_ux_device_stack_configuration_set+0x210>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800ddda:	4b1a      	ldr	r3, [pc, #104]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800dde2:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800dde4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d122      	bne.n	800de32 <_ux_device_stack_configuration_set+0x222>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800ddec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d11a      	bne.n	800de32 <_ux_device_stack_configuration_set+0x222>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800ddfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddfe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	429a      	cmp	r2, r3
 800de06:	d114      	bne.n	800de32 <_ux_device_stack_configuration_set+0x222>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800de08:	4b0e      	ldr	r3, [pc, #56]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800de10:	3344      	adds	r3, #68	@ 0x44
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de18:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800de1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de1c:	673b      	str	r3, [r7, #112]	@ 0x70
 800de1e:	e008      	b.n	800de32 <_ux_device_stack_configuration_set+0x222>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800de20:	4b08      	ldr	r3, [pc, #32]	@ (800de44 <_ux_device_stack_configuration_set+0x234>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800de28:	3344      	adds	r3, #68	@ 0x44
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	4413      	add	r3, r2
 800de2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800de30:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800de32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de34:	3b01      	subs	r3, #1
 800de36:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800de38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d128      	bne.n	800de90 <_ux_device_stack_configuration_set+0x280>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800de3e:	2300      	movs	r3, #0
 800de40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de42:	e025      	b.n	800de90 <_ux_device_stack_configuration_set+0x280>
 800de44:	20003620 	.word	0x20003620
 800de48:	20000040 	.word	0x20000040
 800de4c:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800de50:	4b1f      	ldr	r3, [pc, #124]	@ (800ded0 <_ux_device_stack_configuration_set+0x2c0>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800de58:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800de5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d116      	bne.n	800de90 <_ux_device_stack_configuration_set+0x280>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800de62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800de66:	461a      	mov	r2, r3
 800de68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800de6e:	429a      	cmp	r2, r3
 800de70:	d10e      	bne.n	800de90 <_ux_device_stack_configuration_set+0x280>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800de72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de74:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d108      	bne.n	800de90 <_ux_device_stack_configuration_set+0x280>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800de7e:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <_ux_device_stack_configuration_set+0x2c0>)
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800de86:	3344      	adds	r3, #68	@ 0x44
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4413      	add	r3, r2
 800de8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de8e:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800de90:	2200      	movs	r2, #0
 800de92:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800de94:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800de96:	f000 fe8d 	bl	800ebb4 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800de9a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800de9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800dea2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dea6:	4413      	add	r3, r2
 800dea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800deaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800deac:	2b00      	cmp	r3, #0
 800deae:	f47f af67 	bne.w	800dd80 <_ux_device_stack_configuration_set+0x170>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800deb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800deb4:	2203      	movs	r2, #3
 800deb6:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800deb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	2203      	movs	r2, #3
 800debe:	2113      	movs	r1, #19
 800dec0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dec2:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3780      	adds	r7, #128	@ 0x80
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20003620 	.word	0x20003620

0800ded4 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b09d      	sub	sp, #116	@ 0x74
 800ded8:	af02      	add	r7, sp, #8
 800deda:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800dedc:	23ff      	movs	r3, #255	@ 0xff
 800dede:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dee0:	4b9c      	ldr	r3, [pc, #624]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dee6:	4b9b      	ldr	r3, [pc, #620]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3320      	adds	r3, #32
 800deec:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def2:	2b00      	cmp	r3, #0
 800def4:	f040 813b 	bne.w	800e16e <_ux_device_stack_control_request_process+0x29a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800defe:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800df06:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	3354      	adds	r3, #84	@ 0x54
 800df0c:	3302      	adds	r3, #2
 800df0e:	4618      	mov	r0, r3
 800df10:	f001 fdbc 	bl	800fa8c <_ux_utility_short_get>
 800df14:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3354      	adds	r3, #84	@ 0x54
 800df1a:	3304      	adds	r3, #4
 800df1c:	4618      	mov	r0, r3
 800df1e:	f001 fdb5 	bl	800fa8c <_ux_utility_short_get>
 800df22:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	3354      	adds	r3, #84	@ 0x54
 800df28:	3306      	adds	r3, #6
 800df2a:	4618      	mov	r0, r3
 800df2c:	f001 fdae 	bl	800fa8c <_ux_utility_short_get>
 800df30:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800df32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df34:	2b06      	cmp	r3, #6
 800df36:	d002      	beq.n	800df3e <_ux_device_stack_control_request_process+0x6a>
 800df38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df3a:	2b07      	cmp	r3, #7
 800df3c:	d10d      	bne.n	800df5a <_ux_device_stack_control_request_process+0x86>
 800df3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df40:	0a1b      	lsrs	r3, r3, #8
 800df42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df46:	2b00      	cmp	r3, #0
 800df48:	d007      	beq.n	800df5a <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800df4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df4c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800df50:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800df52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df54:	f043 0320 	orr.w	r3, r3, #32
 800df58:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800df5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df60:	2b40      	cmp	r3, #64	@ 0x40
 800df62:	d13a      	bne.n	800dfda <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800df64:	4b7b      	ldr	r3, [pc, #492]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d034      	beq.n	800dfda <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800df70:	4b78      	ldr	r3, [pc, #480]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800df78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d12d      	bne.n	800dfda <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800df7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df82:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800df84:	4b73      	ldr	r3, [pc, #460]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f8d3 4180 	ldr.w	r4, [r3, #384]	@ 0x180
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f107 020c 	add.w	r2, r7, #12
 800df94:	9201      	str	r2, [sp, #4]
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800df9e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dfa0:	47a0      	blx	r4
 800dfa2:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800dfa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d110      	bne.n	800dfcc <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800dfaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfac:	3318      	adds	r3, #24
 800dfae:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800dfb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfb2:	3320      	adds	r3, #32
 800dfb4:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f001 f802 	bl	800efcc <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800dfc8:	2300      	movs	r3, #0
 800dfca:	e0d1      	b.n	800e170 <_ux_device_stack_control_request_process+0x29c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800dfcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfce:	3318      	adds	r3, #24
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fb49 	bl	800e668 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e0ca      	b.n	800e170 <_ux_device_stack_control_request_process+0x29c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800dfda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d004      	beq.n	800dfee <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800dfe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfe6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800dfea:	2b40      	cmp	r3, #64	@ 0x40
 800dfec:	d14f      	bne.n	800e08e <_ux_device_stack_control_request_process+0x1ba>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800dfee:	2304      	movs	r3, #4
 800dff0:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800dff2:	2300      	movs	r3, #0
 800dff4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dff6:	e03b      	b.n	800e070 <_ux_device_stack_control_request_process+0x19c>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800dff8:	4b56      	ldr	r3, [pc, #344]	@ (800e154 <_ux_device_stack_control_request_process+0x280>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dffe:	3344      	adds	r3, #68	@ 0x44
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800e008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d02a      	beq.n	800e064 <_ux_device_stack_control_request_process+0x190>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800e00e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e010:	f003 0303 	and.w	r3, r3, #3
 800e014:	2b01      	cmp	r3, #1
 800e016:	d118      	bne.n	800e04a <_ux_device_stack_control_request_process+0x176>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800e018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e01a:	2ba1      	cmp	r3, #161	@ 0xa1
 800e01c:	d110      	bne.n	800e040 <_ux_device_stack_control_request_process+0x16c>
 800e01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10d      	bne.n	800e040 <_ux_device_stack_control_request_process+0x16c>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800e024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e026:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e02a:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800e02c:	2b07      	cmp	r3, #7
 800e02e:	d107      	bne.n	800e040 <_ux_device_stack_control_request_process+0x16c>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e036:	461a      	mov	r2, r3
 800e038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d005      	beq.n	800e04a <_ux_device_stack_control_request_process+0x176>
                            continue;
 800e03e:	e014      	b.n	800e06a <_ux_device_stack_control_request_process+0x196>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 800e040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e042:	b2db      	uxtb	r3, r3
 800e044:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e046:	429a      	cmp	r2, r3
 800e048:	d10e      	bne.n	800e068 <_ux_device_stack_control_request_process+0x194>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800e04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04c:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800e04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e052:	f107 0210 	add.w	r2, r7, #16
 800e056:	4610      	mov	r0, r2
 800e058:	4798      	blx	r3
 800e05a:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800e05c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <_ux_device_stack_control_request_process+0x1a4>
 800e062:	e002      	b.n	800e06a <_ux_device_stack_control_request_process+0x196>
                    continue;
 800e064:	bf00      	nop
 800e066:	e000      	b.n	800e06a <_ux_device_stack_control_request_process+0x196>
                            continue;
 800e068:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800e06a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e06c:	3301      	adds	r3, #1
 800e06e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e072:	2b0f      	cmp	r3, #15
 800e074:	d9c0      	bls.n	800dff8 <_ux_device_stack_control_request_process+0x124>
 800e076:	e000      	b.n	800e07a <_ux_device_stack_control_request_process+0x1a6>

                    /* We are done, break the loop!  */
                    break;
 800e078:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800e07a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d004      	beq.n	800e08a <_ux_device_stack_control_request_process+0x1b6>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800e080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e082:	3318      	adds	r3, #24
 800e084:	4618      	mov	r0, r3
 800e086:	f000 faef 	bl	800e668 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800e08a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e08c:	e070      	b.n	800e170 <_ux_device_stack_control_request_process+0x29c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800e08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e090:	2b0c      	cmp	r3, #12
 800e092:	d861      	bhi.n	800e158 <_ux_device_stack_control_request_process+0x284>
 800e094:	a201      	add	r2, pc, #4	@ (adr r2, 800e09c <_ux_device_stack_control_request_process+0x1c8>)
 800e096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09a:	bf00      	nop
 800e09c:	0800e0d1 	.word	0x0800e0d1
 800e0a0:	0800e0df 	.word	0x0800e0df
 800e0a4:	0800e159 	.word	0x0800e159
 800e0a8:	0800e0ed 	.word	0x0800e0ed
 800e0ac:	0800e159 	.word	0x0800e159
 800e0b0:	0800e0fb 	.word	0x0800e0fb
 800e0b4:	0800e111 	.word	0x0800e111
 800e0b8:	0800e11f 	.word	0x0800e11f
 800e0bc:	0800e125 	.word	0x0800e125
 800e0c0:	0800e12d 	.word	0x0800e12d
 800e0c4:	0800e137 	.word	0x0800e137
 800e0c8:	0800e141 	.word	0x0800e141
 800e0cc:	0800e14d 	.word	0x0800e14d
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800e0d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e0d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e0d6:	f000 faff 	bl	800e6d8 <_ux_device_stack_get_status>
 800e0da:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e0dc:	e03f      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800e0de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e0e2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e0e4:	f7ff fd10 	bl	800db08 <_ux_device_stack_clear_feature>
 800e0e8:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e0ea:	e038      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800e0ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e0f0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e0f2:	f000 fec3 	bl	800ee7c <_ux_device_stack_set_feature>
 800e0f6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e0f8:	e031      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800e0fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0fe:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800e100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e102:	699b      	ldr	r3, [r3, #24]
 800e104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e106:	2111      	movs	r1, #17
 800e108:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e10a:	4798      	blx	r3
 800e10c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e10e:	e026      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800e110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e112:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e114:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e116:	f000 f82f 	bl	800e178 <_ux_device_stack_descriptor_send>
 800e11a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e11c:	e01f      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800e11e:	2354      	movs	r3, #84	@ 0x54
 800e120:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e122:	e01c      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800e124:	f7ff fd50 	bl	800dbc8 <_ux_device_stack_configuration_get>
 800e128:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e12a:	e018      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800e12c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e12e:	f7ff fd6f 	bl	800dc10 <_ux_device_stack_configuration_set>
 800e132:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e134:	e013      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800e136:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e138:	f7ff fa50 	bl	800d5dc <_ux_device_stack_alternate_setting_get>
 800e13c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e13e:	e00e      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800e140:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e142:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e144:	f7ff fa88 	bl	800d658 <_ux_device_stack_alternate_setting_set>
 800e148:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800e14a:	e008      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800e14c:	2300      	movs	r3, #0
 800e14e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e150:	e005      	b.n	800e15e <_ux_device_stack_control_request_process+0x28a>
 800e152:	bf00      	nop
 800e154:	20003620 	.word	0x20003620

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800e158:	2354      	movs	r3, #84	@ 0x54
 800e15a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800e15c:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800e15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e160:	2b00      	cmp	r3, #0
 800e162:	d004      	beq.n	800e16e <_ux_device_stack_control_request_process+0x29a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800e164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e166:	3318      	adds	r3, #24
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 fa7d 	bl	800e668 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800e16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800e170:	4618      	mov	r0, r3
 800e172:	376c      	adds	r7, #108	@ 0x6c
 800e174:	46bd      	mov	sp, r7
 800e176:	bd90      	pop	{r4, r7, pc}

0800e178 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b09a      	sub	sp, #104	@ 0x68
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800e188:	23ff      	movs	r3, #255	@ 0xff
 800e18a:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e18c:	4b98      	ldr	r3, [pc, #608]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e192:	4b97      	ldr	r3, [pc, #604]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3320      	adds	r3, #32
 800e198:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19c:	3318      	adds	r3, #24
 800e19e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a2:	3320      	adds	r3, #32
 800e1a4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a8:	2203      	movs	r2, #3
 800e1aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	0a1b      	lsrs	r3, r3, #8
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	2b0e      	cmp	r3, #14
 800e1c8:	f200 81e1 	bhi.w	800e58e <_ux_device_stack_descriptor_send+0x416>
 800e1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d4 <_ux_device_stack_descriptor_send+0x5c>)
 800e1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d2:	bf00      	nop
 800e1d4:	0800e211 	.word	0x0800e211
 800e1d8:	0800e2a5 	.word	0x0800e2a5
 800e1dc:	0800e3c1 	.word	0x0800e3c1
 800e1e0:	0800e58f 	.word	0x0800e58f
 800e1e4:	0800e58f 	.word	0x0800e58f
 800e1e8:	0800e21b 	.word	0x0800e21b
 800e1ec:	0800e2a5 	.word	0x0800e2a5
 800e1f0:	0800e58f 	.word	0x0800e58f
 800e1f4:	0800e22b 	.word	0x0800e22b
 800e1f8:	0800e58f 	.word	0x0800e58f
 800e1fc:	0800e58f 	.word	0x0800e58f
 800e200:	0800e58f 	.word	0x0800e58f
 800e204:	0800e58f 	.word	0x0800e58f
 800e208:	0800e58f 	.word	0x0800e58f
 800e20c:	0800e2a5 	.word	0x0800e2a5
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b12      	cmp	r3, #18
 800e214:	d901      	bls.n	800e21a <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800e216:	2312      	movs	r3, #18
 800e218:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b06      	cmp	r3, #6
 800e21e:	d104      	bne.n	800e22a <_ux_device_stack_descriptor_send+0xb2>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b0a      	cmp	r3, #10
 800e224:	d901      	bls.n	800e22a <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800e226:	230a      	movs	r3, #10
 800e228:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2b09      	cmp	r3, #9
 800e22e:	d104      	bne.n	800e23a <_ux_device_stack_descriptor_send+0xc2>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b05      	cmp	r3, #5
 800e234:	d901      	bls.n	800e23a <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800e236:	2305      	movs	r3, #5
 800e238:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800e23a:	4b6d      	ldr	r3, [pc, #436]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e242:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800e244:	4b6a      	ldr	r3, [pc, #424]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e24c:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800e24e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e252:	4413      	add	r3, r2
 800e254:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800e256:	e020      	b.n	800e29a <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800e258:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800e25e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e260:	3301      	adds	r3, #1
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4293      	cmp	r3, r2
 800e26a:	d10e      	bne.n	800e28a <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e272:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e274:	4618      	mov	r0, r3
 800e276:	f001 fad1 	bl	800f81c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e27e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e280:	f000 fea4 	bl	800efcc <_ux_device_stack_transfer_request>
 800e284:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800e286:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800e288:	e18c      	b.n	800e5a4 <_ux_device_stack_descriptor_send+0x42c>
            device_framework_length -=  descriptor_length;
 800e28a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800e292:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e296:	4413      	add	r3, r2
 800e298:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800e29a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e29c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d3da      	bcc.n	800e258 <_ux_device_stack_descriptor_send+0xe0>
        break;
 800e2a2:	e17f      	b.n	800e5a4 <_ux_device_stack_descriptor_send+0x42c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2b07      	cmp	r3, #7
 800e2a8:	d10e      	bne.n	800e2c8 <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800e2aa:	4b51      	ldr	r3, [pc, #324]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e2b2:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800e2b4:	4b4e      	ldr	r3, [pc, #312]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e2bc:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800e2be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e2c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2c2:	4413      	add	r3, r2
 800e2c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2c6:	e045      	b.n	800e354 <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800e2c8:	4b49      	ldr	r3, [pc, #292]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e2d0:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800e2d2:	4b47      	ldr	r3, [pc, #284]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e2da:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800e2dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e2de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2e0:	4413      	add	r3, r2
 800e2e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800e2e4:	e036      	b.n	800e354 <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800e2e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b0f      	cmp	r3, #15
 800e2f0:	d110      	bne.n	800e314 <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800e2f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	2b0f      	cmp	r3, #15
 800e2fa:	d123      	bne.n	800e344 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800e2fc:	f107 0310 	add.w	r3, r7, #16
 800e300:	2204      	movs	r2, #4
 800e302:	493c      	ldr	r1, [pc, #240]	@ (800e3f4 <_ux_device_stack_descriptor_send+0x27c>)
 800e304:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e306:	f000 ffe5 	bl	800f2d4 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800e30a:	8a7b      	ldrh	r3, [r7, #18]
 800e30c:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800e30e:	2300      	movs	r3, #0
 800e310:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800e312:	e023      	b.n	800e35c <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800e314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e316:	3301      	adds	r3, #1
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d112      	bne.n	800e344 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800e31e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e322:	429a      	cmp	r2, r3
 800e324:	d10b      	bne.n	800e33e <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800e326:	f107 0318 	add.w	r3, r7, #24
 800e32a:	2208      	movs	r2, #8
 800e32c:	4932      	ldr	r1, [pc, #200]	@ (800e3f8 <_ux_device_stack_descriptor_send+0x280>)
 800e32e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e330:	f000 ffd0 	bl	800f2d4 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800e334:	8b7b      	ldrh	r3, [r7, #26]
 800e336:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800e338:	2300      	movs	r3, #0
 800e33a:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800e33c:	e00e      	b.n	800e35c <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800e33e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e340:	3301      	adds	r3, #1
 800e342:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800e344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800e34c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e350:	4413      	add	r3, r2
 800e352:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800e354:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e358:	429a      	cmp	r2, r3
 800e35a:	d3c4      	bcc.n	800e2e6 <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800e35c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f040 811d 	bne.w	800e59e <_ux_device_stack_descriptor_send+0x426>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800e364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d202      	bcs.n	800e372 <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 800e36c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e36e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e370:	e001      	b.n	800e376 <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e37c:	d90c      	bls.n	800e398 <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800e37e:	2212      	movs	r2, #18
 800e380:	2109      	movs	r1, #9
 800e382:	2002      	movs	r0, #2
 800e384:	f000 feac 	bl	800f0e0 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e38e:	2114      	movs	r1, #20
 800e390:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e392:	4798      	blx	r3
 800e394:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800e396:	e105      	b.n	800e5a4 <_ux_device_stack_descriptor_send+0x42c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800e398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e39e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f001 fa3b 	bl	800f81c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	b2d2      	uxtb	r2, r2
 800e3b0:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e3b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3b8:	f000 fe08 	bl	800efcc <_ux_device_stack_transfer_request>
 800e3bc:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 800e3be:	e0ee      	b.n	800e59e <_ux_device_stack_descriptor_send+0x426>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800e3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d14f      	bne.n	800e466 <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f0 <_ux_device_stack_descriptor_send+0x278>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e3ce:	3302      	adds	r3, #2
 800e3d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3d4:	d912      	bls.n	800e3fc <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800e3d6:	2212      	movs	r2, #18
 800e3d8:	2109      	movs	r1, #9
 800e3da:	2002      	movs	r0, #2
 800e3dc:	f000 fe80 	bl	800f0e0 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e6:	2114      	movs	r1, #20
 800e3e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e3ea:	4798      	blx	r3
 800e3ec:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800e3ee:	e0d9      	b.n	800e5a4 <_ux_device_stack_descriptor_send+0x42c>
 800e3f0:	20003620 	.word	0x20003620
 800e3f4:	20000054 	.word	0x20000054
 800e3f8:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800e402:	4b6b      	ldr	r3, [pc, #428]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	3302      	adds	r3, #2
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e412:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800e414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e416:	3301      	adds	r3, #1
 800e418:	2203      	movs	r2, #3
 800e41a:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800e41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41e:	1c98      	adds	r0, r3, #2
 800e420:	4b63      	ldr	r3, [pc, #396]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800e428:	4b61      	ldr	r3, [pc, #388]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e42a:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800e42c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e430:	461a      	mov	r2, r3
 800e432:	f001 f9f3 	bl	800f81c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800e436:	4b5e      	ldr	r3, [pc, #376]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e43e:	3302      	adds	r3, #2
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	429a      	cmp	r2, r3
 800e444:	d906      	bls.n	800e454 <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800e446:	4b5a      	ldr	r3, [pc, #360]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e44e:	3302      	adds	r3, #2
 800e450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e452:	e001      	b.n	800e458 <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e45c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e45e:	f000 fdb5 	bl	800efcc <_ux_device_stack_transfer_request>
 800e462:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800e464:	e09d      	b.n	800e5a2 <_ux_device_stack_descriptor_send+0x42a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800e466:	4b52      	ldr	r3, [pc, #328]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800e46e:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800e470:	4b4f      	ldr	r3, [pc, #316]	@ (800e5b0 <_ux_device_stack_descriptor_send+0x438>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800e478:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800e47a:	e07a      	b.n	800e572 <_ux_device_stack_descriptor_send+0x3fa>
                if (_ux_utility_short_get(string_framework) == request_index)
 800e47c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e47e:	f001 fb05 	bl	800fa8c <_ux_utility_short_get>
 800e482:	4602      	mov	r2, r0
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	4293      	cmp	r3, r2
 800e488:	d164      	bne.n	800e554 <_ux_device_stack_descriptor_send+0x3dc>
                    if (*(string_framework + 2) == descriptor_index)
 800e48a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e48c:	3302      	adds	r3, #2
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	461a      	mov	r2, r3
 800e492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e494:	4293      	cmp	r3, r2
 800e496:	d15d      	bne.n	800e554 <_ux_device_stack_descriptor_send+0x3dc>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e49a:	3303      	adds	r3, #3
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4a6:	dd0c      	ble.n	800e4c2 <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800e4a8:	2212      	movs	r2, #18
 800e4aa:	2109      	movs	r1, #9
 800e4ac:	2002      	movs	r0, #2
 800e4ae:	f000 fe17 	bl	800f0e0 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4b8:	2114      	movs	r1, #20
 800e4ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e4bc:	4798      	blx	r3
 800e4be:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 800e4c0:	e05a      	b.n	800e578 <_ux_device_stack_descriptor_send+0x400>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800e4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4ca:	3303      	adds	r3, #3
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d8:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800e4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4dc:	3301      	adds	r3, #1
 800e4de:	2203      	movs	r2, #3
 800e4e0:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4e6:	e015      	b.n	800e514 <_ux_device_stack_descriptor_send+0x39c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800e4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4ee:	441a      	add	r2, r3
 800e4f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4f8:	440b      	add	r3, r1
 800e4fa:	7812      	ldrb	r2, [r2, #0]
 800e4fc:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800e4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e500:	3301      	adds	r3, #1
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	3301      	adds	r3, #1
 800e506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e508:	4413      	add	r3, r2
 800e50a:	2200      	movs	r2, #0
 800e50c:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800e50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e510:	3301      	adds	r3, #1
 800e512:	643b      	str	r3, [r7, #64]	@ 0x40
 800e514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e516:	3303      	adds	r3, #3
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	461a      	mov	r2, r3
 800e51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e51e:	4293      	cmp	r3, r2
 800e520:	d3e2      	bcc.n	800e4e8 <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800e522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e524:	3303      	adds	r3, #3
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	3301      	adds	r3, #1
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	461a      	mov	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4293      	cmp	r3, r2
 800e532:	d906      	bls.n	800e542 <_ux_device_stack_descriptor_send+0x3ca>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800e534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e536:	3303      	adds	r3, #3
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	3301      	adds	r3, #1
 800e53c:	005b      	lsls	r3, r3, #1
 800e53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e540:	e001      	b.n	800e546 <_ux_device_stack_descriptor_send+0x3ce>
                            length =  host_length;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e54a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e54c:	f000 fd3e 	bl	800efcc <_ux_device_stack_transfer_request>
 800e550:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 800e552:	e011      	b.n	800e578 <_ux_device_stack_descriptor_send+0x400>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800e554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e556:	3303      	adds	r3, #3
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	461a      	mov	r2, r3
 800e55c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e55e:	1a9b      	subs	r3, r3, r2
 800e560:	3b04      	subs	r3, #4
 800e562:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800e564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e566:	3303      	adds	r3, #3
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	3304      	adds	r3, #4
 800e56c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e56e:	4413      	add	r3, r2
 800e570:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800e572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e574:	2b00      	cmp	r3, #0
 800e576:	d181      	bne.n	800e47c <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 800e578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d111      	bne.n	800e5a2 <_ux_device_stack_descriptor_send+0x42a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e584:	2114      	movs	r1, #20
 800e586:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e588:	4798      	blx	r3
                return(UX_ERROR);
 800e58a:	23ff      	movs	r3, #255	@ 0xff
 800e58c:	e00b      	b.n	800e5a6 <_ux_device_stack_descriptor_send+0x42e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e594:	2114      	movs	r1, #20
 800e596:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e598:	4798      	blx	r3
        return(UX_ERROR);
 800e59a:	23ff      	movs	r3, #255	@ 0xff
 800e59c:	e003      	b.n	800e5a6 <_ux_device_stack_descriptor_send+0x42e>
        break;
 800e59e:	bf00      	nop
 800e5a0:	e000      	b.n	800e5a4 <_ux_device_stack_descriptor_send+0x42c>
        break;
 800e5a2:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800e5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3768      	adds	r7, #104	@ 0x68
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	20003620 	.word	0x20003620

0800e5b4 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b092      	sub	sp, #72	@ 0x48
 800e5b8:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800e5ba:	23ff      	movs	r3, #255	@ 0xff
 800e5bc:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e5be:	4b29      	ldr	r3, [pc, #164]	@ (800e664 <_ux_device_stack_disconnect+0xb0>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e5c4:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <_ux_device_stack_disconnect+0xb0>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3320      	adds	r3, #32
 800e5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b03      	cmp	r3, #3
 800e5d2:	d123      	bne.n	800e61c <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e5da:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800e5dc:	e018      	b.n	800e610 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800e5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e4:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800e5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800e5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ee:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5fa:	1d3a      	adds	r2, r7, #4
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800e600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e602:	699b      	ldr	r3, [r3, #24]
 800e604:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800e606:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e608:	f000 fa8c 	bl	800eb24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60e:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800e610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1e3      	bne.n	800e5de <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800e616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e618:	2201      	movs	r2, #1
 800e61a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800e61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d107      	bne.n	800e634 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800e624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e626:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800e628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e62a:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800e62c:	210f      	movs	r1, #15
 800e62e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e630:	4798      	blx	r3
 800e632:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	2200      	movs	r2, #0
 800e638:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800e63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e642:	4b08      	ldr	r3, [pc, #32]	@ (800e664 <_ux_device_stack_disconnect+0xb0>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d005      	beq.n	800e65a <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800e64e:	4b05      	ldr	r3, [pc, #20]	@ (800e664 <_ux_device_stack_disconnect+0xb0>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800e656:	200a      	movs	r0, #10
 800e658:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800e65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3748      	adds	r7, #72	@ 0x48
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20003620 	.word	0x20003620

0800e668 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b088      	sub	sp, #32
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e670:	4b18      	ldr	r3, [pc, #96]	@ (800e6d4 <_ux_device_stack_endpoint_stall+0x6c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800e676:	23ff      	movs	r3, #255	@ 0xff
 800e678:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e67a:	f3ef 8310 	mrs	r3, PRIMASK
 800e67e:	613b      	str	r3, [r7, #16]
    return(posture);
 800e680:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e682:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e684:	b672      	cpsid	i
    return(int_posture);
 800e686:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800e688:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800e68a:	4b12      	ldr	r3, [pc, #72]	@ (800e6d4 <_ux_device_stack_endpoint_stall+0x6c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6a1b      	ldr	r3, [r3, #32]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d013      	beq.n	800e6bc <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d00f      	beq.n	800e6bc <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	2114      	movs	r1, #20
 800e6a4:	69b8      	ldr	r0, [r7, #24]
 800e6a6:	4798      	blx	r3
 800e6a8:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	7bdb      	ldrb	r3, [r3, #15]
 800e6ae:	f003 0303 	and.w	r3, r3, #3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2202      	movs	r2, #2
 800e6ba:	605a      	str	r2, [r3, #4]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	f383 8810 	msr	PRIMASK, r3
}
 800e6c6:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800e6c8:	69fb      	ldr	r3, [r7, #28]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3720      	adds	r7, #32
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20003620 	.word	0x20003620

0800e6d8 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	@ 0x28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e6e4:	4b39      	ldr	r3, [pc, #228]	@ (800e7cc <_ux_device_stack_get_status+0xf4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e6ea:	4b38      	ldr	r3, [pc, #224]	@ (800e7cc <_ux_device_stack_get_status+0xf4>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3320      	adds	r3, #32
 800e6f0:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	3318      	adds	r3, #24
 800e6f6:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	3320      	adds	r3, #32
 800e6fc:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	2200      	movs	r2, #0
 800e704:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	3301      	adds	r3, #1
 800e70c:	2200      	movs	r2, #0
 800e70e:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800e710:	2302      	movs	r3, #2
 800e712:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f003 0303 	and.w	r3, r3, #3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <_ux_device_stack_get_status+0x4c>
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d021      	beq.n	800e766 <_ux_device_stack_get_status+0x8e>
 800e722:	e03a      	b.n	800e79a <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800e72a:	d102      	bne.n	800e732 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800e72c:	2301      	movs	r3, #1
 800e72e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800e730:	e03b      	b.n	800e7aa <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800e732:	4b26      	ldr	r3, [pc, #152]	@ (800e7cc <_ux_device_stack_get_status+0xf4>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	d103      	bne.n	800e746 <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	2201      	movs	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800e746:	4b21      	ldr	r3, [pc, #132]	@ (800e7cc <_ux_device_stack_get_status+0xf4>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d02b      	beq.n	800e7aa <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	781a      	ldrb	r2, [r3, #0]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f042 0202 	orr.w	r2, r2, #2
 800e760:	b2d2      	uxtb	r2, r2
 800e762:	701a      	strb	r2, [r3, #0]
        break;
 800e764:	e021      	b.n	800e7aa <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	2115      	movs	r1, #21
 800e76e:	6a38      	ldr	r0, [r7, #32]
 800e770:	4798      	blx	r3
 800e772:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	2bff      	cmp	r3, #255	@ 0xff
 800e778:	d007      	beq.n	800e78a <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d116      	bne.n	800e7ae <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	2201      	movs	r2, #1
 800e786:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800e788:	e011      	b.n	800e7ae <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	2114      	movs	r1, #20
 800e792:	6a38      	ldr	r0, [r7, #32]
 800e794:	4798      	blx	r3
            return(UX_SUCCESS);            
 800e796:	2300      	movs	r3, #0
 800e798:	e014      	b.n	800e7c4 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	2114      	movs	r1, #20
 800e7a2:	6a38      	ldr	r0, [r7, #32]
 800e7a4:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e00c      	b.n	800e7c4 <_ux_device_stack_get_status+0xec>
        break;
 800e7aa:	bf00      	nop
 800e7ac:	e000      	b.n	800e7b0 <_ux_device_stack_get_status+0xd8>
        break;
 800e7ae:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	2203      	movs	r2, #3
 800e7b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800e7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e7ba:	6978      	ldr	r0, [r7, #20]
 800e7bc:	f000 fc06 	bl	800efcc <_ux_device_stack_transfer_request>
 800e7c0:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800e7c2:	693b      	ldr	r3, [r7, #16]
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3728      	adds	r7, #40	@ 0x28
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20003620 	.word	0x20003620

0800e7d0 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b094      	sub	sp, #80	@ 0x50
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e7de:	4b9a      	ldr	r3, [pc, #616]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3320      	adds	r3, #32
 800e7e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800e7e6:	4b98      	ldr	r3, [pc, #608]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800e7f0:	4b95      	ldr	r3, [pc, #596]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800e7fa:	4b93      	ldr	r3, [pc, #588]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800e804:	4b90      	ldr	r3, [pc, #576]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800e80e:	4b8e      	ldr	r3, [pc, #568]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e814:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800e818:	4b8b      	ldr	r3, [pc, #556]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e81e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800e822:	4b89      	ldr	r3, [pc, #548]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e828:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800e82c:	4b86      	ldr	r3, [pc, #536]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e832:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800e836:	4b84      	ldr	r3, [pc, #528]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e83c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800e840:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800e844:	2100      	movs	r1, #0
 800e846:	2000      	movs	r0, #0
 800e848:	f000 fde2 	bl	800f410 <_ux_utility_memory_allocate>
 800e84c:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800e854:	2312      	movs	r3, #18
 800e856:	e15d      	b.n	800eb14 <_ux_device_stack_initialize+0x344>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800e858:	4b7b      	ldr	r3, [pc, #492]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6a3a      	ldr	r2, [r7, #32]
 800e85e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800e862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e864:	3338      	adds	r3, #56	@ 0x38
 800e866:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800e868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e86c:	2101      	movs	r1, #1
 800e86e:	2000      	movs	r0, #0
 800e870:	f000 fdce 	bl	800f410 <_ux_utility_memory_allocate>
 800e874:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d102      	bne.n	800e888 <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800e882:	2312      	movs	r3, #18
 800e884:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e886:	e001      	b.n	800e88c <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800e888:	2300      	movs	r3, #0
 800e88a:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800e890:	2300      	movs	r3, #0
 800e892:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800e894:	2300      	movs	r3, #0
 800e896:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800e898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f040 8090 	bne.w	800e9c0 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800e8a0:	4b69      	ldr	r3, [pc, #420]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800e8aa:	4b67      	ldr	r3, [pc, #412]	@ (800ea48 <_ux_device_stack_initialize+0x278>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800e8b2:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800e8c0:	e054      	b.n	800e96c <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800e8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800e8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d029      	beq.n	800e928 <_ux_device_stack_initialize+0x158>
 800e8d4:	2b04      	cmp	r3, #4
 800e8d6:	d13e      	bne.n	800e956 <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800e8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8da:	3303      	adds	r3, #3
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10b      	bne.n	800e8fa <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800e8e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e6:	4413      	add	r3, r2
 800e8e8:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800e8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8f8:	e00a      	b.n	800e910 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800e8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e904:	4293      	cmp	r3, r2
 800e906:	d203      	bcs.n	800e910 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800e908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e90a:	3304      	adds	r3, #4
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800e910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e912:	3302      	adds	r3, #2
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d21d      	bcs.n	800e95a <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800e91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e920:	3302      	adds	r3, #2
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800e926:	e018      	b.n	800e95a <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800e928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d901      	bls.n	800e934 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800e930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e932:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800e934:	2300      	movs	r3, #0
 800e936:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800e938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93c:	4413      	add	r3, r2
 800e93e:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800e940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e944:	429a      	cmp	r2, r3
 800e946:	d901      	bls.n	800e94c <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800e948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e94a:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800e950:	2300      	movs	r3, #0
 800e952:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800e954:	e002      	b.n	800e95c <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800e956:	bf00      	nop
 800e958:	e000      	b.n	800e95c <_ux_device_stack_initialize+0x18c>
                break;
 800e95a:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800e95c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800e964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	4413      	add	r3, r2
 800e96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1a7      	bne.n	800e8c2 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800e972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e976:	4413      	add	r3, r2
 800e978:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800e97a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e97e:	429a      	cmp	r2, r3
 800e980:	d901      	bls.n	800e986 <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800e982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e984:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800e986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d901      	bls.n	800e992 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800e98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e990:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800e992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800e998:	2242      	movs	r2, #66	@ 0x42
 800e99a:	2103      	movs	r1, #3
 800e99c:	2002      	movs	r0, #2
 800e99e:	f000 fb9f 	bl	800f0e0 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800e9a2:	2342      	movs	r3, #66	@ 0x42
 800e9a4:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800e9a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d109      	bne.n	800e9c0 <_ux_device_stack_initialize+0x1f0>
 800e9ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ae:	2b0f      	cmp	r3, #15
 800e9b0:	d906      	bls.n	800e9c0 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800e9b2:	2212      	movs	r2, #18
 800e9b4:	2103      	movs	r1, #3
 800e9b6:	2002      	movs	r0, #2
 800e9b8:	f000 fb92 	bl	800f0e0 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800e9bc:	2312      	movs	r3, #18
 800e9be:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800e9c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d118      	bne.n	800e9f8 <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e9d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800e9d6:	2320      	movs	r3, #32
 800e9d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9da:	2100      	movs	r1, #0
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f000 fe0b 	bl	800f5f8 <_ux_utility_memory_allocate_mulc_safe>
 800e9e2:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d102      	bne.n	800e9f0 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800e9ea:	2312      	movs	r3, #18
 800e9ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e9ee:	e003      	b.n	800e9f8 <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800e9f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d042      	beq.n	800ea84 <_ux_device_stack_initialize+0x2b4>
 800e9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d13f      	bne.n	800ea84 <_ux_device_stack_initialize+0x2b4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800ea04:	2380      	movs	r3, #128	@ 0x80
 800ea06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea08:	2100      	movs	r1, #0
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	f000 fdf4 	bl	800f5f8 <_ux_utility_memory_allocate_mulc_safe>
 800ea10:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800ea12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d102      	bne.n	800ea1e <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800ea18:	2312      	movs	r3, #18
 800ea1a:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800ea1c:	e034      	b.n	800ea88 <_ux_device_stack_initialize+0x2b8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea22:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800ea26:	e022      	b.n	800ea6e <_ux_device_stack_initialize+0x29e>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800ea28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea2c:	2101      	movs	r1, #1
 800ea2e:	2000      	movs	r0, #0
 800ea30:	f000 fcee 	bl	800f410 <_ux_utility_memory_allocate>
 800ea34:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800ea36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea38:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800ea3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d104      	bne.n	800ea4c <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800ea42:	2312      	movs	r3, #18
 800ea44:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800ea46:	e01c      	b.n	800ea82 <_ux_device_stack_initialize+0x2b2>
 800ea48:	20003620 	.word	0x20003620
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800ea4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea4e:	3350      	adds	r3, #80	@ 0x50
 800ea50:	2200      	movs	r2, #0
 800ea52:	4932      	ldr	r1, [pc, #200]	@ (800eb1c <_ux_device_stack_initialize+0x34c>)
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 ffe5 	bl	800fa24 <_ux_utility_semaphore_create>
 800ea5a:	64b8      	str	r0, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800ea5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800ea62:	2315      	movs	r3, #21
 800ea64:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800ea66:	e00c      	b.n	800ea82 <_ux_device_stack_initialize+0x2b2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800ea68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea6a:	3380      	adds	r3, #128	@ 0x80
 800ea6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800ea74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea76:	01db      	lsls	r3, r3, #7
 800ea78:	4413      	add	r3, r2
 800ea7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d3d3      	bcc.n	800ea28 <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800ea80:	e002      	b.n	800ea88 <_ux_device_stack_initialize+0x2b8>
 800ea82:	e001      	b.n	800ea88 <_ux_device_stack_initialize+0x2b8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800ea84:	2300      	movs	r3, #0
 800ea86:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800ea88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <_ux_device_stack_initialize+0x2c2>
        return(UX_SUCCESS);
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e040      	b.n	800eb14 <_ux_device_stack_initialize+0x344>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800ea92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d021      	beq.n	800eadc <_ux_device_stack_initialize+0x30c>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ea98:	e014      	b.n	800eac4 <_ux_device_stack_initialize+0x2f4>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800ea9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d004      	beq.n	800eaac <_ux_device_stack_initialize+0x2dc>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800eaa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaa4:	3350      	adds	r3, #80	@ 0x50
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 ffd6 	bl	800fa58 <_ux_utility_semaphore_delete>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800eaac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d004      	beq.n	800eabe <_ux_device_stack_initialize+0x2ee>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800eab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fecd 	bl	800f858 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800eabe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eac0:	3b80      	subs	r3, #128	@ 0x80
 800eac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800eaca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eacc:	429a      	cmp	r2, r3
 800eace:	d2e4      	bcs.n	800ea9a <_ux_device_stack_initialize+0x2ca>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 febe 	bl	800f858 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800eadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <_ux_device_stack_initialize+0x322>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800eae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 feb3 	bl	800f858 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d004      	beq.n	800eb04 <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 feaa 	bl	800f858 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800eb04:	4b06      	ldr	r3, [pc, #24]	@ (800eb20 <_ux_device_stack_initialize+0x350>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 fea3 	bl	800f858 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800eb12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3750      	adds	r7, #80	@ 0x50
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	08011678 	.word	0x08011678
 800eb20:	20003620 	.word	0x20003620

0800eb24 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800eb2c:	4b20      	ldr	r3, [pc, #128]	@ (800ebb0 <_ux_device_stack_interface_delete+0x8c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3320      	adds	r3, #32
 800eb32:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800eb3a:	e01c      	b.n	800eb76 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800eb46:	4b1a      	ldr	r3, [pc, #104]	@ (800ebb0 <_ux_device_stack_interface_delete+0x8c>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	699b      	ldr	r3, [r3, #24]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	210f      	movs	r1, #15
 800eb54:	68b8      	ldr	r0, [r7, #8]
 800eb56:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1df      	bne.n	800eb3c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	699a      	ldr	r2, [r3, #24]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3718      	adds	r7, #24
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20003620 	.word	0x20003620

0800ebb4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b092      	sub	sp, #72	@ 0x48
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ebc0:	4b82      	ldr	r3, [pc, #520]	@ (800edcc <_ux_device_stack_interface_set+0x218>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ebc6:	4b81      	ldr	r3, [pc, #516]	@ (800edcc <_ux_device_stack_interface_set+0x218>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3320      	adds	r3, #32
 800ebcc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800ebce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ebd4:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ebdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800ebde:	e009      	b.n	800ebf4 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800ebe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d009      	beq.n	800ebfc <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800ebe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebea:	3320      	adds	r3, #32
 800ebec:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800ebee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800ebf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1f2      	bne.n	800ebe0 <_ux_device_stack_interface_set+0x2c>
 800ebfa:	e000      	b.n	800ebfe <_ux_device_stack_interface_set+0x4a>
            break;
 800ebfc:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d101      	bne.n	800ec08 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800ec04:	2312      	movs	r3, #18
 800ec06:	e0dd      	b.n	800edc4 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800ec08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800ec0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec10:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800ec12:	2209      	movs	r2, #9
 800ec14:	496e      	ldr	r1, [pc, #440]	@ (800edd0 <_ux_device_stack_interface_set+0x21c>)
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 fb5c 	bl	800f2d4 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d104      	bne.n	800ec30 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec2a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800ec2e:	e00e      	b.n	800ec4e <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800ec30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ec36:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800ec38:	e002      	b.n	800ec40 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800ec3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec3c:	699b      	ldr	r3, [r3, #24]
 800ec3e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800ec40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1f8      	bne.n	800ec3a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800ec48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec4c:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	461a      	mov	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	1a9b      	subs	r3, r3, r2
 800ec58:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	4413      	add	r3, r2
 800ec64:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800ec66:	e0a4      	b.n	800edb2 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	785b      	ldrb	r3, [r3, #1]
 800ec72:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800ec74:	7efb      	ldrb	r3, [r7, #27]
 800ec76:	2b05      	cmp	r3, #5
 800ec78:	d009      	beq.n	800ec8e <_ux_device_stack_interface_set+0xda>
 800ec7a:	2b05      	cmp	r3, #5
 800ec7c:	f300 8090 	bgt.w	800eda0 <_ux_device_stack_interface_set+0x1ec>
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	f000 8087 	beq.w	800ed94 <_ux_device_stack_interface_set+0x1e0>
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	f000 8084 	beq.w	800ed94 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800ec8c:	e088      	b.n	800eda0 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ec94:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800ec96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ec9c:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800ec9e:	e00d      	b.n	800ecbc <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800eca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800eca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecaa:	2201      	movs	r2, #1
 800ecac:	601a      	str	r2, [r3, #0]
                    break;
 800ecae:	e008      	b.n	800ecc2 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb2:	3380      	adds	r3, #128	@ 0x80
 800ecb4:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1ee      	bne.n	800eca0 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800ecc8:	2312      	movs	r3, #18
 800ecca:	e07b      	b.n	800edc4 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800eccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecce:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800ecd0:	2206      	movs	r2, #6
 800ecd2:	4940      	ldr	r1, [pc, #256]	@ (800edd4 <_ux_device_stack_interface_set+0x220>)
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fafd 	bl	800f2d4 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ecda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecdc:	3320      	adds	r3, #32
 800ecde:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ece0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece2:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800ece4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ece8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ecea:	4b38      	ldr	r3, [pc, #224]	@ (800edcc <_ux_device_stack_interface_set+0x218>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d118      	bne.n	800ed28 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf8:	7bdb      	ldrb	r3, [r3, #15]
 800ecfa:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d012      	beq.n	800ed28 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ed02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed04:	8a1b      	ldrh	r3, [r3, #16]
 800ed06:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800ed0a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00a      	beq.n	800ed28 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	0adb      	lsrs	r3, r3, #11
 800ed16:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800ed1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed20:	693a      	ldr	r2, [r7, #16]
 800ed22:	fb02 f303 	mul.w	r3, r2, r3
 800ed26:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed2c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed32:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed40:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800ed42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed46:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800ed48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed4e:	210e      	movs	r1, #14
 800ed50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed52:	4798      	blx	r3
 800ed54:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d004      	beq.n	800ed66 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5e:	2200      	movs	r2, #0
 800ed60:	601a      	str	r2, [r3, #0]
                return(status);
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	e02e      	b.n	800edc4 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800ed66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed68:	69db      	ldr	r3, [r3, #28]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d103      	bne.n	800ed76 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800ed6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed72:	61da      	str	r2, [r3, #28]
            break;
 800ed74:	e015      	b.n	800eda2 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ed76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800ed7c:	e002      	b.n	800ed84 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800ed7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800ed84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1f8      	bne.n	800ed7e <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800ed8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed90:	615a      	str	r2, [r3, #20]
            break;
 800ed92:	e006      	b.n	800eda2 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800ed94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ed96:	f000 f81f 	bl	800edd8 <_ux_device_stack_interface_start>
 800ed9a:	6238      	str	r0, [r7, #32]
            return(status);
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	e011      	b.n	800edc4 <_ux_device_stack_interface_set+0x210>
            break;
 800eda0:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	4413      	add	r3, r2
 800edb0:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f47f af57 	bne.w	800ec68 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800edba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800edbc:	f000 f80c 	bl	800edd8 <_ux_device_stack_interface_start>
 800edc0:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800edc2:	6a3b      	ldr	r3, [r7, #32]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3748      	adds	r7, #72	@ 0x48
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	20003620 	.word	0x20003620
 800edd0:	20000048 	.word	0x20000048
 800edd4:	20000028 	.word	0x20000028

0800edd8 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b090      	sub	sp, #64	@ 0x40
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800ede0:	4b25      	ldr	r3, [pc, #148]	@ (800ee78 <_ux_device_stack_interface_start+0xa0>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	7b9b      	ldrb	r3, [r3, #14]
 800ede8:	3344      	adds	r3, #68	@ 0x44
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800edf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d101      	bne.n	800edfc <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800edf8:	2357      	movs	r3, #87	@ 0x57
 800edfa:	e038      	b.n	800ee6e <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800edfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ee78 <_ux_device_stack_interface_start+0xa0>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3320      	adds	r3, #32
 800ee02:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800ee04:	2301      	movs	r3, #1
 800ee06:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7c5b      	ldrb	r3, [r3, #17]
 800ee10:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	7c9b      	ldrb	r3, [r3, #18]
 800ee16:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	7cdb      	ldrb	r3, [r3, #19]
 800ee1c:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800ee1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee20:	899b      	ldrh	r3, [r3, #12]
 800ee22:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800ee24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee26:	89db      	ldrh	r3, [r3, #14]
 800ee28:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800ee2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ee32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee36:	f107 0208 	add.w	r2, r7, #8
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	4798      	blx	r3
 800ee3e:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800ee40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d112      	bne.n	800ee6c <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800ee46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee48:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ee4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee52:	f107 0208 	add.w	r2, r7, #8
 800ee56:	4610      	mov	r0, r2
 800ee58:	4798      	blx	r3
 800ee5a:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800ee5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d102      	bne.n	800ee68 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee66:	605a      	str	r2, [r3, #4]

        return(status); 
 800ee68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee6a:	e000      	b.n	800ee6e <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800ee6c:	2357      	movs	r3, #87	@ 0x57
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3740      	adds	r7, #64	@ 0x40
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20003620 	.word	0x20003620

0800ee7c <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b08a      	sub	sp, #40	@ 0x28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ee88:	4b29      	ldr	r3, [pc, #164]	@ (800ef30 <_ux_device_stack_set_feature+0xb4>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ee8e:	4b28      	ldr	r3, [pc, #160]	@ (800ef30 <_ux_device_stack_set_feature+0xb4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	3320      	adds	r3, #32
 800ee94:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	3318      	adds	r3, #24
 800ee9a:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f003 0303 	and.w	r3, r3, #3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <_ux_device_stack_set_feature+0x30>
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d014      	beq.n	800eed4 <_ux_device_stack_set_feature+0x58>
 800eeaa:	e036      	b.n	800ef1a <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d10e      	bne.n	800eed0 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800eeb2:	4b1f      	ldr	r3, [pc, #124]	@ (800ef30 <_ux_device_stack_set_feature+0xb4>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d006      	beq.n	800eecc <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800eebe:	4b1c      	ldr	r3, [pc, #112]	@ (800ef30 <_ux_device_stack_set_feature+0xb4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* OK. */
                return (UX_SUCCESS);
 800eec8:	2300      	movs	r3, #0
 800eeca:	e02d      	b.n	800ef28 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800eecc:	2354      	movs	r3, #84	@ 0x54
 800eece:	e02b      	b.n	800ef28 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800eed0:	2354      	movs	r3, #84	@ 0x54
 800eed2:	e029      	b.n	800ef28 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800eeda:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800eedc:	e01a      	b.n	800ef14 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800eede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee0:	69db      	ldr	r3, [r3, #28]
 800eee2:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800eee4:	e010      	b.n	800ef08 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	7b9b      	ldrb	r3, [r3, #14]
 800eeea:	461a      	mov	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d107      	bne.n	800ef02 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	6a3a      	ldr	r2, [r7, #32]
 800eef8:	2114      	movs	r1, #20
 800eefa:	69f8      	ldr	r0, [r7, #28]
 800eefc:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800eefe:	2300      	movs	r3, #0
 800ef00:	e012      	b.n	800ef28 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	695b      	ldr	r3, [r3, #20]
 800ef06:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1eb      	bne.n	800eee6 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800ef14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1e1      	bne.n	800eede <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	699b      	ldr	r3, [r3, #24]
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	2114      	movs	r1, #20
 800ef22:	69f8      	ldr	r0, [r7, #28]
 800ef24:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ef26:	2300      	movs	r3, #0
    }
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3728      	adds	r7, #40	@ 0x28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20003620 	.word	0x20003620

0800ef34 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ef3e:	4b19      	ldr	r3, [pc, #100]	@ (800efa4 <_ux_device_stack_transfer_abort+0x70>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ef4e:	617b      	str	r3, [r7, #20]
    return(posture);
 800ef50:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ef52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef54:	b672      	cpsid	i
    return(int_posture);
 800ef56:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800ef58:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d114      	bne.n	800ef8c <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	210d      	movs	r1, #13
 800ef6a:	69f8      	ldr	r0, [r7, #28]
 800ef6c:	4798      	blx	r3
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f383 8810 	msr	PRIMASK, r3
}
 800ef78:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2204      	movs	r2, #4
 800ef7e:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3330      	adds	r3, #48	@ 0x30
 800ef84:	4618      	mov	r0, r3
 800ef86:	f000 fd74 	bl	800fa72 <_ux_utility_semaphore_put>
 800ef8a:	e005      	b.n	800ef98 <_ux_device_stack_transfer_abort+0x64>
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f383 8810 	msr	PRIMASK, r3
}
 800ef96:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800ef98:	2300      	movs	r3, #0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3720      	adds	r7, #32
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20003620 	.word	0x20003620

0800efa8 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3320      	adds	r3, #32
 800efb6:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f7ff ffba 	bl	800ef34 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b08e      	sub	sp, #56	@ 0x38
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d101      	bne.n	800efe4 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800efe0:	2300      	movs	r3, #0
 800efe2:	e077      	b.n	800f0d4 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efe4:	f3ef 8310 	mrs	r3, PRIMASK
 800efe8:	623b      	str	r3, [r7, #32]
    return(posture);
 800efea:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800efec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800efee:	b672      	cpsid	i
    return(int_posture);
 800eff0:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800eff2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800eff4:	4b39      	ldr	r3, [pc, #228]	@ (800f0dc <_ux_device_stack_transfer_request+0x110>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6a1b      	ldr	r3, [r3, #32]
 800effa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800effc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800effe:	2b01      	cmp	r3, #1
 800f000:	d005      	beq.n	800f00e <_ux_device_stack_transfer_request+0x42>
 800f002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f004:	2b02      	cmp	r3, #2
 800f006:	d002      	beq.n	800f00e <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800f008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d115      	bne.n	800f03a <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2201      	movs	r2, #1
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f016:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	f383 8810 	msr	PRIMASK, r3
}
 800f01e:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f020:	4b2e      	ldr	r3, [pc, #184]	@ (800f0dc <_ux_device_stack_transfer_request+0x110>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800f02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f02e:	7bdb      	ldrb	r3, [r3, #15]
 800f030:	f003 0303 	and.w	r3, r3, #3
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10b      	bne.n	800f050 <_ux_device_stack_transfer_request+0x84>
 800f038:	e01a      	b.n	800f070 <_ux_device_stack_transfer_request+0xa4>
 800f03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f03c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f383 8810 	msr	PRIMASK, r3
}
 800f044:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800f046:	2325      	movs	r3, #37	@ 0x25
 800f048:	e044      	b.n	800f0d4 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800f04a:	2064      	movs	r0, #100	@ 0x64
 800f04c:	f000 f928 	bl	800f2a0 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	2b02      	cmp	r3, #2
 800f056:	d0f8      	beq.n	800f04a <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800f058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f05a:	7b9b      	ldrb	r3, [r3, #14]
 800f05c:	b25b      	sxtb	r3, r3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	da03      	bge.n	800f06a <_ux_device_stack_transfer_request+0x9e>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2203      	movs	r2, #3
 800f066:	629a      	str	r2, [r3, #40]	@ 0x28
 800f068:	e002      	b.n	800f070 <_ux_device_stack_transfer_request+0xa4>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2202      	movs	r2, #2
 800f06e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f074:	2b03      	cmp	r3, #3
 800f076:	d115      	bne.n	800f0a4 <_ux_device_stack_transfer_request+0xd8>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d012      	beq.n	800f0a4 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	429a      	cmp	r2, r3
 800f084:	d00e      	beq.n	800f0a4 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800f086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f088:	8a1b      	ldrh	r3, [r3, #16]
 800f08a:	461a      	mov	r2, r3
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f092:	fb01 f202 	mul.w	r2, r1, r2
 800f096:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d103      	bne.n	800f0a4 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	651a      	str	r2, [r3, #80]	@ 0x50
 800f0a2:	e002      	b.n	800f0aa <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800f0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c6:	699b      	ldr	r3, [r3, #24]
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	210c      	movs	r1, #12
 800f0cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f0ce:	4798      	blx	r3
 800f0d0:	6278      	str	r0, [r7, #36]	@ 0x24

    /* And return the status.  */
    return(status);
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

#endif
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3738      	adds	r7, #56	@ 0x38
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	20003620 	.word	0x20003620

0800f0e0 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800f0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800f120 <_ux_system_error_handler+0x40>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	641a      	str	r2, [r3, #64]	@ 0x40
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800f0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f120 <_ux_system_error_handler+0x40>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0fa:	3201      	adds	r2, #1
 800f0fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800f0fe:	4b08      	ldr	r3, [pc, #32]	@ (800f120 <_ux_system_error_handler+0x40>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f104:	2b00      	cmp	r3, #0
 800f106:	d006      	beq.n	800f116 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800f108:	4b05      	ldr	r3, [pc, #20]	@ (800f120 <_ux_system_error_handler+0x40>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	68b9      	ldr	r1, [r7, #8]
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	4798      	blx	r3
    }
}
 800f116:	bf00      	nop
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20003624 	.word	0x20003624

0800f124 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	@ 0x28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <_ux_system_initialize+0x1a>
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800f13e:	23fa      	movs	r3, #250	@ 0xfa
 800f140:	e08a      	b.n	800f258 <_ux_system_initialize+0x134>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	2100      	movs	r1, #0
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f000 fc0a 	bl	800f960 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800f14c:	4a44      	ldr	r2, [pc, #272]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800f152:	234c      	movs	r3, #76	@ 0x4c
 800f154:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15a:	4413      	add	r3, r2
 800f15c:	4a41      	ldr	r2, [pc, #260]	@ (800f264 <_ux_system_initialize+0x140>)
 800f15e:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800f160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f162:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f166:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f168:	4b3d      	ldr	r3, [pc, #244]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68f9      	ldr	r1, [r7, #12]
 800f16e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f170:	440a      	add	r2, r1
 800f172:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800f174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f176:	3314      	adds	r3, #20
 800f178:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00c      	beq.n	800f19a <_ux_system_initialize+0x76>
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d009      	beq.n	800f19a <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f186:	4b36      	ldr	r3, [pc, #216]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68f9      	ldr	r1, [r7, #12]
 800f18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f18e:	440a      	add	r2, r1
 800f190:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800f192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f194:	3314      	adds	r3, #20
 800f196:	627b      	str	r3, [r7, #36]	@ 0x24
 800f198:	e005      	b.n	800f1a6 <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800f19a:	4b31      	ldr	r3, [pc, #196]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	4b30      	ldr	r3, [pc, #192]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	4413      	add	r3, r2
 800f1ac:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	f023 0307 	bic.w	r3, r3, #7
 800f1ba:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	6a3a      	ldr	r2, [r7, #32]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d301      	bcc.n	800f1d0 <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800f1cc:	2312      	movs	r3, #18
 800f1ce:	e043      	b.n	800f258 <_ux_system_initialize+0x134>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800f1d0:	69fa      	ldr	r2, [r7, #28]
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800f1d8:	4b21      	ldr	r3, [pc, #132]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6a39      	ldr	r1, [r7, #32]
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 fa2e 	bl	800f644 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d026      	beq.n	800f23c <_ux_system_initialize+0x118>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d023      	beq.n	800f23c <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 fbb1 	bl	800f960 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	3307      	adds	r3, #7
 800f206:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	f023 0307 	bic.w	r3, r3, #7
 800f20e:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	4413      	add	r3, r2
 800f216:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	6a3a      	ldr	r2, [r7, #32]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d301      	bcc.n	800f224 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800f220:	2312      	movs	r3, #18
 800f222:	e019      	b.n	800f258 <_ux_system_initialize+0x134>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800f224:	697a      	ldr	r2, [r7, #20]
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800f22c:	4b0c      	ldr	r3, [pc, #48]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	6a39      	ldr	r1, [r7, #32]
 800f234:	69ba      	ldr	r2, [r7, #24]
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fa04 	bl	800f644 <_ux_utility_memory_byte_pool_create>
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800f23c:	4b08      	ldr	r3, [pc, #32]	@ (800f260 <_ux_system_initialize+0x13c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	330c      	adds	r3, #12
 800f242:	4909      	ldr	r1, [pc, #36]	@ (800f268 <_ux_system_initialize+0x144>)
 800f244:	4618      	mov	r0, r3
 800f246:	f000 fba5 	bl	800f994 <_ux_utility_mutex_create>
 800f24a:	6138      	str	r0, [r7, #16]
    if(status != UX_SUCCESS)
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <_ux_system_initialize+0x132>
        return(UX_MUTEX_ERROR);
 800f252:	2317      	movs	r3, #23
 800f254:	e000      	b.n	800f258 <_ux_system_initialize+0x134>
#endif

    return(UX_SUCCESS);
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3728      	adds	r7, #40	@ 0x28
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	20003624 	.word	0x20003624
 800f264:	20003620 	.word	0x20003620
 800f268:	08011698 	.word	0x08011698

0800f26c <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <_uxe_system_initialize+0x1a>
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d101      	bne.n	800f28a <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800f286:	23fa      	movs	r3, #250	@ 0xfa
 800f288:	e006      	b.n	800f298 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	68b9      	ldr	r1, [r7, #8]
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7ff ff47 	bl	800f124 <_ux_system_initialize>
 800f296:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2264      	movs	r2, #100	@ 0x64
 800f2ac:	fb02 f303 	mul.w	r3, r2, r3
 800f2b0:	4a07      	ldr	r2, [pc, #28]	@ (800f2d0 <_ux_utility_delay_ms+0x30>)
 800f2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2b6:	099b      	lsrs	r3, r3, #6
 800f2b8:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7fc ff8d 	bl	800c1e0 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800f2c6:	bf00      	nop
}
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	10624dd3 	.word	0x10624dd3

0800f2d4 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
 800f2e0:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800f2e2:	e041      	b.n	800f368 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	60ba      	str	r2, [r7, #8]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b02      	cmp	r3, #2
 800f2ee:	d01e      	beq.n	800f32e <_ux_utility_descriptor_parse+0x5a>
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	d12f      	bne.n	800f354 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800f2f4:	e004      	b.n	800f300 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	603a      	str	r2, [r7, #0]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1f5      	bne.n	800f2f6 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f000 f835 	bl	800f37a <_ux_utility_long_get>
 800f310:	4602      	mov	r2, r0
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	3304      	adds	r3, #4
 800f31a:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	3304      	adds	r3, #4
 800f320:	603b      	str	r3, [r7, #0]
            break;
 800f322:	e021      	b.n	800f368 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	603a      	str	r2, [r7, #0]
 800f32a:	2200      	movs	r2, #0
 800f32c:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	f003 0301 	and.w	r3, r3, #1
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1f5      	bne.n	800f324 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 fba7 	bl	800fa8c <_ux_utility_short_get>
 800f33e:	4603      	mov	r3, r0
 800f340:	b29a      	uxth	r2, r3
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3302      	adds	r3, #2
 800f34a:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	3302      	adds	r3, #2
 800f350:	603b      	str	r3, [r7, #0]
            break;
 800f352:	e009      	b.n	800f368 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	781a      	ldrb	r2, [r3, #0]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	3301      	adds	r3, #1
 800f360:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	3301      	adds	r3, #1
 800f366:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	1e5a      	subs	r2, r3, #1
 800f36c:	607a      	str	r2, [r7, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1b8      	bne.n	800f2e4 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800f372:	bf00      	nop
}
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	607a      	str	r2, [r7, #4]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	1c5a      	adds	r2, r3, #1
 800f390:	607a      	str	r2, [r7, #4]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	021b      	lsls	r3, r3, #8
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	4313      	orrs	r3, r2
 800f39a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	607a      	str	r2, [r7, #4]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	041b      	lsls	r3, r3, #16
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	061b      	lsls	r3, r3, #24
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3714      	adds	r7, #20
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b083      	sub	sp, #12
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	607a      	str	r2, [r7, #4]
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	b2d2      	uxtb	r2, r2
 800f3da:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	0a19      	lsrs	r1, r3, #8
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	b2ca      	uxtb	r2, r1
 800f3e8:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	0c19      	lsrs	r1, r3, #16
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	1c5a      	adds	r2, r3, #1
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	b2ca      	uxtb	r2, r1
 800f3f6:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	0e1b      	lsrs	r3, r3, #24
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800f402:	bf00      	nop
}
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
	...

0800f410 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08e      	sub	sp, #56	@ 0x38
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d104      	bne.n	800f42c <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800f422:	4b73      	ldr	r3, [pc, #460]	@ (800f5f0 <_ux_utility_memory_allocate+0x1e0>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	637b      	str	r3, [r7, #52]	@ 0x34
 800f42a:	e009      	b.n	800f440 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d104      	bne.n	800f43c <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800f432:	4b6f      	ldr	r3, [pc, #444]	@ (800f5f0 <_ux_utility_memory_allocate+0x1e0>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	637b      	str	r3, [r7, #52]	@ 0x34
 800f43a:	e001      	b.n	800f440 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800f43c:	2300      	movs	r3, #0
 800f43e:	e0d2      	b.n	800f5e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800f440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800f446:	2300      	movs	r3, #0
 800f448:	e0cd      	b.n	800f5e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800f450:	2300      	movs	r3, #0
 800f452:	e0c8      	b.n	800f5e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800f454:	4b66      	ldr	r3, [pc, #408]	@ (800f5f0 <_ux_utility_memory_allocate+0x1e0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	330c      	adds	r3, #12
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 facb 	bl	800f9f6 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f466:	d101      	bne.n	800f46c <_ux_utility_memory_allocate+0x5c>
        memory_alignment = UX_NO_ALIGN;
 800f468:	2300      	movs	r3, #0
 800f46a:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2b06      	cmp	r3, #6
 800f470:	d801      	bhi.n	800f476 <_ux_utility_memory_allocate+0x66>
        memory_alignment =  UX_ALIGN_MIN;
 800f472:	2307      	movs	r3, #7
 800f474:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	3307      	adds	r3, #7
 800f47a:	f023 0307 	bic.w	r3, r3, #7
 800f47e:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b07      	cmp	r3, #7
 800f484:	d805      	bhi.n	800f492 <_ux_utility_memory_allocate+0x82>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800f486:	6879      	ldr	r1, [r7, #4]
 800f488:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f48a:	f000 f92b 	bl	800f6e4 <_ux_utility_memory_byte_pool_search>
 800f48e:	6338      	str	r0, [r7, #48]	@ 0x30
 800f490:	e007      	b.n	800f4a2 <_ux_utility_memory_allocate+0x92>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	4413      	add	r3, r2
 800f498:	4619      	mov	r1, r3
 800f49a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f49c:	f000 f922 	bl	800f6e4 <_ux_utility_memory_byte_pool_search>
 800f4a0:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10c      	bne.n	800f4c2 <_ux_utility_memory_allocate+0xb2>
    {

        /* We could not find a memory block.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f4a8:	4b51      	ldr	r3, [pc, #324]	@ (800f5f0 <_ux_utility_memory_allocate+0x1e0>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	330c      	adds	r3, #12
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 fa96 	bl	800f9e0 <_ux_utility_mutex_off>

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800f4b4:	2212      	movs	r2, #18
 800f4b6:	2108      	movs	r1, #8
 800f4b8:	2002      	movs	r0, #2
 800f4ba:	f7ff fe11 	bl	800f0e0 <_ux_system_error_handler>

        return(UX_NULL);
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e091      	b.n	800f5e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800f4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d0:	1ad3      	subs	r3, r2, r3
 800f4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	3b08      	subs	r3, #8
 800f4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800f4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4dc:	3308      	adds	r3, #8
 800f4de:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800f4e0:	6a3a      	ldr	r2, [r7, #32]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d02f      	beq.n	800f54a <_ux_utility_memory_allocate+0x13a>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	3308      	adds	r3, #8
 800f4ee:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800f4f0:	6a3a      	ldr	r2, [r7, #32]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	43db      	mvns	r3, r3
 800f4fc:	6a3a      	ldr	r2, [r7, #32]
 800f4fe:	4013      	ands	r3, r2
 800f500:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	3b08      	subs	r3, #8
 800f506:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800f508:	6a3b      	ldr	r3, [r7, #32]
 800f50a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50e:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800f510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51a:	3304      	adds	r3, #4
 800f51c:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	4a33      	ldr	r2, [pc, #204]	@ (800f5f4 <_ux_utility_memory_allocate+0x1e4>)
 800f526:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800f528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	1c5a      	adds	r2, r3, #1
 800f52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f530:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f536:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800f538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f542:	1a9b      	subs	r3, r3, r2
 800f544:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800f54a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	2b13      	cmp	r3, #19
 800f552:	d91e      	bls.n	800f592 <_ux_utility_memory_allocate+0x182>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3308      	adds	r3, #8
 800f558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f55a:	4413      	add	r3, r2
 800f55c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f560:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f564:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800f566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f570:	3304      	adds	r3, #4
 800f572:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	4a1e      	ldr	r2, [pc, #120]	@ (800f5f4 <_ux_utility_memory_allocate+0x1e4>)
 800f57c:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800f57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f586:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800f588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f58c:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f594:	3304      	adds	r3, #4
 800f596:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800f59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5a0:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800f5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	f1a3 0208 	sub.w	r2, r3, #8
 800f5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5b0:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800f5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d105      	bne.n	800f5c8 <_ux_utility_memory_allocate+0x1b8>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5be:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800f5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5c6:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ca:	3308      	adds	r3, #8
 800f5cc:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800f5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	69b8      	ldr	r0, [r7, #24]
 800f5d4:	f000 f9c4 	bl	800f960 <_ux_utility_memory_set>
    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)
        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f5d8:	4b05      	ldr	r3, [pc, #20]	@ (800f5f0 <_ux_utility_memory_allocate+0x1e0>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	330c      	adds	r3, #12
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 f9fe 	bl	800f9e0 <_ux_utility_mutex_off>

    return(work_ptr);
 800f5e4:	69bb      	ldr	r3, [r7, #24]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3738      	adds	r7, #56	@ 0x38
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	20003624 	.word	0x20003624
 800f5f4:	ffffeeee 	.word	0xffffeeee

0800f5f8 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00a      	beq.n	800f622 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800f60c:	2100      	movs	r1, #0
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	fba3 2302 	umull	r2, r3, r3, r2
 800f616:	2b00      	cmp	r3, #0
 800f618:	d000      	beq.n	800f61c <_ux_utility_memory_allocate_mulc_safe+0x24>
 800f61a:	2101      	movs	r1, #1
 800f61c:	460b      	mov	r3, r1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10a      	bne.n	800f638 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	fb02 f303 	mul.w	r3, r2, r3
 800f62a:	461a      	mov	r2, r3
 800f62c:	68b9      	ldr	r1, [r7, #8]
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f7ff feee 	bl	800f410 <_ux_utility_memory_allocate>
 800f634:	4603      	mov	r3, r0
 800f636:	e000      	b.n	800f63a <_ux_utility_memory_allocate_mulc_safe+0x42>
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
	...

0800f644 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b088      	sub	sp, #32
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800f650:	2214      	movs	r2, #20
 800f652:	2100      	movs	r1, #0
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 f983 	bl	800f960 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f023 0303 	bic.w	r3, r3, #3
 800f660:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f1a3 0208 	sub.w	r2, r3, #8
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2202      	movs	r2, #2
 800f682:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4413      	add	r3, r2
 800f68e:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	3b04      	subs	r3, #4
 800f694:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	69ba      	ldr	r2, [r7, #24]
 800f6a2:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	3b04      	subs	r3, #4
 800f6a8:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	69fa      	ldr	r2, [r7, #28]
 800f6c0:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	4a03      	ldr	r2, [pc, #12]	@ (800f6e0 <_ux_utility_memory_byte_pool_create+0x9c>)
 800f6d4:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3720      	adds	r7, #32
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	ffffeeee 	.word	0xffffeeee

0800f6e4 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b08d      	sub	sp, #52	@ 0x34
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	3b02      	subs	r3, #2
 800f6fc:	00db      	lsls	r3, r3, #3
 800f6fe:	4413      	add	r3, r2
 800f700:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800f702:	683a      	ldr	r2, [r7, #0]
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	429a      	cmp	r2, r3
 800f708:	d301      	bcc.n	800f70e <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800f70a:	2300      	movs	r3, #0
 800f70c:	e07d      	b.n	800f80a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	689a      	ldr	r2, [r3, #8]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	429a      	cmp	r2, r3
 800f718:	d308      	bcc.n	800f72c <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689a      	ldr	r2, [r3, #8]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68d9      	ldr	r1, [r3, #12]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	691b      	ldr	r3, [r3, #16]
 800f726:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800f728:	429a      	cmp	r2, r3
 800f72a:	d901      	bls.n	800f730 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800f72c:	2300      	movs	r3, #0
 800f72e:	e06c      	b.n	800f80a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	3301      	adds	r3, #1
 800f73c:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800f73e:	2300      	movs	r3, #0
 800f740:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f744:	3304      	adds	r3, #4
 800f746:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a31      	ldr	r2, [pc, #196]	@ (800f818 <_ux_utility_memory_byte_pool_search+0x134>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d143      	bne.n	800f7de <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d104      	bne.n	800f766 <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f760:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800f762:	2301      	movs	r3, #1
 800f764:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f768:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800f778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77a:	3b08      	subs	r3, #8
 800f77c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800f77e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	429a      	cmp	r2, r3
 800f784:	d23a      	bcs.n	800f7fc <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800f786:	2300      	movs	r3, #0
 800f788:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	3304      	adds	r3, #4
 800f78e:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a1f      	ldr	r2, [pc, #124]	@ (800f818 <_ux_utility_memory_byte_pool_search+0x134>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d113      	bne.n	800f7c6 <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	1e5a      	subs	r2, r3, #1
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d114      	bne.n	800f7e8 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7c2:	609a      	str	r2, [r3, #8]
 800f7c4:	e010      	b.n	800f7e8 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800f7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d008      	beq.n	800f7e8 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7dc:	e004      	b.n	800f7e8 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e0:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d002      	beq.n	800f7f4 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1a3      	bne.n	800f742 <_ux_utility_memory_byte_pool_search+0x5e>
 800f7fa:	e000      	b.n	800f7fe <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800f7fc:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800f7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800f804:	2300      	movs	r3, #0
 800f806:	e000      	b.n	800f80a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800f808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3734      	adds	r7, #52	@ 0x34
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	ffffeeee 	.word	0xffffeeee

0800f81c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800f830:	e007      	b.n	800f842 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	1c53      	adds	r3, r2, #1
 800f836:	617b      	str	r3, [r7, #20]
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	1c59      	adds	r1, r3, #1
 800f83c:	6139      	str	r1, [r7, #16]
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	701a      	strb	r2, [r3, #0]
    while(length--)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	1e5a      	subs	r2, r3, #1
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1f2      	bne.n	800f832 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800f84c:	bf00      	nop
}
 800f84e:	371c      	adds	r7, #28
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08a      	sub	sp, #40	@ 0x28
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800f860:	4b3d      	ldr	r3, [pc, #244]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	330c      	adds	r3, #12
 800f866:	4618      	mov	r0, r3
 800f868:	f000 f8c5 	bl	800f9f6 <_ux_utility_mutex_on>
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 800f86c:	2300      	movs	r3, #0
 800f86e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d03b      	beq.n	800f8f2 <_ux_utility_memory_free+0x9a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	3b08      	subs	r3, #8
 800f87e:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800f880:	6a3b      	ldr	r3, [r7, #32]
 800f882:	3304      	adds	r3, #4
 800f884:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a33      	ldr	r2, [pc, #204]	@ (800f95c <_ux_utility_memory_free+0x104>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d022      	beq.n	800f8da <_ux_utility_memory_free+0x82>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	3304      	adds	r3, #4
 800f898:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <_ux_utility_memory_free+0x6a>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800f8aa:	4b2b      	ldr	r3, [pc, #172]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800f8b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d029      	beq.n	800f90a <_ux_utility_memory_free+0xb2>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 800f8b6:	4b28      	ldr	r3, [pc, #160]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800f8bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d023      	beq.n	800f90a <_ux_utility_memory_free+0xb2>
            {

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f8c2:	4b25      	ldr	r3, [pc, #148]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	330c      	adds	r3, #12
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f000 f889 	bl	800f9e0 <_ux_utility_mutex_off>

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800f8ce:	2219      	movs	r2, #25
 800f8d0:	2108      	movs	r1, #8
 800f8d2:	2002      	movs	r0, #2
 800f8d4:	f7ff fc04 	bl	800f0e0 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 800f8d8:	e03b      	b.n	800f952 <_ux_utility_memory_free+0xfa>
            }
        }
        else
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f8da:	4b1f      	ldr	r3, [pc, #124]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	330c      	adds	r3, #12
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 f87d 	bl	800f9e0 <_ux_utility_mutex_off>

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800f8e6:	2219      	movs	r2, #25
 800f8e8:	2108      	movs	r1, #8
 800f8ea:	2002      	movs	r0, #2
 800f8ec:	f7ff fbf8 	bl	800f0e0 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 800f8f0:	e02f      	b.n	800f952 <_ux_utility_memory_free+0xfa>
    }
    else
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f8f2:	4b19      	ldr	r3, [pc, #100]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	330c      	adds	r3, #12
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 f871 	bl	800f9e0 <_ux_utility_mutex_off>

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800f8fe:	2219      	movs	r2, #25
 800f900:	2108      	movs	r1, #8
 800f902:	2002      	movs	r0, #2
 800f904:	f7ff fbec 	bl	800f0e0 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 800f908:	e023      	b.n	800f952 <_ux_utility_memory_free+0xfa>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800f90a:	6a3b      	ldr	r3, [r7, #32]
 800f90c:	3304      	adds	r3, #4
 800f90e:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	4a11      	ldr	r2, [pc, #68]	@ (800f95c <_ux_utility_memory_free+0x104>)
 800f918:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	68f9      	ldr	r1, [r7, #12]
 800f92a:	6a3a      	ldr	r2, [r7, #32]
 800f92c:	1a8a      	subs	r2, r1, r2
 800f92e:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 800f930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f932:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 800f934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	6a3a      	ldr	r2, [r7, #32]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d202      	bcs.n	800f944 <_ux_utility_memory_free+0xec>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 800f93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f940:	6a3a      	ldr	r2, [r7, #32]
 800f942:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800f944:	4b04      	ldr	r3, [pc, #16]	@ (800f958 <_ux_utility_memory_free+0x100>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	330c      	adds	r3, #12
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 f848 	bl	800f9e0 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800f950:	bf00      	nop
}
 800f952:	3728      	adds	r7, #40	@ 0x28
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20003624 	.word	0x20003624
 800f95c:	ffffeeee 	.word	0xffffeeee

0800f960 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800f960:	b480      	push	{r7}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	460b      	mov	r3, r1
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800f972:	e004      	b.n	800f97e <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	617a      	str	r2, [r7, #20]
 800f97a:	7afa      	ldrb	r2, [r7, #11]
 800f97c:	701a      	strb	r2, [r3, #0]
    while(length--)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	1e5a      	subs	r2, r3, #1
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f5      	bne.n	800f974 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800f988:	bf00      	nop
}
 800f98a:	371c      	adds	r7, #28
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800f99e:	2334      	movs	r3, #52	@ 0x34
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	6839      	ldr	r1, [r7, #0]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7fd fac5 	bl	800cf34 <_txe_mutex_create>
 800f9aa:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d004      	beq.n	800f9bc <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	2108      	movs	r1, #8
 800f9b6:	2002      	movs	r0, #2
 800f9b8:	f7ff fb92 	bl	800f0e0 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7fd fb4e 	bl	800d070 <_txe_mutex_delete>
 800f9d4:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7fd fbd9 	bl	800d1a0 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800f9ee:	bf00      	nop
}
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800f9fe:	f04f 31ff 	mov.w	r1, #4294967295
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7fd fb72 	bl	800d0ec <_txe_mutex_get>
 800fa08:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	2108      	movs	r1, #8
 800fa14:	2002      	movs	r0, #2
 800fa16:	f7ff fb63 	bl	800f0e0 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800fa1a:	bf00      	nop
 800fa1c:	bf00      	nop
}
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800fa30:	231c      	movs	r3, #28
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f7fd fbec 	bl	800d214 <_txe_semaphore_create>
 800fa3c:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d004      	beq.n	800fa4e <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	2108      	movs	r1, #8
 800fa48:	2002      	movs	r0, #2
 800fa4a:	f7ff fb49 	bl	800f0e0 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800fa4e:	697b      	ldr	r3, [r7, #20]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3718      	adds	r7, #24
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7fd fc6d 	bl	800d340 <_txe_semaphore_delete>
 800fa66:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800fa68:	68fb      	ldr	r3, [r7, #12]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7fd fc9e 	bl	800d3bc <_txe_semaphore_put>
 800fa80:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800fa82:	68fb      	ldr	r3, [r7, #12]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	607a      	str	r2, [r7, #4]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	021b      	lsls	r3, r3, #8
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	89fb      	ldrh	r3, [r7, #14]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800faac:	89fb      	ldrh	r3, [r7, #14]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b086      	sub	sp, #24
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800facc:	23ff      	movs	r3, #255	@ 0xff
 800face:	e01d      	b.n	800fb0c <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	4413      	add	r3, r2
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00d      	beq.n	800fafc <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	3301      	adds	r3, #1
 800fae4:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	429a      	cmp	r2, r3
 800faec:	d9f2      	bls.n	800fad4 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800faee:	22ff      	movs	r2, #255	@ 0xff
 800faf0:	2108      	movs	r1, #8
 800faf2:	2002      	movs	r0, #2
 800faf4:	f7ff faf4 	bl	800f0e0 <_ux_system_error_handler>

            return(UX_ERROR);
 800faf8:	23ff      	movs	r3, #255	@ 0xff
 800fafa:	e007      	b.n	800fb0c <_ux_utility_string_length_check+0x52>
            break;
 800fafc:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a1b      	ldr	r3, [r3, #32]
 800fb20:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb26:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d003      	beq.n	800fb4a <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	6938      	ldr	r0, [r7, #16]
 800fb48:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b08a      	sub	sp, #40	@ 0x28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a1b      	ldr	r3, [r3, #32]
 800fb60:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800fb62:	6a3b      	ldr	r3, [r7, #32]
 800fb64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb66:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800fb68:	4b51      	ldr	r3, [pc, #324]	@ (800fcb0 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3320      	adds	r3, #32
 800fb6e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	3338      	adds	r3, #56	@ 0x38
 800fb74:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800fb7c:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	3354      	adds	r3, #84	@ 0x54
 800fb82:	3302      	adds	r3, #2
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff ff81 	bl	800fa8c <_ux_utility_short_get>
 800fb8a:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	3354      	adds	r3, #84	@ 0x54
 800fb90:	3306      	adds	r3, #6
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff ff7a 	bl	800fa8c <_ux_utility_short_get>
 800fb98:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	2b22      	cmp	r3, #34	@ 0x22
 800fba2:	d009      	beq.n	800fbb8 <_ux_device_class_cdc_acm_control_request+0x64>
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	2b22      	cmp	r3, #34	@ 0x22
 800fba8:	d877      	bhi.n	800fc9a <_ux_device_class_cdc_acm_control_request+0x146>
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	2b20      	cmp	r3, #32
 800fbae:	d051      	beq.n	800fc54 <_ux_device_class_cdc_acm_control_request+0x100>
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b21      	cmp	r3, #33	@ 0x21
 800fbb4:	d023      	beq.n	800fbfe <_ux_device_class_cdc_acm_control_request+0xaa>
 800fbb6:	e070      	b.n	800fc9a <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f003 0301 	and.w	r3, r3, #1
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f003 0302 	and.w	r3, r3, #2
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d003      	beq.n	800fbec <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d054      	beq.n	800fc9e <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	69f8      	ldr	r0, [r7, #28]
 800fbfa:	4798      	blx	r3
            }

            break ;
 800fbfc:	e04f      	b.n	800fc9e <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	2b07      	cmp	r3, #7
 800fc02:	d901      	bls.n	800fc08 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800fc04:	2307      	movs	r3, #7
 800fc06:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	68da      	ldr	r2, [r3, #12]
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc10:	4619      	mov	r1, r3
 800fc12:	4610      	mov	r0, r2
 800fc14:	f7ff fbd7 	bl	800f3c6 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	69fa      	ldr	r2, [r7, #28]
 800fc20:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 800fc24:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	3305      	adds	r3, #5
 800fc2c:	69fa      	ldr	r2, [r7, #28]
 800fc2e:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 800fc32:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	3306      	adds	r3, #6
 800fc3a:	69fa      	ldr	r2, [r7, #28]
 800fc3c:	f892 207e 	ldrb.w	r2, [r2, #126]	@ 0x7e
 800fc40:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	2203      	movs	r2, #3
 800fc46:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc4c:	6978      	ldr	r0, [r7, #20]
 800fc4e:	f7ff f9bd 	bl	800efcc <_ux_device_stack_transfer_request>
            break; 
 800fc52:	e027      	b.n	800fca4 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fb8e 	bl	800f37a <_ux_utility_long_get>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	791a      	ldrb	r2, [r3, #4]
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	795a      	ldrb	r2, [r3, #5]
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	799a      	ldrb	r2, [r3, #6]
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d008      	beq.n	800fca2 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	69f8      	ldr	r0, [r7, #28]
 800fc96:	4798      	blx	r3
            }

            break ;
 800fc98:	e003      	b.n	800fca2 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800fc9a:	23ff      	movs	r3, #255	@ 0xff
 800fc9c:	e003      	b.n	800fca6 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800fc9e:	bf00      	nop
 800fca0:	e000      	b.n	800fca4 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800fca2:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3728      	adds	r7, #40	@ 0x28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	20003620 	.word	0x20003620

0800fcb4 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b088      	sub	sp, #32
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a1b      	ldr	r3, [r3, #32]
 800fcc0:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcc6:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	69db      	ldr	r3, [r3, #28]
 800fcd2:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	7b9b      	ldrb	r3, [r3, #14]
 800fcd8:	b25b      	sxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	db05      	blt.n	800fcea <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	e002      	b.n	800fcf0 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800fcf0:	2126      	movs	r1, #38	@ 0x26
 800fcf2:	69f8      	ldr	r0, [r7, #28]
 800fcf4:	f7ff f958 	bl	800efa8 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800fcf8:	2126      	movs	r1, #38	@ 0x26
 800fcfa:	69b8      	ldr	r0, [r7, #24]
 800fcfc:	f7ff f954 	bl	800efa8 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800fd00:	2200      	movs	r2, #0
 800fd02:	2107      	movs	r1, #7
 800fd04:	6938      	ldr	r0, [r7, #16]
 800fd06:	f000 f8bb 	bl	800fe80 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	6938      	ldr	r0, [r7, #16]
 800fd18:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3720      	adds	r7, #32
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	3b01      	subs	r3, #1
 800fd42:	2b06      	cmp	r3, #6
 800fd44:	d836      	bhi.n	800fdb4 <_ux_device_class_cdc_acm_entry+0x80>
 800fd46:	a201      	add	r2, pc, #4	@ (adr r2, 800fd4c <_ux_device_class_cdc_acm_entry+0x18>)
 800fd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4c:	0800fd81 	.word	0x0800fd81
 800fd50:	0800fd91 	.word	0x0800fd91
 800fd54:	0800fd9d 	.word	0x0800fd9d
 800fd58:	0800fda9 	.word	0x0800fda9
 800fd5c:	0800fd69 	.word	0x0800fd69
 800fd60:	0800fdb5 	.word	0x0800fdb5
 800fd64:	0800fd75 	.word	0x0800fd75
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f829 	bl	800fdc0 <_ux_device_class_cdc_acm_initialize>
 800fd6e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	e020      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f94d 	bl	8010014 <_ux_device_class_cdc_acm_uninitialize>
 800fd7a:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	e01a      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	695b      	ldr	r3, [r3, #20]
 800fd84:	2b0a      	cmp	r3, #10
 800fd86:	d101      	bne.n	800fd8c <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800fd88:	2300      	movs	r3, #0
 800fd8a:	e014      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800fd8c:	2357      	movs	r3, #87	@ 0x57
 800fd8e:	e012      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f7ff febf 	bl	800fb14 <_ux_device_class_cdc_acm_activate>
 800fd96:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	e00c      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7ff ff89 	bl	800fcb4 <_ux_device_class_cdc_acm_deactivate>
 800fda2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	e006      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff fed3 	bl	800fb54 <_ux_device_class_cdc_acm_control_request>
 800fdae:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	e000      	b.n	800fdb6 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800fdb4:	2354      	movs	r3, #84	@ 0x54
    }   
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop

0800fdc0 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800fdce:	2284      	movs	r2, #132	@ 0x84
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	f7ff fb1c 	bl	800f410 <_ux_utility_memory_allocate>
 800fdd8:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800fde0:	2312      	movs	r3, #18
 800fde2:	e045      	b.n	800fe70 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdee:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	689a      	ldr	r2, [r3, #8]
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	60da      	str	r2, [r3, #12]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	3310      	adds	r3, #16
 800fe0c:	491a      	ldr	r1, [pc, #104]	@ (800fe78 <_ux_device_class_cdc_acm_initialize+0xb8>)
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff fdc0 	bl	800f994 <_ux_utility_mutex_create>
 800fe14:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d004      	beq.n	800fe26 <_ux_device_class_cdc_acm_initialize+0x66>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800fe1c:	6938      	ldr	r0, [r7, #16]
 800fe1e:	f7ff fd1b 	bl	800f858 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800fe22:	2317      	movs	r3, #23
 800fe24:	e024      	b.n	800fe70 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	3344      	adds	r3, #68	@ 0x44
 800fe2a:	4914      	ldr	r1, [pc, #80]	@ (800fe7c <_ux_device_class_cdc_acm_initialize+0xbc>)
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff fdb1 	bl	800f994 <_ux_utility_mutex_create>
 800fe32:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	3310      	adds	r3, #16
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff fdc1 	bl	800f9c6 <_ux_utility_mutex_delete>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800fe44:	6938      	ldr	r0, [r7, #16]
 800fe46:	f7ff fd07 	bl	800f858 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800fe4a:	2317      	movs	r3, #23
 800fe4c:	e010      	b.n	800fe70 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800fe54:	679a      	str	r2, [r3, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	2208      	movs	r2, #8
 800fe6a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	080116a8 	.word	0x080116a8
 800fe7c:	080116c8 	.word	0x080116c8

0800fe80 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b08a      	sub	sp, #40	@ 0x28
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	3b01      	subs	r3, #1
 800fe94:	2b08      	cmp	r3, #8
 800fe96:	f200 80ae 	bhi.w	800fff6 <_ux_device_class_cdc_acm_ioctl+0x176>
 800fe9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fea0 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800fe9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea0:	0800fec5 	.word	0x0800fec5
 800fea4:	0800fef1 	.word	0x0800fef1
 800fea8:	0800ff1d 	.word	0x0800ff1d
 800feac:	0800ff51 	.word	0x0800ff51
 800feb0:	0800ff37 	.word	0x0800ff37
 800feb4:	0800fff7 	.word	0x0800fff7
 800feb8:	0800fff7 	.word	0x0800fff7
 800febc:	0800ffb1 	.word	0x0800ffb1
 800fec0:	0800ffb1 	.word	0x0800ffb1
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	791a      	ldrb	r2, [r3, #4]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	795a      	ldrb	r2, [r3, #5]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	799a      	ldrb	r2, [r3, #6]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
            
            break;
 800feee:	e08b      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	719a      	strb	r2, [r3, #6]
            
            break;
 800ff1a:	e075      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	705a      	strb	r2, [r3, #1]
            
            break;
 800ff34:	e068      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	781a      	ldrb	r2, [r3, #0]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	785a      	ldrb	r2, [r3, #1]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            
            break;
 800ff4e:	e05b      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	69db      	ldr	r3, [r3, #28]
 800ff5a:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d002      	beq.n	800ff68 <_ux_device_class_cdc_acm_ioctl+0xe8>
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d009      	beq.n	800ff7a <_ux_device_class_cdc_acm_ioctl+0xfa>
 800ff66:	e011      	b.n	800ff8c <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	7b9b      	ldrb	r3, [r3, #14]
 800ff6c:	b25b      	sxtb	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	db0f      	blt.n	800ff92 <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	623b      	str	r3, [r7, #32]
                }
                break;
 800ff78:	e00b      	b.n	800ff92 <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800ff7a:	6a3b      	ldr	r3, [r7, #32]
 800ff7c:	7b9b      	ldrb	r3, [r3, #14]
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	da08      	bge.n	800ff96 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ff84:	6a3b      	ldr	r3, [r7, #32]
 800ff86:	695b      	ldr	r3, [r3, #20]
 800ff88:	623b      	str	r3, [r7, #32]
                }
                break;
 800ff8a:	e004      	b.n	800ff96 <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800ff8c:	2353      	movs	r3, #83	@ 0x53
 800ff8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff90:	e002      	b.n	800ff98 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800ff92:	bf00      	nop
 800ff94:	e000      	b.n	800ff98 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800ff96:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	3320      	adds	r3, #32
 800ff9c:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d12f      	bne.n	8010006 <_ux_device_class_cdc_acm_ioctl+0x186>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800ffa6:	21f9      	movs	r1, #249	@ 0xf9
 800ffa8:	69b8      	ldr	r0, [r7, #24]
 800ffaa:	f7fe ffc3 	bl	800ef34 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800ffae:	e02a      	b.n	8010006 <_ux_device_class_cdc_acm_ioctl+0x186>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	7b9b      	ldrb	r3, [r3, #14]
 800ffc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800ffc4:	68ba      	ldr	r2, [r7, #8]
 800ffc6:	2a08      	cmp	r2, #8
 800ffc8:	d101      	bne.n	800ffce <_ux_device_class_cdc_acm_ioctl+0x14e>
 800ffca:	2200      	movs	r2, #0
 800ffcc:	e000      	b.n	800ffd0 <_ux_device_class_cdc_acm_ioctl+0x150>
 800ffce:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d002      	beq.n	800ffda <_ux_device_class_cdc_acm_ioctl+0x15a>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800ffd4:	6a3b      	ldr	r3, [r7, #32]
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ffda:	6a3b      	ldr	r3, [r7, #32]
 800ffdc:	3320      	adds	r3, #32
 800ffde:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d102      	bne.n	800ffee <_ux_device_class_cdc_acm_ioctl+0x16e>
                status = UX_ERROR;
 800ffe8:	23ff      	movs	r3, #255	@ 0xff
 800ffea:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800ffec:	e00c      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800fff4:	e008      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800fff6:	2254      	movs	r2, #84	@ 0x54
 800fff8:	2107      	movs	r1, #7
 800fffa:	2002      	movs	r0, #2
 800fffc:	f7ff f870 	bl	800f0e0 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8010000:	2354      	movs	r3, #84	@ 0x54
 8010002:	627b      	str	r3, [r7, #36]	@ 0x24
 8010004:	e000      	b.n	8010008 <_ux_device_class_cdc_acm_ioctl+0x188>
            break;
 8010006:	bf00      	nop
    }

    /* Return status to caller.  */
    return(status);
 8010008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 801000a:	4618      	mov	r0, r3
 801000c:	3728      	adds	r7, #40	@ 0x28
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop

08010014 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a1b      	ldr	r3, [r3, #32]
 8010020:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010026:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00c      	beq.n	8010048 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	3310      	adds	r3, #16
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff fcc7 	bl	800f9c6 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	3344      	adds	r3, #68	@ 0x44
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff fcc2 	bl	800f9c6 <_ux_utility_mutex_delete>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8010042:	68b8      	ldr	r0, [r7, #8]
 8010044:	f7ff fc08 	bl	800f858 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b082      	sub	sp, #8
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2280      	movs	r2, #128	@ 0x80
 8010060:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2201      	movs	r2, #1
 8010066:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8010068:	6838      	ldr	r0, [r7, #0]
 801006a:	f7fd ff33 	bl	800ded4 <_ux_device_stack_control_request_process>
}
 801006e:	bf00      	nop
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	60f8      	str	r0, [r7, #12]
 801007e:	60b9      	str	r1, [r7, #8]
 8010080:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2200      	movs	r2, #0
 8010086:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2280      	movs	r2, #128	@ 0x80
 801008c:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801008e:	68b8      	ldr	r0, [r7, #8]
 8010090:	f7fd ff20 	bl	800ded4 <_ux_device_stack_control_request_process>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d108      	bne.n	80100ac <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2203      	movs	r2, #3
 801009e:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80100a0:	2300      	movs	r3, #0
 80100a2:	2200      	movs	r2, #0
 80100a4:	2100      	movs	r1, #0
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7f3 f89b 	bl	80031e2 <HAL_PCD_EP_Transmit>
    }
}
 80100ac:	bf00      	nop
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2280      	movs	r2, #128	@ 0x80
 80100c4:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80100c6:	68b8      	ldr	r0, [r7, #8]
 80100c8:	f7fd ff04 	bl	800ded4 <_ux_device_stack_control_request_process>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d108      	bne.n	80100e4 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2204      	movs	r2, #4
 80100d6:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80100d8:	2300      	movs	r3, #0
 80100da:	2200      	movs	r2, #0
 80100dc:	2100      	movs	r1, #0
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7f3 f87f 	bl	80031e2 <HAL_PCD_EP_Transmit>
    }
}
 80100e4:	bf00      	nop
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80100f4:	4b39      	ldr	r3, [pc, #228]	@ (80101dc <HAL_PCD_SetupStageCallback+0xf0>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	69db      	ldr	r3, [r3, #28]
 80100fe:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	3304      	adds	r3, #4
 8010104:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3320      	adds	r3, #32
 801010c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801011a:	2208      	movs	r2, #8
 801011c:	4619      	mov	r1, r3
 801011e:	f7ff fb7d 	bl	800f81c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2200      	movs	r2, #0
 8010126:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	2201      	movs	r2, #1
 801012c:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	2200      	movs	r2, #0
 8010132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	f023 020e 	bic.w	r2, r3, #14
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8010146:	b25b      	sxtb	r3, r3
 8010148:	2b00      	cmp	r3, #0
 801014a:	da04      	bge.n	8010156 <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 801014c:	6939      	ldr	r1, [r7, #16]
 801014e:	6978      	ldr	r0, [r7, #20]
 8010150:	f7ff ff7f 	bl	8010052 <_ux_dcd_stm32_setup_in>
 8010154:	e03e      	b.n	80101d4 <HAL_PCD_SetupStageCallback+0xe8>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2200      	movs	r2, #0
 801015a:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8010162:	2b00      	cmp	r3, #0
 8010164:	d10a      	bne.n	801017c <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801016c:	2b00      	cmp	r3, #0
 801016e:	d105      	bne.n	801017c <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	6939      	ldr	r1, [r7, #16]
 8010174:	6978      	ldr	r0, [r7, #20]
 8010176:	f7ff ff9d 	bl	80100b4 <_ux_dcd_stm32_setup_status>
 801017a:	e02b      	b.n	80101d4 <HAL_PCD_SetupStageCallback+0xe8>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	3354      	adds	r3, #84	@ 0x54
 8010186:	3306      	adds	r3, #6
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff fc7f 	bl	800fa8c <_ux_utility_short_get>
 801018e:	4602      	mov	r2, r0
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801019c:	d907      	bls.n	80101ae <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 801019e:	68f9      	ldr	r1, [r7, #12]
 80101a0:	69b8      	ldr	r0, [r7, #24]
 80101a2:	f000 f9f9 	bl	8010598 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2200      	movs	r2, #0
 80101aa:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 80101ac:	e012      	b.n	80101d4 <HAL_PCD_SetupStageCallback+0xe8>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2200      	movs	r2, #0
 80101b2:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	68da      	ldr	r2, [r3, #12]
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f2 ffb7 	bl	800313c <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2202      	movs	r2, #2
 80101d2:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 80101d4:	3720      	adds	r7, #32
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	20003620 	.word	0x20003620

080101e0 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80101ec:	4b56      	ldr	r3, [pc, #344]	@ (8010348 <HAL_PCD_DataInStageCallback+0x168>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	69db      	ldr	r3, [r3, #28]
 80101f6:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 80101f8:	78fb      	ldrb	r3, [r7, #3]
 80101fa:	f003 030f 	and.w	r3, r3, #15
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00b      	beq.n	801021a <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8010202:	78fb      	ldrb	r3, [r7, #3]
 8010204:	f003 020f 	and.w	r2, r3, #15
 8010208:	4613      	mov	r3, r2
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	4413      	add	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	3370      	adds	r3, #112	@ 0x70
 8010212:	693a      	ldr	r2, [r7, #16]
 8010214:	4413      	add	r3, r2
 8010216:	61fb      	str	r3, [r7, #28]
 8010218:	e00a      	b.n	8010230 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801021a:	78fb      	ldrb	r3, [r7, #3]
 801021c:	f003 020f 	and.w	r2, r3, #15
 8010220:	4613      	mov	r3, r2
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	4413      	add	r3, r2
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	4413      	add	r3, r2
 801022c:	3304      	adds	r3, #4
 801022e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3320      	adds	r3, #32
 8010236:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8010238:	78fb      	ldrb	r3, [r7, #3]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d15c      	bne.n	80102f8 <HAL_PCD_DataInStageCallback+0x118>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	7a1b      	ldrb	r3, [r3, #8]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d179      	bne.n	8010340 <HAL_PCD_DataInStageCallback+0x160>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801024c:	2300      	movs	r3, #0
 801024e:	2200      	movs	r2, #0
 8010250:	2100      	movs	r1, #0
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7f2 ff72 	bl	800313c <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801025c:	68ba      	ldr	r2, [r7, #8]
 801025e:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8010260:	4293      	cmp	r3, r2
 8010262:	d824      	bhi.n	80102ae <HAL_PCD_DataInStageCallback+0xce>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010268:	2b01      	cmp	r3, #1
 801026a:	d10a      	bne.n	8010282 <HAL_PCD_DataInStageCallback+0xa2>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	7b99      	ldrb	r1, [r3, #14]
 8010270:	2300      	movs	r3, #0
 8010272:	2200      	movs	r2, #0
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7f2 ffb4 	bl	80031e2 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8010280:	e05e      	b.n	8010340 <HAL_PCD_DataInStageCallback+0x160>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2202      	movs	r2, #2
 801028c:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <HAL_PCD_DataInStageCallback+0xc6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	2204      	movs	r2, #4
 80102aa:	721a      	strb	r2, [r3, #8]
}
 80102ac:	e048      	b.n	8010340 <HAL_PCD_DataInStageCallback+0x160>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	69db      	ldr	r3, [r3, #28]
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	8a12      	ldrh	r2, [r2, #16]
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	8a1b      	ldrh	r3, [r3, #16]
 80102be:	461a      	mov	r2, r3
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d902      	bls.n	80102cc <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	8a1b      	ldrh	r3, [r3, #16]
 80102ca:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	8a12      	ldrh	r2, [r2, #16]
 80102d4:	441a      	add	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	69da      	ldr	r2, [r3, #28]
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	1ad2      	subs	r2, r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f7f2 ff76 	bl	80031e2 <HAL_PCD_EP_Transmit>
}
 80102f6:	e023      	b.n	8010340 <HAL_PCD_DataInStageCallback+0x160>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d010      	beq.n	8010322 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_requested_length)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00c      	beq.n	8010322 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	651a      	str	r2, [r3, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2200      	movs	r2, #0
 8010312:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8010314:	78f9      	ldrb	r1, [r7, #3]
 8010316:	2300      	movs	r3, #0
 8010318:	2200      	movs	r2, #0
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7f2 ff61 	bl	80031e2 <HAL_PCD_EP_Transmit>
}
 8010320:	e00e      	b.n	8010340 <HAL_PCD_DataInStageCallback+0x160>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2202      	movs	r2, #2
 801032c:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3330      	adds	r3, #48	@ 0x30
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff fb99 	bl	800fa72 <_ux_utility_semaphore_put>
}
 8010340:	bf00      	nop
 8010342:	3720      	adds	r7, #32
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	20003620 	.word	0x20003620

0801034c <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	460b      	mov	r3, r1
 8010356:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8010358:	4b3b      	ldr	r3, [pc, #236]	@ (8010448 <HAL_PCD_DataOutStageCallback+0xfc>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8010364:	78fb      	ldrb	r3, [r7, #3]
 8010366:	f003 020f 	and.w	r2, r3, #15
 801036a:	4613      	mov	r3, r2
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	4413      	add	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	4413      	add	r3, r2
 8010376:	3304      	adds	r3, #4
 8010378:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3320      	adds	r3, #32
 8010380:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8010382:	78fb      	ldrb	r3, [r7, #3]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d147      	bne.n	8010418 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	7a1b      	ldrb	r3, [r3, #8]
 801038c:	2b02      	cmp	r3, #2
 801038e:	d156      	bne.n	801043e <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8010396:	78fb      	ldrb	r3, [r7, #3]
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7f2 ff09 	bl	80031b2 <HAL_PCD_EP_GetRxCount>
 80103a0:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	699a      	ldr	r2, [r3, #24]
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	441a      	add	r2, r3
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d822      	bhi.n	8010400 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d005      	beq.n	80103d2 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	8a1b      	ldrh	r3, [r3, #16]
 80103ca:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d005      	beq.n	80103de <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	6939      	ldr	r1, [r7, #16]
 80103d6:	6978      	ldr	r0, [r7, #20]
 80103d8:	f7ff fe4d 	bl	8010076 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80103dc:	e02f      	b.n	801043e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	8a12      	ldrh	r2, [r2, #16]
 80103e6:	441a      	add	r2, r3
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7f2 fe9f 	bl	800313c <HAL_PCD_EP_Receive>
}
 80103fe:	e01e      	b.n	801043e <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2227      	movs	r2, #39	@ 0x27
 8010404:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801040a:	2b00      	cmp	r3, #0
 801040c:	d017      	beq.n	801043e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010412:	6938      	ldr	r0, [r7, #16]
 8010414:	4798      	blx	r3
}
 8010416:	e012      	b.n	801043e <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8010418:	78fb      	ldrb	r3, [r7, #3]
 801041a:	4619      	mov	r1, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7f2 fec8 	bl	80031b2 <HAL_PCD_EP_GetRxCount>
 8010422:	4602      	mov	r2, r0
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	2200      	movs	r2, #0
 801042c:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	2202      	movs	r2, #2
 8010432:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	3330      	adds	r3, #48	@ 0x30
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fb1a 	bl	800fa72 <_ux_utility_semaphore_put>
}
 801043e:	bf00      	nop
 8010440:	3720      	adds	r7, #32
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	20003620 	.word	0x20003620

0801044c <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8010454:	4b14      	ldr	r3, [pc, #80]	@ (80104a8 <HAL_PCD_ResetCallback+0x5c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801045e:	f7fe f8a9 	bl	800e5b4 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	79db      	ldrb	r3, [r3, #7]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d002      	beq.n	8010470 <HAL_PCD_ResetCallback+0x24>
 801046a:	2b02      	cmp	r3, #2
 801046c:	d006      	beq.n	801047c <HAL_PCD_ResetCallback+0x30>
 801046e:	e00b      	b.n	8010488 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 8010470:	4b0d      	ldr	r3, [pc, #52]	@ (80104a8 <HAL_PCD_ResetCallback+0x5c>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2202      	movs	r2, #2
 8010476:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 801047a:	e00b      	b.n	8010494 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801047c:	4b0a      	ldr	r3, [pc, #40]	@ (80104a8 <HAL_PCD_ResetCallback+0x5c>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2201      	movs	r2, #1
 8010482:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 8010486:	e005      	b.n	8010494 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8010488:	4b07      	ldr	r3, [pc, #28]	@ (80104a8 <HAL_PCD_ResetCallback+0x5c>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2201      	movs	r2, #1
 801048e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 8010492:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8010494:	f000 f8a0 	bl	80105d8 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8010498:	4b03      	ldr	r3, [pc, #12]	@ (80104a8 <HAL_PCD_ResetCallback+0x5c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2201      	movs	r2, #1
 801049e:	621a      	str	r2, [r3, #32]
}
 80104a0:	bf00      	nop
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20003620 	.word	0x20003620

080104ac <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80104b4:	4b07      	ldr	r3, [pc, #28]	@ (80104d4 <HAL_PCD_ConnectCallback+0x28>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d005      	beq.n	80104cc <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 80104c0:	4b04      	ldr	r3, [pc, #16]	@ (80104d4 <HAL_PCD_ConnectCallback+0x28>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80104c8:	20f1      	movs	r0, #241	@ 0xf1
 80104ca:	4798      	blx	r3
    }
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	20003620 	.word	0x20003620

080104d8 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80104e0:	4b0b      	ldr	r3, [pc, #44]	@ (8010510 <HAL_PCD_DisconnectCallback+0x38>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d005      	beq.n	80104f8 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <HAL_PCD_DisconnectCallback+0x38>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80104f4:	20f2      	movs	r0, #242	@ 0xf2
 80104f6:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80104f8:	4b05      	ldr	r3, [pc, #20]	@ (8010510 <HAL_PCD_DisconnectCallback+0x38>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	6a1b      	ldr	r3, [r3, #32]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d001      	beq.n	8010506 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8010502:	f7fe f857 	bl	800e5b4 <_ux_device_stack_disconnect>
    }
}
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20003620 	.word	0x20003620

08010514 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801051c:	4b07      	ldr	r3, [pc, #28]	@ (801053c <HAL_PCD_SuspendCallback+0x28>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8010524:	2b00      	cmp	r3, #0
 8010526:	d005      	beq.n	8010534 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8010528:	4b04      	ldr	r3, [pc, #16]	@ (801053c <HAL_PCD_SuspendCallback+0x28>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8010530:	20f4      	movs	r0, #244	@ 0xf4
 8010532:	4798      	blx	r3
    }
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20003620 	.word	0x20003620

08010540 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8010548:	4b07      	ldr	r3, [pc, #28]	@ (8010568 <HAL_PCD_ResumeCallback+0x28>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8010550:	2b00      	cmp	r3, #0
 8010552:	d005      	beq.n	8010560 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8010554:	4b04      	ldr	r3, [pc, #16]	@ (8010568 <HAL_PCD_ResumeCallback+0x28>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801055c:	20f3      	movs	r0, #243	@ 0xf3
 801055e:	4798      	blx	r3
    }
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20003620 	.word	0x20003620

0801056c <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8010574:	4b07      	ldr	r3, [pc, #28]	@ (8010594 <HAL_PCD_SOFCallback+0x28>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801057c:	2b00      	cmp	r3, #0
 801057e:	d005      	beq.n	801058c <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8010580:	4b04      	ldr	r3, [pc, #16]	@ (8010594 <HAL_PCD_SOFCallback+0x28>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8010588:	20f0      	movs	r0, #240	@ 0xf0
 801058a:	4798      	blx	r3
    }
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	20003620 	.word	0x20003620

08010598 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	f043 0204 	orr.w	r2, r3, #4
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	7b9a      	ldrb	r2, [r3, #14]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	7a9b      	ldrb	r3, [r3, #10]
 80105c2:	4313      	orrs	r3, r2
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	4619      	mov	r1, r3
 80105c8:	f7f2 fe45 	bl	8003256 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
	...

080105d8 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80105de:	4b62      	ldr	r3, [pc, #392]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	69db      	ldr	r3, [r3, #28]
 80105e8:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80105ea:	4b5f      	ldr	r3, [pc, #380]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	3320      	adds	r3, #32
 80105f0:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 80105f2:	4b5d      	ldr	r3, [pc, #372]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d110      	bne.n	8010620 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 80105fe:	4b5a      	ldr	r3, [pc, #360]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	4b59      	ldr	r3, [pc, #356]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
 801060a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801060e:	4b56      	ldr	r3, [pc, #344]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	4b55      	ldr	r3, [pc, #340]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 801061a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 801061e:	e02b      	b.n	8010678 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8010620:	4b51      	ldr	r3, [pc, #324]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2200      	movs	r2, #0
 8010626:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801062a:	4b4f      	ldr	r3, [pc, #316]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8010632:	2b01      	cmp	r3, #1
 8010634:	d110      	bne.n	8010658 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8010636:	4b4c      	ldr	r3, [pc, #304]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	4b4b      	ldr	r3, [pc, #300]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8010642:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8010646:	4b48      	ldr	r3, [pc, #288]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	4b47      	ldr	r3, [pc, #284]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8010652:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8010656:	e00f      	b.n	8010678 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8010658:	4b43      	ldr	r3, [pc, #268]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	4b42      	ldr	r3, [pc, #264]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8010664:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8010668:	4b3f      	ldr	r3, [pc, #252]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	4b3e      	ldr	r3, [pc, #248]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8010674:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8010678:	4b3b      	ldr	r3, [pc, #236]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010680:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 8010686:	220e      	movs	r2, #14
 8010688:	4938      	ldr	r1, [pc, #224]	@ (801076c <_ux_dcd_stm32_initialize_complete+0x194>)
 801068a:	68b8      	ldr	r0, [r7, #8]
 801068c:	f7fe fe22 	bl	800f2d4 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3338      	adds	r3, #56	@ 0x38
 8010694:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801069c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f103 0218 	add.w	r2, r3, #24
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	7adb      	ldrb	r3, [r3, #11]
 80106be:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f103 0218 	add.w	r2, r3, #24
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80106d6:	210e      	movs	r1, #14
 80106d8:	6978      	ldr	r0, [r7, #20]
 80106da:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80106e2:	2100      	movs	r1, #0
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f2 fe4a 	bl	800337e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	7adb      	ldrb	r3, [r3, #11]
 80106f4:	461a      	mov	r2, r3
 80106f6:	2300      	movs	r3, #0
 80106f8:	2100      	movs	r1, #0
 80106fa:	f7f2 fcb5 	bl	8003068 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010704:	2180      	movs	r1, #128	@ 0x80
 8010706:	4618      	mov	r0, r3
 8010708:	f7f2 fe39 	bl	800337e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	7adb      	ldrb	r3, [r3, #11]
 8010716:	461a      	mov	r2, r3
 8010718:	2300      	movs	r3, #0
 801071a:	2180      	movs	r1, #128	@ 0x80
 801071c:	f7f2 fca4 	bl	8003068 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2201      	movs	r2, #1
 801072a:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2201      	movs	r2, #1
 8010730:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2208      	movs	r2, #8
 8010736:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2208      	movs	r2, #8
 801073c:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8010744:	4b08      	ldr	r3, [pc, #32]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8010750:	4b05      	ldr	r3, [pc, #20]	@ (8010768 <_ux_dcd_stm32_initialize_complete+0x190>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8010758:	2001      	movs	r0, #1
 801075a:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	3718      	adds	r7, #24
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	20003620 	.word	0x20003620
 801076c:	20000030 	.word	0x20000030

08010770 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8010770:	b590      	push	{r4, r7, lr}
 8010772:	b097      	sub	sp, #92	@ 0x5c
 8010774:	af08      	add	r7, sp, #32
 8010776:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8010778:	2300      	movs	r3, #0
 801077a:	637b      	str	r3, [r7, #52]	@ 0x34
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;

  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	633b      	str	r3, [r7, #48]	@ 0x30

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8010780:	f107 010c 	add.w	r1, r7, #12
 8010784:	2300      	movs	r3, #0
 8010786:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801078a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801078c:	f7fc fabe 	bl	800cd0c <_txe_byte_allocate>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 8010796:	2302      	movs	r3, #2
 8010798:	e08b      	b.n	80108b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 801079a:	68f8      	ldr	r0, [r7, #12]
 801079c:	2300      	movs	r3, #0
 801079e:	2200      	movs	r2, #0
 80107a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80107a4:	f7fe fd62 	bl	800f26c <_uxe_system_initialize>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 80107ae:	23ff      	movs	r3, #255	@ 0xff
 80107b0:	e07f      	b.n	80108b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80107b2:	f107 031c 	add.w	r3, r7, #28
 80107b6:	4619      	mov	r1, r3
 80107b8:	2001      	movs	r0, #1
 80107ba:	f000 f8bd 	bl	8010938 <USBD_Get_Device_Framework_Speed>
 80107be:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80107c0:	f107 0318 	add.w	r3, r7, #24
 80107c4:	4619      	mov	r1, r3
 80107c6:	2000      	movs	r0, #0
 80107c8:	f000 f8b6 	bl	8010938 <USBD_Get_Device_Framework_Speed>
 80107cc:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80107ce:	f107 0314 	add.w	r3, r7, #20
 80107d2:	4618      	mov	r0, r3
 80107d4:	f000 f8f2 	bl	80109bc <USBD_Get_String_Framework>
 80107d8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80107da:	f107 0310 	add.w	r3, r7, #16
 80107de:	4618      	mov	r0, r3
 80107e0:	f000 f970 	bl	8010ac4 <USBD_Get_Language_Id_Framework>
 80107e4:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80107e6:	69f9      	ldr	r1, [r7, #28]
 80107e8:	69b8      	ldr	r0, [r7, #24]
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	2400      	movs	r4, #0
 80107f0:	9404      	str	r4, [sp, #16]
 80107f2:	9203      	str	r2, [sp, #12]
 80107f4:	6a3a      	ldr	r2, [r7, #32]
 80107f6:	9202      	str	r2, [sp, #8]
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107fc:	9300      	str	r3, [sp, #0]
 80107fe:	4603      	mov	r3, r0
 8010800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010802:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010804:	f7fd ffe4 	bl	800e7d0 <_ux_device_stack_initialize>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
      return UX_ERROR;
 801080e:	23ff      	movs	r3, #255	@ 0xff
 8010810:	e04f      	b.n	80108b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 8010812:	4b2a      	ldr	r3, [pc, #168]	@ (80108bc <MX_USBX_Device_Init+0x14c>)
 8010814:	4a2a      	ldr	r2, [pc, #168]	@ (80108c0 <MX_USBX_Device_Init+0x150>)
 8010816:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 8010818:	4b28      	ldr	r3, [pc, #160]	@ (80108bc <MX_USBX_Device_Init+0x14c>)
 801081a:	4a2a      	ldr	r2, [pc, #168]	@ (80108c4 <MX_USBX_Device_Init+0x154>)
 801081c:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 801081e:	4b27      	ldr	r3, [pc, #156]	@ (80108bc <MX_USBX_Device_Init+0x14c>)
 8010820:	4a29      	ldr	r2, [pc, #164]	@ (80108c8 <MX_USBX_Device_Init+0x158>)
 8010822:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 8010824:	2100      	movs	r1, #0
 8010826:	2002      	movs	r0, #2
 8010828:	f000 f9ac 	bl	8010b84 <USBD_Get_Configuration_Number>
 801082c:	4603      	mov	r3, r0
 801082e:	461a      	mov	r2, r3
 8010830:	4b26      	ldr	r3, [pc, #152]	@ (80108cc <MX_USBX_Device_Init+0x15c>)
 8010832:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 8010834:	2100      	movs	r1, #0
 8010836:	2002      	movs	r0, #2
 8010838:	f000 f966 	bl	8010b08 <USBD_Get_Interface_Number>
 801083c:	4603      	mov	r3, r0
 801083e:	461a      	mov	r2, r3
 8010840:	4b23      	ldr	r3, [pc, #140]	@ (80108d0 <MX_USBX_Device_Init+0x160>)
 8010842:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8010844:	4b21      	ldr	r3, [pc, #132]	@ (80108cc <MX_USBX_Device_Init+0x15c>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	4b21      	ldr	r3, [pc, #132]	@ (80108d0 <MX_USBX_Device_Init+0x160>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	491b      	ldr	r1, [pc, #108]	@ (80108bc <MX_USBX_Device_Init+0x14c>)
 801084e:	9100      	str	r1, [sp, #0]
 8010850:	4920      	ldr	r1, [pc, #128]	@ (80108d4 <MX_USBX_Device_Init+0x164>)
 8010852:	4821      	ldr	r0, [pc, #132]	@ (80108d8 <MX_USBX_Device_Init+0x168>)
 8010854:	f7fd f906 	bl	800da64 <_ux_device_stack_class_register>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 801085e:	23ff      	movs	r3, #255	@ 0xff
 8010860:	e027      	b.n	80108b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 8010862:	f107 010c 	add.w	r1, r7, #12
 8010866:	2300      	movs	r3, #0
 8010868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801086c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801086e:	f7fc fa4d 	bl	800cd0c <_txe_byte_allocate>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d001      	beq.n	801087c <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 8010878:	2302      	movs	r3, #2
 801087a:	e01a      	b.n	80108b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	22b0      	movs	r2, #176	@ 0xb0
 8010880:	9206      	str	r2, [sp, #24]
 8010882:	2201      	movs	r2, #1
 8010884:	9205      	str	r2, [sp, #20]
 8010886:	2200      	movs	r2, #0
 8010888:	9204      	str	r2, [sp, #16]
 801088a:	220a      	movs	r2, #10
 801088c:	9203      	str	r2, [sp, #12]
 801088e:	220a      	movs	r2, #10
 8010890:	9202      	str	r2, [sp, #8]
 8010892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010896:	9201      	str	r2, [sp, #4]
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	2300      	movs	r3, #0
 801089c:	4a0f      	ldr	r2, [pc, #60]	@ (80108dc <MX_USBX_Device_Init+0x16c>)
 801089e:	4910      	ldr	r1, [pc, #64]	@ (80108e0 <MX_USBX_Device_Init+0x170>)
 80108a0:	4810      	ldr	r0, [pc, #64]	@ (80108e4 <MX_USBX_Device_Init+0x174>)
 80108a2:	f7fc fda9 	bl	800d3f8 <_txe_thread_create>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERROR */
    return TX_THREAD_ERROR;
 80108ac:	230e      	movs	r3, #14
 80108ae:	e000      	b.n	80108b2 <MX_USBX_Device_Init+0x142>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 80108b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	373c      	adds	r7, #60	@ 0x3c
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd90      	pop	{r4, r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20003630 	.word	0x20003630
 80108c0:	080108fd 	.word	0x080108fd
 80108c4:	08010911 	.word	0x08010911
 80108c8:	08010925 	.word	0x08010925
 80108cc:	2000362c 	.word	0x2000362c
 80108d0:	20003628 	.word	0x20003628
 80108d4:	0800fd35 	.word	0x0800fd35
 80108d8:	20000010 	.word	0x20000010
 80108dc:	080108e9 	.word	0x080108e9
 80108e0:	080116ec 	.word	0x080116ec
 80108e4:	2000363c 	.word	0x2000363c

080108e8 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
  TX_PARAMETER_NOT_USED(thread_input);
  /* USER CODE END app_ux_device_thread_entry */
}
 80108f0:	bf00      	nop
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 8010904:	bf00      	nop
}
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 8010918:	bf00      	nop
}
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 801092c:	bf00      	nop
}
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	4603      	mov	r3, r0
 8010940:	6039      	str	r1, [r7, #0]
 8010942:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8010948:	79fb      	ldrb	r3, [r7, #7]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d113      	bne.n	8010976 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801094e:	4b16      	ldr	r3, [pc, #88]	@ (80109a8 <USBD_Get_Device_Framework_Speed+0x70>)
 8010950:	6819      	ldr	r1, [r3, #0]
 8010952:	79fb      	ldrb	r3, [r7, #7]
 8010954:	4a15      	ldr	r2, [pc, #84]	@ (80109ac <USBD_Get_Device_Framework_Speed+0x74>)
 8010956:	4816      	ldr	r0, [pc, #88]	@ (80109b0 <USBD_Get_Device_Framework_Speed+0x78>)
 8010958:	f000 f974 	bl	8010c44 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801095c:	4b14      	ldr	r3, [pc, #80]	@ (80109b0 <USBD_Get_Device_Framework_Speed+0x78>)
 801095e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8010962:	4b13      	ldr	r3, [pc, #76]	@ (80109b0 <USBD_Get_Device_Framework_Speed+0x78>)
 8010964:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8010968:	441a      	add	r2, r3
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 801096e:	4b0e      	ldr	r3, [pc, #56]	@ (80109a8 <USBD_Get_Device_Framework_Speed+0x70>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	60fb      	str	r3, [r7, #12]
 8010974:	e012      	b.n	801099c <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8010976:	4b0f      	ldr	r3, [pc, #60]	@ (80109b4 <USBD_Get_Device_Framework_Speed+0x7c>)
 8010978:	6819      	ldr	r1, [r3, #0]
 801097a:	79fb      	ldrb	r3, [r7, #7]
 801097c:	4a0b      	ldr	r2, [pc, #44]	@ (80109ac <USBD_Get_Device_Framework_Speed+0x74>)
 801097e:	480e      	ldr	r0, [pc, #56]	@ (80109b8 <USBD_Get_Device_Framework_Speed+0x80>)
 8010980:	f000 f960 	bl	8010c44 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8010984:	4b0c      	ldr	r3, [pc, #48]	@ (80109b8 <USBD_Get_Device_Framework_Speed+0x80>)
 8010986:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 801098a:	4b0b      	ldr	r3, [pc, #44]	@ (80109b8 <USBD_Get_Device_Framework_Speed+0x80>)
 801098c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8010990:	441a      	add	r2, r3
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8010996:	4b07      	ldr	r3, [pc, #28]	@ (80109b4 <USBD_Get_Device_Framework_Speed+0x7c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	20000064 	.word	0x20000064
 80109ac:	20000058 	.word	0x20000058
 80109b0:	200036ec 	.word	0x200036ec
 80109b4:	20000068 	.word	0x20000068
 80109b8:	20003814 	.word	0x20003814

080109bc <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 80109c4:	2300      	movs	r3, #0
 80109c6:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	1c5a      	adds	r2, r3, #1
 80109d0:	73fa      	strb	r2, [r7, #15]
 80109d2:	461a      	mov	r2, r3
 80109d4:	4b37      	ldr	r3, [pc, #220]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 80109d6:	2109      	movs	r1, #9
 80109d8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80109da:	7bfb      	ldrb	r3, [r7, #15]
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	73fa      	strb	r2, [r7, #15]
 80109e0:	461a      	mov	r2, r3
 80109e2:	4b34      	ldr	r3, [pc, #208]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 80109e4:	2104      	movs	r1, #4
 80109e6:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 80109e8:	7bfb      	ldrb	r3, [r7, #15]
 80109ea:	1c5a      	adds	r2, r3, #1
 80109ec:	73fa      	strb	r2, [r7, #15]
 80109ee:	461a      	mov	r2, r3
 80109f0:	4b30      	ldr	r3, [pc, #192]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 80109f2:	2101      	movs	r1, #1
 80109f4:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	4a2e      	ldr	r2, [pc, #184]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 80109fa:	4413      	add	r3, r2
 80109fc:	f107 020c 	add.w	r2, r7, #12
 8010a00:	4619      	mov	r1, r3
 8010a02:	482d      	ldr	r0, [pc, #180]	@ (8010ab8 <USBD_Get_String_Framework+0xfc>)
 8010a04:	f000 f8d0 	bl	8010ba8 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8010a08:	89bb      	ldrh	r3, [r7, #12]
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	7bfb      	ldrb	r3, [r7, #15]
 8010a0e:	4413      	add	r3, r2
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	3301      	adds	r3, #1
 8010a14:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8010a16:	7bfb      	ldrb	r3, [r7, #15]
 8010a18:	1c5a      	adds	r2, r3, #1
 8010a1a:	73fa      	strb	r2, [r7, #15]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b25      	ldr	r3, [pc, #148]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a20:	2109      	movs	r1, #9
 8010a22:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	73fa      	strb	r2, [r7, #15]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b21      	ldr	r3, [pc, #132]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a2e:	2104      	movs	r1, #4
 8010a30:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	1c5a      	adds	r2, r3, #1
 8010a36:	73fa      	strb	r2, [r7, #15]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a3c:	2102      	movs	r1, #2
 8010a3e:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 8010a40:	7bfb      	ldrb	r3, [r7, #15]
 8010a42:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a44:	4413      	add	r3, r2
 8010a46:	f107 020c 	add.w	r2, r7, #12
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	481b      	ldr	r0, [pc, #108]	@ (8010abc <USBD_Get_String_Framework+0x100>)
 8010a4e:	f000 f8ab 	bl	8010ba8 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 8010a52:	89bb      	ldrh	r3, [r7, #12]
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
 8010a58:	4413      	add	r3, r2
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	1c5a      	adds	r2, r3, #1
 8010a64:	73fa      	strb	r2, [r7, #15]
 8010a66:	461a      	mov	r2, r3
 8010a68:	4b12      	ldr	r3, [pc, #72]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a6a:	2109      	movs	r1, #9
 8010a6c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	73fa      	strb	r2, [r7, #15]
 8010a74:	461a      	mov	r2, r3
 8010a76:	4b0f      	ldr	r3, [pc, #60]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a78:	2104      	movs	r1, #4
 8010a7a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	73fa      	strb	r2, [r7, #15]
 8010a82:	461a      	mov	r2, r3
 8010a84:	4b0b      	ldr	r3, [pc, #44]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a86:	2103      	movs	r1, #3
 8010a88:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8010a8a:	7bfb      	ldrb	r3, [r7, #15]
 8010a8c:	4a09      	ldr	r2, [pc, #36]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a8e:	4413      	add	r3, r2
 8010a90:	f107 020c 	add.w	r2, r7, #12
 8010a94:	4619      	mov	r1, r3
 8010a96:	480a      	ldr	r0, [pc, #40]	@ (8010ac0 <USBD_Get_String_Framework+0x104>)
 8010a98:	f000 f886 	bl	8010ba8 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8010a9c:	4805      	ldr	r0, [pc, #20]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
 8010a9e:	f7ef fd15 	bl	80004cc <strlen>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8010aa8:	4b02      	ldr	r3, [pc, #8]	@ (8010ab4 <USBD_Get_String_Framework+0xf8>)
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	20003acc 	.word	0x20003acc
 8010ab8:	08011708 	.word	0x08011708
 8010abc:	0801171c 	.word	0x0801171c
 8010ac0:	08011734 	.word	0x08011734

08010ac4 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	73fa      	strb	r2, [r7, #15]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8010b04 <USBD_Get_Language_Id_Framework+0x40>)
 8010ada:	2109      	movs	r1, #9
 8010adc:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8010ade:	7bfb      	ldrb	r3, [r7, #15]
 8010ae0:	1c5a      	adds	r2, r3, #1
 8010ae2:	73fa      	strb	r2, [r7, #15]
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	4b07      	ldr	r3, [pc, #28]	@ (8010b04 <USBD_Get_Language_Id_Framework+0x40>)
 8010ae8:	2104      	movs	r1, #4
 8010aea:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8010aec:	4805      	ldr	r0, [pc, #20]	@ (8010b04 <USBD_Get_Language_Id_Framework+0x40>)
 8010aee:	f7ef fced 	bl	80004cc <strlen>
 8010af2:	4602      	mov	r2, r0
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8010af8:	4b02      	ldr	r3, [pc, #8]	@ (8010b04 <USBD_Get_Language_Id_Framework+0x40>)
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	20003bcc 	.word	0x20003bcc

08010b08 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	460a      	mov	r2, r1
 8010b12:	71fb      	strb	r3, [r7, #7]
 8010b14:	4613      	mov	r3, r2
 8010b16:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8010b20:	2300      	movs	r3, #0
 8010b22:	73bb      	strb	r3, [r7, #14]
 8010b24:	e021      	b.n	8010b6a <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8010b26:	7bbb      	ldrb	r3, [r7, #14]
 8010b28:	4a15      	ldr	r2, [pc, #84]	@ (8010b80 <USBD_Get_Interface_Number+0x78>)
 8010b2a:	215c      	movs	r1, #92	@ 0x5c
 8010b2c:	fb01 f303 	mul.w	r3, r1, r3
 8010b30:	4413      	add	r3, r2
 8010b32:	330c      	adds	r3, #12
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	79fa      	ldrb	r2, [r7, #7]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d113      	bne.n	8010b64 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	4a10      	ldr	r2, [pc, #64]	@ (8010b80 <USBD_Get_Interface_Number+0x78>)
 8010b40:	215c      	movs	r1, #92	@ 0x5c
 8010b42:	fb01 f303 	mul.w	r3, r1, r3
 8010b46:	4413      	add	r3, r2
 8010b48:	3314      	adds	r3, #20
 8010b4a:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8010b4c:	79ba      	ldrb	r2, [r7, #6]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d108      	bne.n	8010b64 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 8010b52:	7bbb      	ldrb	r3, [r7, #14]
 8010b54:	4a0a      	ldr	r2, [pc, #40]	@ (8010b80 <USBD_Get_Interface_Number+0x78>)
 8010b56:	215c      	movs	r1, #92	@ 0x5c
 8010b58:	fb01 f303 	mul.w	r3, r1, r3
 8010b5c:	4413      	add	r3, r2
 8010b5e:	335a      	adds	r3, #90	@ 0x5a
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8010b64:	7bbb      	ldrb	r3, [r7, #14]
 8010b66:	3301      	adds	r3, #1
 8010b68:	73bb      	strb	r3, [r7, #14]
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	d9da      	bls.n	8010b26 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 8010b70:	7bfb      	ldrb	r3, [r7, #15]
 8010b72:	b29b      	uxth	r3, r3
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3714      	adds	r7, #20
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr
 8010b80:	200036ec 	.word	0x200036ec

08010b84 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	460a      	mov	r2, r1
 8010b8e:	71fb      	strb	r3, [r7, #7]
 8010b90:	4613      	mov	r3, r2
 8010b92:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 8010b94:	2301      	movs	r3, #1
 8010b96:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	b29b      	uxth	r3, r3
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d023      	beq.n	8010c06 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 8010bc2:	6938      	ldr	r0, [r7, #16]
 8010bc4:	f000 f823 	bl	8010c0e <USBD_Desc_GetLen>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	461a      	mov	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 8010bd0:	7dfb      	ldrb	r3, [r7, #23]
 8010bd2:	1c5a      	adds	r2, r3, #1
 8010bd4:	75fa      	strb	r2, [r7, #23]
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	4413      	add	r3, r2
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	7812      	ldrb	r2, [r2, #0]
 8010be0:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8010be2:	e00b      	b.n	8010bfc <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 8010be4:	7dfb      	ldrb	r3, [r7, #23]
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	75fa      	strb	r2, [r7, #23]
 8010bea:	461a      	mov	r2, r3
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	4413      	add	r3, r2
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	7812      	ldrb	r2, [r2, #0]
 8010bf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1ef      	bne.n	8010be4 <USBD_Desc_GetString+0x3c>
 8010c04:	e000      	b.n	8010c08 <USBD_Desc_GetString+0x60>
    return;
 8010c06:	bf00      	nop
  }
}
 8010c08:	3718      	adds	r7, #24
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b085      	sub	sp, #20
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010c16:	2300      	movs	r3, #0
 8010c18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010c1e:	e005      	b.n	8010c2c <USBD_Desc_GetLen+0x1e>
  {
    len++;
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	3301      	adds	r3, #1
 8010c24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d1f5      	bne.n	8010c20 <USBD_Desc_GetLen+0x12>
  }

  return len;
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3714      	adds	r7, #20
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
	...

08010c44 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b088      	sub	sp, #32
 8010c48:	af02      	add	r7, sp, #8
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
 8010c50:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8010c52:	2300      	movs	r3, #0
 8010c54:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8010c66:	4a73      	ldr	r2, [pc, #460]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8010c6c:	4b71      	ldr	r3, [pc, #452]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2212      	movs	r2, #18
 8010c72:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8010c74:	4b6f      	ldr	r3, [pc, #444]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8010c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2200      	movs	r2, #0
 8010c82:	709a      	strb	r2, [r3, #2]
 8010c84:	2200      	movs	r2, #0
 8010c86:	f042 0202 	orr.w	r2, r2, #2
 8010c8a:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8010c8c:	4b69      	ldr	r3, [pc, #420]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2200      	movs	r2, #0
 8010c92:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 8010c94:	4b67      	ldr	r3, [pc, #412]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8010c9c:	4b65      	ldr	r3, [pc, #404]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8010ca4:	4b63      	ldr	r3, [pc, #396]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2240      	movs	r2, #64	@ 0x40
 8010caa:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8010cac:	4b61      	ldr	r3, [pc, #388]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 8010cb6:	721a      	strb	r2, [r3, #8]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f042 0204 	orr.w	r2, r2, #4
 8010cbe:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8010cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010cca:	729a      	strb	r2, [r3, #10]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 8010cd2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8010cd4:	4b57      	ldr	r3, [pc, #348]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	731a      	strb	r2, [r3, #12]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	f042 0202 	orr.w	r2, r2, #2
 8010ce2:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8010ce4:	4b53      	ldr	r3, [pc, #332]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8010cec:	4b51      	ldr	r3, [pc, #324]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2202      	movs	r2, #2
 8010cf2:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8010cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2203      	movs	r2, #3
 8010cfa:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8010cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2201      	movs	r2, #1
 8010d02:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010d0a:	f103 0212 	add.w	r2, r3, #18
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8010d14:	78fb      	ldrb	r3, [r7, #3]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d162      	bne.n	8010de0 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010d20:	68ba      	ldr	r2, [r7, #8]
 8010d22:	4413      	add	r3, r2
 8010d24:	4a44      	ldr	r2, [pc, #272]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d26:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8010d28:	4b43      	ldr	r3, [pc, #268]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8010d30:	4b41      	ldr	r3, [pc, #260]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2206      	movs	r2, #6
 8010d36:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8010d38:	4b3f      	ldr	r3, [pc, #252]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	709a      	strb	r2, [r3, #2]
 8010d40:	2200      	movs	r2, #0
 8010d42:	f042 0202 	orr.w	r2, r2, #2
 8010d46:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8010d48:	4b3b      	ldr	r3, [pc, #236]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8010d50:	4b39      	ldr	r3, [pc, #228]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2200      	movs	r2, #0
 8010d56:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8010d58:	4b37      	ldr	r3, [pc, #220]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8010d60:	4b35      	ldr	r3, [pc, #212]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2240      	movs	r2, #64	@ 0x40
 8010d66:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8010d68:	4b33      	ldr	r3, [pc, #204]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8010d70:	4b31      	ldr	r3, [pc, #196]	@ (8010e38 <USBD_Device_Framework_Builder+0x1f4>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2200      	movs	r2, #0
 8010d76:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010d7e:	f103 020a 	add.w	r2, r3, #10
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8010d88:	e02a      	b.n	8010de0 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d823      	bhi.n	8010dda <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	d81f      	bhi.n	8010dda <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 8010d9a:	7dfb      	ldrb	r3, [r7, #23]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	4413      	add	r3, r2
 8010da0:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d019      	beq.n	8010dda <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8010da6:	7dfb      	ldrb	r3, [r7, #23]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 8010dac:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	4413      	add	r3, r2
 8010db8:	78fa      	ldrb	r2, [r7, #3]
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f000 f83b 	bl	8010e3c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	1c5a      	adds	r2, r3, #1
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 8010dda:	7dfb      	ldrb	r3, [r7, #23]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
 8010de2:	2b02      	cmp	r3, #2
 8010de4:	d9d1      	bls.n	8010d8a <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d90c      	bls.n	8010e08 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8010dee:	4b11      	ldr	r3, [pc, #68]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	22ef      	movs	r2, #239	@ 0xef
 8010df4:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8010df6:	4b0f      	ldr	r3, [pc, #60]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8010dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2201      	movs	r2, #1
 8010e04:	719a      	strb	r2, [r3, #6]
 8010e06:	e00f      	b.n	8010e28 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d10b      	bne.n	8010e28 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 8010e10:	4b08      	ldr	r3, [pc, #32]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2202      	movs	r2, #2
 8010e16:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8010e18:	4b06      	ldr	r3, [pc, #24]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2202      	movs	r2, #2
 8010e1e:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8010e20:	4b04      	ldr	r3, [pc, #16]	@ (8010e34 <USBD_Device_Framework_Builder+0x1f0>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2200      	movs	r2, #0
 8010e26:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 8010e28:	68bb      	ldr	r3, [r7, #8]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3718      	adds	r7, #24
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	20003bd0 	.word	0x20003bd0
 8010e38:	20003bd4 	.word	0x20003bd4

08010e3c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	4608      	mov	r0, r1
 8010e46:	4611      	mov	r1, r2
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	70fb      	strb	r3, [r7, #3]
 8010e4e:	460b      	mov	r3, r1
 8010e50:	70bb      	strb	r3, [r7, #2]
 8010e52:	4613      	mov	r3, r2
 8010e54:	707b      	strb	r3, [r7, #1]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	2b02      	cmp	r3, #2
 8010e5c:	d834      	bhi.n	8010ec8 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	215c      	movs	r1, #92	@ 0x5c
 8010e66:	fb01 f303 	mul.w	r3, r1, r3
 8010e6a:	4413      	add	r3, r2
 8010e6c:	3318      	adds	r3, #24
 8010e6e:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d129      	bne.n	8010ec8 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	6852      	ldr	r2, [r2, #4]
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	205c      	movs	r0, #92	@ 0x5c
 8010e80:	fb00 f303 	mul.w	r3, r0, r3
 8010e84:	440b      	add	r3, r1
 8010e86:	3310      	adds	r3, #16
 8010e88:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	215c      	movs	r1, #92	@ 0x5c
 8010e92:	fb01 f303 	mul.w	r3, r1, r3
 8010e96:	4413      	add	r3, r2
 8010e98:	3318      	adds	r3, #24
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	215c      	movs	r1, #92	@ 0x5c
 8010ea6:	fb01 f303 	mul.w	r3, r1, r3
 8010eaa:	4413      	add	r3, r2
 8010eac:	330c      	adds	r3, #12
 8010eae:	78fa      	ldrb	r2, [r7, #3]
 8010eb0:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8010eb2:	787b      	ldrb	r3, [r7, #1]
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 f80a 	bl	8010ed2 <USBD_FrameWork_AddToConfDesc>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d001      	beq.n	8010ec8 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8010ec4:	23ff      	movs	r3, #255	@ 0xff
 8010ec6:	e000      	b.n	8010eca <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b086      	sub	sp, #24
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	60f8      	str	r0, [r7, #12]
 8010eda:	460b      	mov	r3, r1
 8010edc:	607a      	str	r2, [r7, #4]
 8010ede:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	7afa      	ldrb	r2, [r7, #11]
 8010ee8:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d107      	bne.n	8010f02 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010efa:	4619      	mov	r1, r3
 8010efc:	4610      	mov	r0, r2
 8010efe:	f000 f8a1 	bl	8011044 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	215c      	movs	r1, #92	@ 0x5c
 8010f0a:	fb01 f303 	mul.w	r3, r1, r3
 8010f0e:	4413      	add	r3, r2
 8010f10:	330c      	adds	r3, #12
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b02      	cmp	r3, #2
 8010f16:	d162      	bne.n	8010fde <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f000 f866 	bl	8010fea <USBD_FrameWork_FindFreeIFNbr>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	68fa      	ldr	r2, [r7, #12]
 8010f28:	215c      	movs	r1, #92	@ 0x5c
 8010f2a:	fb01 f303 	mul.w	r3, r1, r3
 8010f2e:	4413      	add	r3, r2
 8010f30:	3320      	adds	r3, #32
 8010f32:	2202      	movs	r2, #2
 8010f34:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	68fa      	ldr	r2, [r7, #12]
 8010f3c:	215c      	movs	r1, #92	@ 0x5c
 8010f3e:	fb01 f303 	mul.w	r3, r1, r3
 8010f42:	4413      	add	r3, r2
 8010f44:	335a      	adds	r3, #90	@ 0x5a
 8010f46:	7dfa      	ldrb	r2, [r7, #23]
 8010f48:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	7dfa      	ldrb	r2, [r7, #23]
 8010f50:	3201      	adds	r2, #1
 8010f52:	b2d0      	uxtb	r0, r2
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	215c      	movs	r1, #92	@ 0x5c
 8010f58:	fb01 f303 	mul.w	r3, r1, r3
 8010f5c:	4413      	add	r3, r2
 8010f5e:	335b      	adds	r3, #91	@ 0x5b
 8010f60:	4602      	mov	r2, r0
 8010f62:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	215c      	movs	r1, #92	@ 0x5c
 8010f6c:	fb01 f303 	mul.w	r3, r1, r3
 8010f70:	4413      	add	r3, r2
 8010f72:	331c      	adds	r3, #28
 8010f74:	2203      	movs	r2, #3
 8010f76:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 8010f78:	7afb      	ldrb	r3, [r7, #11]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d114      	bne.n	8010fa8 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8010f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f82:	2202      	movs	r2, #2
 8010f84:	2103      	movs	r1, #3
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f000 f889 	bl	801109e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8010f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f90:	2202      	movs	r2, #2
 8010f92:	2182      	movs	r1, #130	@ 0x82
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f000 f882 	bl	801109e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8010f9a:	2308      	movs	r3, #8
 8010f9c:	2203      	movs	r2, #3
 8010f9e:	2181      	movs	r1, #129	@ 0x81
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f000 f87c 	bl	801109e <USBD_FrameWork_AssignEp>
 8010fa6:	e011      	b.n	8010fcc <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8010fa8:	2340      	movs	r3, #64	@ 0x40
 8010faa:	2202      	movs	r2, #2
 8010fac:	2103      	movs	r1, #3
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 f875 	bl	801109e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8010fb4:	2340      	movs	r3, #64	@ 0x40
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	2182      	movs	r1, #130	@ 0x82
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f000 f86f 	bl	801109e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8010fc0:	2308      	movs	r3, #8
 8010fc2:	2203      	movs	r2, #3
 8010fc4:	2181      	movs	r1, #129	@ 0x81
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f000 f869 	bl	801109e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8010fcc:	6879      	ldr	r1, [r7, #4]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	f000 f8d4 	bl	8011184 <USBD_FrameWork_CDCDesc>

      break;
 8010fdc:	e000      	b.n	8010fe0 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 8010fde:	bf00      	nop
  }

  return UX_SUCCESS;
 8010fe0:	2300      	movs	r3, #0
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8010fea:	b480      	push	{r7}
 8010fec:	b087      	sub	sp, #28
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	613b      	str	r3, [r7, #16]
 8010ffa:	e016      	b.n	801102a <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	60fb      	str	r3, [r7, #12]
 8011000:	e005      	b.n	801100e <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	3301      	adds	r3, #1
 8011006:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	3301      	adds	r3, #1
 801100c:	60fb      	str	r3, [r7, #12]
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	215c      	movs	r1, #92	@ 0x5c
 8011014:	fb01 f303 	mul.w	r3, r1, r3
 8011018:	4413      	add	r3, r2
 801101a:	3320      	adds	r3, #32
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68fa      	ldr	r2, [r7, #12]
 8011020:	429a      	cmp	r2, r3
 8011022:	d3ee      	bcc.n	8011002 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	3301      	adds	r3, #1
 8011028:	613b      	str	r3, [r7, #16]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	429a      	cmp	r2, r3
 8011032:	d3e3      	bcc.n	8010ffc <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	b2db      	uxtb	r3, r3
}
 8011038:	4618      	mov	r0, r3
 801103a:	371c      	adds	r7, #28
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr

08011044 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	2209      	movs	r2, #9
 8011056:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2202      	movs	r2, #2
 801105c:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2200      	movs	r2, #0
 8011062:	709a      	strb	r2, [r3, #2]
 8011064:	2200      	movs	r2, #0
 8011066:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2200      	movs	r2, #0
 801106c:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2201      	movs	r2, #1
 8011072:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2200      	movs	r2, #0
 8011078:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	22c0      	movs	r2, #192	@ 0xc0
 801107e:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f103 0209 	add.w	r2, r3, #9
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	601a      	str	r2, [r3, #0]
}
 8011092:	bf00      	nop
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr

0801109e <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 801109e:	b490      	push	{r4, r7}
 80110a0:	b086      	sub	sp, #24
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	60f8      	str	r0, [r7, #12]
 80110a6:	607b      	str	r3, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	72fb      	strb	r3, [r7, #11]
 80110ac:	4613      	mov	r3, r2
 80110ae:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 80110b0:	2300      	movs	r3, #0
 80110b2:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80110b4:	e002      	b.n	80110bc <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	3301      	adds	r3, #1
 80110ba:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	215c      	movs	r1, #92	@ 0x5c
 80110c4:	fb01 f303 	mul.w	r3, r1, r3
 80110c8:	4413      	add	r3, r2
 80110ca:	331c      	adds	r3, #28
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	697a      	ldr	r2, [r7, #20]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d210      	bcs.n	80110f6 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6858      	ldr	r0, [r3, #4]
 80110d8:	68f9      	ldr	r1, [r7, #12]
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	4613      	mov	r3, r2
 80110de:	005b      	lsls	r3, r3, #1
 80110e0:	4413      	add	r3, r2
 80110e2:	005b      	lsls	r3, r3, #1
 80110e4:	225c      	movs	r2, #92	@ 0x5c
 80110e6:	fb00 f202 	mul.w	r2, r0, r2
 80110ea:	4413      	add	r3, r2
 80110ec:	440b      	add	r3, r1
 80110ee:	3328      	adds	r3, #40	@ 0x28
 80110f0:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1df      	bne.n	80110b6 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6858      	ldr	r0, [r3, #4]
 80110fa:	68f9      	ldr	r1, [r7, #12]
 80110fc:	697a      	ldr	r2, [r7, #20]
 80110fe:	4613      	mov	r3, r2
 8011100:	005b      	lsls	r3, r3, #1
 8011102:	4413      	add	r3, r2
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	225c      	movs	r2, #92	@ 0x5c
 8011108:	fb00 f202 	mul.w	r2, r0, r2
 801110c:	4413      	add	r3, r2
 801110e:	440b      	add	r3, r1
 8011110:	3324      	adds	r3, #36	@ 0x24
 8011112:	7afa      	ldrb	r2, [r7, #11]
 8011114:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6858      	ldr	r0, [r3, #4]
 801111a:	68f9      	ldr	r1, [r7, #12]
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	4613      	mov	r3, r2
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	4413      	add	r3, r2
 8011124:	005b      	lsls	r3, r3, #1
 8011126:	225c      	movs	r2, #92	@ 0x5c
 8011128:	fb00 f202 	mul.w	r2, r0, r2
 801112c:	4413      	add	r3, r2
 801112e:	440b      	add	r3, r1
 8011130:	3325      	adds	r3, #37	@ 0x25
 8011132:	7aba      	ldrb	r2, [r7, #10]
 8011134:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6858      	ldr	r0, [r3, #4]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	b29c      	uxth	r4, r3
 801113e:	68f9      	ldr	r1, [r7, #12]
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	4613      	mov	r3, r2
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4413      	add	r3, r2
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	225c      	movs	r2, #92	@ 0x5c
 801114c:	fb00 f202 	mul.w	r2, r0, r2
 8011150:	4413      	add	r3, r2
 8011152:	440b      	add	r3, r1
 8011154:	3326      	adds	r3, #38	@ 0x26
 8011156:	4622      	mov	r2, r4
 8011158:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6858      	ldr	r0, [r3, #4]
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	697a      	ldr	r2, [r7, #20]
 8011162:	4613      	mov	r3, r2
 8011164:	005b      	lsls	r3, r3, #1
 8011166:	4413      	add	r3, r2
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	225c      	movs	r2, #92	@ 0x5c
 801116c:	fb00 f202 	mul.w	r2, r0, r2
 8011170:	4413      	add	r3, r2
 8011172:	440b      	add	r3, r1
 8011174:	3328      	adds	r3, #40	@ 0x28
 8011176:	2201      	movs	r2, #1
 8011178:	701a      	strb	r2, [r3, #0]
}
 801117a:	bf00      	nop
 801117c:	3718      	adds	r7, #24
 801117e:	46bd      	mov	sp, r7
 8011180:	bc90      	pop	{r4, r7}
 8011182:	4770      	bx	lr

08011184 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	4413      	add	r3, r2
 8011198:	461a      	mov	r2, r3
 801119a:	4b99      	ldr	r3, [pc, #612]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 801119c:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 801119e:	4b98      	ldr	r3, [pc, #608]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2208      	movs	r2, #8
 80111a4:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 80111a6:	4b96      	ldr	r3, [pc, #600]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	220b      	movs	r2, #11
 80111ac:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	685a      	ldr	r2, [r3, #4]
 80111b2:	4b93      	ldr	r3, [pc, #588]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	68f9      	ldr	r1, [r7, #12]
 80111b8:	205c      	movs	r0, #92	@ 0x5c
 80111ba:	fb00 f202 	mul.w	r2, r0, r2
 80111be:	440a      	add	r2, r1
 80111c0:	325a      	adds	r2, #90	@ 0x5a
 80111c2:	7812      	ldrb	r2, [r2, #0]
 80111c4:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 80111c6:	4b8e      	ldr	r3, [pc, #568]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2202      	movs	r2, #2
 80111cc:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 80111ce:	4b8c      	ldr	r3, [pc, #560]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2202      	movs	r2, #2
 80111d4:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 80111d6:	4b8a      	ldr	r3, [pc, #552]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2202      	movs	r2, #2
 80111dc:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 80111de:	4b88      	ldr	r3, [pc, #544]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2201      	movs	r2, #1
 80111e4:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 80111e6:	4b86      	ldr	r3, [pc, #536]	@ (8011400 <USBD_FrameWork_CDCDesc+0x27c>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	2200      	movs	r2, #0
 80111ec:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f103 0208 	add.w	r2, r3, #8
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	4413      	add	r3, r2
 8011202:	461a      	mov	r2, r3
 8011204:	4b7f      	ldr	r3, [pc, #508]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 8011206:	601a      	str	r2, [r3, #0]
 8011208:	4b7e      	ldr	r3, [pc, #504]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2209      	movs	r2, #9
 801120e:	701a      	strb	r2, [r3, #0]
 8011210:	4b7c      	ldr	r3, [pc, #496]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2204      	movs	r2, #4
 8011216:	705a      	strb	r2, [r3, #1]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	4b79      	ldr	r3, [pc, #484]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68f9      	ldr	r1, [r7, #12]
 8011222:	205c      	movs	r0, #92	@ 0x5c
 8011224:	fb00 f202 	mul.w	r2, r0, r2
 8011228:	440a      	add	r2, r1
 801122a:	325a      	adds	r2, #90	@ 0x5a
 801122c:	7812      	ldrb	r2, [r2, #0]
 801122e:	709a      	strb	r2, [r3, #2]
 8011230:	4b74      	ldr	r3, [pc, #464]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2200      	movs	r2, #0
 8011236:	70da      	strb	r2, [r3, #3]
 8011238:	4b72      	ldr	r3, [pc, #456]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2201      	movs	r2, #1
 801123e:	711a      	strb	r2, [r3, #4]
 8011240:	4b70      	ldr	r3, [pc, #448]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2202      	movs	r2, #2
 8011246:	715a      	strb	r2, [r3, #5]
 8011248:	4b6e      	ldr	r3, [pc, #440]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2202      	movs	r2, #2
 801124e:	719a      	strb	r2, [r3, #6]
 8011250:	4b6c      	ldr	r3, [pc, #432]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2201      	movs	r2, #1
 8011256:	71da      	strb	r2, [r3, #7]
 8011258:	4b6a      	ldr	r3, [pc, #424]	@ (8011404 <USBD_FrameWork_CDCDesc+0x280>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2200      	movs	r2, #0
 801125e:	721a      	strb	r2, [r3, #8]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f103 0209 	add.w	r2, r3, #9
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	4413      	add	r3, r2
 8011274:	461a      	mov	r2, r3
 8011276:	4b64      	ldr	r3, [pc, #400]	@ (8011408 <USBD_FrameWork_CDCDesc+0x284>)
 8011278:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 801127a:	4b63      	ldr	r3, [pc, #396]	@ (8011408 <USBD_FrameWork_CDCDesc+0x284>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2205      	movs	r2, #5
 8011280:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8011282:	4b61      	ldr	r3, [pc, #388]	@ (8011408 <USBD_FrameWork_CDCDesc+0x284>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2224      	movs	r2, #36	@ 0x24
 8011288:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 801128a:	4b5f      	ldr	r3, [pc, #380]	@ (8011408 <USBD_FrameWork_CDCDesc+0x284>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2200      	movs	r2, #0
 8011290:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8011292:	4b5d      	ldr	r3, [pc, #372]	@ (8011408 <USBD_FrameWork_CDCDesc+0x284>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2200      	movs	r2, #0
 8011298:	f042 0210 	orr.w	r2, r2, #16
 801129c:	70da      	strb	r2, [r3, #3]
 801129e:	2200      	movs	r2, #0
 80112a0:	f042 0201 	orr.w	r2, r2, #1
 80112a4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	1d5a      	adds	r2, r3, #5
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	4413      	add	r3, r2
 80112b8:	461a      	mov	r2, r3
 80112ba:	4b54      	ldr	r3, [pc, #336]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112bc:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 80112be:	4b53      	ldr	r3, [pc, #332]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2205      	movs	r2, #5
 80112c4:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 80112c6:	4b51      	ldr	r3, [pc, #324]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2224      	movs	r2, #36	@ 0x24
 80112cc:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 80112ce:	4b4f      	ldr	r3, [pc, #316]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2201      	movs	r2, #1
 80112d4:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 80112d6:	4b4d      	ldr	r3, [pc, #308]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2200      	movs	r2, #0
 80112dc:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	685a      	ldr	r2, [r3, #4]
 80112e2:	4b4a      	ldr	r3, [pc, #296]	@ (801140c <USBD_FrameWork_CDCDesc+0x288>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	68f9      	ldr	r1, [r7, #12]
 80112e8:	205c      	movs	r0, #92	@ 0x5c
 80112ea:	fb00 f202 	mul.w	r2, r0, r2
 80112ee:	440a      	add	r2, r1
 80112f0:	325b      	adds	r2, #91	@ 0x5b
 80112f2:	7812      	ldrb	r2, [r2, #0]
 80112f4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	1d5a      	adds	r2, r3, #5
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	4413      	add	r3, r2
 8011308:	461a      	mov	r2, r3
 801130a:	4b41      	ldr	r3, [pc, #260]	@ (8011410 <USBD_FrameWork_CDCDesc+0x28c>)
 801130c:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 801130e:	4b40      	ldr	r3, [pc, #256]	@ (8011410 <USBD_FrameWork_CDCDesc+0x28c>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2204      	movs	r2, #4
 8011314:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8011316:	4b3e      	ldr	r3, [pc, #248]	@ (8011410 <USBD_FrameWork_CDCDesc+0x28c>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2224      	movs	r2, #36	@ 0x24
 801131c:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 801131e:	4b3c      	ldr	r3, [pc, #240]	@ (8011410 <USBD_FrameWork_CDCDesc+0x28c>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2202      	movs	r2, #2
 8011324:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8011326:	4b3a      	ldr	r3, [pc, #232]	@ (8011410 <USBD_FrameWork_CDCDesc+0x28c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2202      	movs	r2, #2
 801132c:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	1d1a      	adds	r2, r3, #4
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	4413      	add	r3, r2
 8011340:	461a      	mov	r2, r3
 8011342:	4b34      	ldr	r3, [pc, #208]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 8011344:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8011346:	4b33      	ldr	r3, [pc, #204]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2205      	movs	r2, #5
 801134c:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 801134e:	4b31      	ldr	r3, [pc, #196]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2224      	movs	r2, #36	@ 0x24
 8011354:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8011356:	4b2f      	ldr	r3, [pc, #188]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2206      	movs	r2, #6
 801135c:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	685a      	ldr	r2, [r3, #4]
 8011362:	4b2c      	ldr	r3, [pc, #176]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	68f9      	ldr	r1, [r7, #12]
 8011368:	205c      	movs	r0, #92	@ 0x5c
 801136a:	fb00 f202 	mul.w	r2, r0, r2
 801136e:	440a      	add	r2, r1
 8011370:	325a      	adds	r2, #90	@ 0x5a
 8011372:	7812      	ldrb	r2, [r2, #0]
 8011374:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	685a      	ldr	r2, [r3, #4]
 801137a:	4b26      	ldr	r3, [pc, #152]	@ (8011414 <USBD_FrameWork_CDCDesc+0x290>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	68f9      	ldr	r1, [r7, #12]
 8011380:	205c      	movs	r0, #92	@ 0x5c
 8011382:	fb00 f202 	mul.w	r2, r0, r2
 8011386:	440a      	add	r2, r1
 8011388:	325b      	adds	r2, #91	@ 0x5b
 801138a:	7812      	ldrb	r2, [r2, #0]
 801138c:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	1d5a      	adds	r2, r3, #5
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	4413      	add	r3, r2
 80113a0:	461a      	mov	r2, r3
 80113a2:	4b1d      	ldr	r3, [pc, #116]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113a4:	601a      	str	r2, [r3, #0]
 80113a6:	4b1c      	ldr	r3, [pc, #112]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2207      	movs	r2, #7
 80113ac:	701a      	strb	r2, [r3, #0]
 80113ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2205      	movs	r2, #5
 80113b4:	705a      	strb	r2, [r3, #1]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	685a      	ldr	r2, [r3, #4]
 80113ba:	4b17      	ldr	r3, [pc, #92]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68f9      	ldr	r1, [r7, #12]
 80113c0:	205c      	movs	r0, #92	@ 0x5c
 80113c2:	fb00 f202 	mul.w	r2, r0, r2
 80113c6:	440a      	add	r2, r1
 80113c8:	3230      	adds	r2, #48	@ 0x30
 80113ca:	7812      	ldrb	r2, [r2, #0]
 80113cc:	709a      	strb	r2, [r3, #2]
 80113ce:	4b12      	ldr	r3, [pc, #72]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2203      	movs	r2, #3
 80113d4:	70da      	strb	r2, [r3, #3]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	685a      	ldr	r2, [r3, #4]
 80113da:	4b0f      	ldr	r3, [pc, #60]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	68f9      	ldr	r1, [r7, #12]
 80113e0:	205c      	movs	r0, #92	@ 0x5c
 80113e2:	fb00 f202 	mul.w	r2, r0, r2
 80113e6:	440a      	add	r2, r1
 80113e8:	3232      	adds	r2, #50	@ 0x32
 80113ea:	8812      	ldrh	r2, [r2, #0]
 80113ec:	809a      	strh	r2, [r3, #4]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d112      	bne.n	801141c <USBD_FrameWork_CDCDesc+0x298>
 80113f6:	4b08      	ldr	r3, [pc, #32]	@ (8011418 <USBD_FrameWork_CDCDesc+0x294>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2205      	movs	r2, #5
 80113fc:	719a      	strb	r2, [r3, #6]
 80113fe:	e011      	b.n	8011424 <USBD_FrameWork_CDCDesc+0x2a0>
 8011400:	20003bd8 	.word	0x20003bd8
 8011404:	20003bdc 	.word	0x20003bdc
 8011408:	20003be0 	.word	0x20003be0
 801140c:	20003be4 	.word	0x20003be4
 8011410:	20003be8 	.word	0x20003be8
 8011414:	20003bec 	.word	0x20003bec
 8011418:	20003bf0 	.word	0x20003bf0
 801141c:	4b66      	ldr	r3, [pc, #408]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2205      	movs	r2, #5
 8011422:	719a      	strb	r2, [r3, #6]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	1dda      	adds	r2, r3, #7
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	4413      	add	r3, r2
 8011436:	461a      	mov	r2, r3
 8011438:	4b60      	ldr	r3, [pc, #384]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 801143a:	601a      	str	r2, [r3, #0]
 801143c:	4b5f      	ldr	r3, [pc, #380]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2209      	movs	r2, #9
 8011442:	701a      	strb	r2, [r3, #0]
 8011444:	4b5d      	ldr	r3, [pc, #372]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2204      	movs	r2, #4
 801144a:	705a      	strb	r2, [r3, #1]
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	685a      	ldr	r2, [r3, #4]
 8011450:	4b5a      	ldr	r3, [pc, #360]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	68f9      	ldr	r1, [r7, #12]
 8011456:	205c      	movs	r0, #92	@ 0x5c
 8011458:	fb00 f202 	mul.w	r2, r0, r2
 801145c:	440a      	add	r2, r1
 801145e:	325b      	adds	r2, #91	@ 0x5b
 8011460:	7812      	ldrb	r2, [r2, #0]
 8011462:	709a      	strb	r2, [r3, #2]
 8011464:	4b55      	ldr	r3, [pc, #340]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2200      	movs	r2, #0
 801146a:	70da      	strb	r2, [r3, #3]
 801146c:	4b53      	ldr	r3, [pc, #332]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2202      	movs	r2, #2
 8011472:	711a      	strb	r2, [r3, #4]
 8011474:	4b51      	ldr	r3, [pc, #324]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	220a      	movs	r2, #10
 801147a:	715a      	strb	r2, [r3, #5]
 801147c:	4b4f      	ldr	r3, [pc, #316]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2200      	movs	r2, #0
 8011482:	719a      	strb	r2, [r3, #6]
 8011484:	4b4d      	ldr	r3, [pc, #308]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2200      	movs	r2, #0
 801148a:	71da      	strb	r2, [r3, #7]
 801148c:	4b4b      	ldr	r3, [pc, #300]	@ (80115bc <USBD_FrameWork_CDCDesc+0x438>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2200      	movs	r2, #0
 8011492:	721a      	strb	r2, [r3, #8]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f103 0209 	add.w	r2, r3, #9
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	4413      	add	r3, r2
 80114a8:	461a      	mov	r2, r3
 80114aa:	4b43      	ldr	r3, [pc, #268]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	4b42      	ldr	r3, [pc, #264]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2207      	movs	r2, #7
 80114b4:	701a      	strb	r2, [r3, #0]
 80114b6:	4b40      	ldr	r3, [pc, #256]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2205      	movs	r2, #5
 80114bc:	705a      	strb	r2, [r3, #1]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	685a      	ldr	r2, [r3, #4]
 80114c2:	4b3d      	ldr	r3, [pc, #244]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	68f9      	ldr	r1, [r7, #12]
 80114c8:	205c      	movs	r0, #92	@ 0x5c
 80114ca:	fb00 f202 	mul.w	r2, r0, r2
 80114ce:	440a      	add	r2, r1
 80114d0:	3224      	adds	r2, #36	@ 0x24
 80114d2:	7812      	ldrb	r2, [r2, #0]
 80114d4:	709a      	strb	r2, [r3, #2]
 80114d6:	4b38      	ldr	r3, [pc, #224]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2202      	movs	r2, #2
 80114dc:	70da      	strb	r2, [r3, #3]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	4b35      	ldr	r3, [pc, #212]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	68f9      	ldr	r1, [r7, #12]
 80114e8:	205c      	movs	r0, #92	@ 0x5c
 80114ea:	fb00 f202 	mul.w	r2, r0, r2
 80114ee:	440a      	add	r2, r1
 80114f0:	3226      	adds	r2, #38	@ 0x26
 80114f2:	8812      	ldrh	r2, [r2, #0]
 80114f4:	809a      	strh	r2, [r3, #4]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d104      	bne.n	8011508 <USBD_FrameWork_CDCDesc+0x384>
 80114fe:	4b2e      	ldr	r3, [pc, #184]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2200      	movs	r2, #0
 8011504:	719a      	strb	r2, [r3, #6]
 8011506:	e003      	b.n	8011510 <USBD_FrameWork_CDCDesc+0x38c>
 8011508:	4b2b      	ldr	r3, [pc, #172]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2200      	movs	r2, #0
 801150e:	719a      	strb	r2, [r3, #6]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	1dda      	adds	r2, r3, #7
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	4413      	add	r3, r2
 8011522:	461a      	mov	r2, r3
 8011524:	4b24      	ldr	r3, [pc, #144]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 8011526:	601a      	str	r2, [r3, #0]
 8011528:	4b23      	ldr	r3, [pc, #140]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2207      	movs	r2, #7
 801152e:	701a      	strb	r2, [r3, #0]
 8011530:	4b21      	ldr	r3, [pc, #132]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2205      	movs	r2, #5
 8011536:	705a      	strb	r2, [r3, #1]
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	4b1e      	ldr	r3, [pc, #120]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	68f9      	ldr	r1, [r7, #12]
 8011542:	205c      	movs	r0, #92	@ 0x5c
 8011544:	fb00 f202 	mul.w	r2, r0, r2
 8011548:	440a      	add	r2, r1
 801154a:	322a      	adds	r2, #42	@ 0x2a
 801154c:	7812      	ldrb	r2, [r2, #0]
 801154e:	709a      	strb	r2, [r3, #2]
 8011550:	4b19      	ldr	r3, [pc, #100]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2202      	movs	r2, #2
 8011556:	70da      	strb	r2, [r3, #3]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	4b16      	ldr	r3, [pc, #88]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	68f9      	ldr	r1, [r7, #12]
 8011562:	205c      	movs	r0, #92	@ 0x5c
 8011564:	fb00 f202 	mul.w	r2, r0, r2
 8011568:	440a      	add	r2, r1
 801156a:	322c      	adds	r2, #44	@ 0x2c
 801156c:	8812      	ldrh	r2, [r2, #0]
 801156e:	809a      	strh	r2, [r3, #4]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b01      	cmp	r3, #1
 8011576:	d104      	bne.n	8011582 <USBD_FrameWork_CDCDesc+0x3fe>
 8011578:	4b0f      	ldr	r3, [pc, #60]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2200      	movs	r2, #0
 801157e:	719a      	strb	r2, [r3, #6]
 8011580:	e003      	b.n	801158a <USBD_FrameWork_CDCDesc+0x406>
 8011582:	4b0d      	ldr	r3, [pc, #52]	@ (80115b8 <USBD_FrameWork_CDCDesc+0x434>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2200      	movs	r2, #0
 8011588:	719a      	strb	r2, [r3, #6]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	1dda      	adds	r2, r3, #7
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	791a      	ldrb	r2, [r3, #4]
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	3202      	adds	r2, #2
 801159c:	b2d2      	uxtb	r2, r2
 801159e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	b292      	uxth	r2, r2
 80115a8:	805a      	strh	r2, [r3, #2]
}
 80115aa:	bf00      	nop
 80115ac:	3714      	adds	r7, #20
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	20003bf0 	.word	0x20003bf0
 80115bc:	20003bdc 	.word	0x20003bdc

080115c0 <memset>:
 80115c0:	4402      	add	r2, r0
 80115c2:	4603      	mov	r3, r0
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d100      	bne.n	80115ca <memset+0xa>
 80115c8:	4770      	bx	lr
 80115ca:	f803 1b01 	strb.w	r1, [r3], #1
 80115ce:	e7f9      	b.n	80115c4 <memset+0x4>

080115d0 <__libc_init_array>:
 80115d0:	b570      	push	{r4, r5, r6, lr}
 80115d2:	4d0d      	ldr	r5, [pc, #52]	@ (8011608 <__libc_init_array+0x38>)
 80115d4:	2600      	movs	r6, #0
 80115d6:	4c0d      	ldr	r4, [pc, #52]	@ (801160c <__libc_init_array+0x3c>)
 80115d8:	1b64      	subs	r4, r4, r5
 80115da:	10a4      	asrs	r4, r4, #2
 80115dc:	42a6      	cmp	r6, r4
 80115de:	d109      	bne.n	80115f4 <__libc_init_array+0x24>
 80115e0:	4d0b      	ldr	r5, [pc, #44]	@ (8011610 <__libc_init_array+0x40>)
 80115e2:	2600      	movs	r6, #0
 80115e4:	4c0b      	ldr	r4, [pc, #44]	@ (8011614 <__libc_init_array+0x44>)
 80115e6:	f000 f817 	bl	8011618 <_init>
 80115ea:	1b64      	subs	r4, r4, r5
 80115ec:	10a4      	asrs	r4, r4, #2
 80115ee:	42a6      	cmp	r6, r4
 80115f0:	d105      	bne.n	80115fe <__libc_init_array+0x2e>
 80115f2:	bd70      	pop	{r4, r5, r6, pc}
 80115f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80115f8:	3601      	adds	r6, #1
 80115fa:	4798      	blx	r3
 80115fc:	e7ee      	b.n	80115dc <__libc_init_array+0xc>
 80115fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011602:	3601      	adds	r6, #1
 8011604:	4798      	blx	r3
 8011606:	e7f2      	b.n	80115ee <__libc_init_array+0x1e>
 8011608:	0801184c 	.word	0x0801184c
 801160c:	0801184c 	.word	0x0801184c
 8011610:	0801184c 	.word	0x0801184c
 8011614:	08011850 	.word	0x08011850

08011618 <_init>:
 8011618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161a:	bf00      	nop
 801161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801161e:	bc08      	pop	{r3}
 8011620:	469e      	mov	lr, r3
 8011622:	4770      	bx	lr

08011624 <_fini>:
 8011624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011626:	bf00      	nop
 8011628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801162a:	bc08      	pop	{r3}
 801162c:	469e      	mov	lr, r3
 801162e:	4770      	bx	lr
