
27_1u595rit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e0  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800d530  0800d530  0000e530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d71c  0800d71c  0000e71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d724  0800d724  0000e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d728  0800d728  0000e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800d72c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003a7c  2000006c  0800d798  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003ae8  0800d798  0000fae8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00048457  00000000  00000000  0000f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ac8d  00000000  00000000  000574f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002000  00000000  00000000  00062188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000166e  00000000  00000000  00064188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000438d4  00000000  00000000  000657f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042f6e  00000000  00000000  000a90ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162ecd  00000000  00000000  000ec038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024ef05  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067bc  00000000  00000000  0024ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000109  00000000  00000000  00255704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800d518 	.word	0x0800d518

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	0800d518 	.word	0x0800d518

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	20002f08 	.word	0x20002f08
    LDR     r1, =SYSTICK_CYCLES
 8000300:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20002fa4 	.word	0x20002fa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	20002f0c 	.word	0x20002f0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	20002f10 	.word	0x20002f10
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	20003510 	.word	0x20003510

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f008 f998 	bl	80087a0 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f008 f905 	bl	8008684 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20002fb0 	.word	0x20002fb0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	20003510 	.word	0x20003510
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20002fb4 	.word	0x20002fb4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20003040 	.word	0x20003040
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20003044 	.word	0x20003044
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	2000303c 	.word	0x2000303c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20003038 	.word	0x20003038
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20002fa4 	.word	0x20002fa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	20002f0c 	.word	0x20002f0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	20002f10 	.word	0x20002f10
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <strlen>:
 80004cc:	4603      	mov	r3, r0
 80004ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1fb      	bne.n	80004ce <strlen+0x2>
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	3801      	subs	r0, #1
 80004da:	4770      	bx	lr

080004dc <led_blink_entry>:
#endif

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void led_blink_entry(ULONG thread_input) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 80004e4:	2101      	movs	r1, #1
 80004e6:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <led_blink_entry+0x1c>)
 80004e8:	f000 ff00 	bl	80012ec <HAL_GPIO_TogglePin>
        tx_thread_sleep(500); // Задержка 500 мс
 80004ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f0:	f007 fdf6 	bl	80080e0 <_tx_thread_sleep>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 80004f4:	bf00      	nop
 80004f6:	e7f5      	b.n	80004e4 <led_blink_entry+0x8>
 80004f8:	42020400 	.word	0x42020400

080004fc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	@ 0x38
 8000500:	af08      	add	r7, sp, #32
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

	static TX_THREAD led_blink_thread;
	static UCHAR led_blink_stack[1024];

	UINT mystatus = tx_thread_create(&led_blink_thread, "LED Blink", led_blink_entry, 0,
 8000504:	23b0      	movs	r3, #176	@ 0xb0
 8000506:	9306      	str	r3, [sp, #24]
 8000508:	2301      	movs	r3, #1
 800050a:	9305      	str	r3, [sp, #20]
 800050c:	2300      	movs	r3, #0
 800050e:	9304      	str	r3, [sp, #16]
 8000510:	2305      	movs	r3, #5
 8000512:	9303      	str	r3, [sp, #12]
 8000514:	2305      	movs	r3, #5
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4b22      	ldr	r3, [pc, #136]	@ (80005a8 <tx_application_define+0xac>)
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	4a21      	ldr	r2, [pc, #132]	@ (80005ac <tx_application_define+0xb0>)
 8000526:	4922      	ldr	r1, [pc, #136]	@ (80005b0 <tx_application_define+0xb4>)
 8000528:	4822      	ldr	r0, [pc, #136]	@ (80005b4 <tx_application_define+0xb8>)
 800052a:	f008 fee5 	bl	80092f8 <_txe_thread_create>
 800052e:	6178      	str	r0, [r7, #20]
	                                   led_blink_stack, sizeof(led_blink_stack),
	                                   5, 5, TX_NO_TIME_SLICE, TX_AUTO_START);

	if (mystatus != TX_SUCCESS)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <tx_application_define+0x3e>
	    {
	        // Обработка ошибки
	        while (1);
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <tx_application_define+0x3a>
	    }

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800053e:	2334      	movs	r3, #52	@ 0x34
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000546:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <tx_application_define+0xbc>)
 8000548:	491c      	ldr	r1, [pc, #112]	@ (80005bc <tx_application_define+0xc0>)
 800054a:	481d      	ldr	r0, [pc, #116]	@ (80005c0 <tx_application_define+0xc4>)
 800054c:	f008 fbd2 	bl	8008cf4 <_txe_byte_pool_create>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10a      	bne.n	800056c <tx_application_define+0x70>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <tx_application_define+0xc4>)
 8000558:	60fb      	str	r3, [r7, #12]
    status = App_ThreadX_Init(memory_ptr);
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f000 f83a 	bl	80005d4 <App_ThreadX_Init>
 8000560:	6138      	str	r0, [r7, #16]
    if (status != TX_SUCCESS)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <tx_application_define+0x70>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <tx_application_define+0x6c>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800056c:	2334      	movs	r3, #52	@ 0x34
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000574:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <tx_application_define+0xc8>)
 8000576:	4914      	ldr	r1, [pc, #80]	@ (80005c8 <tx_application_define+0xcc>)
 8000578:	4814      	ldr	r0, [pc, #80]	@ (80005cc <tx_application_define+0xd0>)
 800057a:	f008 fbbb 	bl	8008cf4 <_txe_byte_pool_create>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10d      	bne.n	80005a0 <tx_application_define+0xa4>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <tx_application_define+0xd0>)
 8000586:	60fb      	str	r3, [r7, #12]
    status = MX_USBX_Device_Init(memory_ptr);
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f00c f871 	bl	800c670 <MX_USBX_Device_Init>
 800058e:	6138      	str	r0, [r7, #16]
    if (status != UX_SUCCESS)
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <tx_application_define+0x9e>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <tx_application_define+0x9a>
      {
      }
      /* USER CODE END  MX_USBX_Device_Init_Error */
    }
    /* USER CODE BEGIN  MX_USBX_Device_Init_Success */
    HAL_PCD_Start(&hpcd_USB_OTG_HS);
 800059a:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <tx_application_define+0xd4>)
 800059c:	f000 ffcc 	bl	8001538 <HAL_PCD_Start>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200025a0 	.word	0x200025a0
 80005ac:	080004dd 	.word	0x080004dd
 80005b0:	0800d530 	.word	0x0800d530
 80005b4:	200024f0 	.word	0x200024f0
 80005b8:	20000088 	.word	0x20000088
 80005bc:	0800d53c 	.word	0x0800d53c
 80005c0:	20000488 	.word	0x20000488
 80005c4:	200004bc 	.word	0x200004bc
 80005c8:	0800d550 	.word	0x0800d550
 80005cc:	200024bc 	.word	0x200024bc
 80005d0:	200029a0 	.word	0x200029a0

080005d4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80005e0:	68fb      	ldr	r3, [r7, #12]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 80005f2:	f006 fc31 	bl	8006e58 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fab0 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f812 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f896 	bl	8000738 <MX_GPIO_Init>
  MX_USB_OTG_HS_PCD_Init();
 800060c:	f000 f866 	bl	80006dc <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
 // USB_Reset(&hpcd_USB_OTG_HS);

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000610:	f7ff ffed 	bl	80005ee <MX_ThreadX_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// ux_dcd_stm32_interrupt_handler();
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000614:	2101      	movs	r1, #1
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <main+0x2c>)
 8000618:	f000 fe68 	bl	80012ec <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f000 faf1 	bl	8000c04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000622:	bf00      	nop
 8000624:	e7f6      	b.n	8000614 <main+0x18>
 8000626:	bf00      	nop
 8000628:	42020400 	.word	0x42020400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09e      	sub	sp, #120	@ 0x78
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2260      	movs	r2, #96	@ 0x60
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00c ff40 	bl	800d4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000650:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000654:	f002 f81a 	bl	800268c <HAL_PWREx_ControlVoltageScaling>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800065e:	f000 f8d1 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	2303      	movs	r3, #3
 8000672:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800068c:	230c      	movs	r3, #12
 800068e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f8b1 	bl	8002800 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006a4:	f000 f8ae 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	231f      	movs	r3, #31
 80006aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ff77 	bl	80035b8 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006d0:	f000 f898 	bl	8000804 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3778      	adds	r7, #120	@ 0x78
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80006e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006e8:	2209      	movs	r2, #9
 80006ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ee:	2202      	movs	r2, #2
 80006f0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800071e:	f000 fdff 	bl	8001320 <HAL_PCD_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8000728:	f000 f86c 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200029a0 	.word	0x200029a0
 8000734:	42040000 	.word	0x42040000

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 8000750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000754:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 8000756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 8000760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 800076e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000772:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 800077e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 800078c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000790:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_GPIO_Init+0xa0>)
 800079c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xa4>)
 80007ae:	f000 fd85 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0xa4>)
 80007ca:	f000 fb9f 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	46020c00 	.word	0x46020c00
 80007dc:	42020400 	.word	0x42020400

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 f9e7 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40012c00 	.word	0x40012c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <Error_Handler+0x8>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_MspInit+0x30>)
 8000818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800081c:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x30>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x30>)
 8000828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000834:	f001 ffb6 	bl	80027a4 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	46020c00 	.word	0x46020c00

08000844 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0bc      	sub	sp, #240	@ 0xf0
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	22d8      	movs	r2, #216	@ 0xd8
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00c fe33 	bl	800d4c0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a3e      	ldr	r2, [pc, #248]	@ (8000958 <HAL_PCD_MspInit+0x114>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d175      	bne.n	8000950 <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <HAL_PCD_MspInit+0x118>)
 8000866:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800086a:	4a3c      	ldr	r2, [pc, #240]	@ (800095c <HAL_PCD_MspInit+0x118>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000874:	4b39      	ldr	r3, [pc, #228]	@ (800095c <HAL_PCD_MspInit+0x118>)
 8000876:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	f04f 0308 	mov.w	r3, #8
 800088a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800088e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fa6c 	bl	8003d78 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80008a6:	f7ff ffad 	bl	8000804 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80008aa:	200c      	movs	r0, #12
 80008ac:	f000 f9e2 	bl	8000c74 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80008b0:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b6:	4a29      	ldr	r2, [pc, #164]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11b      	bne.n	8000932 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_PCD_MspInit+0x118>)
 80008fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000900:	4a16      	ldr	r2, [pc, #88]	@ (800095c <HAL_PCD_MspInit+0x118>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <HAL_PCD_MspInit+0x118>)
 800090c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000918:	f001 ff44 	bl	80027a4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800091c:	f001 ff52 	bl	80027c4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_PCD_MspInit+0x118>)
 8000922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000926:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <HAL_PCD_MspInit+0x118>)
 8000928:	f023 0304 	bic.w	r3, r3, #4
 800092c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000930:	e003      	b.n	800093a <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000932:	f001 ff37 	bl	80027a4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000936:	f001 ff45 	bl	80027c4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 f986 	bl	8000c4c <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2049      	movs	r0, #73	@ 0x49
 8000946:	f000 fa61 	bl	8000e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800094a:	2049      	movs	r0, #73	@ 0x49
 800094c:	f000 fa78 	bl	8000e40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000950:	bf00      	nop
 8000952:	37f0      	adds	r7, #240	@ 0xf0
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	42040000 	.word	0x42040000
 800095c:	46020c00 	.word	0x46020c00

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	@ 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000970:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <HAL_InitTick+0xcc>)
 8000972:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000976:	4a2d      	ldr	r2, [pc, #180]	@ (8000a2c <HAL_InitTick+0xcc>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800097c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <HAL_InitTick+0xcc>)
 8000982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098e:	f107 0210 	add.w	r2, r7, #16
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f003 f92f 	bl	8003bfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800099e:	f003 f919 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 80009a2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009b4:	4a20      	ldr	r2, [pc, #128]	@ (8000a38 <HAL_InitTick+0xd8>)
 80009b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80009d2:	4818      	ldr	r0, [pc, #96]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009d4:	f004 f99e 	bl	8004d14 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80009de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d118      	bne.n	8000a18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009e6:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009e8:	f004 f9f6 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10e      	bne.n	8000a18 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d808      	bhi.n	8000a12 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	202a      	movs	r0, #42	@ 0x2a
 8000a06:	f000 fa01 	bl	8000e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <HAL_InitTick+0xdc>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e002      	b.n	8000a18 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a18:	202a      	movs	r0, #42	@ 0x2a
 8000a1a:	f000 fa11 	bl	8000e40 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3738      	adds	r7, #56	@ 0x38
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	46020c00 	.word	0x46020c00
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	20002e84 	.word	0x20002e84
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	20000004 	.word	0x20000004

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <TIM1_UP_IRQHandler+0x10>)
 8000a7e:	f004 fa4b 	bl	8004f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20002e84 	.word	0x20002e84

08000a8c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <OTG_HS_IRQHandler+0x10>)
 8000a92:	f000 fd73 	bl	800157c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200029a0 	.word	0x200029a0

08000aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <SystemInit+0x68>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <SystemInit+0x68>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <SystemInit+0x6c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <SystemInit+0x6c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <SystemInit+0x6c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <SystemInit+0x6c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <SystemInit+0x6c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <SystemInit+0x6c>)
 8000ad2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ad6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <SystemInit+0x6c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <SystemInit+0x6c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <SystemInit+0x6c>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000aec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <SystemInit+0x6c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <SystemInit+0x68>)
 8000af6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000afa:	609a      	str	r2, [r3, #8]
  #endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	46020c00 	.word	0x46020c00

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b48 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b14:	f7ff ffc4 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
	ldr	r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <LoopForever+0x16>)
	cmp	r2, r3
 8000b3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f00c fcc7 	bl	800d4d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fd5b 	bl	80005fc <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b48:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000b4c:	0800d72c 	.word	0x0800d72c
	ldr	r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b54:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8000b58:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8000b5c:	20003ae8 	.word	0x20003ae8

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_Init+0x50>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_Init+0x50>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f93e 	bl	8000df6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b7a:	f002 ff0f 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_Init+0x54>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <HAL_Init+0x58>)
 8000b8a:	5ccb      	ldrb	r3, [r1, r3]
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_Init+0x5c>)
 8000b92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b94:	2004      	movs	r0, #4
 8000b96:	f000 f961 	bl	8000e5c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff fee0 	bl	8000960 <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e002      	b.n	8000bb0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000baa:	f7ff fe31 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	46020c00 	.word	0x46020c00
 8000bbc:	0800d644 	.word	0x0800d644
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20002ed0 	.word	0x20002ed0

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20002ed0 	.word	0x20002ed0

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c58:	f023 0201 	bic.w	r2, r3, #1
 8000c5c:	4904      	ldr	r1, [pc, #16]	@ (8000c70 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	46000400 	.word	0x46000400

08000c74 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c80:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000c84:	4904      	ldr	r1, [pc, #16]	@ (8000c98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	46000400 	.word	0x46000400

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff4c 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff63 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb3 	bl	8000d90 <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff82 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff56 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d844      	bhi.n	8000ef4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e93 	.word	0x08000e93
 8000e74:	08000eb1 	.word	0x08000eb1
 8000e78:	08000ed3 	.word	0x08000ed3
 8000e7c:	08000ef5 	.word	0x08000ef5
 8000e80:	08000e85 	.word	0x08000e85
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6013      	str	r3, [r2, #0]
      break;
 8000e90:	e031      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ea6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000eae:	e022      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eb6:	f023 0304 	bic.w	r3, r3, #4
 8000eba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ed0:	e011      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000eea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ef2:	e000      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ef4:	bf00      	nop
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010
 8000f08:	46020c00 	.word	0x46020c00

08000f0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f1e:	e1ba      	b.n	8001296 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 81aa 	beq.w	8001290 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a55      	ldr	r2, [pc, #340]	@ (8001094 <HAL_GPIO_Init+0x188>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d15d      	bne.n	8001000 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f74:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <HAL_GPIO_Init+0x18c>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f7c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f7e:	4a46      	ldr	r2, [pc, #280]	@ (8001098 <HAL_GPIO_Init+0x18c>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4413      	add	r3, r2
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3208      	adds	r2, #8
 8000f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f96:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220b      	movs	r2, #11
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69f9      	ldr	r1, [r7, #28]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2202      	movs	r2, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e067      	b.n	80010d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x104>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d145      	bne.n	800109c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	f003 020f 	and.w	r2, r3, #15
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	4313      	orrs	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69f9      	ldr	r1, [r7, #28]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4013      	ands	r3, r2
 8001072:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	4313      	orrs	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e01e      	b.n	80010d0 <HAL_GPIO_Init+0x1c4>
 8001092:	bf00      	nop
 8001094:	46020000 	.word	0x46020000
 8001098:	0800d69c 	.word	0x0800d69c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00b      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e4:	2b11      	cmp	r3, #17
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d130      	bne.n	8001152 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4313      	orrs	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001126:	2201      	movs	r2, #1
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4013      	ands	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 0201 	and.w	r2, r3, #1
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4313      	orrs	r3, r2
 800114a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d017      	beq.n	800118a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	4013      	ands	r3, r2
 8001170:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	4313      	orrs	r3, r2
 8001182:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d07c      	beq.n	8001290 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001196:	4a47      	ldr	r2, [pc, #284]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3318      	adds	r3, #24
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0a9a      	lsrs	r2, r3, #10
 80011be:	4b3e      	ldr	r3, [pc, #248]	@ (80012b8 <HAL_GPIO_Init+0x3ac>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	4093      	lsls	r3, r2
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011d2:	4938      	ldr	r1, [pc, #224]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3318      	adds	r3, #24
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	4013      	ands	r3, r2
 8001218:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800123a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	4013      	ands	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800125a:	4a16      	ldr	r2, [pc, #88]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001268:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4013      	ands	r3, r2
 8001272:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_GPIO_Init+0x3a8>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f ae3d 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3724      	adds	r7, #36	@ 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	46022000 	.word	0x46022000
 80012b8:	002f7f7f 	.word	0x002f7f7f

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43d9      	mvns	r1, r3
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	400b      	ands	r3, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0fe      	b.n	8001530 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fa7c 	bl	8000844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f004 f97e 	bl	800565a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7c1a      	ldrb	r2, [r3, #16]
 8001366:	f88d 2000 	strb.w	r2, [sp]
 800136a:	3304      	adds	r3, #4
 800136c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136e:	f004 f891 	bl	8005494 <USB_CoreInit>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0d5      	b.n	8001530 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 f976 	bl	800567c <USB_SetCurrentMode>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0c6      	b.n	8001530 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e04a      	b.n	800143e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3315      	adds	r3, #21
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3314      	adds	r3, #20
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b298      	uxth	r0, r3
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	332e      	adds	r3, #46	@ 0x2e
 80013e4:	4602      	mov	r2, r0
 80013e6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3318      	adds	r3, #24
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	331c      	adds	r3, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3320      	adds	r3, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3324      	adds	r3, #36	@ 0x24
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3af      	bcc.n	80013a8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e044      	b.n	80014d8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3b5      	bcc.n	800144e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7c1a      	ldrb	r2, [r3, #16]
 80014ea:	f88d 2000 	strb.w	r2, [sp]
 80014ee:	3304      	adds	r3, #4
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	f004 f90f 	bl	8005714 <USB_DevInit>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e013      	b.n	8001530 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d102      	bne.n	8001524 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 f884 	bl	800262c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fff6 	bl	800651a <USB_DevDisconnect>

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_PCD_Start+0x16>
 800154a:	2302      	movs	r3, #2
 800154c:	e012      	b.n	8001574 <HAL_PCD_Start+0x3c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f86c 	bl	8005638 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 ffb7 	bl	80064d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08d      	sub	sp, #52	@ 0x34
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f875 	bl	8006682 <USB_GetMode>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 84b9 	bne.w	8001f12 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 ffd9 	bl	800655c <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 84af 	beq.w	8001f10 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 ffc6 	bl	800655c <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f002 0202 	and.w	r2, r2, #2
 80015e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 ffb4 	bl	800655c <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d161      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f003 020f 	and.w	r2, r3, #15
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	0c5b      	lsrs	r3, r3, #17
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	2b02      	cmp	r3, #2
 8001638:	d124      	bne.n	8001684 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d035      	beq.n	80016b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	6a38      	ldr	r0, [r7, #32]
 800165a:	f004 fe77 	bl	800634c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166a:	441a      	add	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167c:	441a      	add	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	e016      	b.n	80016b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	0c5b      	lsrs	r3, r3, #17
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	2b06      	cmp	r3, #6
 800168e:	d110      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001696:	2208      	movs	r2, #8
 8001698:	4619      	mov	r1, r3
 800169a:	6a38      	ldr	r0, [r7, #32]
 800169c:	f004 fe56 	bl	800634c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ac:	441a      	add	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0210 	orr.w	r2, r2, #16
 80016c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 ff48 	bl	800655c <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016d6:	f040 80a7 	bne.w	8001828 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 ff4d 	bl	8006582 <USB_ReadDevAllOutEpInterrupt>
 80016e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80016ea:	e099      	b.n	8001820 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 808e 	beq.w	8001814 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f004 ff71 	bl	80065ea <USB_ReadDevOutEPInterrupt>
 8001708:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001720:	461a      	mov	r2, r3
 8001722:	2301      	movs	r3, #1
 8001724:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fe51 	bl	80023d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00c      	beq.n	8001752 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001744:	461a      	mov	r2, r3
 8001746:	2308      	movs	r3, #8
 8001748:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800174a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 ff27 	bl	80025a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001768:	461a      	mov	r2, r3
 800176a:	2310      	movs	r3, #16
 800176c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d030      	beq.n	80017da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001780:	2b80      	cmp	r3, #128	@ 0x80
 8001782:	d109      	bne.n	8001798 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001796:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	3304      	adds	r3, #4
 80017ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fba8 	bl	8001f18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017d4:	461a      	mov	r2, r3
 80017d6:	2302      	movs	r3, #2
 80017d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f0:	461a      	mov	r2, r3
 80017f2:	2320      	movs	r3, #32
 80017f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800180c:	461a      	mov	r2, r3
 800180e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001812:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	3301      	adds	r3, #1
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f af62 	bne.w	80016ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fe95 	bl	800655c <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001838:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800183c:	f040 80db 	bne.w	80019f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 feb6 	bl	80065b6 <USB_ReadDevAllInEpInterrupt>
 800184a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001850:	e0cd      	b.n	80019ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80c2 	beq.w	80019e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fedc 	bl	8006626 <USB_ReadDevInEPInterrupt>
 800186e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d057      	beq.n	800192a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	2201      	movs	r2, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800188e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	69f9      	ldr	r1, [r7, #28]
 8001896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800189a:	4013      	ands	r3, r2
 800189c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018aa:	461a      	mov	r2, r3
 80018ac:	2301      	movs	r3, #1
 80018ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	799b      	ldrb	r3, [r3, #6]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d132      	bne.n	800191e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3320      	adds	r3, #32
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4403      	add	r3, r0
 80018d8:	331c      	adds	r3, #28
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4419      	add	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4403      	add	r3, r0
 80018ec:	3320      	adds	r3, #32
 80018ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d113      	bne.n	800191e <HAL_PCD_IRQHandler+0x3a2>
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3324      	adds	r3, #36	@ 0x24
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d108      	bne.n	800191e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001916:	461a      	mov	r2, r3
 8001918:	2101      	movs	r1, #1
 800191a:	f004 fee3 	bl	80066e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f00a fbdb 	bl	800c0e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001940:	461a      	mov	r2, r3
 8001942:	2308      	movs	r3, #8
 8001944:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800195c:	461a      	mov	r2, r3
 800195e:	2310      	movs	r3, #16
 8001960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001978:	461a      	mov	r2, r3
 800197a:	2340      	movs	r3, #64	@ 0x40
 800197c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800198a:	6a38      	ldr	r0, [r7, #32]
 800198c:	f004 f832 	bl	80059f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	3310      	adds	r3, #16
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	78db      	ldrb	r3, [r3, #3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fab9 	bl	8001f30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ca:	461a      	mov	r2, r3
 80019cc:	2302      	movs	r3, #2
 80019ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fc6b 	bl	80022b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	3301      	adds	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f af2e 	bne.w	8001852 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fdae 	bl	800655c <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a0a:	d122      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d108      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fe1d 	bl	8002674 <HAL_PCDEx_LPM_Callback>
 8001a3a:	e002      	b.n	8001a42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f00a fcff 	bl	800c440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fd80 	bl	800655c <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a66:	d112      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00a fccb 	bl	800c414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fd62 	bl	800655c <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001aa2:	d121      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001ab2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d111      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fdca 	bl	8002674 <HAL_PCDEx_LPM_Callback>
 8001ae0:	e002      	b.n	8001ae8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f00a fc96 	bl	800c414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 fd35 	bl	800655c <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afc:	f040 80b7 	bne.w	8001c6e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2110      	movs	r1, #16
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 ff6a 	bl	80059f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b24:	e046      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b32:	461a      	mov	r2, r3
 8001b34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4a:	0151      	lsls	r1, r2, #5
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	440a      	add	r2, r1
 8001b50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b66:	461a      	mov	r2, r3
 8001b68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b7e:	0151      	lsls	r1, r2, #5
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	440a      	add	r2, r1
 8001b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b9e:	0151      	lsls	r1, r2, #5
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	440a      	add	r2, r1
 8001ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ba8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d3b2      	bcc.n	8001b26 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001bd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7bdb      	ldrb	r3, [r3, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bec:	f043 030b 	orr.w	r3, r3, #11
 8001bf0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c02:	f043 030b 	orr.w	r3, r3, #11
 8001c06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c08:	e015      	b.n	8001c36 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c1c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c30:	f043 030b 	orr.w	r3, r3, #11
 8001c34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c44:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f004 fd43 	bl	80066e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fc72 	bl	800655c <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c82:	d123      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 fd08 	bl	800669e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 ff27 	bl	8005ae6 <USB_GetDevSpeed>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681c      	ldr	r4, [r3, #0]
 8001ca4:	f001 ff7c 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f003 fc1f 	bl	80054f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f00a fb48 	bl	800c34c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fc43 	bl	800655c <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d10a      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f00a fbc3 	bl	800c46c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 0208 	and.w	r2, r2, #8
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fc2e 	bl	800655c <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d06:	2b80      	cmp	r3, #128	@ 0x80
 8001d08:	d123      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d16:	2301      	movs	r3, #1
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1a:	e014      	b.n	8001d46 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa5e 	bl	80021fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	3301      	adds	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d3e4      	bcc.n	8001d1c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fc00 	bl	800655c <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d66:	d13c      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d68:	2301      	movs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	e02b      	b.n	8001dc6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d115      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da12      	bge.n	8001dc0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3317      	adds	r3, #23
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa1e 	bl	80021fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	791b      	ldrb	r3, [r3, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d3cd      	bcc.n	8001d6e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 fbb8 	bl	800655c <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001df6:	d156      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	e045      	b.n	8001e8a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d12e      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da2b      	bge.n	8001e84 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	0c1a      	lsrs	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001e36:	4053      	eors	r3, r2
 8001e38:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d121      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e80:	6053      	str	r3, [r2, #4]
            break;
 8001e82:	e008      	b.n	8001e96 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	3301      	adds	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d3b3      	bcc.n	8001dfe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fb56 	bl	800655c <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eba:	d10a      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f00a fa75 	bl	800c3ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fb40 	bl	800655c <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d115      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f00a fa6d 	bl	800c3d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e000      	b.n	8001f12 <HAL_PCD_IRQHandler+0x996>
      return;
 8001f10:	bf00      	nop
    }
  }
}
 8001f12:	3734      	adds	r7, #52	@ 0x34
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}

08001f18 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	70fb      	strb	r3, [r7, #3]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	803b      	strh	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da0f      	bge.n	8001f8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	705a      	strb	r2, [r3, #1]
 8001f8c:	e00f      	b.n	8001fae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 020f 	and.w	r2, r3, #15
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001fba:	883b      	ldrh	r3, [r7, #0]
 8001fbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	78ba      	ldrb	r2, [r7, #2]
 8001fc8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fdc:	78bb      	ldrb	r3, [r7, #2]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d102      	bne.n	8001fe8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_EP_Open+0xae>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e00e      	b.n	8002014 <HAL_PCD_EP_Open+0xcc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fd93 	bl	8005b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002012:	7afb      	ldrb	r3, [r7, #11]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	799b      	ldrb	r3, [r3, #6]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	799b      	ldrb	r3, [r3, #6]
 8002080:	461a      	mov	r2, r3
 8002082:	6979      	ldr	r1, [r7, #20]
 8002084:	f003 fddc 	bl	8005c40 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020b4:	681b      	ldr	r3, [r3, #0]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	460b      	mov	r3, r1
 80020d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3310      	adds	r3, #16
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2201      	movs	r2, #1
 8002100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	799b      	ldrb	r3, [r3, #6]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	799b      	ldrb	r3, [r3, #6]
 8002124:	461a      	mov	r2, r3
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	f003 fd8a 	bl	8005c40 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	7912      	ldrb	r2, [r2, #4]
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04f      	b.n	80021f4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	da0f      	bge.n	800217c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	3310      	adds	r3, #16
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	705a      	strb	r2, [r3, #1]
 800217a:	e00d      	b.n	8002198 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_EP_SetStall+0x82>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e01d      	b.n	80021f4 <HAL_PCD_EP_SetStall+0xbe>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f918 	bl	80063fc <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7999      	ldrb	r1, [r3, #6]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e4:	461a      	mov	r2, r3
 80021e6:	f004 fa7d 	bl	80066e4 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	da0c      	bge.n	800222a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3310      	adds	r3, #16
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e00c      	b.n	8002244 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 ff96 	bl	800617c <USB_EPStopXfer>
 8002250:	4603      	mov	r3, r0
 8002252:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002254:	7afb      	ldrb	r3, [r7, #11]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_PCD_EP_Flush+0x1a>
 8002274:	2302      	movs	r3, #2
 8002276:	e01b      	b.n	80022b0 <HAL_PCD_EP_Flush+0x52>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da09      	bge.n	800229c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f003 fbad 	bl	80059f4 <USB_FlushTxFifo>
 800229a:	e004      	b.n	80022a6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fbd9 	bl	8005a58 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3310      	adds	r3, #16
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d901      	bls.n	80022f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e06b      	b.n	80023c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	429a      	cmp	r2, r3
 8002304:	d902      	bls.n	800230c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3303      	adds	r3, #3
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002314:	e02a      	b.n	800236c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	429a      	cmp	r2, r3
 800232a:	d902      	bls.n	8002332 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3303      	adds	r3, #3
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68d9      	ldr	r1, [r3, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4603      	mov	r3, r0
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f003 ffbe 	bl	80062d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	441a      	add	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d809      	bhi.n	8002396 <PCD_WriteEmptyTxFifo+0xde>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800238a:	429a      	cmp	r2, r3
 800238c:	d203      	bcs.n	8002396 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1bf      	bne.n	8002316 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d811      	bhi.n	80023c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80023c2:	4013      	ands	r3, r2
 80023c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	333c      	adds	r3, #60	@ 0x3c
 80023e8:	3304      	adds	r3, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	799b      	ldrb	r3, [r3, #6]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d17b      	bne.n	80024fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4a61      	ldr	r2, [pc, #388]	@ (8002598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f240 80b9 	bls.w	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80b3 	beq.w	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002438:	6093      	str	r3, [r2, #8]
 800243a:	e0a7      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002452:	461a      	mov	r2, r3
 8002454:	2320      	movs	r3, #32
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	e098      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 8093 	bne.w	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d90f      	bls.n	800248e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e07e      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	0159      	lsls	r1, r3, #5
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024d8:	461a      	mov	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	f004 f902 	bl	80066e4 <USB_EP0_OutStart>
 80024e0:	e006      	b.n	80024f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	441a      	add	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f009 fea8 	bl	800c24c <HAL_PCD_DataOutStageCallback>
 80024fc:	e046      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a26      	ldr	r2, [pc, #152]	@ (800259c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d124      	bne.n	8002550 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002522:	6093      	str	r3, [r2, #8]
 8002524:	e032      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	2320      	movs	r3, #32
 8002540:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f009 fe7f 	bl	800c24c <HAL_PCD_DataOutStageCallback>
 800254e:	e01d      	b.n	800258c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d114      	bne.n	8002580 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002578:	461a      	mov	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f004 f8b2 	bl	80066e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f009 fe60 	bl	800c24c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	4f54300a 	.word	0x4f54300a
 800259c:	4f54310a 	.word	0x4f54310a

080025a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	333c      	adds	r3, #60	@ 0x3c
 80025b8:	3304      	adds	r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a15      	ldr	r2, [pc, #84]	@ (8002628 <PCD_EP_OutSetupPacket_int+0x88>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d90e      	bls.n	80025f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ec:	461a      	mov	r2, r3
 80025ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f009 fcf9 	bl	800bfec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <PCD_EP_OutSetupPacket_int+0x88>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d90c      	bls.n	800261c <PCD_EP_OutSetupPacket_int+0x7c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	799b      	ldrb	r3, [r3, #6]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002614:	461a      	mov	r2, r3
 8002616:	2101      	movs	r1, #1
 8002618:	f004 f864 	bl	80066e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	4f54300a 	.word	0x4f54300a

0800262c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	f043 0303 	orr.w	r3, r3, #3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002694:	4b39      	ldr	r3, [pc, #228]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10b      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ac:	d905      	bls.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80026ae:	4b33      	ldr	r3, [pc, #204]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a32      	ldr	r2, [pc, #200]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e057      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c4:	d90a      	bls.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80026c6:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d8:	60d3      	str	r3, [r2, #12]
 80026da:	e007      	b.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80026dc:	4b27      	ldr	r3, [pc, #156]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80026e4:	4925      	ldr	r1, [pc, #148]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80026ec:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	2232      	movs	r2, #50	@ 0x32
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a21      	ldr	r2, [pc, #132]	@ (8002784 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800270a:	e002      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x98>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f3      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01b      	beq.n	8002762 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a15      	ldr	r2, [pc, #84]	@ (8002784 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	2232      	movs	r2, #50	@ 0x32
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	3301      	adds	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002748:	e002      	b.n	8002750 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b01      	subs	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f3      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e000      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	46020800 	.word	0x46020800
 8002780:	20000000 	.word	0x20000000
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	46020800 	.word	0x46020800

080027a4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	6113      	str	r3, [r2, #16]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	46020800 	.word	0x46020800

080027c4 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80027ca:	f7ff ffdd 	bl	8002788 <HAL_PWREx_GetVoltageRange>
 80027ce:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027d6:	d003      	beq.n	80027e0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027de:	d107      	bne.n	80027f0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80027e6:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80027ea:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e000      	b.n	80027f2 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	46020800 	.word	0x46020800

08002800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	@ 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f000 bec8 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b99      	ldr	r3, [pc, #612]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002824:	4b96      	ldr	r3, [pc, #600]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 816c 	beq.w	8002b14 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_RCC_OscConfig+0x52>
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	2b0c      	cmp	r3, #12
 8002846:	f040 80de 	bne.w	8002a06 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 80da 	bne.w	8002a06 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f000 bea5 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002864:	4b86      	ldr	r3, [pc, #536]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_RCC_OscConfig+0x7a>
 8002870:	4b83      	ldr	r3, [pc, #524]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002878:	e005      	b.n	8002886 <HAL_RCC_OscConfig+0x86>
 800287a:	4b81      	ldr	r3, [pc, #516]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800287c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002886:	4293      	cmp	r3, r2
 8002888:	d255      	bcs.n	8002936 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f9e9 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f000 be82 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80028a6:	4b76      	ldr	r3, [pc, #472]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4a75      	ldr	r2, [pc, #468]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028b0:	6093      	str	r3, [r2, #8]
 80028b2:	4b73      	ldr	r3, [pc, #460]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	4970      	ldr	r1, [pc, #448]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80028cc:	d309      	bcc.n	80028e2 <HAL_RCC_OscConfig+0xe2>
 80028ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 021f 	bic.w	r2, r3, #31
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4969      	ldr	r1, [pc, #420]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
 80028e0:	e07e      	b.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da0a      	bge.n	8002900 <HAL_RCC_OscConfig+0x100>
 80028ea:	4b65      	ldr	r3, [pc, #404]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	4961      	ldr	r1, [pc, #388]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
 80028fe:	e06f      	b.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d30a      	bcc.n	8002920 <HAL_RCC_OscConfig+0x120>
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	4959      	ldr	r1, [pc, #356]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]
 800291e:	e05f      	b.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
 8002920:	4b57      	ldr	r3, [pc, #348]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	03db      	lsls	r3, r3, #15
 800292e:	4954      	ldr	r1, [pc, #336]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002930:	4313      	orrs	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]
 8002934:	e054      	b.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002936:	4b52      	ldr	r3, [pc, #328]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a51      	ldr	r2, [pc, #324]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800293c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002940:	6093      	str	r3, [r2, #8]
 8002942:	4b4f      	ldr	r3, [pc, #316]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	494c      	ldr	r1, [pc, #304]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800295c:	d309      	bcc.n	8002972 <HAL_RCC_OscConfig+0x172>
 800295e:	4b48      	ldr	r3, [pc, #288]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 021f 	bic.w	r2, r3, #31
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4945      	ldr	r1, [pc, #276]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
 8002970:	e028      	b.n	80029c4 <HAL_RCC_OscConfig+0x1c4>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	da0a      	bge.n	8002990 <HAL_RCC_OscConfig+0x190>
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	015b      	lsls	r3, r3, #5
 8002988:	493d      	ldr	r1, [pc, #244]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800298a:	4313      	orrs	r3, r2
 800298c:	60cb      	str	r3, [r1, #12]
 800298e:	e019      	b.n	80029c4 <HAL_RCC_OscConfig+0x1c4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002998:	d30a      	bcc.n	80029b0 <HAL_RCC_OscConfig+0x1b0>
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	4935      	ldr	r1, [pc, #212]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60cb      	str	r3, [r1, #12]
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0x1c4>
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	03db      	lsls	r3, r3, #15
 80029be:	4930      	ldr	r1, [pc, #192]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f94c 	bl	8003c6c <RCC_SetFlashLatencyFromMSIRange>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f000 bde5 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80029e0:	f001 f8de 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029e4:	4b27      	ldr	r3, [pc, #156]	@ (8002a84 <HAL_RCC_OscConfig+0x284>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd ffb9 	bl	8000960 <HAL_InitTick>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 808a 	beq.w	8002b12 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80029fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a02:	f000 bdd2 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d066      	beq.n	8002adc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a1a:	f7fe f8e7 	bl	8000bec <HAL_GetTick>
 8002a1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a22:	f7fe f8e3 	bl	8000bec <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d902      	bls.n	8002a36 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	f000 bdba 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	4909      	ldr	r1, [pc, #36]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a68:	d30e      	bcc.n	8002a88 <HAL_RCC_OscConfig+0x288>
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 021f 	bic.w	r2, r3, #31
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4902      	ldr	r1, [pc, #8]	@ (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
 8002a7c:	e04a      	b.n	8002b14 <HAL_RCC_OscConfig+0x314>
 8002a7e:	bf00      	nop
 8002a80:	46020c00 	.word	0x46020c00
 8002a84:	20000004 	.word	0x20000004
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da0a      	bge.n	8002aa6 <HAL_RCC_OscConfig+0x2a6>
 8002a90:	4b98      	ldr	r3, [pc, #608]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	015b      	lsls	r3, r3, #5
 8002a9e:	4995      	ldr	r1, [pc, #596]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e036      	b.n	8002b14 <HAL_RCC_OscConfig+0x314>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d30a      	bcc.n	8002ac6 <HAL_RCC_OscConfig+0x2c6>
 8002ab0:	4b90      	ldr	r3, [pc, #576]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	498d      	ldr	r1, [pc, #564]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60cb      	str	r3, [r1, #12]
 8002ac4:	e026      	b.n	8002b14 <HAL_RCC_OscConfig+0x314>
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	03db      	lsls	r3, r3, #15
 8002ad4:	4987      	ldr	r1, [pc, #540]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002adc:	4b85      	ldr	r3, [pc, #532]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a84      	ldr	r2, [pc, #528]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ae8:	f7fe f880 	bl	8000bec <HAL_GetTick>
 8002aec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af0:	f7fe f87c 	bl	8000bec <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f000 bd53 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b04:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002b10:	e000      	b.n	8002b14 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808b 	beq.w	8002c38 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d17d      	bne.n	8002c38 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f000 bd34 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x35a>
 8002b4c:	4b69      	ldr	r3, [pc, #420]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a68      	ldr	r2, [pc, #416]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e041      	b.n	8002bde <HAL_RCC_OscConfig+0x3de>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b62:	d112      	bne.n	8002b8a <HAL_RCC_OscConfig+0x38a>
 8002b64:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a62      	ldr	r2, [pc, #392]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b60      	ldr	r3, [pc, #384]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5f      	ldr	r2, [pc, #380]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e029      	b.n	8002bde <HAL_RCC_OscConfig+0x3de>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x3ba>
 8002b94:	4b57      	ldr	r3, [pc, #348]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a56      	ldr	r2, [pc, #344]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b54      	ldr	r3, [pc, #336]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a53      	ldr	r2, [pc, #332]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b51      	ldr	r3, [pc, #324]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a50      	ldr	r2, [pc, #320]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	e011      	b.n	8002bde <HAL_RCC_OscConfig+0x3de>
 8002bba:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b48      	ldr	r3, [pc, #288]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a47      	ldr	r2, [pc, #284]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002be6:	f7fe f801 	bl	8000bec <HAL_GetTick>
 8002bea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bec:	e009      	b.n	8002c02 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bee:	f7fd fffd 	bl	8000bec <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	@ 0x64
 8002bfa:	d902      	bls.n	8002c02 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f000 bcd4 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ef      	beq.n	8002bee <HAL_RCC_OscConfig+0x3ee>
 8002c0e:	e013      	b.n	8002c38 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002c10:	f7fd ffec 	bl	8000bec <HAL_GetTick>
 8002c14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	e009      	b.n	8002c2c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fd ffe8 	bl	8000bec <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d902      	bls.n	8002c2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	f000 bcbf 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2c:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ef      	bne.n	8002c18 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05f      	beq.n	8002d04 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x456>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d114      	bne.n	8002c7a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d111      	bne.n	8002c7a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f000 bca3 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4920      	ldr	r1, [pc, #128]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c78:	e044      	b.n	8002d04 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002c82:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c8e:	f7fd ffad 	bl	8000bec <HAL_GetTick>
 8002c92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fd ffa9 	bl	8000bec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f000 bc80 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	490b      	ldr	r1, [pc, #44]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
 8002cca:	e01b      	b.n	8002d04 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cd8:	f7fd ff88 	bl	8000bec <HAL_GetTick>
 8002cdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fd ff84 	bl	8000bec <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d904      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f000 bc5b 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
 8002cf4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf8:	4baf      	ldr	r3, [pc, #700]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ed      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80c8 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d18:	4ba7      	ldr	r3, [pc, #668]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d111      	bne.n	8002d4a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4ba4      	ldr	r3, [pc, #656]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	4aa2      	ldr	r2, [pc, #648]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d36:	4ba0      	ldr	r3, [pc, #640]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d56:	4b99      	ldr	r3, [pc, #612]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	4a98      	ldr	r2, [pc, #608]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7fd ff43 	bl	8000bec <HAL_GetTick>
 8002d66:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d68:	e009      	b.n	8002d7e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fd ff3f 	bl	8000bec <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d902      	bls.n	8002d7e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f000 bc16 	b.w	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d7e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ef      	beq.n	8002d6a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d05f      	beq.n	8002e52 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002d92:	4b89      	ldr	r3, [pc, #548]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d98:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d037      	beq.n	8002e18 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e3f4      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01b      	beq.n	8002e02 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dca:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd0:	4a79      	ldr	r2, [pc, #484]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002dd2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002dda:	f7fd ff07 	bl	8000bec <HAL_GetTick>
 8002dde:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd ff03 	bl	8000bec <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e3da      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002df4:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ef      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4969      	ldr	r1, [pc, #420]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002e18:	4b67      	ldr	r3, [pc, #412]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e1e:	4a66      	ldr	r2, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002e28:	f7fd fee0 	bl	8000bec <HAL_GetTick>
 8002e2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fd fedc 	bl	8000bec <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e3b3      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e42:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <HAL_RCC_OscConfig+0x630>
 8002e50:	e01b      	b.n	8002e8a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002e52:	4b59      	ldr	r3, [pc, #356]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e58:	4a57      	ldr	r2, [pc, #348]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e5a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002e62:	f7fd fec3 	bl	8000bec <HAL_GetTick>
 8002e66:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fd febf 	bl	8000bec <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e396      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ef      	bne.n	8002e6a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e98:	4a47      	ldr	r2, [pc, #284]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8111 	beq.w	80030d2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eca:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ed4:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ee8:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d118      	bne.n	8002f26 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f00:	f7fd fe74 	bl	8000bec <HAL_GetTick>
 8002f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fd fe70 	bl	8000bec <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e347      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f1a:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_RCC_OscConfig+0x7bc>)
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01f      	beq.n	8002f72 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f44:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f5e:	e018      	b.n	8002f92 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f60:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f66:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f70:	e00f      	b.n	8002f92 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f72:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f78:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f88:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b8>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d057      	beq.n	800304a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fe27 	bl	8000bec <HAL_GetTick>
 8002f9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa0:	e00e      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fd fe23 	bl	8000bec <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d905      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e2f8      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
 8002fb8:	46020c00 	.word	0x46020c00
 8002fbc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8002fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0e9      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01b      	beq.n	8003012 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fda:	4b96      	ldr	r3, [pc, #600]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8002fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fe0:	4a94      	ldr	r2, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fd fdfe 	bl	8000bec <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2d3      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003002:	4b8c      	ldr	r3, [pc, #560]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ed      	beq.n	8002fec <HAL_RCC_OscConfig+0x7ec>
 8003010:	e053      	b.n	80030ba <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003018:	4a86      	ldr	r2, [pc, #536]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800301a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800301e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fd fde2 	bl	8000bec <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e2b7      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800303a:	4b7e      	ldr	r3, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800303c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ed      	bne.n	8003024 <HAL_RCC_OscConfig+0x824>
 8003048:	e037      	b.n	80030ba <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800304a:	f7fd fdcf 	bl	8000bec <HAL_GetTick>
 800304e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fd fdcb 	bl	8000bec <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e2a0      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003068:	4b72      	ldr	r3, [pc, #456]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800306a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ed      	bne.n	8003052 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003076:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800307c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01a      	beq.n	80030ba <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003084:	4b6b      	ldr	r3, [pc, #428]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800308a:	4a6a      	ldr	r2, [pc, #424]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800308c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003090:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fd fda9 	bl	8000bec <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e27e      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030ac:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80030ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ed      	bne.n	8003096 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ba:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80030c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d036      	beq.n	800314c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80030e6:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a52      	ldr	r2, [pc, #328]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80030ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030f2:	f7fd fd7b 	bl	8000bec <HAL_GetTick>
 80030f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030fa:	f7fd fd77 	bl	8000bec <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e24e      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800310c:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x8fa>
 8003118:	e018      	b.n	800314c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800311a:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a45      	ldr	r2, [pc, #276]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003124:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003126:	f7fd fd61 	bl	8000bec <HAL_GetTick>
 800312a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800312e:	f7fd fd5d 	bl	8000bec <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e234      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003140:	4b3c      	ldr	r3, [pc, #240]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d036      	beq.n	80031c6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	2b00      	cmp	r3, #0
 800315e:	d019      	beq.n	8003194 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a33      	ldr	r2, [pc, #204]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800316c:	f7fd fd3e 	bl	8000bec <HAL_GetTick>
 8003170:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003174:	f7fd fd3a 	bl	8000bec <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e211      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003186:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x974>
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a26      	ldr	r2, [pc, #152]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800319a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800319e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031a0:	f7fd fd24 	bl	8000bec <HAL_GetTick>
 80031a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80031a8:	f7fd fd20 	bl	8000bec <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1f7      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d07f      	beq.n	80032d2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d062      	beq.n	80032a0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80031da:	4b16      	ldr	r3, [pc, #88]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a15      	ldr	r2, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80031e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	4910      	ldr	r1, [pc, #64]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003200:	d309      	bcc.n	8003216 <HAL_RCC_OscConfig+0xa16>
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 021f 	bic.w	r2, r3, #31
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4909      	ldr	r1, [pc, #36]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003210:	4313      	orrs	r3, r2
 8003212:	60cb      	str	r3, [r1, #12]
 8003214:	e02a      	b.n	800326c <HAL_RCC_OscConfig+0xa6c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2b00      	cmp	r3, #0
 800321c:	da0c      	bge.n	8003238 <HAL_RCC_OscConfig+0xa38>
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	4901      	ldr	r1, [pc, #4]	@ (8003234 <HAL_RCC_OscConfig+0xa34>)
 800322e:	4313      	orrs	r3, r2
 8003230:	60cb      	str	r3, [r1, #12]
 8003232:	e01b      	b.n	800326c <HAL_RCC_OscConfig+0xa6c>
 8003234:	46020c00 	.word	0x46020c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003240:	d30a      	bcc.n	8003258 <HAL_RCC_OscConfig+0xa58>
 8003242:	4ba1      	ldr	r3, [pc, #644]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	499d      	ldr	r1, [pc, #628]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]
 8003256:	e009      	b.n	800326c <HAL_RCC_OscConfig+0xa6c>
 8003258:	4b9b      	ldr	r3, [pc, #620]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	03db      	lsls	r3, r3, #15
 8003266:	4998      	ldr	r1, [pc, #608]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800326c:	4b96      	ldr	r3, [pc, #600]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a95      	ldr	r2, [pc, #596]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003272:	f043 0310 	orr.w	r3, r3, #16
 8003276:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003278:	f7fd fcb8 	bl	8000bec <HAL_GetTick>
 800327c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003280:	f7fd fcb4 	bl	8000bec <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e18b      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003292:	4b8d      	ldr	r3, [pc, #564]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xa80>
 800329e:	e018      	b.n	80032d2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80032a0:	4b89      	ldr	r3, [pc, #548]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a88      	ldr	r2, [pc, #544]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80032a6:	f023 0310 	bic.w	r3, r3, #16
 80032aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032ac:	f7fd fc9e 	bl	8000bec <HAL_GetTick>
 80032b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80032b4:	f7fd fc9a 	bl	8000bec <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e171      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032c6:	4b80      	ldr	r3, [pc, #512]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8166 	beq.w	80035a8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e2:	4b79      	ldr	r3, [pc, #484]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	f000 80f2 	beq.w	80034d4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f040 80c5 	bne.w	8003484 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b73      	ldr	r3, [pc, #460]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a72      	ldr	r2, [pc, #456]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003300:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003304:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003306:	f7fd fc71 	bl	8000bec <HAL_GetTick>
 800330a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fd fc6d 	bl	8000bec <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e144      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003320:	4b69      	ldr	r3, [pc, #420]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332c:	4b66      	ldr	r3, [pc, #408]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d111      	bne.n	800335e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003340:	4a61      	ldr	r2, [pc, #388]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800334a:	4b5f      	ldr	r3, [pc, #380]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800334c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0xccc>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003366:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800336a:	d102      	bne.n	8003372 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003372:	4b56      	ldr	r3, [pc, #344]	@ (80034cc <HAL_RCC_OscConfig+0xccc>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4a55      	ldr	r2, [pc, #340]	@ (80034cc <HAL_RCC_OscConfig+0xccc>)
 8003378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800337c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800337e:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003392:	3a01      	subs	r2, #1
 8003394:	0212      	lsls	r2, r2, #8
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800339c:	430a      	orrs	r2, r1
 800339e:	494a      	ldr	r1, [pc, #296]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80033a4:	4b48      	ldr	r3, [pc, #288]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a8:	4b49      	ldr	r3, [pc, #292]	@ (80034d0 <HAL_RCC_OscConfig+0xcd0>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033b0:	3a01      	subs	r2, #1
 80033b2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033ba:	3a01      	subs	r2, #1
 80033bc:	0252      	lsls	r2, r2, #9
 80033be:	b292      	uxth	r2, r2
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0412      	lsls	r2, r2, #16
 80033ca:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80033ce:	4311      	orrs	r1, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80033d4:	3a01      	subs	r2, #1
 80033d6:	0612      	lsls	r2, r2, #24
 80033d8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80033dc:	430a      	orrs	r2, r1
 80033de:	493a      	ldr	r1, [pc, #232]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80033e4:	4b38      	ldr	r3, [pc, #224]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	4a37      	ldr	r2, [pc, #220]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	4a34      	ldr	r2, [pc, #208]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	4a32      	ldr	r2, [pc, #200]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003400:	f043 0310 	orr.w	r3, r3, #16
 8003404:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003406:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	f023 020c 	bic.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	492d      	ldr	r1, [pc, #180]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003414:	4313      	orrs	r3, r2
 8003416:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003418:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003420:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <HAL_RCC_OscConfig+0xccc>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a29      	ldr	r2, [pc, #164]	@ (80034cc <HAL_RCC_OscConfig+0xccc>)
 8003426:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800342a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800342c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343a:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1f      	ldr	r2, [pc, #124]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003450:	f7fd fbcc 	bl	8000bec <HAL_GetTick>
 8003454:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fbc8 	bl	8000bec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e09f      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800346a:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003476:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003480:	6293      	str	r3, [r2, #40]	@ 0x28
 8003482:	e091      	b.n	80035a8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003490:	f7fd fbac 	bl	8000bec <HAL_GetTick>
 8003494:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fd fba8 	bl	8000bec <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80034b6:	4b04      	ldr	r3, [pc, #16]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <HAL_RCC_OscConfig+0xcc8>)
 80034bc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80034c0:	f023 0303 	bic.w	r3, r3, #3
 80034c4:	6293      	str	r3, [r2, #40]	@ 0x28
 80034c6:	e06f      	b.n	80035a8 <HAL_RCC_OscConfig+0xda8>
 80034c8:	46020c00 	.word	0x46020c00
 80034cc:	46020800 	.word	0x46020800
 80034d0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80034d4:	4b37      	ldr	r3, [pc, #220]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034da:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d039      	beq.n	800355c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d132      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d129      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d122      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003520:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11a      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	0a5b      	lsrs	r3, r3, #9
 800352a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d111      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	0e1b      	lsrs	r3, r3, #24
 800354e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e024      	b.n	80035aa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800356e:	429a      	cmp	r2, r3
 8003570:	d01a      	beq.n	80035a8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	4a0f      	ldr	r2, [pc, #60]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fd fb35 	bl	8000bec <HAL_GetTick>
 8003582:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003584:	bf00      	nop
 8003586:	f7fd fb31 	bl	8000bec <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	4293      	cmp	r3, r2
 8003590:	d0f9      	beq.n	8003586 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	4a07      	ldr	r2, [pc, #28]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <HAL_RCC_OscConfig+0xdb4>)
 80035a2:	f043 0310 	orr.w	r3, r3, #16
 80035a6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3738      	adds	r7, #56	@ 0x38
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	46020c00 	.word	0x46020c00

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e1d9      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b9b      	ldr	r3, [pc, #620]	@ (800383c <HAL_RCC_ClockConfig+0x284>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b98      	ldr	r3, [pc, #608]	@ (800383c <HAL_RCC_ClockConfig+0x284>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4996      	ldr	r1, [pc, #600]	@ (800383c <HAL_RCC_ClockConfig+0x284>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b94      	ldr	r3, [pc, #592]	@ (800383c <HAL_RCC_ClockConfig+0x284>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e1c1      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	4b8c      	ldr	r3, [pc, #560]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003614:	429a      	cmp	r2, r3
 8003616:	d908      	bls.n	800362a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003618:	4b89      	ldr	r3, [pc, #548]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4986      	ldr	r1, [pc, #536]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003626:	4313      	orrs	r3, r2
 8003628:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	4b81      	ldr	r3, [pc, #516]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003644:	429a      	cmp	r2, r3
 8003646:	d909      	bls.n	800365c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003648:	4b7d      	ldr	r3, [pc, #500]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	497a      	ldr	r1, [pc, #488]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003658:	4313      	orrs	r3, r2
 800365a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b74      	ldr	r3, [pc, #464]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003674:	429a      	cmp	r2, r3
 8003676:	d908      	bls.n	800368a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003678:	4b71      	ldr	r3, [pc, #452]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	496e      	ldr	r1, [pc, #440]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003686:	4313      	orrs	r3, r2
 8003688:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b69      	ldr	r3, [pc, #420]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d908      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80036a6:	4b66      	ldr	r3, [pc, #408]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 020f 	bic.w	r2, r3, #15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4963      	ldr	r1, [pc, #396]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80d2 	beq.w	800386a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d143      	bne.n	800375a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d110      	bne.n	8003702 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b57      	ldr	r3, [pc, #348]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e6:	4a56      	ldr	r2, [pc, #344]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036f0:	4b53      	ldr	r3, [pc, #332]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80036f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003702:	f7fd fa73 	bl	8000bec <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003708:	4b4e      	ldr	r3, [pc, #312]	@ (8003844 <HAL_RCC_ClockConfig+0x28c>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00f      	beq.n	8003734 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003716:	f7fd fa69 	bl	8000bec <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e12b      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003728:	4b46      	ldr	r3, [pc, #280]	@ (8003844 <HAL_RCC_ClockConfig+0x28c>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800373a:	4b41      	ldr	r3, [pc, #260]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003740:	4a3f      	ldr	r2, [pc, #252]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d121      	bne.n	800379a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e112      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003762:	4b37      	ldr	r3, [pc, #220]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d115      	bne.n	800379a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e106      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800377a:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0fa      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378a:	4b2d      	ldr	r3, [pc, #180]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0f2      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4926      	ldr	r1, [pc, #152]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80037ac:	f7fd fa1e 	bl	8000bec <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d112      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fd fa16 	bl	8000bec <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0d6      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d1ee      	bne.n	80037bc <HAL_RCC_ClockConfig+0x204>
 80037de:	e044      	b.n	800386a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d112      	bne.n	800380e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ea:	f7fd f9ff 	bl	8000bec <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0bf      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d1ee      	bne.n	80037ea <HAL_RCC_ClockConfig+0x232>
 800380c:	e02d      	b.n	800386a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d123      	bne.n	800385e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fd f9e8 	bl	8000bec <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0a8      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800382e:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <HAL_RCC_ClockConfig+0x288>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <HAL_RCC_ClockConfig+0x260>
 800383a:	e016      	b.n	800386a <HAL_RCC_ClockConfig+0x2b2>
 800383c:	40022000 	.word	0x40022000
 8003840:	46020c00 	.word	0x46020c00
 8003844:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fd f9d0 	bl	8000bec <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e090      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d1ee      	bne.n	8003848 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b43      	ldr	r3, [pc, #268]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	429a      	cmp	r2, r3
 8003884:	d208      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003886:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	493d      	ldr	r1, [pc, #244]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003898:	4b3c      	ldr	r3, [pc, #240]	@ (800398c <HAL_RCC_ClockConfig+0x3d4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d210      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b39      	ldr	r3, [pc, #228]	@ (800398c <HAL_RCC_ClockConfig+0x3d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 020f 	bic.w	r2, r3, #15
 80038ae:	4937      	ldr	r1, [pc, #220]	@ (800398c <HAL_RCC_ClockConfig+0x3d4>)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b35      	ldr	r3, [pc, #212]	@ (800398c <HAL_RCC_ClockConfig+0x3d4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e05b      	b.n	8003980 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d208      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4925      	ldr	r1, [pc, #148]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003910:	429a      	cmp	r2, r3
 8003912:	d209      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003914:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	4919      	ldr	r1, [pc, #100]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003940:	429a      	cmp	r2, r3
 8003942:	d208      	bcs.n	8003956 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003944:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	490d      	ldr	r1, [pc, #52]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003956:	f000 f821 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800395a:	4602      	mov	r2, r0
 800395c:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <HAL_RCC_ClockConfig+0x3d0>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	490a      	ldr	r1, [pc, #40]	@ (8003990 <HAL_RCC_ClockConfig+0x3d8>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <HAL_RCC_ClockConfig+0x3dc>)
 800396e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x3e0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fff3 	bl	8000960 <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]

  return status;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	46020c00 	.word	0x46020c00
 800398c:	40022000 	.word	0x40022000
 8003990:	0800d644 	.word	0x0800d644
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b08b      	sub	sp, #44	@ 0x2c
 80039a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b78      	ldr	r3, [pc, #480]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b4:	4b75      	ldr	r3, [pc, #468]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x34>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d11e      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80039d0:	4b6e      	ldr	r3, [pc, #440]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80039dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039e2:	0b1b      	lsrs	r3, r3, #12
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ea:	e005      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80039ec:	4b67      	ldr	r3, [pc, #412]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	0f1b      	lsrs	r3, r3, #28
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039f8:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d110      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a0c:	e00d      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	e004      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a26:	4b5b      	ldr	r3, [pc, #364]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a28:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	f040 80a5 	bne.w	8003b7c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a32:	4b56      	ldr	r3, [pc, #344]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a4a:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a56:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d003      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d022      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x128>
 8003a7e:	e043      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003b98 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aa2:	ed97 6a01 	vldr	s12, [r7, #4]
 8003aa6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003b9c <HAL_RCC_GetSysClockFreq+0x200>
 8003aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ac2:	e046      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003b98 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ae6:	ed97 6a01 	vldr	s12, [r7, #4]
 8003aea:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003b9c <HAL_RCC_GetSysClockFreq+0x200>
 8003aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b06:	e024      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b30:	ed97 6a01 	vldr	s12, [r7, #4]
 8003b34:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003b9c <HAL_RCC_GetSysClockFreq+0x200>
 8003b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b50:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	0e1b      	lsrs	r3, r3, #24
 8003b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 3a90 	vmov	r3, s15
 8003b7a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	372c      	adds	r7, #44	@ 0x2c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	46020c00 	.word	0x46020c00
 8003b90:	0800d65c 	.word	0x0800d65c
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	4b742400 	.word	0x4b742400
 8003b9c:	46000000 	.word	0x46000000

08003ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ba4:	f7ff fefa 	bl	800399c <HAL_RCC_GetSysClockFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x28>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4906      	ldr	r1, [pc, #24]	@ (8003bcc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a05      	ldr	r2, [pc, #20]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003bbc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003bbe:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	46020c00 	.word	0x46020c00
 8003bcc:	0800d644 	.word	0x0800d644
 8003bd0:	20000000 	.word	0x20000000

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003bd8:	f7ff ffe2 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	46020c00 	.word	0x46020c00
 8003bf8:	0800d654 	.word	0x0800d654

08003bfc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	221f      	movs	r2, #31
 8003c0a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003c0c:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <HAL_RCC_GetClockConfig+0x68>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_RCC_GetClockConfig+0x68>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <HAL_RCC_GetClockConfig+0x68>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <HAL_RCC_GetClockConfig+0x68>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_GetClockConfig+0x68>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4a:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <HAL_RCC_GetClockConfig+0x6c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	46020c00 	.word	0x46020c00
 8003c68:	40022000 	.word	0x40022000

08003c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c74:	4b3e      	ldr	r3, [pc, #248]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c82:	f7fe fd81 	bl	8002788 <HAL_PWREx_GetVoltageRange>
 8003c86:	6178      	str	r0, [r7, #20]
 8003c88:	e019      	b.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c90:	4a37      	ldr	r2, [pc, #220]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c9a:	4b35      	ldr	r3, [pc, #212]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ca8:	f7fe fd6e 	bl	8002788 <HAL_PWREx_GetVoltageRange>
 8003cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d70 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003cb6:	f023 0304 	bic.w	r3, r3, #4
 8003cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc4:	d003      	beq.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ccc:	d109      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cd4:	d202      	bcs.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003cda:	e033      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003ce0:	e030      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ce8:	d208      	bcs.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d102      	bne.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	e025      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e035      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d02:	d90f      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d10:	d902      	bls.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	e015      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003d18:	2301      	movs	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e012      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e00f      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d2a:	d109      	bne.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d32:	d102      	bne.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003d34:	2301      	movs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e004      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e001      	b.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003d40:	2301      	movs	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f023 020f 	bic.w	r2, r3, #15
 8003d4c:	4909      	ldr	r1, [pc, #36]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003d54:	4b07      	ldr	r3, [pc, #28]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	46020c00 	.word	0x46020c00
 8003d74:	40022000 	.word	0x40022000

08003d78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d7c:	b0c2      	sub	sp, #264	@ 0x108
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 0401 	and.w	r4, r2, #1
 8003d9c:	2500      	movs	r5, #0
 8003d9e:	ea54 0305 	orrs.w	r3, r4, r5
 8003da2:	d00b      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003da4:	4bd5      	ldr	r3, [pc, #852]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003daa:	f023 0103 	bic.w	r1, r3, #3
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db4:	4ad1      	ldr	r2, [pc, #836]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003db6:	430b      	orrs	r3, r1
 8003db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f002 0802 	and.w	r8, r2, #2
 8003dc8:	f04f 0900 	mov.w	r9, #0
 8003dcc:	ea58 0309 	orrs.w	r3, r8, r9
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003dd2:	4bca      	ldr	r3, [pc, #808]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dd8:	f023 010c 	bic.w	r1, r3, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de2:	4ac6      	ldr	r2, [pc, #792]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f002 0a04 	and.w	sl, r2, #4
 8003df6:	f04f 0b00 	mov.w	fp, #0
 8003dfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8003dfe:	d00b      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003e00:	4bbe      	ldr	r3, [pc, #760]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e06:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	4aba      	ldr	r2, [pc, #744]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e12:	430b      	orrs	r3, r1
 8003e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 0308 	and.w	r3, r2, #8
 8003e24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e2e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003e38:	4bb0      	ldr	r3, [pc, #704]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	4aac      	ldr	r2, [pc, #688]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 0310 	and.w	r3, r2, #16
 8003e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e70:	4ba2      	ldr	r3, [pc, #648]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e80:	4a9e      	ldr	r2, [pc, #632]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003ea8:	4b94      	ldr	r3, [pc, #592]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb8:	4a90      	ldr	r2, [pc, #576]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f002 0320 	and.w	r3, r2, #32
 8003ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ed6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ee0:	4b86      	ldr	r3, [pc, #536]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ee6:	f023 0107 	bic.w	r1, r3, #7
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef0:	4a82      	ldr	r2, [pc, #520]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003f18:	4b78      	ldr	r3, [pc, #480]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f1e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f28:	4a74      	ldr	r2, [pc, #464]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f50:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	4a66      	ldr	r2, [pc, #408]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f88:	4b5c      	ldr	r3, [pc, #368]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f98:	4a58      	ldr	r2, [pc, #352]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003ff8:	4b40      	ldr	r3, [pc, #256]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ffe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004008:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800400a:	430b      	orrs	r3, r1
 800400c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800401c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004026:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d00c      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004030:	4b32      	ldr	r3, [pc, #200]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004036:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004042:	4a2e      	ldr	r2, [pc, #184]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004044:	430b      	orrs	r3, r1
 8004046:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004056:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004060:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d00c      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800406a:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004070:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407c:	4a1f      	ldr	r2, [pc, #124]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800407e:	430b      	orrs	r3, r1
 8004080:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800409a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d00c      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80040a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040aa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	4a11      	ldr	r2, [pc, #68]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80040ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d010      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80040de:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80040e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040f0:	4a02      	ldr	r2, [pc, #8]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80040f8:	e002      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80040fa:	bf00      	nop
 80040fc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800410c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004116:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	d04c      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004128:	2b80      	cmp	r3, #128	@ 0x80
 800412a:	d02d      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800412c:	2b80      	cmp	r3, #128	@ 0x80
 800412e:	d827      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004130:	2b60      	cmp	r3, #96	@ 0x60
 8004132:	d02b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004134:	2b60      	cmp	r3, #96	@ 0x60
 8004136:	d823      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d006      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800413c:	2b40      	cmp	r3, #64	@ 0x40
 800413e:	d81f      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d011      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004148:	e01a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800414a:	4bbd      	ldr	r3, [pc, #756]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	4abc      	ldr	r2, [pc, #752]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004154:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004156:	e01a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	3308      	adds	r3, #8
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fca8 	bl	8004ab4 <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 800416a:	e010      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	332c      	adds	r3, #44	@ 0x2c
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fd36 	bl	8004be4 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004196:	4baa      	ldr	r3, [pc, #680]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004198:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800419c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041a8:	4aa5      	ldr	r2, [pc, #660]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80041b6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c8:	2300      	movs	r3, #0
 80041ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d053      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e2:	d033      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e8:	d82c      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ee:	d02f      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80041f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f4:	d826      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x496>
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004200:	d820      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420a:	d011      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800420c:	e01a      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800420e:	4b8c      	ldr	r3, [pc, #560]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	4a8b      	ldr	r2, [pc, #556]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004218:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800421a:	e01a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	3308      	adds	r3, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fc46 	bl	8004ab4 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 800422e:	e010      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	332c      	adds	r3, #44	@ 0x2c
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fcd4 	bl	8004be4 <RCCEx_PLL3_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004242:	e006      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800424a:	e002      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800425a:	4b79      	ldr	r3, [pc, #484]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800425c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004260:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800426c:	4a74      	ldr	r2, [pc, #464]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800427a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800428a:	673b      	str	r3, [r7, #112]	@ 0x70
 800428c:	2300      	movs	r3, #0
 800428e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004290:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d046      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042a6:	d028      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80042ac:	d821      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80042ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b2:	d022      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b8:	d81b      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80042ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042be:	d01c      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042c4:	d815      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ca:	d008      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x566>
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d0:	d80f      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	d00e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042dc:	e009      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	3308      	adds	r3, #8
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fbe5 	bl	8004ab4 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 80042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004304:	4b4e      	ldr	r3, [pc, #312]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800430a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004316:	4a4a      	ldr	r2, [pc, #296]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004318:	430b      	orrs	r3, r1
 800431a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004324:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004336:	2300      	movs	r3, #0
 8004338:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800433a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d03f      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434c:	2b04      	cmp	r3, #4
 800434e:	d81e      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004397 	.word	0x08004397
 800435c:	0800436d 	.word	0x0800436d
 8004360:	0800437b 	.word	0x0800437b
 8004364:	08004397 	.word	0x08004397
 8004368:	08004397 	.word	0x08004397
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800436c:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	4a33      	ldr	r2, [pc, #204]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004376:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004378:	e00e      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	332c      	adds	r3, #44	@ 0x2c
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fc2f 	bl	8004be4 <RCCEx_PLL3_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8004396:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004398:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043a6:	f023 0107 	bic.w	r1, r3, #7
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b2:	4a23      	ldr	r2, [pc, #140]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80043c0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d2:	2300      	movs	r3, #0
 80043d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80043d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d04c      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043ec:	d02a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80043ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043f2:	d821      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80043f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f8:	d026      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80043fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043fe:	d81b      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004404:	d00e      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800440a:	d815      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004414:	d110      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004422:	e014      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	332c      	adds	r3, #44	@ 0x2c
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fbda 	bl	8004be4 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004436:	e00a      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800443e:	e006      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004440:	46020c00 	.word	0x46020c00
        break;
 8004444:	bf00      	nop
 8004446:	e002      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8004448:	bf00      	nop
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 800444c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800444e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004456:	4baf      	ldr	r3, [pc, #700]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800445c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004468:	4aaa      	ldr	r2, [pc, #680]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800446a:	430b      	orrs	r3, r1
 800446c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004470:	e003      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004476:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004488:	2300      	movs	r3, #0
 800448a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	f000 80b5 	beq.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b9d      	ldr	r3, [pc, #628]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	4b99      	ldr	r3, [pc, #612]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b2:	4a98      	ldr	r2, [pc, #608]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044bc:	4b95      	ldr	r3, [pc, #596]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80044d4:	4b90      	ldr	r3, [pc, #576]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	4a8f      	ldr	r2, [pc, #572]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044e0:	f7fc fb84 	bl	8000bec <HAL_GetTick>
 80044e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044e8:	e00b      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fc fb7f 	bl	8000bec <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d903      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004500:	e005      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004502:	4b85      	ldr	r3, [pc, #532]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ed      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 800450e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004512:	2b00      	cmp	r3, #0
 8004514:	d165      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004516:	4b7f      	ldr	r3, [pc, #508]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004520:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004528:	2b00      	cmp	r3, #0
 800452a:	d023      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	4293      	cmp	r3, r2
 800453a:	d01b      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800453c:	4b75      	ldr	r3, [pc, #468]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800453e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800454a:	4b72      	ldr	r3, [pc, #456]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800454c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004550:	4a70      	ldr	r2, [pc, #448]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800455a:	4b6e      	ldr	r3, [pc, #440]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800455c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004560:	4a6c      	ldr	r2, [pc, #432]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800456a:	4a6a      	ldr	r2, [pc, #424]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d019      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fc fb34 	bl	8000bec <HAL_GetTick>
 8004584:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004588:	e00d      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fc fb2f 	bl	8000bec <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004594:	1ad2      	subs	r2, r2, r3
 8004596:	f241 3388 	movw	r3, #5000	@ 0x1388
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ea      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 80045b4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80045ce:	4a51      	ldr	r2, [pc, #324]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80045dc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80045e6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ea:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d107      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b48      	ldr	r3, [pc, #288]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f8:	4a46      	ldr	r2, [pc, #280]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800460e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004610:	2300      	movs	r3, #0
 8004612:	657b      	str	r3, [r7, #84]	@ 0x54
 8004614:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d042      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004626:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800462a:	d022      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800462c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004630:	d81b      	bhi.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004636:	d011      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463c:	d815      	bhi.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d019      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8004642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004646:	d110      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	3308      	adds	r3, #8
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa30 	bl	8004ab4 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800465a:	e00d      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b2d      	ldr	r3, [pc, #180]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	4a2c      	ldr	r2, [pc, #176]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004666:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004668:	e006      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004670:	e002      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8004676:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004678:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004680:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004686:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004692:	4a20      	ldr	r2, [pc, #128]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004694:	430b      	orrs	r3, r1
 8004696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800469a:	e003      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80046a0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b2:	2300      	movs	r3, #0
 80046b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d2:	d804      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x966>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x972>
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d007      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80046e4:	e004      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80046ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046f0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d111      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80046fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800470a:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800470c:	430b      	orrs	r3, r1
 800470e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004712:	e007      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004714:	46020c00 	.word	0x46020c00
 8004718:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004720:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004730:	643b      	str	r3, [r7, #64]	@ 0x40
 8004732:	2300      	movs	r3, #0
 8004734:	647b      	str	r3, [r7, #68]	@ 0x44
 8004736:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d019      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800474c:	d105      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800474e:	4ba1      	ldr	r3, [pc, #644]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	4aa0      	ldr	r2, [pc, #640]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004758:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800475a:	4b9e      	ldr	r3, [pc, #632]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800475c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004760:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800476c:	4a99      	ldr	r2, [pc, #612]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800476e:	430b      	orrs	r3, r1
 8004770:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004782:	2300      	movs	r3, #0
 8004784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004786:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d00c      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004790:	4b90      	ldr	r3, [pc, #576]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004796:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047a2:	4a8c      	ldr	r2, [pc, #560]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b8:	2300      	movs	r3, #0
 80047ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80047bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d00c      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80047c6:	4b83      	ldr	r3, [pc, #524]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047cc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047d8:	4a7e      	ldr	r2, [pc, #504]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ee:	2300      	movs	r3, #0
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d00c      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80047fc:	4b75      	ldr	r3, [pc, #468]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004802:	f023 0218 	bic.w	r2, r3, #24
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800480e:	4971      	ldr	r1, [pc, #452]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
 8004828:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d032      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800483a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800483e:	d105      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4b64      	ldr	r3, [pc, #400]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	4a63      	ldr	r2, [pc, #396]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800484a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004854:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004858:	d108      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	3308      	adds	r3, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f927 	bl	8004ab4 <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 800486c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004874:	4b57      	ldr	r3, [pc, #348]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004876:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800487a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004886:	4953      	ldr	r1, [pc, #332]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800488e:	e003      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004894:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	2100      	movs	r1, #0
 80048a2:	61b9      	str	r1, [r7, #24]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048ae:	460b      	mov	r3, r1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048c0:	d01e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80048c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048c6:	d825      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048cc:	d00e      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80048ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048d2:	d81f      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d021      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048dc:	d11a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048de:	4b3d      	ldr	r3, [pc, #244]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	4a3c      	ldr	r2, [pc, #240]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	3308      	adds	r3, #8
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f8de 	bl	8004ab4 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048fe:	e00e      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	332c      	adds	r3, #44	@ 0x2c
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f96c 	bl	8004be4 <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 800491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8004926:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800492c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004938:	4926      	ldr	r1, [pc, #152]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004946:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d03c      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004972:	d00e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004978:	d815      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d017      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xc36>
 800497e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004982:	d110      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004984:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	4a12      	ldr	r2, [pc, #72]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800498a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800498e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004990:	e00e      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004996:	3308      	adds	r3, #8
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f88b 	bl	8004ab4 <RCCEx_PLL2_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049a4:	e004      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80049ac:	e000      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 80049ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049b0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80049b8:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80049ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	4902      	ldr	r1, [pc, #8]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80049d2:	e005      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049d4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80049dc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049f6:	460b      	mov	r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80049fc:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a02:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a0e:	4928      	ldr	r1, [pc, #160]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a3a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004a40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a44:	d811      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004a46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a4a:	d012      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a50:	d80b      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a66:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 8004a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a74:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a8e:	4908      	ldr	r1, [pc, #32]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004a9c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004aa0:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab0:	46020c00 	.word	0x46020c00

08004ab4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004abc:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a46      	ldr	r2, [pc, #280]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004ac2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ac6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ac8:	f7fc f890 	bl	8000bec <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ad0:	f7fc f88c 	bl	8000bec <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e077      	b.n	8004bd2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004aee:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6852      	ldr	r2, [r2, #4]
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0212      	lsls	r2, r2, #8
 8004b06:	430a      	orrs	r2, r1
 8004b08:	4934      	ldr	r1, [pc, #208]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004b0e:	4b33      	ldr	r3, [pc, #204]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b12:	4b33      	ldr	r3, [pc, #204]	@ (8004be0 <RCCEx_PLL2_Config+0x12c>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68d2      	ldr	r2, [r2, #12]
 8004b24:	3a01      	subs	r2, #1
 8004b26:	0252      	lsls	r2, r2, #9
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6912      	ldr	r2, [r2, #16]
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0412      	lsls	r2, r2, #16
 8004b34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6952      	ldr	r2, [r2, #20]
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0612      	lsls	r2, r2, #24
 8004b42:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004b46:	430a      	orrs	r2, r1
 8004b48:	4924      	ldr	r1, [pc, #144]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004b4e:	4b23      	ldr	r3, [pc, #140]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	f023 020c 	bic.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	4920      	ldr	r1, [pc, #128]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004b60:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	491c      	ldr	r1, [pc, #112]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	4a1a      	ldr	r2, [pc, #104]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b74:	f023 0310 	bic.w	r3, r3, #16
 8004b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b7a:	4b18      	ldr	r3, [pc, #96]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	69d2      	ldr	r2, [r2, #28]
 8004b8a:	00d2      	lsls	r2, r2, #3
 8004b8c:	4913      	ldr	r1, [pc, #76]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004b98:	f043 0310 	orr.w	r3, r3, #16
 8004b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004ba4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004baa:	f7fc f81f 	bl	8000bec <HAL_GetTick>
 8004bae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bb0:	e008      	b.n	8004bc4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bb2:	f7fc f81b 	bl	8000bec <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e006      	b.n	8004bd2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <RCCEx_PLL2_Config+0x128>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0

}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	46020c00 	.word	0x46020c00
 8004be0:	80800000 	.word	0x80800000

08004be4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004bec:	4b47      	ldr	r3, [pc, #284]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a46      	ldr	r2, [pc, #280]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bf8:	f7fb fff8 	bl	8000bec <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c00:	f7fb fff4 	bl	8000bec <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e077      	b.n	8004d02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c12:	4b3e      	ldr	r3, [pc, #248]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6811      	ldr	r1, [r2, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6852      	ldr	r2, [r2, #4]
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0212      	lsls	r2, r2, #8
 8004c36:	430a      	orrs	r2, r1
 8004c38:	4934      	ldr	r1, [pc, #208]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	630b      	str	r3, [r1, #48]	@ 0x30
 8004c3e:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c42:	4b33      	ldr	r3, [pc, #204]	@ (8004d10 <RCCEx_PLL3_Config+0x12c>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6892      	ldr	r2, [r2, #8]
 8004c4a:	3a01      	subs	r2, #1
 8004c4c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68d2      	ldr	r2, [r2, #12]
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0252      	lsls	r2, r2, #9
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6912      	ldr	r2, [r2, #16]
 8004c60:	3a01      	subs	r2, #1
 8004c62:	0412      	lsls	r2, r2, #16
 8004c64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c68:	4311      	orrs	r1, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6952      	ldr	r2, [r2, #20]
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	0612      	lsls	r2, r2, #24
 8004c72:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c76:	430a      	orrs	r2, r1
 8004c78:	4924      	ldr	r1, [pc, #144]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004c7e:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c82:	f023 020c 	bic.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	4920      	ldr	r1, [pc, #128]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004c90:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	491c      	ldr	r1, [pc, #112]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004ca4:	f023 0310 	bic.w	r3, r3, #16
 8004ca8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004caa:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cb2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	69d2      	ldr	r2, [r2, #28]
 8004cba:	00d2      	lsls	r2, r2, #3
 8004cbc:	4913      	ldr	r1, [pc, #76]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004cc2:	4b12      	ldr	r3, [pc, #72]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	4a11      	ldr	r2, [pc, #68]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004cce:	4b0f      	ldr	r3, [pc, #60]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cda:	f7fb ff87 	bl	8000bec <HAL_GetTick>
 8004cde:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ce2:	f7fb ff83 	bl	8000bec <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <RCCEx_PLL3_Config+0x128>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	46020c00 	.word	0x46020c00
 8004d10:	80800000 	.word	0x80800000

08004d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e049      	b.n	8004dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f841 	bl	8004dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fa58 	bl	8005208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d001      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e072      	b.n	8004ed6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a34      	ldr	r2, [pc, #208]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0x110>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d036      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2e:	d031      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	@ (8004eec <HAL_TIM_Base_Start_IT+0x114>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0x11c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a29      	ldr	r2, [pc, #164]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <HAL_TIM_Base_Start_IT+0x124>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a26      	ldr	r2, [pc, #152]	@ (8004f00 <HAL_TIM_Base_Start_IT+0x128>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a24      	ldr	r2, [pc, #144]	@ (8004f04 <HAL_TIM_Base_Start_IT+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a23      	ldr	r2, [pc, #140]	@ (8004f08 <HAL_TIM_Base_Start_IT+0x130>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIM_Base_Start_IT+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xbc>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <HAL_TIM_Base_Start_IT+0x138>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d115      	bne.n	8004ec0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f14 <HAL_TIM_Base_Start_IT+0x13c>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d015      	beq.n	8004ed2 <HAL_TIM_Base_Start_IT+0xfa>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d011      	beq.n	8004ed2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e008      	b.n	8004ed2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	50012c00 	.word	0x50012c00
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	50000400 	.word	0x50000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	50000800 	.word	0x50000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	50000c00 	.word	0x50000c00
 8004f04:	40013400 	.word	0x40013400
 8004f08:	50013400 	.word	0x50013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	50014000 	.word	0x50014000
 8004f14:	00010007 	.word	0x00010007

08004f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d020      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0202 	mvn.w	r2, #2
 8004f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f931 	bl	80051ca <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f923 	bl	80051b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f934 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d020      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0204 	mvn.w	r2, #4
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f90b 	bl	80051ca <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8fd 	bl	80051b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f90e 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d020      	beq.n	8005014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01b      	beq.n	8005014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0208 	mvn.w	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8e5 	bl	80051ca <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8d7 	bl	80051b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8e8 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b00      	cmp	r3, #0
 800501c:	d020      	beq.n	8005060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01b      	beq.n	8005060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0210 	mvn.w	r2, #16
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2208      	movs	r2, #8
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8bf 	bl	80051ca <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f8b1 	bl	80051b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8c2 	bl	80051de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0201 	mvn.w	r2, #1
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fb fbae 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9b5 	bl	800541c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f9ad 	bl	8005430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00c      	beq.n	80050fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f87c 	bl	80051f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00c      	beq.n	800511e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0220 	mvn.w	r2, #32
 8005116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f975 	bl	8005408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800513a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f981 	bl	8005444 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00c      	beq.n	8005166 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f979 	bl	8005458 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00c      	beq.n	800518a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f971 	bl	800546c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80051a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f969 	bl	8005480 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a6b      	ldr	r2, [pc, #428]	@ (80053c8 <TIM_Base_SetConfig+0x1c0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02b      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a6a      	ldr	r2, [pc, #424]	@ (80053cc <TIM_Base_SetConfig+0x1c4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522e:	d023      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005236:	d01f      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a65      	ldr	r2, [pc, #404]	@ (80053d0 <TIM_Base_SetConfig+0x1c8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01b      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a64      	ldr	r2, [pc, #400]	@ (80053d4 <TIM_Base_SetConfig+0x1cc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d017      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a63      	ldr	r2, [pc, #396]	@ (80053d8 <TIM_Base_SetConfig+0x1d0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a62      	ldr	r2, [pc, #392]	@ (80053dc <TIM_Base_SetConfig+0x1d4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <TIM_Base_SetConfig+0x1d8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a60      	ldr	r2, [pc, #384]	@ (80053e4 <TIM_Base_SetConfig+0x1dc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a5f      	ldr	r2, [pc, #380]	@ (80053e8 <TIM_Base_SetConfig+0x1e0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0x70>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a5e      	ldr	r2, [pc, #376]	@ (80053ec <TIM_Base_SetConfig+0x1e4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d108      	bne.n	800528a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a4e      	ldr	r2, [pc, #312]	@ (80053c8 <TIM_Base_SetConfig+0x1c0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d043      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a4d      	ldr	r2, [pc, #308]	@ (80053cc <TIM_Base_SetConfig+0x1c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d03f      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a0:	d03b      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a8:	d037      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a48      	ldr	r2, [pc, #288]	@ (80053d0 <TIM_Base_SetConfig+0x1c8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d033      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a47      	ldr	r2, [pc, #284]	@ (80053d4 <TIM_Base_SetConfig+0x1cc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d02f      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a46      	ldr	r2, [pc, #280]	@ (80053d8 <TIM_Base_SetConfig+0x1d0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d02b      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a45      	ldr	r2, [pc, #276]	@ (80053dc <TIM_Base_SetConfig+0x1d4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a44      	ldr	r2, [pc, #272]	@ (80053e0 <TIM_Base_SetConfig+0x1d8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d023      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a43      	ldr	r2, [pc, #268]	@ (80053e4 <TIM_Base_SetConfig+0x1dc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01f      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a42      	ldr	r2, [pc, #264]	@ (80053e8 <TIM_Base_SetConfig+0x1e0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01b      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a41      	ldr	r2, [pc, #260]	@ (80053ec <TIM_Base_SetConfig+0x1e4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d017      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a40      	ldr	r2, [pc, #256]	@ (80053f0 <TIM_Base_SetConfig+0x1e8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a3f      	ldr	r2, [pc, #252]	@ (80053f4 <TIM_Base_SetConfig+0x1ec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00f      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a3e      	ldr	r2, [pc, #248]	@ (80053f8 <TIM_Base_SetConfig+0x1f0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00b      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a3d      	ldr	r2, [pc, #244]	@ (80053fc <TIM_Base_SetConfig+0x1f4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a3c      	ldr	r2, [pc, #240]	@ (8005400 <TIM_Base_SetConfig+0x1f8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <TIM_Base_SetConfig+0x112>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a3b      	ldr	r2, [pc, #236]	@ (8005404 <TIM_Base_SetConfig+0x1fc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <TIM_Base_SetConfig+0x1c0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d023      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1d      	ldr	r2, [pc, #116]	@ (80053cc <TIM_Base_SetConfig+0x1c4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01f      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <TIM_Base_SetConfig+0x1e0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01b      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <TIM_Base_SetConfig+0x1e4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d017      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <TIM_Base_SetConfig+0x1e8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1f      	ldr	r2, [pc, #124]	@ (80053f4 <TIM_Base_SetConfig+0x1ec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1e      	ldr	r2, [pc, #120]	@ (80053f8 <TIM_Base_SetConfig+0x1f0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1d      	ldr	r2, [pc, #116]	@ (80053fc <TIM_Base_SetConfig+0x1f4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <TIM_Base_SetConfig+0x1f8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_Base_SetConfig+0x192>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <TIM_Base_SetConfig+0x1fc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d103      	bne.n	80053a2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	50012c00 	.word	0x50012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	50000400 	.word	0x50000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	50000800 	.word	0x50000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	50000c00 	.word	0x50000c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	50013400 	.word	0x50013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	50014000 	.word	0x50014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	50014400 	.word	0x50014400
 8005400:	40014800 	.word	0x40014800
 8005404:	50014800 	.word	0x50014800

08005408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005494:	b084      	sub	sp, #16
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	f107 001c 	add.w	r0, r7, #28
 80054a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80054a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d105      	bne.n	80054ba <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 f970 	bl	80067a0 <USB_CoreReset>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 80054c4:	7fbb      	ldrb	r3, [r7, #30]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10b      	bne.n	80054e2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f043 0208 	orr.w	r2, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ee:	b004      	add	sp, #16
 80054f0:	4770      	bx	lr
	...

080054f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d165      	bne.n	80055d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a41      	ldr	r2, [pc, #260]	@ (8005610 <USB_SetTurnaroundTime+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d906      	bls.n	800551e <USB_SetTurnaroundTime+0x2a>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4a40      	ldr	r2, [pc, #256]	@ (8005614 <USB_SetTurnaroundTime+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d202      	bcs.n	800551e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005518:	230f      	movs	r3, #15
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e062      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4a3c      	ldr	r2, [pc, #240]	@ (8005614 <USB_SetTurnaroundTime+0x120>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d306      	bcc.n	8005534 <USB_SetTurnaroundTime+0x40>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a3b      	ldr	r2, [pc, #236]	@ (8005618 <USB_SetTurnaroundTime+0x124>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d202      	bcs.n	8005534 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800552e:	230e      	movs	r3, #14
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e057      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4a38      	ldr	r2, [pc, #224]	@ (8005618 <USB_SetTurnaroundTime+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d306      	bcc.n	800554a <USB_SetTurnaroundTime+0x56>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4a37      	ldr	r2, [pc, #220]	@ (800561c <USB_SetTurnaroundTime+0x128>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d202      	bcs.n	800554a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005544:	230d      	movs	r3, #13
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e04c      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <USB_SetTurnaroundTime+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d306      	bcc.n	8005560 <USB_SetTurnaroundTime+0x6c>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4a32      	ldr	r2, [pc, #200]	@ (8005620 <USB_SetTurnaroundTime+0x12c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d802      	bhi.n	8005560 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800555a:	230c      	movs	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e041      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <USB_SetTurnaroundTime+0x12c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d906      	bls.n	8005576 <USB_SetTurnaroundTime+0x82>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4a2e      	ldr	r2, [pc, #184]	@ (8005624 <USB_SetTurnaroundTime+0x130>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d802      	bhi.n	8005576 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005570:	230b      	movs	r3, #11
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e036      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <USB_SetTurnaroundTime+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d906      	bls.n	800558c <USB_SetTurnaroundTime+0x98>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <USB_SetTurnaroundTime+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d802      	bhi.n	800558c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005586:	230a      	movs	r3, #10
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e02b      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a26      	ldr	r2, [pc, #152]	@ (8005628 <USB_SetTurnaroundTime+0x134>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d906      	bls.n	80055a2 <USB_SetTurnaroundTime+0xae>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a25      	ldr	r2, [pc, #148]	@ (800562c <USB_SetTurnaroundTime+0x138>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d202      	bcs.n	80055a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800559c:	2309      	movs	r3, #9
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e020      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <USB_SetTurnaroundTime+0x138>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d306      	bcc.n	80055b8 <USB_SetTurnaroundTime+0xc4>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a20      	ldr	r2, [pc, #128]	@ (8005630 <USB_SetTurnaroundTime+0x13c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055b2:	2308      	movs	r3, #8
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e015      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <USB_SetTurnaroundTime+0x13c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d906      	bls.n	80055ce <USB_SetTurnaroundTime+0xda>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <USB_SetTurnaroundTime+0x140>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d202      	bcs.n	80055ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055c8:	2307      	movs	r3, #7
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e00a      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055ce:	2306      	movs	r3, #6
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e007      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055da:	2309      	movs	r3, #9
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e001      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055e0:	2309      	movs	r3, #9
 80055e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	00d8acbf 	.word	0x00d8acbf
 8005614:	00e4e1c0 	.word	0x00e4e1c0
 8005618:	00f42400 	.word	0x00f42400
 800561c:	01067380 	.word	0x01067380
 8005620:	011a499f 	.word	0x011a499f
 8005624:	01312cff 	.word	0x01312cff
 8005628:	014ca43f 	.word	0x014ca43f
 800562c:	016e3600 	.word	0x016e3600
 8005630:	01a6ab1f 	.word	0x01a6ab1f
 8005634:	01e84800 	.word	0x01e84800

08005638 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d115      	bne.n	80056ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056aa:	200a      	movs	r0, #10
 80056ac:	f7fb faaa 	bl	8000c04 <HAL_Delay>
      ms += 10U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	330a      	adds	r3, #10
 80056b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 ffe3 	bl	8006682 <USB_GetMode>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d01e      	beq.n	8005700 <USB_SetCurrentMode+0x84>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80056c6:	d9f0      	bls.n	80056aa <USB_SetCurrentMode+0x2e>
 80056c8:	e01a      	b.n	8005700 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d115      	bne.n	80056fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056dc:	200a      	movs	r0, #10
 80056de:	f7fb fa91 	bl	8000c04 <HAL_Delay>
      ms += 10U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	330a      	adds	r3, #10
 80056e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 ffca 	bl	8006682 <USB_GetMode>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <USB_SetCurrentMode+0x84>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80056f8:	d9f0      	bls.n	80056dc <USB_SetCurrentMode+0x60>
 80056fa:	e001      	b.n	8005700 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e005      	b.n	800570c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2bc8      	cmp	r3, #200	@ 0xc8
 8005704:	d101      	bne.n	800570a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005714:	b084      	sub	sp, #16
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e009      	b.n	8005748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3340      	adds	r3, #64	@ 0x40
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	2200      	movs	r2, #0
 8005740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	3301      	adds	r3, #1
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0e      	cmp	r3, #14
 800574c:	d9f2      	bls.n	8005734 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800575a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11c      	bne.n	800579c <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	@ 0x38
 800579a:	e011      	b.n	80057c0 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80057cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10d      	bne.n	80057f0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057dc:	2100      	movs	r1, #0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f968 	bl	8005ab4 <USB_SetDevSpeed>
 80057e4:	e008      	b.n	80057f8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e6:	2101      	movs	r1, #1
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f963 	bl	8005ab4 <USB_SetDevSpeed>
 80057ee:	e003      	b.n	80057f8 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057f0:	2103      	movs	r1, #3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f95e 	bl	8005ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f8:	2110      	movs	r1, #16
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8fa 	bl	80059f4 <USB_FlushTxFifo>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f924 	bl	8005a58 <USB_FlushRxFifo>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005838:	461a      	mov	r2, r3
 800583a:	2300      	movs	r3, #0
 800583c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	e043      	b.n	80058cc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585a:	d118      	bne.n	800588e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e013      	b.n	80058a0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e008      	b.n	80058a0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589a:	461a      	mov	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058be:	461a      	mov	r2, r3
 80058c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058d0:	461a      	mov	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d3b5      	bcc.n	8005844 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	e043      	b.n	8005966 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f4:	d118      	bne.n	8005928 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005908:	461a      	mov	r2, r3
 800590a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e013      	b.n	800593a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e008      	b.n	800593a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	2300      	movs	r3, #0
 8005938:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	461a      	mov	r2, r3
 8005948:	2300      	movs	r3, #0
 800594a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800595e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3301      	adds	r3, #1
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800596a:	461a      	mov	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4293      	cmp	r3, r2
 8005970:	d3b5      	bcc.n	80058de <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005992:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f043 0210 	orr.w	r2, r3, #16
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <USB_DevInit+0x2dc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f043 0208 	orr.w	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ec:	b004      	add	sp, #16
 80059ee:	4770      	bx	lr
 80059f0:	803c3800 	.word	0x803c3800

080059f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0e:	d901      	bls.n	8005a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e01b      	b.n	8005a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	daf2      	bge.n	8005a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	019b      	lsls	r3, r3, #6
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a38:	d901      	bls.n	8005a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e006      	b.n	8005a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d0f0      	beq.n	8005a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a70:	d901      	bls.n	8005a76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e018      	b.n	8005aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	daf2      	bge.n	8005a64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2210      	movs	r2, #16
 8005a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a94:	d901      	bls.n	8005a9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e006      	b.n	8005aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d0f0      	beq.n	8005a88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b087      	sub	sp, #28
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0306 	and.w	r3, r3, #6
 8005afe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
 8005b0a:	e00a      	b.n	8005b22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d002      	beq.n	8005b18 <USB_GetDevSpeed+0x32>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d102      	bne.n	8005b1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	75fb      	strb	r3, [r7, #23]
 8005b1c:	e001      	b.n	8005b22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b1e:	230f      	movs	r3, #15
 8005b20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d13a      	bne.n	8005bc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d155      	bne.n	8005c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	059b      	lsls	r3, r3, #22
 8005ba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e036      	b.n	8005c30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11a      	bne.n	8005c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	791b      	ldrb	r3, [r3, #4]
 8005c14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c16:	430b      	orrs	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	@ 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 817f 	bne.w	8005f60 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d132      	bne.n	8005cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c84:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c88:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc8:	0cdb      	lsrs	r3, r3, #19
 8005cca:	04db      	lsls	r3, r3, #19
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	e097      	b.n	8005e00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	0cdb      	lsrs	r3, r3, #19
 8005cec:	04db      	lsls	r3, r3, #19
 8005cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d0e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d12:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11a      	bne.n	8005d50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d903      	bls.n	8005d2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d4c:	6113      	str	r3, [r2, #16]
 8005d4e:	e044      	b.n	8005dda <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	8afb      	ldrh	r3, [r7, #22]
 8005d76:	04d9      	lsls	r1, r3, #19
 8005d78:	4ba4      	ldr	r3, [pc, #656]	@ (800600c <USB_EPStartXfer+0x3cc>)
 8005d7a:	400b      	ands	r3, r1
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	0148      	lsls	r0, r1, #5
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	4401      	add	r1, r0
 8005d84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d122      	bne.n	8005dda <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005db2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	8afb      	ldrh	r3, [r7, #22]
 8005dc4:	075b      	lsls	r3, r3, #29
 8005dc6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	0148      	lsls	r0, r1, #5
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	4401      	add	r1, r0
 8005dd2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d14b      	bne.n	8005e9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	791b      	ldrb	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d128      	bne.n	8005e7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d110      	bne.n	8005e5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e00f      	b.n	8005e7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e166      	b.n	800616c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ebc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d015      	beq.n	8005ef2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 814e 	beq.w	800616c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eec:	4313      	orrs	r3, r2
 8005eee:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ef0:	e13c      	b.n	800616c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e00f      	b.n	8005f44 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	b298      	uxth	r0, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4603      	mov	r3, r0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9b9 	bl	80062d0 <USB_WritePacket>
 8005f5e:	e105      	b.n	800616c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7a:	0cdb      	lsrs	r3, r3, #19
 8005f7c:	04db      	lsls	r3, r3, #19
 8005f7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fa2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d132      	bne.n	8006010 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	e062      	b.n	80060d0 <USB_EPStartXfer+0x490>
 800600a:	bf00      	nop
 800600c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d123      	bne.n	8006060 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	0148      	lsls	r0, r1, #5
 8006032:	69f9      	ldr	r1, [r7, #28]
 8006034:	4401      	add	r1, r0
 8006036:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800603a:	4313      	orrs	r3, r2
 800603c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800605c:	6113      	str	r3, [r2, #16]
 800605e:	e037      	b.n	80060d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4413      	add	r3, r2
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	8afa      	ldrh	r2, [r7, #22]
 800607c:	fb03 f202 	mul.w	r2, r3, r2
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	8afb      	ldrh	r3, [r7, #22]
 8006094:	04d9      	lsls	r1, r3, #19
 8006096:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <USB_EPStartXfer+0x538>)
 8006098:	400b      	ands	r3, r1
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	0148      	lsls	r0, r1, #5
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	4401      	add	r1, r0
 80060a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060a6:	4313      	orrs	r3, r2
 80060a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	0148      	lsls	r0, r1, #5
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	4401      	add	r1, r0
 80060c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ee:	460a      	mov	r2, r1
 80060f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d128      	bne.n	800614c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006124:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00f      	b.n	800614c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006166:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800616a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	1ff80000 	.word	0x1ff80000

0800617c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d14a      	bne.n	8006230 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b2:	f040 8086 	bne.w	80062c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f242 7210 	movw	r2, #10000	@ 0x2710
 800620a:	4293      	cmp	r3, r2
 800620c:	d902      	bls.n	8006214 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
          break;
 8006212:	e056      	b.n	80062c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800622c:	d0e7      	beq.n	80061fe <USB_EPStopXfer+0x82>
 800622e:	e048      	b.n	80062c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006248:	d13b      	bne.n	80062c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006268:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800626c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800628c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006290:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800629e:	4293      	cmp	r3, r2
 80062a0:	d902      	bls.n	80062a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
          break;
 80062a6:	e00c      	b.n	80062c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c0:	d0e7      	beq.n	8006292 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b089      	sub	sp, #36	@ 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	460b      	mov	r3, r1
 80062e0:	71fb      	strb	r3, [r7, #7]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d123      	bne.n	800633e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062f6:	88bb      	ldrh	r3, [r7, #4]
 80062f8:	3303      	adds	r3, #3
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e018      	b.n	8006336 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	031a      	lsls	r2, r3, #12
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006310:	461a      	mov	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3301      	adds	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	3301      	adds	r3, #1
 800632e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	3301      	adds	r3, #1
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d3e2      	bcc.n	8006304 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3724      	adds	r7, #36	@ 0x24
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800634c:	b480      	push	{r7}
 800634e:	b08b      	sub	sp, #44	@ 0x2c
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	b29b      	uxth	r3, r3
 8006368:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	e014      	b.n	80063a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	601a      	str	r2, [r3, #0]
    pDest++;
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	3301      	adds	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	3301      	adds	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	3301      	adds	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	3301      	adds	r3, #1
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	3301      	adds	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3e6      	bcc.n	8006378 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063aa:	8bfb      	ldrh	r3, [r7, #30]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01e      	beq.n	80063ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ba:	461a      	mov	r2, r3
 80063bc:	f107 0310 	add.w	r3, r7, #16
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	701a      	strb	r2, [r3, #0]
      i++;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	3301      	adds	r3, #1
 80063da:	623b      	str	r3, [r7, #32]
      pDest++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063e2:	8bfb      	ldrh	r3, [r7, #30]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063e8:	8bfb      	ldrh	r3, [r7, #30]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1ea      	bne.n	80063c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	372c      	adds	r7, #44	@ 0x2c
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d12c      	bne.n	8006472 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	db12      	blt.n	8006450 <USB_EPSetStall+0x54>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800644a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800644e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e02b      	b.n	80064ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db12      	blt.n	80064aa <USB_EPSetStall+0xae>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006506:	f023 0302 	bic.w	r3, r3, #2
 800650a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006534:	f023 0303 	bic.w	r3, r3, #3
 8006538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4013      	ands	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006574:	68fb      	ldr	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	4013      	ands	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	0c1b      	lsrs	r3, r3, #16
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	b29b      	uxth	r3, r3
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4013      	ands	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006618:	68bb      	ldr	r3, [r7, #8]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006648:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	fa22 f303 	lsr.w	r3, r2, r3
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	b2db      	uxtb	r3, r3
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4013      	ands	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006674:	68bb      	ldr	r3, [r7, #8]
}
 8006676:	4618      	mov	r0, r3
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0301 	and.w	r3, r3, #1
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	460b      	mov	r3, r1
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	333c      	adds	r3, #60	@ 0x3c
 80066fa:	3304      	adds	r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4a26      	ldr	r2, [pc, #152]	@ (800679c <USB_EP0_OutStart+0xb8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d90a      	bls.n	800671e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006718:	d101      	bne.n	800671e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e037      	b.n	800678e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800673c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674c:	f043 0318 	orr.w	r3, r3, #24
 8006750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006760:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006764:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10f      	bne.n	800678c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006786:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800678a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	4f54300a 	.word	0x4f54300a

080067a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b8:	d901      	bls.n	80067be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e01b      	b.n	80067f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	daf2      	bge.n	80067ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e2:	d901      	bls.n	80067e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d0f0      	beq.n	80067d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b096      	sub	sp, #88	@ 0x58
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3303      	adds	r3, #3
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800681c:	f3ef 8310 	mrs	r3, PRIMASK
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8006826:	b672      	cpsid	i
#endif
    return(int_posture);
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800682a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800682c:	4b55      	ldr	r3, [pc, #340]	@ (8006984 <_tx_byte_allocate+0x180>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800683a:	621a      	str	r2, [r3, #32]
 800683c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	f383 8810 	msr	PRIMASK, r3
}
 8006846:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f9b2 	bl	8006bb4 <_tx_byte_pool_search>
 8006850:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006852:	f3ef 8310 	mrs	r3, PRIMASK
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800685a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800685c:	b672      	cpsid	i
    return(int_posture);
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8006860:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8006862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800686c:	e006      	b.n	800687c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006874:	429a      	cmp	r2, r3
 8006876:	d101      	bne.n	800687c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800687c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0d9      	beq.n	8006836 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006886:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8006888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <_tx_byte_allocate+0x9c>
 800688e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006890:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f383 8810 	msr	PRIMASK, r3
}
 8006898:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800689a:	2300      	movs	r3, #0
 800689c:	653b      	str	r3, [r7, #80]	@ 0x50
 800689e:	e06c      	b.n	800697a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d061      	beq.n	800696a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80068a6:	4b38      	ldr	r3, [pc, #224]	@ (8006988 <_tx_byte_allocate+0x184>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80068ae:	2310      	movs	r3, #16
 80068b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80068b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f383 8810 	msr	PRIMASK, r3
}
 80068bc:	e05d      	b.n	800697a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80068be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c0:	4a32      	ldr	r2, [pc, #200]	@ (800698c <_tx_byte_allocate+0x188>)
 80068c2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80068c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80068ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80068d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80068d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80068f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006904:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8006906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690a:	675a      	str	r2, [r3, #116]	@ 0x74
 800690c:	e011      	b.n	8006932 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006916:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006918:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800691a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006924:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800692a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800692c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006930:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8006932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006934:	2209      	movs	r2, #9
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800693a:	2201      	movs	r2, #1
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800693e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006944:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <_tx_byte_allocate+0x184>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3301      	adds	r3, #1
 800694a:	4a0f      	ldr	r2, [pc, #60]	@ (8006988 <_tx_byte_allocate+0x184>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006950:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f383 8810 	msr	PRIMASK, r3
}
 8006958:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800695a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800695c:	f001 fd7a 	bl	8008454 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8006960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006966:	653b      	str	r3, [r7, #80]	@ 0x50
 8006968:	e007      	b.n	800697a <_tx_byte_allocate+0x176>
 800696a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800696c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f383 8810 	msr	PRIMASK, r3
}
 8006974:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8006976:	2310      	movs	r3, #16
 8006978:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800697a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800697c:	4618      	mov	r0, r3
 800697e:	3758      	adds	r7, #88	@ 0x58
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20002f0c 	.word	0x20002f0c
 8006988:	20002fa4 	.word	0x20002fa4
 800698c:	08006991 	.word	0x08006991

08006990 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	@ 0x38
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	623b      	str	r3, [r7, #32]
    return(posture);
 80069a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80069a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80069a4:	b672      	cpsid	i
    return(int_posture);
 80069a6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069ae:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <_tx_byte_pool_cleanup+0xec>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d158      	bne.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d152      	bne.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d04c      	beq.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a80 <_tx_byte_pool_cleanup+0xf0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d147      	bne.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d043      	beq.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	2200      	movs	r2, #0
 80069fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a00:	e013      	b.n	8006a2a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a12:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a18:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d102      	bne.n	8006a2a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a28:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d119      	bne.n	8006a66 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2210      	movs	r2, #16
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <_tx_byte_pool_cleanup+0xf4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	4a10      	ldr	r2, [pc, #64]	@ (8006a84 <_tx_byte_pool_cleanup+0xf4>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f383 8810 	msr	PRIMASK, r3
}
 8006a4e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fbff 	bl	8008254 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a56:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006a5e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a60:	b672      	cpsid	i
    return(int_posture);
 8006a62:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f383 8810 	msr	PRIMASK, r3
}
 8006a70:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006a72:	bf00      	nop
 8006a74:	3738      	adds	r7, #56	@ 0x38
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08006991 	.word	0x08006991
 8006a80:	42595445 	.word	0x42595445
 8006a84:	20002fa4 	.word	0x20002fa4

08006a88 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08e      	sub	sp, #56	@ 0x38
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8006a96:	2234      	movs	r2, #52	@ 0x34
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f006 fd10 	bl	800d4c0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f1a3 0208 	sub.w	r2, r3, #8
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	4413      	add	r3, r2
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae4:	3b04      	subs	r3, #4
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af8:	3b04      	subs	r3, #4
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8006b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b12:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba4 <_tx_byte_pool_create+0x11c>)
 8006b26:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b32:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006b34:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006b36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b38:	b672      	cpsid	i
    return(int_posture);
 8006b3a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a19      	ldr	r2, [pc, #100]	@ (8006ba8 <_tx_byte_pool_create+0x120>)
 8006b42:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006b44:	4b19      	ldr	r3, [pc, #100]	@ (8006bac <_tx_byte_pool_create+0x124>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006b4c:	4a18      	ldr	r2, [pc, #96]	@ (8006bb0 <_tx_byte_pool_create+0x128>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b5e:	e011      	b.n	8006b84 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006b60:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <_tx_byte_pool_create+0x128>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006b84:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <_tx_byte_pool_create+0x124>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <_tx_byte_pool_create+0x124>)
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f383 8810 	msr	PRIMASK, r3
}
 8006b98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3738      	adds	r7, #56	@ 0x38
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	ffffeeee 	.word	0xffffeeee
 8006ba8:	42595445 	.word	0x42595445
 8006bac:	20002f00 	.word	0x20002f00
 8006bb0:	20002efc 	.word	0x20002efc

08006bb4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b097      	sub	sp, #92	@ 0x5c
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8006bca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006bcc:	b672      	cpsid	i
    return(int_posture);
 8006bce:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006bd0:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	3b02      	subs	r3, #2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d308      	bcc.n	8006bfc <_tx_byte_pool_search+0x48>
 8006bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f383 8810 	msr	PRIMASK, r3
}
 8006bf4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bfa:	e0dd      	b.n	8006db8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006bfc:	4b72      	ldr	r3, [pc, #456]	@ (8006dc8 <_tx_byte_pool_search+0x214>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c06:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8006c16:	2300      	movs	r3, #0
 8006c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a68      	ldr	r2, [pc, #416]	@ (8006dcc <_tx_byte_pool_search+0x218>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d143      	bne.n	8006cb6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c38:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c52:	3b08      	subs	r3, #8
 8006c54:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8006c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d257      	bcs.n	8006d0e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	3304      	adds	r3, #4
 8006c66:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a56      	ldr	r2, [pc, #344]	@ (8006dcc <_tx_byte_pool_search+0x218>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d113      	bne.n	8006c9e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	1e5a      	subs	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d114      	bne.n	8006cc0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c9a:	615a      	str	r2, [r3, #20]
 8006c9c:	e010      	b.n	8006cc0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8006cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb4:	e004      	b.n	8006cc0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f383 8810 	msr	PRIMASK, r3
}
 8006cd6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cdc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006cde:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006ce0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ce2:	b672      	cpsid	i
    return(int_posture);
 8006ce4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8006ce6:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d009      	beq.n	8006d06 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d04:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8006d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d186      	bne.n	8006c1a <_tx_byte_pool_search+0x66>
 8006d0c:	e000      	b.n	8006d10 <_tx_byte_pool_search+0x15c>
                    break;
 8006d0e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d048      	beq.n	8006da8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8006d16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b13      	cmp	r3, #19
 8006d1e:	d91e      	bls.n	8006d5e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d26:	4413      	add	r3, r2
 8006d28:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d30:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	4a21      	ldr	r2, [pc, #132]	@ (8006dcc <_tx_byte_pool_search+0x218>)
 8006d48:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d58:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d60:	3304      	adds	r3, #4
 8006d62:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f1a3 0208 	sub.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d105      	bne.n	8006d94 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d8a:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	615a      	str	r2, [r3, #20]
 8006d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f383 8810 	msr	PRIMASK, r3
}
 8006d9e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da2:	3308      	adds	r3, #8
 8006da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da6:	e007      	b.n	8006db8 <_tx_byte_pool_search+0x204>
 8006da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006daa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f383 8810 	msr	PRIMASK, r3
}
 8006db2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	375c      	adds	r7, #92	@ 0x5c
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20002f0c 	.word	0x20002f0c
 8006dcc:	ffffeeee 	.word	0xffffeeee

08006dd0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006dd4:	f001 f8fc 	bl	8007fd0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006dd8:	f001 fd04 	bl	80087e4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006ddc:	4b12      	ldr	r3, [pc, #72]	@ (8006e28 <_tx_initialize_high_level+0x58>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <_tx_initialize_high_level+0x5c>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <_tx_initialize_high_level+0x60>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <_tx_initialize_high_level+0x64>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006df4:	4b10      	ldr	r3, [pc, #64]	@ (8006e38 <_tx_initialize_high_level+0x68>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	4b10      	ldr	r3, [pc, #64]	@ (8006e3c <_tx_initialize_high_level+0x6c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006e00:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <_tx_initialize_high_level+0x70>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <_tx_initialize_high_level+0x74>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e48 <_tx_initialize_high_level+0x78>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	4b0e      	ldr	r3, [pc, #56]	@ (8006e4c <_tx_initialize_high_level+0x7c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <_tx_initialize_high_level+0x80>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <_tx_initialize_high_level+0x84>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
#endif
}
 8006e24:	bf00      	nop
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20002ed4 	.word	0x20002ed4
 8006e2c:	20002ed8 	.word	0x20002ed8
 8006e30:	20002edc 	.word	0x20002edc
 8006e34:	20002ee0 	.word	0x20002ee0
 8006e38:	20002ee4 	.word	0x20002ee4
 8006e3c:	20002ee8 	.word	0x20002ee8
 8006e40:	20002ef4 	.word	0x20002ef4
 8006e44:	20002ef8 	.word	0x20002ef8
 8006e48:	20002efc 	.word	0x20002efc
 8006e4c:	20002f00 	.word	0x20002f00
 8006e50:	20002eec 	.word	0x20002eec
 8006e54:	20002ef0 	.word	0x20002ef0

08006e58 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8006e5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <_tx_initialize_kernel_enter+0x48>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8006e64:	d00c      	beq.n	8006e80 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006e66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea0 <_tx_initialize_kernel_enter+0x48>)
 8006e68:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8006e6c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8006e6e:	f7f9 fa0f 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8006e72:	f7ff ffad 	bl	8006dd0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <_tx_initialize_kernel_enter+0x4c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <_tx_initialize_kernel_enter+0x4c>)
 8006e7e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <_tx_initialize_kernel_enter+0x48>)
 8006e82:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8006e86:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006e88:	4b07      	ldr	r3, [pc, #28]	@ (8006ea8 <_tx_initialize_kernel_enter+0x50>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7f9 fb35 	bl	80004fc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8006e92:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <_tx_initialize_kernel_enter+0x48>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006e98:	f7f9 fa36 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000000c 	.word	0x2000000c
 8006ea4:	20002fa4 	.word	0x20002fa4
 8006ea8:	20002f04 	.word	0x20002f04

08006eac <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08e      	sub	sp, #56	@ 0x38
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eba:	623b      	str	r3, [r7, #32]
    return(posture);
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006ebe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ec0:	b672      	cpsid	i
    return(int_posture);
 8006ec2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eca:	4a33      	ldr	r2, [pc, #204]	@ (8006f98 <_tx_mutex_cleanup+0xec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d158      	bne.n	8006f82 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d152      	bne.n	8006f82 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d04c      	beq.n	8006f82 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	@ (8006f9c <_tx_mutex_cleanup+0xf0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d147      	bne.n	8006f82 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d043      	beq.n	8006f82 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	2200      	movs	r2, #0
 8006f1a:	619a      	str	r2, [r3, #24]
 8006f1c:	e013      	b.n	8006f46 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d102      	bne.n	8006f46 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f44:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	2b0d      	cmp	r3, #13
 8006f4c:	d119      	bne.n	8006f82 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	221d      	movs	r2, #29
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006f56:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <_tx_mutex_cleanup+0xf4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	4a10      	ldr	r2, [pc, #64]	@ (8006fa0 <_tx_mutex_cleanup+0xf4>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f383 8810 	msr	PRIMASK, r3
}
 8006f6a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f971 	bl	8008254 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f72:	f3ef 8310 	mrs	r3, PRIMASK
 8006f76:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006f78:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006f7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f7c:	b672      	cpsid	i
    return(int_posture);
 8006f7e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f383 8810 	msr	PRIMASK, r3
}
 8006f8c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006f8e:	bf00      	nop
 8006f90:	3738      	adds	r7, #56	@ 0x38
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08006ead 	.word	0x08006ead
 8006f9c:	4d555445 	.word	0x4d555445
 8006fa0:	20002fa4 	.word	0x20002fa4

08006fa4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fac:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006fb2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006fb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006fb6:	b672      	cpsid	i
    return(int_posture);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007028 <_tx_mutex_thread_release+0x84>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a19      	ldr	r2, [pc, #100]	@ (8007028 <_tx_mutex_thread_release+0x84>)
 8006fc4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fcc:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	609a      	str	r2, [r3, #8]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8006fe6:	6a38      	ldr	r0, [r7, #32]
 8006fe8:	f000 fb9c 	bl	8007724 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff0:	617b      	str	r3, [r7, #20]
    return(posture);
 8006ff2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006ff4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ff6:	b672      	cpsid	i
    return(int_posture);
 8006ff8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007002:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1dd      	bne.n	8006fc6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800700a:	4b07      	ldr	r3, [pc, #28]	@ (8007028 <_tx_mutex_thread_release+0x84>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3b01      	subs	r3, #1
 8007010:	4a05      	ldr	r2, [pc, #20]	@ (8007028 <_tx_mutex_thread_release+0x84>)
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8007020:	bf00      	nop
 8007022:	3728      	adds	r7, #40	@ 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20002fa4 	.word	0x20002fa4

0800702c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	@ 0x28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8007038:	2234      	movs	r2, #52	@ 0x34
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f006 fa3f 	bl	800d4c0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800704e:	f3ef 8310 	mrs	r3, PRIMASK
 8007052:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007054:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007056:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007058:	b672      	cpsid	i
    return(int_posture);
 800705a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4a1a      	ldr	r2, [pc, #104]	@ (80070cc <_tx_mutex_create+0xa0>)
 8007062:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8007064:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <_tx_mutex_create+0xa4>)
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <_tx_mutex_create+0xa8>)
 8007068:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <_tx_mutex_create+0xac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8007072:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <_tx_mutex_create+0xb0>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	625a      	str	r2, [r3, #36]	@ 0x24
 8007084:	e011      	b.n	80070aa <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8007086:	4b15      	ldr	r3, [pc, #84]	@ (80070dc <_tx_mutex_create+0xb0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80070aa:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <_tx_mutex_create+0xac>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3301      	adds	r3, #1
 80070b0:	4a09      	ldr	r2, [pc, #36]	@ (80070d8 <_tx_mutex_create+0xac>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f383 8810 	msr	PRIMASK, r3
}
 80070be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3728      	adds	r7, #40	@ 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	4d555445 	.word	0x4d555445
 80070d0:	20002fa8 	.word	0x20002fa8
 80070d4:	08006fa5 	.word	0x08006fa5
 80070d8:	20002ef0 	.word	0x20002ef0
 80070dc:	20002eec 	.word	0x20002eec

080070e0 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b096      	sub	sp, #88	@ 0x58
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80070e8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80070f2:	b672      	cpsid	i
    return(int_posture);
 80070f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 80070f6:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 80070fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007228 <_tx_mutex_delete+0x148>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3b01      	subs	r3, #1
 8007104:	4a48      	ldr	r2, [pc, #288]	@ (8007228 <_tx_mutex_delete+0x148>)
 8007106:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007108:	4b47      	ldr	r3, [pc, #284]	@ (8007228 <_tx_mutex_delete+0x148>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8007110:	4b46      	ldr	r3, [pc, #280]	@ (800722c <_tx_mutex_delete+0x14c>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e013      	b.n	8007140 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8007124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007128:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800712a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800712e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8007130:	4b3e      	ldr	r3, [pc, #248]	@ (800722c <_tx_mutex_delete+0x14c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d102      	bne.n	8007140 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800713a:	4a3c      	ldr	r2, [pc, #240]	@ (800722c <_tx_mutex_delete+0x14c>)
 800713c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800713e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007140:	4b3b      	ldr	r3, [pc, #236]	@ (8007230 <_tx_mutex_delete+0x150>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	4a3a      	ldr	r2, [pc, #232]	@ (8007230 <_tx_mutex_delete+0x150>)
 8007148:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8007168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d013      	beq.n	8007196 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 facf 	bl	8007724 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007186:	f3ef 8310 	mrs	r3, PRIMASK
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800718e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007190:	b672      	cpsid	i
    return(int_posture);
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8007194:	657b      	str	r3, [r7, #84]	@ 0x54
 8007196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	f383 8810 	msr	PRIMASK, r3
}
 80071a0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80071a2:	e024      	b.n	80071ee <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80071a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a6:	3b01      	subs	r3, #1
 80071a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071aa:	f3ef 8310 	mrs	r3, PRIMASK
 80071ae:	61fb      	str	r3, [r7, #28]
    return(posture);
 80071b0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80071b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071b4:	b672      	cpsid	i
    return(int_posture);
 80071b6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80071b8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80071ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071bc:	2200      	movs	r2, #0
 80071be:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80071c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c2:	2201      	movs	r2, #1
 80071c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80071c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80071ce:	4b18      	ldr	r3, [pc, #96]	@ (8007230 <_tx_mutex_delete+0x150>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <_tx_mutex_delete+0x150>)
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f383 8810 	msr	PRIMASK, r3
}
 80071e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80071e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80071e6:	f001 f835 	bl	8008254 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80071ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ec:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 80071ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1d7      	bne.n	80071a4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071f4:	f3ef 8310 	mrs	r3, PRIMASK
 80071f8:	613b      	str	r3, [r7, #16]
    return(posture);
 80071fa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80071fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071fe:	b672      	cpsid	i
    return(int_posture);
 8007200:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007202:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007204:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <_tx_mutex_delete+0x150>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a09      	ldr	r2, [pc, #36]	@ (8007230 <_tx_mutex_delete+0x150>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007210:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800721a:	f000 ffe1 	bl	80081e0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3758      	adds	r7, #88	@ 0x58
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20002ef0 	.word	0x20002ef0
 800722c:	20002eec 	.word	0x20002eec
 8007230:	20002fa4 	.word	0x20002fa4

08007234 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b092      	sub	sp, #72	@ 0x48
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800723e:	f3ef 8310 	mrs	r3, PRIMASK
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8007246:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007248:	b672      	cpsid	i
    return(int_posture);
 800724a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800724c:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800724e:	4b7a      	ldr	r3, [pc, #488]	@ (8007438 <_tx_mutex_get+0x204>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d144      	bne.n	80072e6 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007266:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8007268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d032      	beq.n	80072d4 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d106      	bne.n	8007284 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8007276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8007284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00f      	beq.n	80072b2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072b0:	e009      	b.n	80072c6 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80072b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80072d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f383 8810 	msr	PRIMASK, r3
}
 80072de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80072e0:	2300      	movs	r3, #0
 80072e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e4:	e0a2      	b.n	800742c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d10d      	bne.n	800730c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	609a      	str	r2, [r3, #8]
 80072fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f383 8810 	msr	PRIMASK, r3
}
 8007304:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007306:	2300      	movs	r3, #0
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
 800730a:	e08f      	b.n	800742c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 8084 	beq.w	800741c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007314:	4b49      	ldr	r3, [pc, #292]	@ (800743c <_tx_mutex_get+0x208>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <_tx_mutex_get+0xfa>
 800731c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800731e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f383 8810 	msr	PRIMASK, r3
}
 8007326:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8007328:	231d      	movs	r3, #29
 800732a:	647b      	str	r3, [r7, #68]	@ 0x44
 800732c:	e07e      	b.n	800742c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8007334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007336:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <_tx_mutex_get+0x20c>)
 8007338:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800733a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800735a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800735c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007360:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007366:	675a      	str	r2, [r3, #116]	@ 0x74
 8007368:	e011      	b.n	800738e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007374:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800737c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800737e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007380:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007386:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800738c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8007398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739a:	220d      	movs	r2, #13
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800739e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a0:	2201      	movs	r2, #1
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80073a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80073aa:	4b24      	ldr	r3, [pc, #144]	@ (800743c <_tx_mutex_get+0x208>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a22      	ldr	r2, [pc, #136]	@ (800743c <_tx_mutex_get+0x208>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f383 8810 	msr	PRIMASK, r3
}
 80073be:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d121      	bne.n	800740c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80073d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80073dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d204      	bcs.n	80073f4 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80073ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d905      	bls.n	800740c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8007400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	4619      	mov	r1, r3
 8007406:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007408:	f000 f8ce 	bl	80075a8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800740c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800740e:	f001 f821 	bl	8008454 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007418:	647b      	str	r3, [r7, #68]	@ 0x44
 800741a:	e007      	b.n	800742c <_tx_mutex_get+0x1f8>
 800741c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f383 8810 	msr	PRIMASK, r3
}
 8007426:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8007428:	231d      	movs	r3, #29
 800742a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800742c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800742e:	4618      	mov	r0, r3
 8007430:	3748      	adds	r7, #72	@ 0x48
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20002f0c 	.word	0x20002f0c
 800743c:	20002fa4 	.word	0x20002fa4
 8007440:	08006ead 	.word	0x08006ead

08007444 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b092      	sub	sp, #72	@ 0x48
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800744c:	f3ef 8310 	mrs	r3, PRIMASK
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8007454:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007456:	b672      	cpsid	i
    return(int_posture);
 8007458:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8007462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007464:	2b01      	cmp	r3, #1
 8007466:	d805      	bhi.n	8007474 <_tx_mutex_prioritize+0x30>
 8007468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800746a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f383 8810 	msr	PRIMASK, r3
}
 8007472:	e092      	b.n	800759a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8007474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007476:	2b02      	cmp	r3, #2
 8007478:	d114      	bne.n	80074a4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8007486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	429a      	cmp	r2, r3
 8007490:	d202      	bcs.n	8007498 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007496:	619a      	str	r2, [r3, #24]
 8007498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800749a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f383 8810 	msr	PRIMASK, r3
}
 80074a2:	e07a      	b.n	800759a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80074b4:	4b3b      	ldr	r3, [pc, #236]	@ (80075a4 <_tx_mutex_prioritize+0x160>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a3a      	ldr	r2, [pc, #232]	@ (80075a4 <_tx_mutex_prioritize+0x160>)
 80074bc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80074c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d201      	bcs.n	80074d2 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80074ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f383 8810 	msr	PRIMASK, r3
}
 80074dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074de:	f3ef 8310 	mrs	r3, PRIMASK
 80074e2:	617b      	str	r3, [r7, #20]
    return(posture);
 80074e4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80074e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80074e8:	b672      	cpsid	i
    return(int_posture);
 80074ea:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80074ec:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d002      	beq.n	80074fe <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80074f8:	2301      	movs	r3, #1
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fc:	e006      	b.n	800750c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007504:	429a      	cmp	r2, r3
 8007506:	d001      	beq.n	800750c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	2b00      	cmp	r3, #0
 8007510:	d103      	bne.n	800751a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007516:	643b      	str	r3, [r7, #64]	@ 0x40
 8007518:	e00c      	b.n	8007534 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752e:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 8007534:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	429a      	cmp	r2, r3
 800753a:	d1c2      	bne.n	80074c2 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800753c:	4b19      	ldr	r3, [pc, #100]	@ (80075a4 <_tx_mutex_prioritize+0x160>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a18      	ldr	r2, [pc, #96]	@ (80075a4 <_tx_mutex_prioritize+0x160>)
 8007544:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8007546:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754a:	429a      	cmp	r2, r3
 800754c:	d01d      	beq.n	800758a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800754e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007552:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8007554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800755a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800755e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007564:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756a:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800756c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007570:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8007572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007576:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800757c:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007582:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007588:	619a      	str	r2, [r3, #24]
 800758a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800758c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f383 8810 	msr	PRIMASK, r3
}
 8007594:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007596:	f000 fe23 	bl	80081e0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800759a:	2300      	movs	r3, #0
#endif
}
 800759c:	4618      	mov	r0, r3
 800759e:	3748      	adds	r7, #72	@ 0x48
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20002fa4 	.word	0x20002fa4

080075a8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b090      	sub	sp, #64	@ 0x40
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075b2:	f3ef 8310 	mrs	r3, PRIMASK
 80075b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80075bc:	b672      	cpsid	i
    return(int_posture);
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d017      	beq.n	80075fa <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d905      	bls.n	80075e8 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075e6:	e002      	b.n	80075ee <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	f383 8810 	msr	PRIMASK, r3
}
 80075f8:	e089      	b.n	800770e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80075fa:	4b47      	ldr	r3, [pc, #284]	@ (8007718 <_tx_mutex_priority_change+0x170>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8007606:	4b45      	ldr	r3, [pc, #276]	@ (800771c <_tx_mutex_priority_change+0x174>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3302      	adds	r3, #2
 800760c:	4a43      	ldr	r2, [pc, #268]	@ (800771c <_tx_mutex_priority_change+0x174>)
 800760e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	220e      	movs	r2, #14
 8007614:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007624:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ff10 	bl	8008454 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007634:	f3ef 8310 	mrs	r3, PRIMASK
 8007638:	623b      	str	r3, [r7, #32]
    return(posture);
 800763a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800763c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800763e:	b672      	cpsid	i
    return(int_posture);
 8007640:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d905      	bls.n	8007662 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007660:	e002      	b.n	8007668 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f383 8810 	msr	PRIMASK, r3
}
 8007672:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fded 	bl	8008254 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800767a:	f3ef 8310 	mrs	r3, PRIMASK
 800767e:	617b      	str	r3, [r7, #20]
    return(posture);
 8007680:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007682:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007684:	b672      	cpsid	i
    return(int_posture);
 8007686:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800768a:	4b23      	ldr	r3, [pc, #140]	@ (8007718 <_tx_mutex_priority_change+0x170>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	429a      	cmp	r2, r3
 8007696:	d034      	beq.n	8007702 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d130      	bne.n	8007702 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d811      	bhi.n	80076d0 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d126      	bne.n	8007702 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80076b4:	4a18      	ldr	r2, [pc, #96]	@ (8007718 <_tx_mutex_priority_change+0x170>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 80076ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d21f      	bcs.n	8007702 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	4916      	ldr	r1, [pc, #88]	@ (8007720 <_tx_mutex_priority_change+0x178>)
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80076ce:	e018      	b.n	8007702 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d212      	bcs.n	8007702 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d80c      	bhi.n	8007702 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80076e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007718 <_tx_mutex_priority_change+0x170>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80076ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d205      	bcs.n	8007702 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	4909      	ldr	r1, [pc, #36]	@ (8007720 <_tx_mutex_priority_change+0x178>)
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007704:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800770e:	bf00      	nop
 8007710:	3740      	adds	r7, #64	@ 0x40
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20002f10 	.word	0x20002f10
 800771c:	20002fa4 	.word	0x20002fa4
 8007720:	20002f24 	.word	0x20002f24

08007724 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b0a6      	sub	sp, #152	@ 0x98
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800772c:	2320      	movs	r3, #32
 800772e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007732:	f3ef 8310 	mrs	r3, PRIMASK
 8007736:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 8007738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 800773a:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800773c:	b672      	cpsid	i
    return(int_posture);
 800773e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8007740:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 81ff 	beq.w	8007b4c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8007754:	4ba3      	ldr	r3, [pc, #652]	@ (80079e4 <_tx_mutex_put+0x2c0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007760:	429a      	cmp	r2, r3
 8007762:	d00d      	beq.n	8007780 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8007764:	4ba0      	ldr	r3, [pc, #640]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <_tx_mutex_put+0x5c>
 800776c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007770:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007774:	f383 8810 	msr	PRIMASK, r3
}
 8007778:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800777a:	231e      	movs	r3, #30
 800777c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8007780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007784:	2b20      	cmp	r3, #32
 8007786:	f040 81eb 	bne.w	8007b60 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	1e5a      	subs	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <_tx_mutex_put+0x8e>
 800779c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077a0:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077a4:	f383 8810 	msr	PRIMASK, r3
}
 80077a8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077b0:	e1d6      	b.n	8007b60 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 80077b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <_tx_mutex_put+0xaa>
 80077b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c0:	f383 8810 	msr	PRIMASK, r3
}
 80077c4:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077cc:	e1c8      	b.n	8007b60 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 80077ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 80077dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 80077e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80077ee:	e019      	b.n	8007824 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fc:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80077fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007802:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8007806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007808:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800780c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800780e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	429a      	cmp	r2, r3
 8007818:	d104      	bne.n	8007824 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800781a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007820:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d110      	bne.n	800784e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10c      	bne.n	800784e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800783e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8007848:	2300      	movs	r3, #0
 800784a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800784e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 8184 	bne.w	8007b60 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800785e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d155      	bne.n	800791c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007870:	4b5d      	ldr	r3, [pc, #372]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a5c      	ldr	r2, [pc, #368]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800787e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007888:	2320      	movs	r3, #32
 800788a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800788e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 8007898:	e01f      	b.n	80078da <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800789a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10b      	bne.n	80078bc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80078a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d904      	bls.n	80078bc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 80078b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 80078bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 80078c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d102      	bne.n	80078da <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 80078da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1db      	bne.n	800789a <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 80078e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80078ec:	b672      	cpsid	i
    return(int_posture);
 80078ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 80078f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 80078f4:	4b3c      	ldr	r3, [pc, #240]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	4a3b      	ldr	r2, [pc, #236]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 80078fc:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 80078fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007900:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007904:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8007908:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800790c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007910:	429a      	cmp	r2, r3
 8007912:	d203      	bcs.n	800791c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8007914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d920      	bls.n	8007966 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d11c      	bne.n	8007966 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800792c:	4b2e      	ldr	r3, [pc, #184]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	4a2d      	ldr	r2, [pc, #180]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800793a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	f383 8810 	msr	PRIMASK, r3
}
 8007942:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fd7d 	bl	8007444 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800794a:	f3ef 8310 	mrs	r3, PRIMASK
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007954:	b672      	cpsid	i
    return(int_posture);
 8007956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8007958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800795c:	4b22      	ldr	r3, [pc, #136]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3b01      	subs	r3, #1
 8007962:	4a21      	ldr	r2, [pc, #132]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007964:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d13e      	bne.n	80079ec <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800796e:	4b1e      	ldr	r3, [pc, #120]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800797c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800797e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007980:	f383 8810 	msr	PRIMASK, r3
}
 8007984:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007992:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007996:	429a      	cmp	r2, r3
 8007998:	d006      	beq.n	80079a8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff fe00 	bl	80075a8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80079a8:	f3ef 8310 	mrs	r3, PRIMASK
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80079b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80079b2:	b672      	cpsid	i
    return(int_posture);
 80079b4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 80079b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3b01      	subs	r3, #1
 80079c0:	4a09      	ldr	r2, [pc, #36]	@ (80079e8 <_tx_mutex_put+0x2c4>)
 80079c2:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80079d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d2:	f383 8810 	msr	PRIMASK, r3
}
 80079d6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 80079d8:	f000 fc02 	bl	80081e0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 80079dc:	2300      	movs	r3, #0
 80079de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079e2:	e0bd      	b.n	8007b60 <_tx_mutex_put+0x43c>
 80079e4:	20002f0c 	.word	0x20002f0c
 80079e8:	20002fa4 	.word	0x20002fa4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d10a      	bne.n	8007a10 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8007a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8007a10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a16:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8007a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007a1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a32:	e016      	b.n	8007a62 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8007a34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8007a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8007a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a58:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a60:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8007a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a76:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	1e5a      	subs	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8007a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	619a      	str	r2, [r3, #24]
 8007a94:	e00e      	b.n	8007ab4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8007a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007aa0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8007aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aa6:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007aac:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8007aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ab0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ab2:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b6c <_tx_mutex_put+0x448>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a28      	ldr	r2, [pc, #160]	@ (8007b6c <_tx_mutex_put+0x448>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ad0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f383 8810 	msr	PRIMASK, r3
}
 8007ad8:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d12d      	bne.n	8007b3e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01c      	beq.n	8007b24 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fcaa 	bl	8007444 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007af0:	f3ef 8310 	mrs	r3, PRIMASK
 8007af4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007af6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007af8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007afa:	b672      	cpsid	i
    return(int_posture);
 8007afc:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8007afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 8007b08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8007b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f383 8810 	msr	PRIMASK, r3
}
 8007b22:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8007b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d005      	beq.n	8007b3e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8007b32:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8007b36:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8007b3a:	f7ff fd35 	bl	80075a8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8007b3e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007b40:	f000 fb88 	bl	8008254 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b4a:	e009      	b.n	8007b60 <_tx_mutex_put+0x43c>
 8007b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f383 8810 	msr	PRIMASK, r3
}
 8007b58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8007b5a:	231e      	movs	r3, #30
 8007b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 8007b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3798      	adds	r7, #152	@ 0x98
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20002fa4 	.word	0x20002fa4

08007b70 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8007b7c:	221c      	movs	r2, #28
 8007b7e:	2100      	movs	r1, #0
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f005 fc9d 	bl	800d4c0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b92:	f3ef 8310 	mrs	r3, PRIMASK
 8007b96:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007b98:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007b9a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b9c:	b672      	cpsid	i
    return(int_posture);
 8007b9e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	@ (8007c08 <_tx_semaphore_create+0x98>)
 8007ba6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007ba8:	4b18      	ldr	r3, [pc, #96]	@ (8007c0c <_tx_semaphore_create+0x9c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d109      	bne.n	8007bc4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8007bb0:	4a17      	ldr	r2, [pc, #92]	@ (8007c10 <_tx_semaphore_create+0xa0>)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	619a      	str	r2, [r3, #24]
 8007bc2:	e011      	b.n	8007be8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8007bc4:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <_tx_semaphore_create+0xa0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a3a      	ldr	r2, [r7, #32]
 8007be6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8007be8:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <_tx_semaphore_create+0x9c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	4a07      	ldr	r2, [pc, #28]	@ (8007c0c <_tx_semaphore_create+0x9c>)
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f383 8810 	msr	PRIMASK, r3
}
 8007bfc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3728      	adds	r7, #40	@ 0x28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	53454d41 	.word	0x53454d41
 8007c0c:	20002ed8 	.word	0x20002ed8
 8007c10:	20002ed4 	.word	0x20002ed4

08007c14 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b092      	sub	sp, #72	@ 0x48
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c26:	b672      	cpsid	i
    return(int_posture);
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8007c32:	4b3d      	ldr	r3, [pc, #244]	@ (8007d28 <_tx_semaphore_delete+0x114>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4a3b      	ldr	r2, [pc, #236]	@ (8007d28 <_tx_semaphore_delete+0x114>)
 8007c3a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d28 <_tx_semaphore_delete+0x114>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d103      	bne.n	8007c4c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8007c44:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <_tx_semaphore_delete+0x118>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e013      	b.n	8007c74 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c5c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c62:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8007c64:	4b31      	ldr	r3, [pc, #196]	@ (8007d2c <_tx_semaphore_delete+0x118>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d102      	bne.n	8007c74 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8007c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d2c <_tx_semaphore_delete+0x118>)
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007c74:	4b2e      	ldr	r3, [pc, #184]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007c7c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	647b      	str	r3, [r7, #68]	@ 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	643b      	str	r3, [r7, #64]	@ 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
 8007c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ca0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8007ca2:	e024      	b.n	8007cee <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007caa:	f3ef 8310 	mrs	r3, PRIMASK
 8007cae:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007cb0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007cb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007cb4:	b672      	cpsid	i
    return(int_posture);
 8007cb6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007cce:	4b18      	ldr	r3, [pc, #96]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a16      	ldr	r2, [pc, #88]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cda:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	f383 8810 	msr	PRIMASK, r3
}
 8007ce2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007ce4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007ce6:	f000 fab5 	bl	8008254 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8007cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1d7      	bne.n	8007ca4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf8:	613b      	str	r3, [r7, #16]
    return(posture);
 8007cfa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007cfc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007cfe:	b672      	cpsid	i
    return(int_posture);
 8007d00:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007d04:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <_tx_semaphore_delete+0x11c>)
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f383 8810 	msr	PRIMASK, r3
}
 8007d18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8007d1a:	f000 fa61 	bl	80081e0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3748      	adds	r7, #72	@ 0x48
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20002ed8 	.word	0x20002ed8
 8007d2c:	20002ed4 	.word	0x20002ed4
 8007d30:	20002fa4 	.word	0x20002fa4

08007d34 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	@ 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d40:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007d42:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007d44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d46:	b672      	cpsid	i
    return(int_posture);
 8007d48:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8007d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	609a      	str	r2, [r3, #8]
 8007d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f383 8810 	msr	PRIMASK, r3
}
 8007d6c:	e033      	b.n	8007dd6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	3b01      	subs	r3, #1
 8007d78:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	e00e      	b.n	8007da6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d8c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d98:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007daa:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	2200      	movs	r2, #0
 8007db0:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8007dba:	4b09      	ldr	r3, [pc, #36]	@ (8007de0 <_tx_semaphore_put+0xac>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	4a07      	ldr	r2, [pc, #28]	@ (8007de0 <_tx_semaphore_put+0xac>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f383 8810 	msr	PRIMASK, r3
}
 8007dce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dd2:	f000 fa3f 	bl	8008254 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3730      	adds	r7, #48	@ 0x30
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20002fa4 	.word	0x20002fa4

08007de4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b092      	sub	sp, #72	@ 0x48
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007df2:	2300      	movs	r3, #0
 8007df4:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007df6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007df8:	21ef      	movs	r1, #239	@ 0xef
 8007dfa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007dfc:	f005 fb60 	bl	800d4c0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007e00:	22b0      	movs	r2, #176	@ 0xb0
 8007e02:	2100      	movs	r1, #0
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f005 fb5b 	bl	800d4c0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e20:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e26:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e3a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e40:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e50:	3b01      	subs	r3, #1
 8007e52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e54:	4413      	add	r3, r2
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e5c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007e5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d007      	beq.n	8007e76 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007e74:	e006      	b.n	8007e84 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2203      	movs	r2, #3
 8007e88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4a48      	ldr	r2, [pc, #288]	@ (8007fb0 <_tx_thread_create+0x1cc>)
 8007e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007e96:	4947      	ldr	r1, [pc, #284]	@ (8007fb4 <_tx_thread_create+0x1d0>)
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7f8 fa9b 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ea8:	b672      	cpsid	i
    return(int_posture);
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007eac:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a41      	ldr	r2, [pc, #260]	@ (8007fb8 <_tx_thread_create+0x1d4>)
 8007eb2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007eb4:	4b41      	ldr	r3, [pc, #260]	@ (8007fbc <_tx_thread_create+0x1d8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007ebc:	4a40      	ldr	r2, [pc, #256]	@ (8007fc0 <_tx_thread_create+0x1dc>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8007ed2:	e016      	b.n	8007f02 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fc0 <_tx_thread_create+0x1dc>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ee0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007f02:	4b2e      	ldr	r3, [pc, #184]	@ (8007fbc <_tx_thread_create+0x1d8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	4a2c      	ldr	r2, [pc, #176]	@ (8007fbc <_tx_thread_create+0x1d8>)
 8007f0a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc4 <_tx_thread_create+0x1e0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a2c      	ldr	r2, [pc, #176]	@ (8007fc4 <_tx_thread_create+0x1e0>)
 8007f14:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8007f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d129      	bne.n	8007f70 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007f1c:	f3ef 8305 	mrs	r3, IPSR
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8007f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8007f24:	4b28      	ldr	r3, [pc, #160]	@ (8007fc8 <_tx_thread_create+0x1e4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8007f2e:	d30d      	bcc.n	8007f4c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8007f30:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <_tx_thread_create+0x1e8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8007f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8007f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f40:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8007f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f4a:	e001      	b.n	8007f50 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	f383 8810 	msr	PRIMASK, r3
}
 8007f5a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f979 	bl	8008254 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8007f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01e      	beq.n	8007fa6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f6e:	e01a      	b.n	8007fa6 <_tx_thread_create+0x1c2>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f80:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007f82:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007f84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f86:	b672      	cpsid	i
    return(int_posture);
 8007f88:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8007f8a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <_tx_thread_create+0x1e0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc4 <_tx_thread_create+0x1e0>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f383 8810 	msr	PRIMASK, r3
}
 8007fa0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007fa2:	f000 f91d 	bl	80081e0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3748      	adds	r7, #72	@ 0x48
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08008729 	.word	0x08008729
 8007fb4:	08008049 	.word	0x08008049
 8007fb8:	54485244 	.word	0x54485244
 8007fbc:	20002f18 	.word	0x20002f18
 8007fc0:	20002f14 	.word	0x20002f14
 8007fc4:	20002fa4 	.word	0x20002fa4
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	20002f10 	.word	0x20002f10

08007fd0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007fd4:	4b12      	ldr	r3, [pc, #72]	@ (8008020 <_tx_thread_initialize+0x50>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <_tx_thread_initialize+0x54>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8007fe0:	4b11      	ldr	r3, [pc, #68]	@ (8008028 <_tx_thread_initialize+0x58>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007fe6:	4b11      	ldr	r3, [pc, #68]	@ (800802c <_tx_thread_initialize+0x5c>)
 8007fe8:	2220      	movs	r2, #32
 8007fea:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007fec:	2280      	movs	r2, #128	@ 0x80
 8007fee:	2100      	movs	r1, #0
 8007ff0:	480f      	ldr	r0, [pc, #60]	@ (8008030 <_tx_thread_initialize+0x60>)
 8007ff2:	f005 fa65 	bl	800d4c0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <_tx_thread_initialize+0x64>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8008038 <_tx_thread_initialize+0x68>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008002:	4b0e      	ldr	r3, [pc, #56]	@ (800803c <_tx_thread_initialize+0x6c>)
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8008008:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <_tx_thread_initialize+0x70>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800800e:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <_tx_thread_initialize+0x74>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8008016:	4a0b      	ldr	r2, [pc, #44]	@ (8008044 <_tx_thread_initialize+0x74>)
 8008018:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800801a:	bf00      	nop
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20002f0c 	.word	0x20002f0c
 8008024:	20002f10 	.word	0x20002f10
 8008028:	20002f1c 	.word	0x20002f1c
 800802c:	20002f20 	.word	0x20002f20
 8008030:	20002f24 	.word	0x20002f24
 8008034:	20002f14 	.word	0x20002f14
 8008038:	20002f18 	.word	0x20002f18
 800803c:	20002fa4 	.word	0x20002fa4
 8008040:	20002fa8 	.word	0x20002fa8
 8008044:	20002fac 	.word	0x20002fac

08008048 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800804e:	4b21      	ldr	r3, [pc, #132]	@ (80080d4 <_tx_thread_shell_entry+0x8c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8008060:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <_tx_thread_shell_entry+0x90>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8008068:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <_tx_thread_shell_entry+0x90>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69f8      	ldr	r0, [r7, #28]
 800806e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008070:	f3ef 8310 	mrs	r3, PRIMASK
 8008074:	607b      	str	r3, [r7, #4]
    return(posture);
 8008076:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008078:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800807a:	b672      	cpsid	i
    return(int_posture);
 800807c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800807e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	2201      	movs	r2, #1
 8008084:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	2201      	movs	r2, #1
 800808a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2200      	movs	r2, #0
 8008090:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008092:	4b12      	ldr	r3, [pc, #72]	@ (80080dc <_tx_thread_shell_entry+0x94>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <_tx_thread_shell_entry+0x94>)
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f383 8810 	msr	PRIMASK, r3
}
 80080a6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80080a8:	f3ef 8314 	mrs	r3, CONTROL
 80080ac:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80080ae:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 0304 	bic.w	r3, r3, #4
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f383 8814 	msr	CONTROL, r3
}
 80080c4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80080c6:	69f8      	ldr	r0, [r7, #28]
 80080c8:	f000 f9c4 	bl	8008454 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20002f0c 	.word	0x20002f0c
 80080d8:	20002fa8 	.word	0x20002fa8
 80080dc:	20002fa4 	.word	0x20002fa4

080080e0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08e      	sub	sp, #56	@ 0x38
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080e8:	f3ef 8310 	mrs	r3, PRIMASK
 80080ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80080f2:	b672      	cpsid	i
    return(int_posture);
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80080f8:	4b35      	ldr	r3, [pc, #212]	@ (80081d0 <_tx_thread_sleep+0xf0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80080fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d108      	bne.n	8008116 <_tx_thread_sleep+0x36>
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	f383 8810 	msr	PRIMASK, r3
}
 800810e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008110:	2313      	movs	r3, #19
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
 8008114:	e056      	b.n	80081c4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008116:	f3ef 8305 	mrs	r3, IPSR
 800811a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800811c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800811e:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <_tx_thread_sleep+0xf4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4313      	orrs	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <_tx_thread_sleep+0x5a>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f383 8810 	msr	PRIMASK, r3
}
 8008132:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008134:	2313      	movs	r3, #19
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
 8008138:	e044      	b.n	80081c4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800813a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813c:	4a26      	ldr	r2, [pc, #152]	@ (80081d8 <_tx_thread_sleep+0xf8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <_tx_thread_sleep+0x74>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f383 8810 	msr	PRIMASK, r3
}
 800814c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800814e:	2313      	movs	r3, #19
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
 8008152:	e037      	b.n	80081c4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d108      	bne.n	800816c <_tx_thread_sleep+0x8c>
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8008166:	2300      	movs	r3, #0
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
 800816a:	e02b      	b.n	80081c4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800816c:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <_tx_thread_sleep+0xfc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <_tx_thread_sleep+0xa6>
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f383 8810 	msr	PRIMASK, r3
}
 800817e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8008180:	2313      	movs	r3, #19
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
 8008184:	e01e      	b.n	80081c4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8008186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008188:	2204      	movs	r2, #4
 800818a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	2201      	movs	r2, #1
 8008190:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008194:	2200      	movs	r2, #0
 8008196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800819a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80081a0:	4b0e      	ldr	r3, [pc, #56]	@ (80081dc <_tx_thread_sleep+0xfc>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a0d      	ldr	r2, [pc, #52]	@ (80081dc <_tx_thread_sleep+0xfc>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f383 8810 	msr	PRIMASK, r3
}
 80081b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80081b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081b8:	f000 f94c 	bl	8008454 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80081c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3738      	adds	r7, #56	@ 0x38
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20002f0c 	.word	0x20002f0c
 80081d4:	2000000c 	.word	0x2000000c
 80081d8:	20003054 	.word	0x20003054
 80081dc:	20002fa4 	.word	0x20002fa4

080081e0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b089      	sub	sp, #36	@ 0x24
 80081e4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80081e6:	4b17      	ldr	r3, [pc, #92]	@ (8008244 <_tx_thread_system_preempt_check+0x64>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d121      	bne.n	8008236 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80081f2:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <_tx_thread_system_preempt_check+0x68>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80081f8:	4b14      	ldr	r3, [pc, #80]	@ (800824c <_tx_thread_system_preempt_check+0x6c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	429a      	cmp	r2, r3
 8008204:	d017      	beq.n	8008236 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008206:	4b12      	ldr	r3, [pc, #72]	@ (8008250 <_tx_thread_system_preempt_check+0x70>)
 8008208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800820e:	f3ef 8305 	mrs	r3, IPSR
 8008212:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008214:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10c      	bne.n	8008234 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800821a:	f3ef 8310 	mrs	r3, PRIMASK
 800821e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008220:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8008222:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008224:	b662      	cpsie	i
}
 8008226:	bf00      	nop
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008234:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008236:	bf00      	nop
 8008238:	3724      	adds	r7, #36	@ 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20002fa4 	.word	0x20002fa4
 8008248:	20002f0c 	.word	0x20002f0c
 800824c:	20002f10 	.word	0x20002f10
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b096      	sub	sp, #88	@ 0x58
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800825c:	f3ef 8310 	mrs	r3, PRIMASK
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8008264:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8008266:	b672      	cpsid	i
    return(int_posture);
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800826a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	334c      	adds	r3, #76	@ 0x4c
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fb91 	bl	80089a0 <_tx_timer_system_deactivate>
 800827e:	e002      	b.n	8008286 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008286:	4b6c      	ldr	r3, [pc, #432]	@ (8008438 <_tx_thread_system_resume+0x1e4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	4a6a      	ldr	r2, [pc, #424]	@ (8008438 <_tx_thread_system_resume+0x1e4>)
 800828e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 8083 	bne.w	80083a0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8097 	beq.w	80083d2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d172      	bne.n	8008392 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80082b8:	4a60      	ldr	r2, [pc, #384]	@ (800843c <_tx_thread_system_resume+0x1e8>)
 80082ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 80082c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d154      	bne.n	8008372 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80082c8:	495c      	ldr	r1, [pc, #368]	@ (800843c <_tx_thread_system_resume+0x1e8>)
 80082ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80082de:	2201      	movs	r2, #1
 80082e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80082e8:	4b55      	ldr	r3, [pc, #340]	@ (8008440 <_tx_thread_system_resume+0x1ec>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ee:	4313      	orrs	r3, r2
 80082f0:	4a53      	ldr	r2, [pc, #332]	@ (8008440 <_tx_thread_system_resume+0x1ec>)
 80082f2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80082f4:	4b53      	ldr	r3, [pc, #332]	@ (8008444 <_tx_thread_system_resume+0x1f0>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d269      	bcs.n	80083d2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80082fe:	4a51      	ldr	r2, [pc, #324]	@ (8008444 <_tx_thread_system_resume+0x1f0>)
 8008300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008302:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8008304:	4b50      	ldr	r3, [pc, #320]	@ (8008448 <_tx_thread_system_resume+0x1f4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800830a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d103      	bne.n	8008318 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008310:	4a4d      	ldr	r2, [pc, #308]	@ (8008448 <_tx_thread_system_resume+0x1f4>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e05c      	b.n	80083d2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8008318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800831a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800831e:	429a      	cmp	r2, r3
 8008320:	d257      	bcs.n	80083d2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8008322:	4a49      	ldr	r2, [pc, #292]	@ (8008448 <_tx_thread_system_resume+0x1f4>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800832a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	f383 8810 	msr	PRIMASK, r3
}
 8008332:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008334:	4b40      	ldr	r3, [pc, #256]	@ (8008438 <_tx_thread_system_resume+0x1e4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800833a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d174      	bne.n	800842a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008340:	4b42      	ldr	r3, [pc, #264]	@ (800844c <_tx_thread_system_resume+0x1f8>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008348:	f3ef 8305 	mrs	r3, IPSR
 800834c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10c      	bne.n	800836e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008354:	f3ef 8310 	mrs	r3, PRIMASK
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800835c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800835e:	b662      	cpsie	i
}
 8008360:	bf00      	nop
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f383 8810 	msr	PRIMASK, r3
}
 800836c:	bf00      	nop
}
 800836e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8008370:	e05b      	b.n	800842a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8008372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008376:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800837e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008388:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800838e:	621a      	str	r2, [r3, #32]
 8008390:	e01f      	b.n	80083d2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2203      	movs	r2, #3
 800839c:	631a      	str	r2, [r3, #48]	@ 0x30
 800839e:	e018      	b.n	80083d2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d014      	beq.n	80083d2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d010      	beq.n	80083d2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80083c4:	e005      	b.n	80083d2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2203      	movs	r2, #3
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80083d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008450 <_tx_thread_system_resume+0x1fc>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80083e4:	4b18      	ldr	r3, [pc, #96]	@ (8008448 <_tx_thread_system_resume+0x1f4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d020      	beq.n	8008430 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80083ee:	4b12      	ldr	r3, [pc, #72]	@ (8008438 <_tx_thread_system_resume+0x1e4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d11a      	bne.n	8008430 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80083fa:	4b14      	ldr	r3, [pc, #80]	@ (800844c <_tx_thread_system_resume+0x1f8>)
 80083fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008400:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008402:	f3ef 8305 	mrs	r3, IPSR
 8008406:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008408:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10f      	bne.n	800842e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800840e:	f3ef 8310 	mrs	r3, PRIMASK
 8008412:	613b      	str	r3, [r7, #16]
    return(posture);
 8008414:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8008416:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008418:	b662      	cpsie	i
}
 800841a:	bf00      	nop
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f383 8810 	msr	PRIMASK, r3
}
 8008426:	bf00      	nop
}
 8008428:	e001      	b.n	800842e <_tx_thread_system_resume+0x1da>
                                return;
 800842a:	bf00      	nop
 800842c:	e000      	b.n	8008430 <_tx_thread_system_resume+0x1dc>
 800842e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8008430:	3758      	adds	r7, #88	@ 0x58
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20002fa4 	.word	0x20002fa4
 800843c:	20002f24 	.word	0x20002f24
 8008440:	20002f1c 	.word	0x20002f1c
 8008444:	20002f20 	.word	0x20002f20
 8008448:	20002f10 	.word	0x20002f10
 800844c:	e000ed04 	.word	0xe000ed04
 8008450:	20002f0c 	.word	0x20002f0c

08008454 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b09e      	sub	sp, #120	@ 0x78
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800845c:	4b81      	ldr	r3, [pc, #516]	@ (8008664 <_tx_thread_system_suspend+0x210>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008462:	f3ef 8310 	mrs	r3, PRIMASK
 8008466:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8008468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800846a:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800846c:	b672      	cpsid	i
    return(int_posture);
 800846e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008470:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008476:	429a      	cmp	r2, r3
 8008478:	d112      	bne.n	80084a0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800847e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8008480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d008      	beq.n	8008498 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848c:	d004      	beq.n	8008498 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	334c      	adds	r3, #76	@ 0x4c
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa22 	bl	80088dc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	4a72      	ldr	r2, [pc, #456]	@ (8008668 <_tx_thread_system_suspend+0x214>)
 800849e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80084a0:	4b72      	ldr	r3, [pc, #456]	@ (800866c <_tx_thread_system_suspend+0x218>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4a71      	ldr	r2, [pc, #452]	@ (800866c <_tx_thread_system_suspend+0x218>)
 80084a8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	f040 80a6 	bne.w	8008600 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80084c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d015      	beq.n	80084fa <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80084d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084d8:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80084da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084de:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80084e0:	4a63      	ldr	r2, [pc, #396]	@ (8008670 <_tx_thread_system_suspend+0x21c>)
 80084e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d157      	bne.n	800859e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80084ee:	4960      	ldr	r1, [pc, #384]	@ (8008670 <_tx_thread_system_suspend+0x21c>)
 80084f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084f8:	e051      	b.n	800859e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80084fa:	4a5d      	ldr	r2, [pc, #372]	@ (8008670 <_tx_thread_system_suspend+0x21c>)
 80084fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084fe:	2100      	movs	r1, #0
 8008500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8008504:	2201      	movs	r2, #1
 8008506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800850e:	4b59      	ldr	r3, [pc, #356]	@ (8008674 <_tx_thread_system_suspend+0x220>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008514:	43db      	mvns	r3, r3
 8008516:	4013      	ands	r3, r2
 8008518:	4a56      	ldr	r2, [pc, #344]	@ (8008674 <_tx_thread_system_suspend+0x220>)
 800851a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800851c:	2300      	movs	r3, #0
 800851e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8008520:	4b54      	ldr	r3, [pc, #336]	@ (8008674 <_tx_thread_system_suspend+0x220>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8008526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008528:	2b00      	cmp	r3, #0
 800852a:	d12b      	bne.n	8008584 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800852c:	4b52      	ldr	r3, [pc, #328]	@ (8008678 <_tx_thread_system_suspend+0x224>)
 800852e:	2220      	movs	r2, #32
 8008530:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8008532:	4b52      	ldr	r3, [pc, #328]	@ (800867c <_tx_thread_system_suspend+0x228>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800853a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800853c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800853e:	f383 8810 	msr	PRIMASK, r3
}
 8008542:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008544:	4b49      	ldr	r3, [pc, #292]	@ (800866c <_tx_thread_system_suspend+0x218>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800854a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800854c:	2b00      	cmp	r3, #0
 800854e:	f040 8081 	bne.w	8008654 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008552:	4b4b      	ldr	r3, [pc, #300]	@ (8008680 <_tx_thread_system_suspend+0x22c>)
 8008554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008558:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800855a:	f3ef 8305 	mrs	r3, IPSR
 800855e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8008560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10c      	bne.n	8008580 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008566:	f3ef 8310 	mrs	r3, PRIMASK
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800856c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800856e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008570:	b662      	cpsie	i
}
 8008572:	bf00      	nop
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	f383 8810 	msr	PRIMASK, r3
}
 800857e:	bf00      	nop
}
 8008580:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008582:	e067      	b.n	8008654 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008586:	fa93 f3a3 	rbit	r3, r3
 800858a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800858c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800858e:	fab3 f383 	clz	r3, r3
 8008592:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008594:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008598:	4413      	add	r3, r2
 800859a:	4a37      	ldr	r2, [pc, #220]	@ (8008678 <_tx_thread_system_suspend+0x224>)
 800859c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800859e:	4b37      	ldr	r3, [pc, #220]	@ (800867c <_tx_thread_system_suspend+0x228>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d12b      	bne.n	8008600 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80085a8:	4b33      	ldr	r3, [pc, #204]	@ (8008678 <_tx_thread_system_suspend+0x224>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a30      	ldr	r2, [pc, #192]	@ (8008670 <_tx_thread_system_suspend+0x21c>)
 80085ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b2:	4a32      	ldr	r2, [pc, #200]	@ (800867c <_tx_thread_system_suspend+0x228>)
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085b8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	f383 8810 	msr	PRIMASK, r3
}
 80085c0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80085c2:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <_tx_thread_system_suspend+0x218>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 80085c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d144      	bne.n	8008658 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80085ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008680 <_tx_thread_system_suspend+0x22c>)
 80085d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80085d6:	f3ef 8305 	mrs	r3, IPSR
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10c      	bne.n	80085fc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085e2:	f3ef 8310 	mrs	r3, PRIMASK
 80085e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80085ec:	b662      	cpsie	i
}
 80085ee:	bf00      	nop
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	f383 8810 	msr	PRIMASK, r3
}
 80085fa:	bf00      	nop
}
 80085fc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80085fe:	e02b      	b.n	8008658 <_tx_thread_system_suspend+0x204>
 8008600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008602:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f383 8810 	msr	PRIMASK, r3
}
 800860a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800860c:	4b1b      	ldr	r3, [pc, #108]	@ (800867c <_tx_thread_system_suspend+0x228>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008612:	429a      	cmp	r2, r3
 8008614:	d022      	beq.n	800865c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008616:	4b15      	ldr	r3, [pc, #84]	@ (800866c <_tx_thread_system_suspend+0x218>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800861c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800861e:	2b00      	cmp	r3, #0
 8008620:	d11c      	bne.n	800865c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008622:	4b17      	ldr	r3, [pc, #92]	@ (8008680 <_tx_thread_system_suspend+0x22c>)
 8008624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008628:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800862a:	f3ef 8305 	mrs	r3, IPSR
 800862e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008630:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10c      	bne.n	8008650 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008636:	f3ef 8310 	mrs	r3, PRIMASK
 800863a:	617b      	str	r3, [r7, #20]
    return(posture);
 800863c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800863e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008640:	b662      	cpsie	i
}
 8008642:	bf00      	nop
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f383 8810 	msr	PRIMASK, r3
}
 800864e:	bf00      	nop
}
 8008650:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8008652:	e003      	b.n	800865c <_tx_thread_system_suspend+0x208>
                return;
 8008654:	bf00      	nop
 8008656:	e002      	b.n	800865e <_tx_thread_system_suspend+0x20a>
            return;
 8008658:	bf00      	nop
 800865a:	e000      	b.n	800865e <_tx_thread_system_suspend+0x20a>
    return;
 800865c:	bf00      	nop
}
 800865e:	3778      	adds	r7, #120	@ 0x78
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20002f0c 	.word	0x20002f0c
 8008668:	20003510 	.word	0x20003510
 800866c:	20002fa4 	.word	0x20002fa4
 8008670:	20002f24 	.word	0x20002f24
 8008674:	20002f1c 	.word	0x20002f1c
 8008678:	20002f20 	.word	0x20002f20
 800867c:	20002f10 	.word	0x20002f10
 8008680:	e000ed04 	.word	0xe000ed04

08008684 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800868a:	4b21      	ldr	r3, [pc, #132]	@ (8008710 <_tx_thread_time_slice+0x8c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008690:	f3ef 8310 	mrs	r3, PRIMASK
 8008694:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008696:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008698:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800869a:	b672      	cpsid	i
    return(int_posture);
 800869c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800869e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80086a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <_tx_thread_time_slice+0x90>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d024      	beq.n	80086f6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d120      	bne.n	80086f6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	69da      	ldr	r2, [r3, #28]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	4a15      	ldr	r2, [pc, #84]	@ (8008718 <_tx_thread_time_slice+0x94>)
 80086c2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d013      	beq.n	80086f6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d10d      	bne.n	80086f6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	6a12      	ldr	r2, [r2, #32]
 80086e2:	490e      	ldr	r1, [pc, #56]	@ (800871c <_tx_thread_time_slice+0x98>)
 80086e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80086e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008720 <_tx_thread_time_slice+0x9c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a0b      	ldr	r2, [pc, #44]	@ (800871c <_tx_thread_time_slice+0x98>)
 80086ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008724 <_tx_thread_time_slice+0xa0>)
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f383 8810 	msr	PRIMASK, r3
}
 8008700:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20002f0c 	.word	0x20002f0c
 8008714:	20002fb4 	.word	0x20002fb4
 8008718:	20003510 	.word	0x20003510
 800871c:	20002f24 	.word	0x20002f24
 8008720:	20002f20 	.word	0x20002f20
 8008724:	20002f10 	.word	0x20002f10

08008728 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	@ 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008734:	f3ef 8310 	mrs	r3, PRIMASK
 8008738:	617b      	str	r3, [r7, #20]
    return(posture);
 800873a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800873c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800873e:	b672      	cpsid	i
    return(int_posture);
 8008740:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008742:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008748:	2b04      	cmp	r3, #4
 800874a:	d10e      	bne.n	800876a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800874c:	4b13      	ldr	r3, [pc, #76]	@ (800879c <_tx_thread_timeout+0x74>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	4a12      	ldr	r2, [pc, #72]	@ (800879c <_tx_thread_timeout+0x74>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f383 8810 	msr	PRIMASK, r3
}
 8008760:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008764:	f7ff fd76 	bl	8008254 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008768:	e013      	b.n	8008792 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800876e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f383 8810 	msr	PRIMASK, r3
}
 8008782:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	69b9      	ldr	r1, [r7, #24]
 800878e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008790:	4798      	blx	r3
}
 8008792:	bf00      	nop
 8008794:	3728      	adds	r7, #40	@ 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20002fa4 	.word	0x20002fa4

080087a0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087a6:	f3ef 8310 	mrs	r3, PRIMASK
 80087aa:	607b      	str	r3, [r7, #4]
    return(posture);
 80087ac:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80087ae:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087b0:	b672      	cpsid	i
    return(int_posture);
 80087b2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80087b4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80087b6:	4b09      	ldr	r3, [pc, #36]	@ (80087dc <_tx_timer_expiration_process+0x3c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	4a07      	ldr	r2, [pc, #28]	@ (80087dc <_tx_timer_expiration_process+0x3c>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80087cc:	4804      	ldr	r0, [pc, #16]	@ (80087e0 <_tx_timer_expiration_process+0x40>)
 80087ce:	f7ff fd41 	bl	8008254 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20002fa4 	.word	0x20002fa4
 80087e0:	20003054 	.word	0x20003054

080087e4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b089      	sub	sp, #36	@ 0x24
 80087e8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80087ea:	4b28      	ldr	r3, [pc, #160]	@ (800888c <_tx_timer_initialize+0xa8>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80087f0:	4b27      	ldr	r3, [pc, #156]	@ (8008890 <_tx_timer_initialize+0xac>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80087f6:	4b27      	ldr	r3, [pc, #156]	@ (8008894 <_tx_timer_initialize+0xb0>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80087fc:	4b26      	ldr	r3, [pc, #152]	@ (8008898 <_tx_timer_initialize+0xb4>)
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008802:	4b26      	ldr	r3, [pc, #152]	@ (800889c <_tx_timer_initialize+0xb8>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8008808:	2280      	movs	r2, #128	@ 0x80
 800880a:	2100      	movs	r1, #0
 800880c:	4824      	ldr	r0, [pc, #144]	@ (80088a0 <_tx_timer_initialize+0xbc>)
 800880e:	f004 fe57 	bl	800d4c0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008812:	4b24      	ldr	r3, [pc, #144]	@ (80088a4 <_tx_timer_initialize+0xc0>)
 8008814:	4a22      	ldr	r2, [pc, #136]	@ (80088a0 <_tx_timer_initialize+0xbc>)
 8008816:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8008818:	4b23      	ldr	r3, [pc, #140]	@ (80088a8 <_tx_timer_initialize+0xc4>)
 800881a:	4a21      	ldr	r2, [pc, #132]	@ (80088a0 <_tx_timer_initialize+0xbc>)
 800881c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800881e:	4b23      	ldr	r3, [pc, #140]	@ (80088ac <_tx_timer_initialize+0xc8>)
 8008820:	4a23      	ldr	r2, [pc, #140]	@ (80088b0 <_tx_timer_initialize+0xcc>)
 8008822:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <_tx_timer_initialize+0xc8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3304      	adds	r3, #4
 800882a:	4a20      	ldr	r2, [pc, #128]	@ (80088ac <_tx_timer_initialize+0xc8>)
 800882c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800882e:	4b21      	ldr	r3, [pc, #132]	@ (80088b4 <_tx_timer_initialize+0xd0>)
 8008830:	4a21      	ldr	r2, [pc, #132]	@ (80088b8 <_tx_timer_initialize+0xd4>)
 8008832:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008834:	4b21      	ldr	r3, [pc, #132]	@ (80088bc <_tx_timer_initialize+0xd8>)
 8008836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800883a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800883c:	4b20      	ldr	r3, [pc, #128]	@ (80088c0 <_tx_timer_initialize+0xdc>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8008842:	4b1c      	ldr	r3, [pc, #112]	@ (80088b4 <_tx_timer_initialize+0xd0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1d      	ldr	r2, [pc, #116]	@ (80088bc <_tx_timer_initialize+0xd8>)
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	491d      	ldr	r1, [pc, #116]	@ (80088c0 <_tx_timer_initialize+0xdc>)
 800884c:	6809      	ldr	r1, [r1, #0]
 800884e:	481c      	ldr	r0, [pc, #112]	@ (80088c0 <_tx_timer_initialize+0xdc>)
 8008850:	6800      	ldr	r0, [r0, #0]
 8008852:	2400      	movs	r4, #0
 8008854:	9405      	str	r4, [sp, #20]
 8008856:	2400      	movs	r4, #0
 8008858:	9404      	str	r4, [sp, #16]
 800885a:	9003      	str	r0, [sp, #12]
 800885c:	9102      	str	r1, [sp, #8]
 800885e:	9201      	str	r2, [sp, #4]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4b18      	ldr	r3, [pc, #96]	@ (80088c4 <_tx_timer_initialize+0xe0>)
 8008864:	4a18      	ldr	r2, [pc, #96]	@ (80088c8 <_tx_timer_initialize+0xe4>)
 8008866:	4919      	ldr	r1, [pc, #100]	@ (80088cc <_tx_timer_initialize+0xe8>)
 8008868:	4819      	ldr	r0, [pc, #100]	@ (80088d0 <_tx_timer_initialize+0xec>)
 800886a:	f7ff fabb 	bl	8007de4 <_tx_thread_create>
 800886e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e5      	bne.n	8008842 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8008876:	4b17      	ldr	r3, [pc, #92]	@ (80088d4 <_tx_timer_initialize+0xf0>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800887c:	4b16      	ldr	r3, [pc, #88]	@ (80088d8 <_tx_timer_initialize+0xf4>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	bf00      	nop
 800888c:	20002fb0 	.word	0x20002fb0
 8008890:	20003510 	.word	0x20003510
 8008894:	20002fb4 	.word	0x20002fb4
 8008898:	20003044 	.word	0x20003044
 800889c:	20003050 	.word	0x20003050
 80088a0:	20002fb8 	.word	0x20002fb8
 80088a4:	20003038 	.word	0x20003038
 80088a8:	20003040 	.word	0x20003040
 80088ac:	2000303c 	.word	0x2000303c
 80088b0:	20003034 	.word	0x20003034
 80088b4:	20003104 	.word	0x20003104
 80088b8:	20003110 	.word	0x20003110
 80088bc:	20003108 	.word	0x20003108
 80088c0:	2000310c 	.word	0x2000310c
 80088c4:	4154494d 	.word	0x4154494d
 80088c8:	08008a11 	.word	0x08008a11
 80088cc:	0800d564 	.word	0x0800d564
 80088d0:	20003054 	.word	0x20003054
 80088d4:	20003048 	.word	0x20003048
 80088d8:	2000304c 	.word	0x2000304c

080088dc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80088dc:	b480      	push	{r7}
 80088de:	b089      	sub	sp, #36	@ 0x24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d04a      	beq.n	8008986 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f6:	d046      	beq.n	8008986 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d142      	bne.n	8008986 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b20      	cmp	r3, #32
 8008904:	d902      	bls.n	800890c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8008906:	231f      	movs	r3, #31
 8008908:	61bb      	str	r3, [r7, #24]
 800890a:	e002      	b.n	8008912 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	3b01      	subs	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008912:	4b20      	ldr	r3, [pc, #128]	@ (8008994 <_tx_timer_system_activate+0xb8>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800891e:	4b1e      	ldr	r3, [pc, #120]	@ (8008998 <_tx_timer_system_activate+0xbc>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	429a      	cmp	r2, r3
 8008926:	d30b      	bcc.n	8008940 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8008928:	4b1b      	ldr	r3, [pc, #108]	@ (8008998 <_tx_timer_system_activate+0xbc>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	109b      	asrs	r3, r3, #2
 8008932:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008934:	4b19      	ldr	r3, [pc, #100]	@ (800899c <_tx_timer_system_activate+0xc0>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e011      	b.n	8008980 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8008986:	bf00      	nop
 8008988:	3724      	adds	r7, #36	@ 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20003040 	.word	0x20003040
 8008998:	2000303c 	.word	0x2000303c
 800899c:	20003038 	.word	0x20003038

080089a0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d026      	beq.n	8008a02 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d108      	bne.n	80089d4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d117      	bne.n	80089fc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	e013      	b.n	80089fc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d105      	bne.n	80089fc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	619a      	str	r2, [r3, #24]
    }
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b098      	sub	sp, #96	@ 0x60
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8008a18:	2300      	movs	r3, #0
 8008a1a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a73      	ldr	r2, [pc, #460]	@ (8008bec <_tx_timer_thread_entry+0x1dc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	f040 80de 	bne.w	8008be2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a26:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8008a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a30:	b672      	cpsid	i
    return(int_posture);
 8008a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8008a34:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8008a36:	4b6e      	ldr	r3, [pc, #440]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f107 020c 	add.w	r2, r7, #12
 8008a4a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8008a4c:	4b68      	ldr	r3, [pc, #416]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8008a54:	4b66      	ldr	r3, [pc, #408]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4a65      	ldr	r2, [pc, #404]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a5c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008a5e:	4b64      	ldr	r3, [pc, #400]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b64      	ldr	r3, [pc, #400]	@ (8008bf4 <_tx_timer_thread_entry+0x1e4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d103      	bne.n	8008a72 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8008a6a:	4b63      	ldr	r3, [pc, #396]	@ (8008bf8 <_tx_timer_thread_entry+0x1e8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a60      	ldr	r2, [pc, #384]	@ (8008bf0 <_tx_timer_thread_entry+0x1e0>)
 8008a70:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8008a72:	4b62      	ldr	r3, [pc, #392]	@ (8008bfc <_tx_timer_thread_entry+0x1ec>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	f383 8810 	msr	PRIMASK, r3
}
 8008a82:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a84:	f3ef 8310 	mrs	r3, PRIMASK
 8008a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8008a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a8e:	b672      	cpsid	i
    return(int_posture);
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8008a92:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8008a94:	e07f      	b.n	8008b96 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8008aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d102      	bne.n	8008ab2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e00e      	b.n	8008ad0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8008ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008abc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ac2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8008ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac6:	f107 020c 	add.w	r2, r7, #12
 8008aca:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8008acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ace:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d911      	bls.n	8008afc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aea:	f107 0208 	add.w	r2, r7, #8
 8008aee:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008af4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8008af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	e01a      	b.n	8008b32 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8008b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8008b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8008b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1a:	f107 0208 	add.w	r2, r7, #8
 8008b1e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8008b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b24:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8008b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	e002      	b.n	8008b32 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2e:	2200      	movs	r2, #0
 8008b30:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8008b32:	4a33      	ldr	r2, [pc, #204]	@ (8008c00 <_tx_timer_thread_entry+0x1f0>)
 8008b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	f383 8810 	msr	PRIMASK, r3
}
 8008b42:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8008b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8008b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008b4e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b50:	f3ef 8310 	mrs	r3, PRIMASK
 8008b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008b58:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b5a:	b672      	cpsid	i
    return(int_posture);
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008b60:	4b27      	ldr	r3, [pc, #156]	@ (8008c00 <_tx_timer_thread_entry+0x1f0>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d105      	bne.n	8008b7a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b70:	2200      	movs	r2, #0
 8008b72:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8008b74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008b76:	f7ff feb1 	bl	80088dc <_tx_timer_system_activate>
 8008b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	f383 8810 	msr	PRIMASK, r3
}
 8008b84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b86:	f3ef 8310 	mrs	r3, PRIMASK
 8008b8a:	623b      	str	r3, [r7, #32]
    return(posture);
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008b8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b90:	b672      	cpsid	i
    return(int_posture);
 8008b92:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f47f af7c 	bne.w	8008a96 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008b9e:	4b17      	ldr	r3, [pc, #92]	@ (8008bfc <_tx_timer_thread_entry+0x1ec>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d116      	bne.n	8008bd4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8008ba6:	4b17      	ldr	r3, [pc, #92]	@ (8008c04 <_tx_timer_thread_entry+0x1f4>)
 8008ba8:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bac:	2203      	movs	r2, #3
 8008bae:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	@ (8008c08 <_tx_timer_thread_entry+0x1f8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	4a12      	ldr	r2, [pc, #72]	@ (8008c08 <_tx_timer_thread_entry+0x1f8>)
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f383 8810 	msr	PRIMASK, r3
}
 8008bca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008bcc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008bce:	f7ff fc41 	bl	8008454 <_tx_thread_system_suspend>
 8008bd2:	e728      	b.n	8008a26 <_tx_timer_thread_entry+0x16>
 8008bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f383 8810 	msr	PRIMASK, r3
}
 8008bde:	bf00      	nop
            TX_DISABLE
 8008be0:	e721      	b.n	8008a26 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8008be2:	bf00      	nop
 8008be4:	3760      	adds	r7, #96	@ 0x60
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	4154494d 	.word	0x4154494d
 8008bf0:	20003040 	.word	0x20003040
 8008bf4:	2000303c 	.word	0x2000303c
 8008bf8:	20003038 	.word	0x20003038
 8008bfc:	20003044 	.word	0x20003044
 8008c00:	20003050 	.word	0x20003050
 8008c04:	20003054 	.word	0x20003054
 8008c08:	20002fa4 	.word	0x20002fa4

08008c0c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	@ 0x28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c24:	2302      	movs	r3, #2
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c28:	e029      	b.n	8008c7e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce4 <_txe_byte_allocate+0xd8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d002      	beq.n	8008c3a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c34:	2302      	movs	r3, #2
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c38:	e021      	b.n	8008c7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8008c40:	2303      	movs	r3, #3
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c44:	e01b      	b.n	8008c7e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008c4c:	2305      	movs	r3, #5
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c50:	e015      	b.n	8008c7e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d902      	bls.n	8008c62 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008c5c:	2305      	movs	r3, #5
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c60:	e00d      	b.n	8008c7e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c68:	f3ef 8305 	mrs	r3, IPSR
 8008c6c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008c6e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008c70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce8 <_txe_byte_allocate+0xdc>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d108      	bne.n	8008c96 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008c84:	4b19      	ldr	r3, [pc, #100]	@ (8008cec <_txe_byte_allocate+0xe0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <_txe_byte_allocate+0xe4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d101      	bne.n	8008c96 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008c92:	2313      	movs	r3, #19
 8008c94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d114      	bne.n	8008cc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c9c:	f3ef 8305 	mrs	r3, IPSR
 8008ca0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008ca2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008ca4:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <_txe_byte_allocate+0xdc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008cae:	f3ef 8305 	mrs	r3, IPSR
 8008cb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008cb4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce8 <_txe_byte_allocate+0xdc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008cc0:	d201      	bcs.n	8008cc6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008cc2:	2313      	movs	r3, #19
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7fd fd96 	bl	8006804 <_tx_byte_allocate>
 8008cd8:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3728      	adds	r7, #40	@ 0x28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	42595445 	.word	0x42595445
 8008ce8:	2000000c 	.word	0x2000000c
 8008cec:	20002f0c 	.word	0x20002f0c
 8008cf0:	20003054 	.word	0x20003054

08008cf4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b092      	sub	sp, #72	@ 0x48
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008d02:	2300      	movs	r3, #0
 8008d04:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d10:	e075      	b.n	8008dfe <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8008d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d14:	2b34      	cmp	r3, #52	@ 0x34
 8008d16:	d002      	beq.n	8008d1e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d1c:	e06f      	b.n	8008dfe <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8008d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d28:	b672      	cpsid	i
    return(int_posture);
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008d2c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e1c <_txe_byte_pool_create+0x128>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	4a39      	ldr	r2, [pc, #228]	@ (8008e1c <_txe_byte_pool_create+0x128>)
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008d44:	4b36      	ldr	r3, [pc, #216]	@ (8008e20 <_txe_byte_pool_create+0x12c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d4e:	e009      	b.n	8008d64 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d00b      	beq.n	8008d70 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d60:	3301      	adds	r3, #1
 8008d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d64:	4b2f      	ldr	r3, [pc, #188]	@ (8008e24 <_txe_byte_pool_create+0x130>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d3f0      	bcc.n	8008d50 <_txe_byte_pool_create+0x5c>
 8008d6e:	e000      	b.n	8008d72 <_txe_byte_pool_create+0x7e>
                break;
 8008d70:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d72:	f3ef 8310 	mrs	r3, PRIMASK
 8008d76:	623b      	str	r3, [r7, #32]
    return(posture);
 8008d78:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008d7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d7c:	b672      	cpsid	i
    return(int_posture);
 8008d7e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008d80:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008d82:	4b26      	ldr	r3, [pc, #152]	@ (8008e1c <_txe_byte_pool_create+0x128>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	4a24      	ldr	r2, [pc, #144]	@ (8008e1c <_txe_byte_pool_create+0x128>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	f383 8810 	msr	PRIMASK, r3
}
 8008d96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008d98:	f7ff fa22 	bl	80081e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d102      	bne.n	8008daa <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008da4:	2302      	movs	r3, #2
 8008da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da8:	e029      	b.n	8008dfe <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008db0:	2303      	movs	r3, #3
 8008db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db4:	e023      	b.n	8008dfe <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b63      	cmp	r3, #99	@ 0x63
 8008dba:	d802      	bhi.n	8008dc2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008dbc:	2305      	movs	r3, #5
 8008dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dc0:	e01d      	b.n	8008dfe <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008dc2:	4b19      	ldr	r3, [pc, #100]	@ (8008e28 <_txe_byte_pool_create+0x134>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <_txe_byte_pool_create+0x138>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d101      	bne.n	8008dd4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008dd0:	2313      	movs	r3, #19
 8008dd2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008dd4:	f3ef 8305 	mrs	r3, IPSR
 8008dd8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008dda:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008ddc:	4b14      	ldr	r3, [pc, #80]	@ (8008e30 <_txe_byte_pool_create+0x13c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008de6:	f3ef 8305 	mrs	r3, IPSR
 8008dea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008dec:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008dee:	4b10      	ldr	r3, [pc, #64]	@ (8008e30 <_txe_byte_pool_create+0x13c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008df8:	d201      	bcs.n	8008dfe <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008dfa:	2313      	movs	r3, #19
 8008dfc:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7fd fe3c 	bl	8006a88 <_tx_byte_pool_create>
 8008e10:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8008e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3748      	adds	r7, #72	@ 0x48
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20002fa4 	.word	0x20002fa4
 8008e20:	20002efc 	.word	0x20002efc
 8008e24:	20002f00 	.word	0x20002f00
 8008e28:	20002f0c 	.word	0x20002f0c
 8008e2c:	20003054 	.word	0x20003054
 8008e30:	2000000c 	.word	0x2000000c

08008e34 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b092      	sub	sp, #72	@ 0x48
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008e42:	2300      	movs	r3, #0
 8008e44:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008e4c:	231c      	movs	r3, #28
 8008e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e50:	e053      	b.n	8008efa <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b34      	cmp	r3, #52	@ 0x34
 8008e56:	d002      	beq.n	8008e5e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008e58:	231c      	movs	r3, #28
 8008e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e5c:	e04d      	b.n	8008efa <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8008e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e68:	b672      	cpsid	i
    return(int_posture);
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008e6c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8008f58 <_txe_mutex_create+0x124>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a38      	ldr	r2, [pc, #224]	@ (8008f58 <_txe_mutex_create+0x124>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	f383 8810 	msr	PRIMASK, r3
}
 8008e82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8008e84:	4b35      	ldr	r3, [pc, #212]	@ (8008f5c <_txe_mutex_create+0x128>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e8e:	e009      	b.n	8008ea4 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d00b      	beq.n	8008eb0 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8008f60 <_txe_mutex_create+0x12c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3f0      	bcc.n	8008e90 <_txe_mutex_create+0x5c>
 8008eae:	e000      	b.n	8008eb2 <_txe_mutex_create+0x7e>
                break;
 8008eb0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb6:	623b      	str	r3, [r7, #32]
    return(posture);
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008eba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ebc:	b672      	cpsid	i
    return(int_posture);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008ec0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008ec2:	4b25      	ldr	r3, [pc, #148]	@ (8008f58 <_txe_mutex_create+0x124>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	4a23      	ldr	r2, [pc, #140]	@ (8008f58 <_txe_mutex_create+0x124>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	f383 8810 	msr	PRIMASK, r3
}
 8008ed6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008ed8:	f7ff f982 	bl	80081e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d102      	bne.n	8008eea <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8008ee4:	231c      	movs	r3, #28
 8008ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee8:	e007      	b.n	8008efa <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d004      	beq.n	8008efa <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8008ef6:	231f      	movs	r3, #31
 8008ef8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11d      	bne.n	8008f3c <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008f00:	4b18      	ldr	r3, [pc, #96]	@ (8008f64 <_txe_mutex_create+0x130>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f08:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <_txe_mutex_create+0x134>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d101      	bne.n	8008f12 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008f0e:	2313      	movs	r3, #19
 8008f10:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f12:	f3ef 8305 	mrs	r3, IPSR
 8008f16:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008f18:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008f1a:	4b14      	ldr	r3, [pc, #80]	@ (8008f6c <_txe_mutex_create+0x138>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f24:	f3ef 8305 	mrs	r3, IPSR
 8008f28:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008f2a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f6c <_txe_mutex_create+0x138>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008f36:	d201      	bcs.n	8008f3c <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008f38:	2313      	movs	r3, #19
 8008f3a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68b9      	ldr	r1, [r7, #8]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7fe f870 	bl	800702c <_tx_mutex_create>
 8008f4c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3748      	adds	r7, #72	@ 0x48
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20002fa4 	.word	0x20002fa4
 8008f5c:	20002eec 	.word	0x20002eec
 8008f60:	20002ef0 	.word	0x20002ef0
 8008f64:	20002f0c 	.word	0x20002f0c
 8008f68:	20003054 	.word	0x20003054
 8008f6c:	2000000c 	.word	0x2000000c

08008f70 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f82:	231c      	movs	r3, #28
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e023      	b.n	8008fd0 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a13      	ldr	r2, [pc, #76]	@ (8008fdc <_txe_mutex_delete+0x6c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d002      	beq.n	8008f98 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f92:	231c      	movs	r3, #28
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	e01b      	b.n	8008fd0 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f98:	f3ef 8305 	mrs	r3, IPSR
 8008f9c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008f9e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <_txe_mutex_delete+0x70>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8008faa:	2313      	movs	r3, #19
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	e00f      	b.n	8008fd0 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <_txe_mutex_delete+0x74>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8008fe8 <_txe_mutex_delete+0x78>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d101      	bne.n	8008fc2 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008fbe:	2313      	movs	r3, #19
 8008fc0:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe f889 	bl	80070e0 <_tx_mutex_delete>
 8008fce:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8008fd0:	697b      	ldr	r3, [r7, #20]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	4d555445 	.word	0x4d555445
 8008fe0:	2000000c 	.word	0x2000000c
 8008fe4:	20002f0c 	.word	0x20002f0c
 8008fe8:	20003054 	.word	0x20003054

08008fec <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d102      	bne.n	8009006 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8009000:	231c      	movs	r3, #28
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e01f      	b.n	8009046 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a21      	ldr	r2, [pc, #132]	@ (8009090 <_txe_mutex_get+0xa4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d002      	beq.n	8009016 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8009010:	231c      	movs	r3, #28
 8009012:	61fb      	str	r3, [r7, #28]
 8009014:	e017      	b.n	8009046 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d014      	beq.n	8009046 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800901c:	f3ef 8305 	mrs	r3, IPSR
 8009020:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009022:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009024:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <_txe_mutex_get+0xa8>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4313      	orrs	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800902e:	2304      	movs	r3, #4
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	e008      	b.n	8009046 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8009034:	4b18      	ldr	r3, [pc, #96]	@ (8009098 <_txe_mutex_get+0xac>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	4a17      	ldr	r2, [pc, #92]	@ (800909c <_txe_mutex_get+0xb0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d101      	bne.n	8009046 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8009042:	2304      	movs	r3, #4
 8009044:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d114      	bne.n	8009076 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800904c:	f3ef 8305 	mrs	r3, IPSR
 8009050:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009052:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009054:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <_txe_mutex_get+0xa8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4313      	orrs	r3, r2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800905e:	f3ef 8305 	mrs	r3, IPSR
 8009062:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8009064:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009066:	4b0b      	ldr	r3, [pc, #44]	@ (8009094 <_txe_mutex_get+0xa8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4313      	orrs	r3, r2
 800906c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009070:	d201      	bcs.n	8009076 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009072:	2313      	movs	r3, #19
 8009074:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fe f8d8 	bl	8007234 <_tx_mutex_get>
 8009084:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8009086:	69fb      	ldr	r3, [r7, #28]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	4d555445 	.word	0x4d555445
 8009094:	2000000c 	.word	0x2000000c
 8009098:	20002f0c 	.word	0x20002f0c
 800909c:	20003054 	.word	0x20003054

080090a0 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80090b2:	231c      	movs	r3, #28
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e01c      	b.n	80090f2 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a13      	ldr	r2, [pc, #76]	@ (800910c <_txe_mutex_put+0x6c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d002      	beq.n	80090c8 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80090c2:	231c      	movs	r3, #28
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e014      	b.n	80090f2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80090c8:	f3ef 8305 	mrs	r3, IPSR
 80090cc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80090ce:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80090d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009110 <_txe_mutex_put+0x70>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00b      	beq.n	80090f2 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80090da:	f3ef 8305 	mrs	r3, IPSR
 80090de:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80090e0:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80090e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <_txe_mutex_put+0x70>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80090ec:	d201      	bcs.n	80090f2 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80090ee:	2313      	movs	r3, #19
 80090f0:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7fe fb13 	bl	8007724 <_tx_mutex_put>
 80090fe:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009100:	697b      	ldr	r3, [r7, #20]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	4d555445 	.word	0x4d555445
 8009110:	2000000c 	.word	0x2000000c

08009114 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b092      	sub	sp, #72	@ 0x48
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009122:	2300      	movs	r3, #0
 8009124:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800912c:	230c      	movs	r3, #12
 800912e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009130:	e054      	b.n	80091dc <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b1c      	cmp	r3, #28
 8009136:	d002      	beq.n	800913e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009138:	230c      	movs	r3, #12
 800913a:	647b      	str	r3, [r7, #68]	@ 0x44
 800913c:	e04e      	b.n	80091dc <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800913e:	f3ef 8310 	mrs	r3, PRIMASK
 8009142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8009144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8009146:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009148:	b672      	cpsid	i
    return(int_posture);
 800914a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800914c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800914e:	4b36      	ldr	r3, [pc, #216]	@ (8009228 <_txe_semaphore_create+0x114>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a34      	ldr	r2, [pc, #208]	@ (8009228 <_txe_semaphore_create+0x114>)
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8009164:	4b31      	ldr	r3, [pc, #196]	@ (800922c <_txe_semaphore_create+0x118>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800916a:	2300      	movs	r3, #0
 800916c:	643b      	str	r3, [r7, #64]	@ 0x40
 800916e:	e009      	b.n	8009184 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009174:	429a      	cmp	r2, r3
 8009176:	d00b      	beq.n	8009190 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8009178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800917e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009180:	3301      	adds	r3, #1
 8009182:	643b      	str	r3, [r7, #64]	@ 0x40
 8009184:	4b2a      	ldr	r3, [pc, #168]	@ (8009230 <_txe_semaphore_create+0x11c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800918a:	429a      	cmp	r2, r3
 800918c:	d3f0      	bcc.n	8009170 <_txe_semaphore_create+0x5c>
 800918e:	e000      	b.n	8009192 <_txe_semaphore_create+0x7e>
                break;
 8009190:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009192:	f3ef 8310 	mrs	r3, PRIMASK
 8009196:	623b      	str	r3, [r7, #32]
    return(posture);
 8009198:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800919a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800919c:	b672      	cpsid	i
    return(int_posture);
 800919e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80091a0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80091a2:	4b21      	ldr	r3, [pc, #132]	@ (8009228 <_txe_semaphore_create+0x114>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009228 <_txe_semaphore_create+0x114>)
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	f383 8810 	msr	PRIMASK, r3
}
 80091b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80091b8:	f7ff f812 	bl	80081e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d102      	bne.n	80091ca <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80091c4:	230c      	movs	r3, #12
 80091c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091c8:	e008      	b.n	80091dc <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80091ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009234 <_txe_semaphore_create+0x120>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80091d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d2:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <_txe_semaphore_create+0x124>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d101      	bne.n	80091dc <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80091d8:	2313      	movs	r3, #19
 80091da:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80091dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d114      	bne.n	800920c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091e2:	f3ef 8305 	mrs	r3, IPSR
 80091e6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80091e8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80091ea:	4b14      	ldr	r3, [pc, #80]	@ (800923c <_txe_semaphore_create+0x128>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091f4:	f3ef 8305 	mrs	r3, IPSR
 80091f8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80091fa:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80091fc:	4b0f      	ldr	r3, [pc, #60]	@ (800923c <_txe_semaphore_create+0x128>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4313      	orrs	r3, r2
 8009202:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009206:	d201      	bcs.n	800920c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009208:	2313      	movs	r3, #19
 800920a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800920c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920e:	2b00      	cmp	r3, #0
 8009210:	d105      	bne.n	800921e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7fe fcaa 	bl	8007b70 <_tx_semaphore_create>
 800921c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800921e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009220:	4618      	mov	r0, r3
 8009222:	3748      	adds	r7, #72	@ 0x48
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20002fa4 	.word	0x20002fa4
 800922c:	20002ed4 	.word	0x20002ed4
 8009230:	20002ed8 	.word	0x20002ed8
 8009234:	20002f0c 	.word	0x20002f0c
 8009238:	20003054 	.word	0x20003054
 800923c:	2000000c 	.word	0x2000000c

08009240 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d102      	bne.n	8009258 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009252:	230c      	movs	r3, #12
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	e01c      	b.n	8009292 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a13      	ldr	r2, [pc, #76]	@ (80092ac <_txe_semaphore_delete+0x6c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d002      	beq.n	8009268 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009262:	230c      	movs	r3, #12
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e014      	b.n	8009292 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009268:	f3ef 8305 	mrs	r3, IPSR
 800926c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800926e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009270:	4b0f      	ldr	r3, [pc, #60]	@ (80092b0 <_txe_semaphore_delete+0x70>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4313      	orrs	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800927a:	2313      	movs	r3, #19
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	e008      	b.n	8009292 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009280:	4b0c      	ldr	r3, [pc, #48]	@ (80092b4 <_txe_semaphore_delete+0x74>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	4a0b      	ldr	r2, [pc, #44]	@ (80092b8 <_txe_semaphore_delete+0x78>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d101      	bne.n	8009292 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800928e:	2313      	movs	r3, #19
 8009290:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe fcbb 	bl	8007c14 <_tx_semaphore_delete>
 800929e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80092a0:	697b      	ldr	r3, [r7, #20]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	53454d41 	.word	0x53454d41
 80092b0:	2000000c 	.word	0x2000000c
 80092b4:	20002f0c 	.word	0x20002f0c
 80092b8:	20003054 	.word	0x20003054

080092bc <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80092ca:	230c      	movs	r3, #12
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e00b      	b.n	80092e8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a07      	ldr	r2, [pc, #28]	@ (80092f4 <_txe_semaphore_put+0x38>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d002      	beq.n	80092e0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80092da:	230c      	movs	r3, #12
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	e003      	b.n	80092e8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fe fd27 	bl	8007d34 <_tx_semaphore_put>
 80092e6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	53454d41 	.word	0x53454d41

080092f8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b09a      	sub	sp, #104	@ 0x68
 80092fc:	af06      	add	r7, sp, #24
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009306:	2300      	movs	r3, #0
 8009308:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009310:	230e      	movs	r3, #14
 8009312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009314:	e0bb      	b.n	800948e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8009316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009318:	2bb0      	cmp	r3, #176	@ 0xb0
 800931a:	d002      	beq.n	8009322 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800931c:	230e      	movs	r3, #14
 800931e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009320:	e0b5      	b.n	800948e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009322:	f3ef 8310 	mrs	r3, PRIMASK
 8009326:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800932a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800932c:	b672      	cpsid	i
    return(int_posture);
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009330:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009332:	4b64      	ldr	r3, [pc, #400]	@ (80094c4 <_txe_thread_create+0x1cc>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	4a62      	ldr	r2, [pc, #392]	@ (80094c4 <_txe_thread_create+0x1cc>)
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	f383 8810 	msr	PRIMASK, r3
}
 8009346:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8009348:	2300      	movs	r3, #0
 800934a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800934c:	4b5e      	ldr	r3, [pc, #376]	@ (80094c8 <_txe_thread_create+0x1d0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009354:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009358:	3b01      	subs	r3, #1
 800935a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800935c:	4413      	add	r3, r2
 800935e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009364:	2300      	movs	r3, #0
 8009366:	647b      	str	r3, [r7, #68]	@ 0x44
 8009368:	e02b      	b.n	80093c2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800936e:	429a      	cmp	r2, r3
 8009370:	d101      	bne.n	8009376 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8009372:	2301      	movs	r3, #1
 8009374:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8009376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009378:	2b01      	cmp	r3, #1
 800937a:	d028      	beq.n	80093ce <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800937c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009382:	429a      	cmp	r2, r3
 8009384:	d308      	bcc.n	8009398 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800938c:	429a      	cmp	r2, r3
 800938e:	d203      	bcs.n	8009398 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800939e:	429a      	cmp	r2, r3
 80093a0:	d308      	bcc.n	80093b4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80093a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d203      	bcs.n	80093b4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80093b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ba:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80093bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093be:	3301      	adds	r3, #1
 80093c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c2:	4b42      	ldr	r3, [pc, #264]	@ (80094cc <_txe_thread_create+0x1d4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3ce      	bcc.n	800936a <_txe_thread_create+0x72>
 80093cc:	e000      	b.n	80093d0 <_txe_thread_create+0xd8>
                break;
 80093ce:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093d0:	f3ef 8310 	mrs	r3, PRIMASK
 80093d4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80093d6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80093d8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093da:	b672      	cpsid	i
    return(int_posture);
 80093dc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80093e0:	4b38      	ldr	r3, [pc, #224]	@ (80094c4 <_txe_thread_create+0x1cc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	4a37      	ldr	r2, [pc, #220]	@ (80094c4 <_txe_thread_create+0x1cc>)
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	f383 8810 	msr	PRIMASK, r3
}
 80093f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80093f6:	f7fe fef3 	bl	80081e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093fe:	429a      	cmp	r2, r3
 8009400:	d102      	bne.n	8009408 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8009402:	230e      	movs	r3, #14
 8009404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009406:	e042      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8009408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800940a:	2b00      	cmp	r3, #0
 800940c:	d102      	bne.n	8009414 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800940e:	2303      	movs	r3, #3
 8009410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009412:	e03c      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800941a:	2303      	movs	r3, #3
 800941c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800941e:	e036      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009422:	2bc7      	cmp	r3, #199	@ 0xc7
 8009424:	d802      	bhi.n	800942c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8009426:	2305      	movs	r3, #5
 8009428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800942a:	e030      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800942c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800942e:	2b1f      	cmp	r3, #31
 8009430:	d902      	bls.n	8009438 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8009432:	230f      	movs	r3, #15
 8009434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009436:	e02a      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8009438:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800943a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800943c:	429a      	cmp	r2, r3
 800943e:	d902      	bls.n	8009446 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009440:	2318      	movs	r3, #24
 8009442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009444:	e023      	b.n	800948e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8009446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009448:	2b01      	cmp	r3, #1
 800944a:	d902      	bls.n	8009452 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800944c:	2310      	movs	r3, #16
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009450:	e01d      	b.n	800948e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8009452:	4b1f      	ldr	r3, [pc, #124]	@ (80094d0 <_txe_thread_create+0x1d8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	4a1e      	ldr	r2, [pc, #120]	@ (80094d4 <_txe_thread_create+0x1dc>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d101      	bne.n	8009464 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009460:	2313      	movs	r3, #19
 8009462:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009464:	f3ef 8305 	mrs	r3, IPSR
 8009468:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800946a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800946c:	4b1a      	ldr	r3, [pc, #104]	@ (80094d8 <_txe_thread_create+0x1e0>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4313      	orrs	r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009476:	f3ef 8305 	mrs	r3, IPSR
 800947a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800947c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800947e:	4b16      	ldr	r3, [pc, #88]	@ (80094d8 <_txe_thread_create+0x1e0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4313      	orrs	r3, r2
 8009484:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009488:	d201      	bcs.n	800948e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800948a:	2313      	movs	r3, #19
 800948c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800948e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d112      	bne.n	80094ba <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8009494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009496:	9305      	str	r3, [sp, #20]
 8009498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094a2:	9302      	str	r3, [sp, #8]
 80094a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7fe fc96 	bl	8007de4 <_tx_thread_create>
 80094b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80094ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3750      	adds	r7, #80	@ 0x50
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20002fa4 	.word	0x20002fa4
 80094c8:	20002f14 	.word	0x20002f14
 80094cc:	20002f18 	.word	0x20002f18
 80094d0:	20002f0c 	.word	0x20002f0c
 80094d4:	20003054 	.word	0x20003054
 80094d8:	2000000c 	.word	0x2000000c

080094dc <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80094e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009554 <_ux_device_stack_alternate_setting_get+0x78>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3320      	adds	r3, #32
 80094ea:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d129      	bne.n	8009548 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094fa:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 80094fc:	e021      	b.n	8009542 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	7b9b      	ldrb	r3, [r3, #14]
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4293      	cmp	r3, r2
 8009508:	d118      	bne.n	800953c <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	3318      	adds	r3, #24
 800950e:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	3320      	adds	r3, #32
 8009514:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800951e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2201      	movs	r2, #1
 8009524:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2203      	movs	r2, #3
 800952a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800952c:	2201      	movs	r2, #1
 800952e:	2101      	movs	r1, #1
 8009530:	6938      	ldr	r0, [r7, #16]
 8009532:	f001 fccb 	bl	800aecc <_ux_device_stack_transfer_request>
 8009536:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	e006      	b.n	800954a <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1da      	bne.n	80094fe <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8009548:	23ff      	movs	r3, #255	@ 0xff
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20003514 	.word	0x20003514

08009558 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b0a4      	sub	sp, #144	@ 0x90
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009562:	4bb5      	ldr	r3, [pc, #724]	@ (8009838 <_ux_device_stack_alternate_setting_set+0x2e0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3320      	adds	r3, #32
 8009568:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800956a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b03      	cmp	r3, #3
 8009570:	d001      	beq.n	8009576 <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8009572:	2354      	movs	r3, #84	@ 0x54
 8009574:	e1ef      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8009576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800957c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 8009580:	e00b      	b.n	800959a <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8009582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009586:	7b9b      	ldrb	r3, [r3, #14]
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4293      	cmp	r3, r2
 800958e:	d009      	beq.n	80095a4 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8009590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 800959a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1ef      	bne.n	8009582 <_ux_device_stack_alternate_setting_set+0x2a>
 80095a2:	e000      	b.n	80095a6 <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 80095a4:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 80095a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 80095ae:	2252      	movs	r2, #82	@ 0x52
 80095b0:	2107      	movs	r1, #7
 80095b2:	2002      	movs	r0, #2
 80095b4:	f001 fd14 	bl	800afe0 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 80095b8:	2352      	movs	r3, #82	@ 0x52
 80095ba:	e1cc      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 80095bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095c0:	7bdb      	ldrb	r3, [r3, #15]
 80095c2:	461a      	mov	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d101      	bne.n	80095ce <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 80095ca:	2300      	movs	r3, #0
 80095cc:	e1c3      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 80095ce:	4b9a      	ldr	r3, [pc, #616]	@ (8009838 <_ux_device_stack_alternate_setting_set+0x2e0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80095d4:	4b98      	ldr	r3, [pc, #608]	@ (8009838 <_ux_device_stack_alternate_setting_set+0x2e0>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80095e0:	4b95      	ldr	r3, [pc, #596]	@ (8009838 <_ux_device_stack_alternate_setting_set+0x2e0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 80095ec:	e1ad      	b.n	800994a <_ux_device_stack_alternate_setting_set+0x3f2>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 80095ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 80095f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8009600:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009604:	2b02      	cmp	r3, #2
 8009606:	f040 8194 	bne.w	8009932 <_ux_device_stack_alternate_setting_set+0x3da>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800960a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800960e:	2208      	movs	r2, #8
 8009610:	498a      	ldr	r1, [pc, #552]	@ (800983c <_ux_device_stack_alternate_setting_set+0x2e4>)
 8009612:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009616:	f001 fddd 	bl	800b1d4 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800961a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800961e:	461a      	mov	r2, r3
 8009620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009626:	429a      	cmp	r2, r3
 8009628:	f040 8183 	bne.w	8009932 <_ux_device_stack_alternate_setting_set+0x3da>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800962c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 8009634:	e177      	b.n	8009926 <_ux_device_stack_alternate_setting_set+0x3ce>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 8009636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800963e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8009648:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800964c:	2b04      	cmp	r3, #4
 800964e:	f040 815e 	bne.w	800990e <_ux_device_stack_alternate_setting_set+0x3b6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 8009652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009656:	2209      	movs	r2, #9
 8009658:	4979      	ldr	r1, [pc, #484]	@ (8009840 <_ux_device_stack_alternate_setting_set+0x2e8>)
 800965a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800965e:	f001 fdb9 	bl	800b1d4 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8009662:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4293      	cmp	r3, r2
 800966c:	f040 814f 	bne.w	800990e <_ux_device_stack_alternate_setting_set+0x3b6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8009670:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009674:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	4293      	cmp	r3, r2
 800967a:	f040 8148 	bne.w	800990e <_ux_device_stack_alternate_setting_set+0x3b6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800967e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 8009688:	e026      	b.n	80096d8 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800968a:	2126      	movs	r1, #38	@ 0x26
 800968c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8009690:	f001 fc0a 	bl	800aea8 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8009694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800969c:	210f      	movs	r1, #15
 800969e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096a0:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80096a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80096aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 80096b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096b6:	2200      	movs	r2, #0
 80096b8:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80096ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096be:	2200      	movs	r2, #0
 80096c0:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80096c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096c6:	2200      	movs	r2, #0
 80096c8:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80096ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096ce:	2200      	movs	r2, #0
 80096d0:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 80096d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 80096d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1d4      	bne.n	800968a <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 80096e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096e4:	2200      	movs	r2, #0
 80096e6:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 80096e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 80096fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009706:	4413      	add	r3, r2
 8009708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800970c:	e0c9      	b.n	80098a2 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800970e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 8009716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 8009720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009724:	2b05      	cmp	r3, #5
 8009726:	d009      	beq.n	800973c <_ux_device_stack_alternate_setting_set+0x1e4>
 8009728:	2b05      	cmp	r3, #5
 800972a:	f300 80ad 	bgt.w	8009888 <_ux_device_stack_alternate_setting_set+0x330>
 800972e:	2b02      	cmp	r3, #2
 8009730:	f000 80a6 	beq.w	8009880 <_ux_device_stack_alternate_setting_set+0x328>
 8009734:	2b04      	cmp	r3, #4
 8009736:	f000 80a3 	beq.w	8009880 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800973a:	e0a5      	b.n	8009888 <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800973c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800973e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8009746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009748:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800974c:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800974e:	e011      	b.n	8009774 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8009750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d104      	bne.n	8009764 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800975a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
                                            break;
 8009762:	e00a      	b.n	800977a <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 8009764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009768:	3380      	adds	r3, #128	@ 0x80
 800976a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 800976e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009770:	3b01      	subs	r3, #1
 8009772:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 8009774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1ea      	bne.n	8009750 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 800977a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 8009780:	2312      	movs	r3, #18
 8009782:	e0e8      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8009784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009788:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800978a:	2206      	movs	r2, #6
 800978c:	492d      	ldr	r1, [pc, #180]	@ (8009844 <_ux_device_stack_alternate_setting_set+0x2ec>)
 800978e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009792:	f001 fd1f 	bl	800b1d4 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800979a:	3320      	adds	r3, #32
 800979c:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800979e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097a2:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 80097a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097a8:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80097aa:	4b23      	ldr	r3, [pc, #140]	@ (8009838 <_ux_device_stack_alternate_setting_set+0x2e0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d11a      	bne.n	80097ec <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 80097b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097ba:	7bdb      	ldrb	r3, [r3, #15]
 80097bc:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d013      	beq.n	80097ec <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80097c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097c8:	8a1b      	ldrh	r3, [r3, #16]
 80097ca:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80097ce:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 80097d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80097d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d8:	0adb      	lsrs	r3, r3, #11
 80097da:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 80097dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097de:	3301      	adds	r3, #1
 80097e0:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 80097e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 80097ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80097f0:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 80097f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097f8:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80097fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8009802:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009806:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800980a:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800980c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009810:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009812:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8009814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800981c:	210e      	movs	r1, #14
 800981e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009820:	4798      	blx	r3
 8009822:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 8009824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800982a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
                                        return(status);
 8009832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009834:	e08f      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>
 8009836:	bf00      	nop
 8009838:	20003514 	.word	0x20003514
 800983c:	20000040 	.word	0x20000040
 8009840:	20000048 	.word	0x20000048
 8009844:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8009848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8009852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800985a:	61da      	str	r2, [r3, #28]
                                    break;
 800985c:	e015      	b.n	800988a <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800985e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8009866:	e002      	b.n	800986e <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8009868:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800986e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f8      	bne.n	8009868 <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8009876:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009878:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800987c:	615a      	str	r2, [r3, #20]
                                    break;
 800987e:	e004      	b.n	800988a <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 8009880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 8009886:	e000      	b.n	800988a <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 8009888:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800988a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800988e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 8009896:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800989a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800989c:	4413      	add	r3, r2
 800989e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 80098a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f47f af31 	bne.w	800970e <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 80098ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098b0:	330c      	adds	r3, #12
 80098b2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80098b6:	220c      	movs	r2, #12
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 ff2f 	bl	800b71c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80098be:	4b28      	ldr	r3, [pc, #160]	@ (8009960 <_ux_device_stack_alternate_setting_set+0x408>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098c6:	7b9b      	ldrb	r3, [r3, #14]
 80098c8:	3344      	adds	r3, #68	@ 0x44
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 80098d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <_ux_device_stack_alternate_setting_set+0x388>
 80098d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <_ux_device_stack_alternate_setting_set+0x38c>
                            {

                                return (UX_NO_CLASS_MATCH);
 80098e0:	2357      	movs	r3, #87	@ 0x57
 80098e2:	e038      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 80098e4:	2306      	movs	r3, #6
 80098e6:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 80098e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098ec:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 80098ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 80098f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80098f8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 80098fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009900:	f107 020c 	add.w	r2, r7, #12
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800990a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800990c:	e023      	b.n	8009956 <_ux_device_stack_alternate_setting_set+0x3fe>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800990e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800991a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800991e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009920:	4413      	add	r3, r2
 8009922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 8009926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800992a:	2b00      	cmp	r3, #0
 800992c:	f47f ae83 	bne.w	8009636 <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 8009930:	e010      	b.n	8009954 <_ux_device_stack_alternate_setting_set+0x3fc>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8009932:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800993e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009944:	4413      	add	r3, r2
 8009946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 800994a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800994e:	2b00      	cmp	r3, #0
 8009950:	f47f ae4d 	bne.w	80095ee <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8009954:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 8009956:	4618      	mov	r0, r3
 8009958:	3790      	adds	r7, #144	@ 0x90
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20003514 	.word	0x20003514

08009964 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b092      	sub	sp, #72	@ 0x48
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	223f      	movs	r2, #63	@ 0x3f
 800997c:	4619      	mov	r1, r3
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f002 f81b 	bl	800b9ba <_ux_utility_string_length_check>
 8009984:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 8009986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <_ux_device_stack_class_register+0x2c>
        return(status);
 800998c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998e:	e035      	b.n	80099fc <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8009990:	4b1c      	ldr	r3, [pc, #112]	@ (8009a04 <_ux_device_stack_class_register+0xa0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009998:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800999a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800999c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d12b      	bne.n	80099fa <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 80099a2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	3301      	adds	r3, #1
 80099a8:	461a      	mov	r2, r3
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	f001 feb6 	bl	800b71c <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 80099b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 80099b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099ba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 80099be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 80099c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80099ce:	2305      	movs	r3, #5
 80099d0:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 80099d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099d4:	63bb      	str	r3, [r7, #56]	@ 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 80099d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 80099da:	f107 0214 	add.w	r2, r7, #20
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 80099e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <_ux_device_stack_class_register+0x8c>
                return(status);
 80099ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ee:	e005      	b.n	80099fc <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 80099f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f2:	2201      	movs	r2, #1
 80099f4:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 80099f6:	2300      	movs	r3, #0
 80099f8:	e000      	b.n	80099fc <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80099fa:	2312      	movs	r3, #18
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3748      	adds	r7, #72	@ 0x48
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20003514 	.word	0x20003514

08009a08 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	@ 0x28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009a14:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac4 <_ux_device_stack_clear_feature+0xbc>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ac4 <_ux_device_stack_clear_feature+0xbc>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3320      	adds	r3, #32
 8009a20:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	3318      	adds	r3, #24
 8009a26:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <_ux_device_stack_clear_feature+0x30>
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d011      	beq.n	8009a5a <_ux_device_stack_clear_feature+0x52>
 8009a36:	e036      	b.n	8009aa6 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d13b      	bne.n	8009ab6 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8009a3e:	4b21      	ldr	r3, [pc, #132]	@ (8009ac4 <_ux_device_stack_clear_feature+0xbc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8009a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac4 <_ux_device_stack_clear_feature+0xbc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8009a54:	e02f      	b.n	8009ab6 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8009a56:	2354      	movs	r3, #84	@ 0x54
 8009a58:	e02f      	b.n	8009aba <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 8009a62:	e01d      	b.n	8009aa0 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8009a6a:	e013      	b.n	8009a94 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	7b9b      	ldrb	r3, [r3, #14]
 8009a70:	461a      	mov	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d10a      	bne.n	8009a8e <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	6a3a      	ldr	r2, [r7, #32]
 8009a7e:	2110      	movs	r1, #16
 8009a80:	69f8      	ldr	r0, [r7, #28]
 8009a82:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e015      	b.n	8009aba <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e8      	bne.n	8009a6c <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1de      	bne.n	8009a64 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	2114      	movs	r1, #20
 8009aae:	69f8      	ldr	r0, [r7, #28]
 8009ab0:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e001      	b.n	8009aba <_ux_device_stack_clear_feature+0xb2>
        break;
 8009ab6:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	@ 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20003514 	.word	0x20003514

08009ac8 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009ace:	4b0f      	ldr	r3, [pc, #60]	@ (8009b0c <_ux_device_stack_configuration_get+0x44>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3320      	adds	r3, #32
 8009ad4:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3318      	adds	r3, #24
 8009ada:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	3320      	adds	r3, #32
 8009ae0:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8009aec:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009aee:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2203      	movs	r2, #3
 8009af4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8009af6:	2201      	movs	r2, #1
 8009af8:	2101      	movs	r1, #1
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f9e6 	bl	800aecc <_ux_device_stack_transfer_request>
 8009b00:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 8009b02:	683b      	ldr	r3, [r7, #0]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20003514 	.word	0x20003514

08009b10 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b0a0      	sub	sp, #128	@ 0x80
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8009b18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	605a      	str	r2, [r3, #4]
 8009b22:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009b30:	4b84      	ldr	r3, [pc, #528]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009b36:	4b83      	ldr	r3, [pc, #524]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3320      	adds	r3, #32
 8009b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8009b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d101      	bne.n	8009b52 <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e139      	b.n	8009dc6 <_ux_device_stack_configuration_set+0x2b6>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8009b52:	4b7c      	ldr	r3, [pc, #496]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8009b5c:	4b79      	ldr	r3, [pc, #484]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b64:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8009b66:	e01f      	b.n	8009ba8 <_ux_device_stack_configuration_set+0x98>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009b68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8009b6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8009b76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d10c      	bne.n	8009b98 <_ux_device_stack_configuration_set+0x88>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8009b7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009b82:	2208      	movs	r2, #8
 8009b84:	4970      	ldr	r1, [pc, #448]	@ (8009d48 <_ux_device_stack_configuration_set+0x238>)
 8009b86:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009b88:	f001 fb24 	bl	800b1d4 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8009b8c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b90:	461a      	mov	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00b      	beq.n	8009bb0 <_ux_device_stack_configuration_set+0xa0>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 8009b98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8009ba0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ba4:	4413      	add	r3, r2
 8009ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 8009ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1dc      	bne.n	8009b68 <_ux_device_stack_configuration_set+0x58>
 8009bae:	e000      	b.n	8009bb2 <_ux_device_stack_configuration_set+0xa2>
                break;
 8009bb0:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8009bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <_ux_device_stack_configuration_set+0xb2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <_ux_device_stack_configuration_set+0xb2>
        return(UX_ERROR);
 8009bbe:	23ff      	movs	r3, #255	@ 0xff
 8009bc0:	e101      	b.n	8009dc6 <_ux_device_stack_configuration_set+0x2b6>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8009bc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d021      	beq.n	8009c10 <_ux_device_stack_configuration_set+0x100>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8009bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009bd2:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8009bd4:	e019      	b.n	8009c0a <_ux_device_stack_configuration_set+0xfa>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8009bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bdc:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8009bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8009be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009be6:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8009be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <_ux_device_stack_configuration_set+0xea>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8009bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf2:	f107 0208 	add.w	r2, r7, #8
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8009bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8009c00:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8009c02:	f000 ff0f 	bl	800aa24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8009c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c08:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 8009c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e2      	bne.n	8009bd6 <_ux_device_stack_configuration_set+0xc6>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8009c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8009c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8009c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	2201      	movs	r2, #1
 8009c24:	2113      	movs	r1, #19
 8009c26:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009c28:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <_ux_device_stack_configuration_set+0x124>
        return(UX_SUCCESS);
 8009c30:	2300      	movs	r3, #0
 8009c32:	e0c8      	b.n	8009dc6 <_ux_device_stack_configuration_set+0x2b6>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8009c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 8009c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c3e:	339c      	adds	r3, #156	@ 0x9c
    _ux_utility_descriptor_parse(device_framework,
 8009c40:	2208      	movs	r2, #8
 8009c42:	4941      	ldr	r1, [pc, #260]	@ (8009d48 <_ux_device_stack_configuration_set+0x238>)
 8009c44:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009c46:	f001 fac5 	bl	800b1d4 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8009c4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <_ux_device_stack_configuration_set+0x14a>
 8009c56:	2202      	movs	r2, #2
 8009c58:	e000      	b.n	8009c5c <_ux_device_stack_configuration_set+0x14c>
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4b39      	ldr	r3, [pc, #228]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8009c64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009c68:	115b      	asrs	r3, r3, #5
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4b35      	ldr	r3, [pc, #212]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f002 0201 	and.w	r2, r2, #1
 8009c74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 8009c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c7c:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8009c7e:	e094      	b.n	8009daa <_ux_device_stack_configuration_set+0x29a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8009c86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8009c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c92:	2b0b      	cmp	r3, #11
 8009c94:	d109      	bne.n	8009caa <_ux_device_stack_configuration_set+0x19a>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8009c9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8009ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ca4:	3303      	adds	r3, #3
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8009caa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d173      	bne.n	8009d9a <_ux_device_stack_configuration_set+0x28a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8009cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009cb6:	2209      	movs	r2, #9
 8009cb8:	4924      	ldr	r1, [pc, #144]	@ (8009d4c <_ux_device_stack_configuration_set+0x23c>)
 8009cba:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009cbc:	f001 fa8a 	bl	800b1d4 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8009cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d168      	bne.n	8009d9a <_ux_device_stack_configuration_set+0x28a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8009cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d140      	bne.n	8009d50 <_ux_device_stack_configuration_set+0x240>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8009cce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d122      	bne.n	8009d20 <_ux_device_stack_configuration_set+0x210>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8009cda:	4b1a      	ldr	r3, [pc, #104]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009ce2:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8009ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d122      	bne.n	8009d32 <_ux_device_stack_configuration_set+0x222>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009cec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d11a      	bne.n	8009d32 <_ux_device_stack_configuration_set+0x222>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8009cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cfe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d114      	bne.n	8009d32 <_ux_device_stack_configuration_set+0x222>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8009d08:	4b0e      	ldr	r3, [pc, #56]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009d10:	3344      	adds	r3, #68	@ 0x44
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d18:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 8009d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d1e:	e008      	b.n	8009d32 <_ux_device_stack_configuration_set+0x222>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8009d20:	4b08      	ldr	r3, [pc, #32]	@ (8009d44 <_ux_device_stack_configuration_set+0x234>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009d28:	3344      	adds	r3, #68	@ 0x44
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d30:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8009d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d34:	3b01      	subs	r3, #1
 8009d36:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8009d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d128      	bne.n	8009d90 <_ux_device_stack_configuration_set+0x280>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d42:	e025      	b.n	8009d90 <_ux_device_stack_configuration_set+0x280>
 8009d44:	20003514 	.word	0x20003514
 8009d48:	20000040 	.word	0x20000040
 8009d4c:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8009d50:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd0 <_ux_device_stack_configuration_set+0x2c0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009d58:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8009d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d116      	bne.n	8009d90 <_ux_device_stack_configuration_set+0x280>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009d62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009d66:	461a      	mov	r2, r3
 8009d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d10e      	bne.n	8009d90 <_ux_device_stack_configuration_set+0x280>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8009d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d74:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d108      	bne.n	8009d90 <_ux_device_stack_configuration_set+0x280>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8009d7e:	4b14      	ldr	r3, [pc, #80]	@ (8009dd0 <_ux_device_stack_configuration_set+0x2c0>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009d86:	3344      	adds	r3, #68	@ 0x44
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d8e:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8009d90:	2200      	movs	r2, #0
 8009d92:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009d94:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009d96:	f000 fe8d 	bl	800aab4 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8009d9a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009d9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8009da2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009da4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009da6:	4413      	add	r3, r2
 8009da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 8009daa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f47f af67 	bne.w	8009c80 <_ux_device_stack_configuration_set+0x170>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8009db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009db4:	2203      	movs	r2, #3
 8009db6:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8009db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	2113      	movs	r1, #19
 8009dc0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009dc2:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3780      	adds	r7, #128	@ 0x80
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20003514 	.word	0x20003514

08009dd4 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8009dd4:	b590      	push	{r4, r7, lr}
 8009dd6:	b09d      	sub	sp, #116	@ 0x74
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8009ddc:	23ff      	movs	r3, #255	@ 0xff
 8009dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009de0:	4b9c      	ldr	r3, [pc, #624]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009de6:	4b9b      	ldr	r3, [pc, #620]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3320      	adds	r3, #32
 8009dec:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 813b 	bne.w	800a06e <_ux_device_stack_control_request_process+0x29a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009dfe:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009e06:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3354      	adds	r3, #84	@ 0x54
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fdbc 	bl	800b98c <_ux_utility_short_get>
 8009e14:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3354      	adds	r3, #84	@ 0x54
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 fdb5 	bl	800b98c <_ux_utility_short_get>
 8009e22:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3354      	adds	r3, #84	@ 0x54
 8009e28:	3306      	adds	r3, #6
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fdae 	bl	800b98c <_ux_utility_short_get>
 8009e30:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8009e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e34:	2b06      	cmp	r3, #6
 8009e36:	d002      	beq.n	8009e3e <_ux_device_stack_control_request_process+0x6a>
 8009e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e3a:	2b07      	cmp	r3, #7
 8009e3c:	d10d      	bne.n	8009e5a <_ux_device_stack_control_request_process+0x86>
 8009e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8009e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e4c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8009e50:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8009e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e54:	f043 0320 	orr.w	r3, r3, #32
 8009e58:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8009e5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e60:	2b40      	cmp	r3, #64	@ 0x40
 8009e62:	d13a      	bne.n	8009eda <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8009e64:	4b7b      	ldr	r3, [pc, #492]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d034      	beq.n	8009eda <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8009e70:	4b78      	ldr	r3, [pc, #480]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8009e78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d12d      	bne.n	8009eda <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8009e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e82:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8009e84:	4b73      	ldr	r3, [pc, #460]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8d3 4180 	ldr.w	r4, [r3, #384]	@ 0x180
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f107 020c 	add.w	r2, r7, #12
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009e9e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009ea0:	47a0      	blx	r4
 8009ea2:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 8009ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d110      	bne.n	8009ecc <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eac:	3318      	adds	r3, #24
 8009eae:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eb2:	3320      	adds	r3, #32
 8009eb4:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2203      	movs	r2, #3
 8009eba:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f802 	bl	800aecc <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e0d1      	b.n	800a070 <_ux_device_stack_control_request_process+0x29c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8009ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ece:	3318      	adds	r3, #24
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 fb49 	bl	800a568 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e0ca      	b.n	800a070 <_ux_device_stack_control_request_process+0x29c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8009eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	d004      	beq.n	8009eee <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8009ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8009eea:	2b40      	cmp	r3, #64	@ 0x40
 8009eec:	d14f      	bne.n	8009f8e <_ux_device_stack_control_request_process+0x1ba>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8009eee:	2304      	movs	r3, #4
 8009ef0:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ef6:	e03b      	b.n	8009f70 <_ux_device_stack_control_request_process+0x19c>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8009ef8:	4b56      	ldr	r3, [pc, #344]	@ (800a054 <_ux_device_stack_control_request_process+0x280>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009efe:	3344      	adds	r3, #68	@ 0x44
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8009f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d02a      	beq.n	8009f64 <_ux_device_stack_control_request_process+0x190>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8009f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d118      	bne.n	8009f4a <_ux_device_stack_control_request_process+0x176>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8009f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1a:	2ba1      	cmp	r3, #161	@ 0xa1
 8009f1c:	d110      	bne.n	8009f40 <_ux_device_stack_control_request_process+0x16c>
 8009f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10d      	bne.n	8009f40 <_ux_device_stack_control_request_process+0x16c>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 8009f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f26:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009f2a:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d107      	bne.n	8009f40 <_ux_device_stack_control_request_process+0x16c>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009f36:	461a      	mov	r2, r3
 8009f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d005      	beq.n	8009f4a <_ux_device_stack_control_request_process+0x176>
                            continue;
 8009f3e:	e014      	b.n	8009f6a <_ux_device_stack_control_request_process+0x196>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 8009f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d10e      	bne.n	8009f68 <_ux_device_stack_control_request_process+0x194>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8009f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f52:	f107 0210 	add.w	r2, r7, #16
 8009f56:	4610      	mov	r0, r2
 8009f58:	4798      	blx	r3
 8009f5a:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8009f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <_ux_device_stack_control_request_process+0x1a4>
 8009f62:	e002      	b.n	8009f6a <_ux_device_stack_control_request_process+0x196>
                    continue;
 8009f64:	bf00      	nop
 8009f66:	e000      	b.n	8009f6a <_ux_device_stack_control_request_process+0x196>
                            continue;
 8009f68:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8009f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f72:	2b0f      	cmp	r3, #15
 8009f74:	d9c0      	bls.n	8009ef8 <_ux_device_stack_control_request_process+0x124>
 8009f76:	e000      	b.n	8009f7a <_ux_device_stack_control_request_process+0x1a6>

                    /* We are done, break the loop!  */
                    break;
 8009f78:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8009f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <_ux_device_stack_control_request_process+0x1b6>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8009f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f82:	3318      	adds	r3, #24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 faef 	bl	800a568 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8009f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f8c:	e070      	b.n	800a070 <_ux_device_stack_control_request_process+0x29c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 8009f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f90:	2b0c      	cmp	r3, #12
 8009f92:	d861      	bhi.n	800a058 <_ux_device_stack_control_request_process+0x284>
 8009f94:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <_ux_device_stack_control_request_process+0x1c8>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009fdf 	.word	0x08009fdf
 8009fa4:	0800a059 	.word	0x0800a059
 8009fa8:	08009fed 	.word	0x08009fed
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	08009ffb 	.word	0x08009ffb
 8009fb4:	0800a011 	.word	0x0800a011
 8009fb8:	0800a01f 	.word	0x0800a01f
 8009fbc:	0800a025 	.word	0x0800a025
 8009fc0:	0800a02d 	.word	0x0800a02d
 8009fc4:	0800a037 	.word	0x0800a037
 8009fc8:	0800a041 	.word	0x0800a041
 8009fcc:	0800a04d 	.word	0x0800a04d
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8009fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009fd4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009fd6:	f000 faff 	bl	800a5d8 <_ux_device_stack_get_status>
 8009fda:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009fdc:	e03f      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8009fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fe0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009fe2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009fe4:	f7ff fd10 	bl	8009a08 <_ux_device_stack_clear_feature>
 8009fe8:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009fea:	e038      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8009fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009ff0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009ff2:	f000 fec3 	bl	800ad7c <_ux_device_stack_set_feature>
 8009ff6:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009ff8:	e031      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8009ffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ffe:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800a000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a006:	2111      	movs	r1, #17
 800a008:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a00a:	4798      	blx	r3
 800a00c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a00e:	e026      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800a010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a012:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a014:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a016:	f000 f82f 	bl	800a078 <_ux_device_stack_descriptor_send>
 800a01a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a01c:	e01f      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800a01e:	2354      	movs	r3, #84	@ 0x54
 800a020:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800a022:	e01c      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800a024:	f7ff fd50 	bl	8009ac8 <_ux_device_stack_configuration_get>
 800a028:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a02a:	e018      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800a02c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a02e:	f7ff fd6f 	bl	8009b10 <_ux_device_stack_configuration_set>
 800a032:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a034:	e013      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800a036:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a038:	f7ff fa50 	bl	80094dc <_ux_device_stack_alternate_setting_get>
 800a03c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a03e:	e00e      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800a040:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a042:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a044:	f7ff fa88 	bl	8009558 <_ux_device_stack_alternate_setting_set>
 800a048:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800a04a:	e008      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800a04c:	2300      	movs	r3, #0
 800a04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800a050:	e005      	b.n	800a05e <_ux_device_stack_control_request_process+0x28a>
 800a052:	bf00      	nop
 800a054:	20003514 	.word	0x20003514

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800a058:	2354      	movs	r3, #84	@ 0x54
 800a05a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800a05c:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800a05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <_ux_device_stack_control_request_process+0x29a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800a064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a066:	3318      	adds	r3, #24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fa7d 	bl	800a568 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800a06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800a070:	4618      	mov	r0, r3
 800a072:	376c      	adds	r7, #108	@ 0x6c
 800a074:	46bd      	mov	sp, r7
 800a076:	bd90      	pop	{r4, r7, pc}

0800a078 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b09a      	sub	sp, #104	@ 0x68
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800a088:	23ff      	movs	r3, #255	@ 0xff
 800a08a:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a08c:	4b98      	ldr	r3, [pc, #608]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a092:	4b97      	ldr	r3, [pc, #604]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3320      	adds	r3, #32
 800a098:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	3318      	adds	r3, #24
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a2:	3320      	adds	r3, #32
 800a0a4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	2b0e      	cmp	r3, #14
 800a0c8:	f200 81e1 	bhi.w	800a48e <_ux_device_stack_descriptor_send+0x416>
 800a0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <_ux_device_stack_descriptor_send+0x5c>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a111 	.word	0x0800a111
 800a0d8:	0800a1a5 	.word	0x0800a1a5
 800a0dc:	0800a2c1 	.word	0x0800a2c1
 800a0e0:	0800a48f 	.word	0x0800a48f
 800a0e4:	0800a48f 	.word	0x0800a48f
 800a0e8:	0800a11b 	.word	0x0800a11b
 800a0ec:	0800a1a5 	.word	0x0800a1a5
 800a0f0:	0800a48f 	.word	0x0800a48f
 800a0f4:	0800a12b 	.word	0x0800a12b
 800a0f8:	0800a48f 	.word	0x0800a48f
 800a0fc:	0800a48f 	.word	0x0800a48f
 800a100:	0800a48f 	.word	0x0800a48f
 800a104:	0800a48f 	.word	0x0800a48f
 800a108:	0800a48f 	.word	0x0800a48f
 800a10c:	0800a1a5 	.word	0x0800a1a5
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b12      	cmp	r3, #18
 800a114:	d901      	bls.n	800a11a <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800a116:	2312      	movs	r3, #18
 800a118:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b06      	cmp	r3, #6
 800a11e:	d104      	bne.n	800a12a <_ux_device_stack_descriptor_send+0xb2>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b0a      	cmp	r3, #10
 800a124:	d901      	bls.n	800a12a <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800a126:	230a      	movs	r3, #10
 800a128:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b09      	cmp	r3, #9
 800a12e:	d104      	bne.n	800a13a <_ux_device_stack_descriptor_send+0xc2>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b05      	cmp	r3, #5
 800a134:	d901      	bls.n	800a13a <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800a136:	2305      	movs	r3, #5
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a13a:	4b6d      	ldr	r3, [pc, #436]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a142:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800a144:	4b6a      	ldr	r3, [pc, #424]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a14c:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800a14e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a152:	4413      	add	r3, r2
 800a154:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800a156:	e020      	b.n	800a19a <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800a158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800a15e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a160:	3301      	adds	r3, #1
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10e      	bne.n	800a18a <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800a16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a172:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a174:	4618      	mov	r0, r3
 800a176:	f001 fad1 	bl	800b71c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a17e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a180:	f000 fea4 	bl	800aecc <_ux_device_stack_transfer_request>
 800a184:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a186:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800a188:	e18c      	b.n	800a4a4 <_ux_device_stack_descriptor_send+0x42c>
            device_framework_length -=  descriptor_length;
 800a18a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800a192:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	4413      	add	r3, r2
 800a198:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800a19a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a19c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d3da      	bcc.n	800a158 <_ux_device_stack_descriptor_send+0xe0>
        break;
 800a1a2:	e17f      	b.n	800a4a4 <_ux_device_stack_descriptor_send+0x42c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b07      	cmp	r3, #7
 800a1a8:	d10e      	bne.n	800a1c8 <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800a1aa:	4b51      	ldr	r3, [pc, #324]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1b2:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800a1b4:	4b4e      	ldr	r3, [pc, #312]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a1bc:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800a1be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1c2:	4413      	add	r3, r2
 800a1c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1c6:	e045      	b.n	800a254 <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a1c8:	4b49      	ldr	r3, [pc, #292]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1d0:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800a1d2:	4b47      	ldr	r3, [pc, #284]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1da:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800a1dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1e0:	4413      	add	r3, r2
 800a1e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800a1e4:	e036      	b.n	800a254 <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800a1e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d110      	bne.n	800a214 <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800a1f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b0f      	cmp	r3, #15
 800a1fa:	d123      	bne.n	800a244 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	2204      	movs	r2, #4
 800a202:	493c      	ldr	r1, [pc, #240]	@ (800a2f4 <_ux_device_stack_descriptor_send+0x27c>)
 800a204:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800a206:	f000 ffe5 	bl	800b1d4 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800a20a:	8a7b      	ldrh	r3, [r7, #18]
 800a20c:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800a20e:	2300      	movs	r3, #0
 800a210:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800a212:	e023      	b.n	800a25c <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800a214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a216:	3301      	adds	r3, #1
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d112      	bne.n	800a244 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800a21e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a222:	429a      	cmp	r2, r3
 800a224:	d10b      	bne.n	800a23e <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	2208      	movs	r2, #8
 800a22c:	4932      	ldr	r1, [pc, #200]	@ (800a2f8 <_ux_device_stack_descriptor_send+0x280>)
 800a22e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800a230:	f000 ffd0 	bl	800b1d4 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800a234:	8b7b      	ldrh	r3, [r7, #26]
 800a236:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800a238:	2300      	movs	r3, #0
 800a23a:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800a23c:	e00e      	b.n	800a25c <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800a23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a240:	3301      	adds	r3, #1
 800a242:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800a244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800a24c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a250:	4413      	add	r3, r2
 800a252:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800a254:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d3c4      	bcc.n	800a1e6 <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800a25c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f040 811d 	bne.w	800a49e <_ux_device_stack_descriptor_send+0x426>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800a264:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d202      	bcs.n	800a272 <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 800a26c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a26e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a270:	e001      	b.n	800a276 <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a27c:	d90c      	bls.n	800a298 <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a27e:	2212      	movs	r2, #18
 800a280:	2109      	movs	r1, #9
 800a282:	2002      	movs	r0, #2
 800a284:	f000 feac 	bl	800afe0 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a28e:	2114      	movs	r1, #20
 800a290:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a292:	4798      	blx	r3
 800a294:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a296:	e105      	b.n	800a4a4 <_ux_device_stack_descriptor_send+0x42c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a29e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 fa3b 	bl	800b71c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	b2d2      	uxtb	r2, r2
 800a2b0:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b8:	f000 fe08 	bl	800aecc <_ux_device_stack_transfer_request>
 800a2bc:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 800a2be:	e0ee      	b.n	800a49e <_ux_device_stack_descriptor_send+0x426>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800a2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d14f      	bne.n	800a366 <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f0 <_ux_device_stack_descriptor_send+0x278>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2d4:	d912      	bls.n	800a2fc <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a2d6:	2212      	movs	r2, #18
 800a2d8:	2109      	movs	r1, #9
 800a2da:	2002      	movs	r0, #2
 800a2dc:	f000 fe80 	bl	800afe0 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2e6:	2114      	movs	r1, #20
 800a2e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a2ea:	4798      	blx	r3
 800a2ec:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a2ee:	e0d9      	b.n	800a4a4 <_ux_device_stack_descriptor_send+0x42c>
 800a2f0:	20003514 	.word	0x20003514
 800a2f4:	20000054 	.word	0x20000054
 800a2f8:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800a302:	4b6b      	ldr	r3, [pc, #428]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	3302      	adds	r3, #2
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	3301      	adds	r3, #1
 800a318:	2203      	movs	r2, #3
 800a31a:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800a31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31e:	1c98      	adds	r0, r3, #2
 800a320:	4b63      	ldr	r3, [pc, #396]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800a328:	4b61      	ldr	r3, [pc, #388]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a32a:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800a32c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a330:	461a      	mov	r2, r3
 800a332:	f001 f9f3 	bl	800b71c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800a336:	4b5e      	ldr	r3, [pc, #376]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a33e:	3302      	adds	r3, #2
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	429a      	cmp	r2, r3
 800a344:	d906      	bls.n	800a354 <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800a346:	4b5a      	ldr	r3, [pc, #360]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a34e:	3302      	adds	r3, #2
 800a350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a352:	e001      	b.n	800a358 <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a35c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a35e:	f000 fdb5 	bl	800aecc <_ux_device_stack_transfer_request>
 800a362:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800a364:	e09d      	b.n	800a4a2 <_ux_device_stack_descriptor_send+0x42a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800a366:	4b52      	ldr	r3, [pc, #328]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800a36e:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800a370:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b0 <_ux_device_stack_descriptor_send+0x438>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800a378:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800a37a:	e07a      	b.n	800a472 <_ux_device_stack_descriptor_send+0x3fa>
                if (_ux_utility_short_get(string_framework) == request_index)
 800a37c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a37e:	f001 fb05 	bl	800b98c <_ux_utility_short_get>
 800a382:	4602      	mov	r2, r0
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4293      	cmp	r3, r2
 800a388:	d164      	bne.n	800a454 <_ux_device_stack_descriptor_send+0x3dc>
                    if (*(string_framework + 2) == descriptor_index)
 800a38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a38c:	3302      	adds	r3, #2
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	4293      	cmp	r3, r2
 800a396:	d15d      	bne.n	800a454 <_ux_device_stack_descriptor_send+0x3dc>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39a:	3303      	adds	r3, #3
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a6:	dd0c      	ble.n	800a3c2 <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a3a8:	2212      	movs	r2, #18
 800a3aa:	2109      	movs	r1, #9
 800a3ac:	2002      	movs	r0, #2
 800a3ae:	f000 fe17 	bl	800afe0 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3b8:	2114      	movs	r1, #20
 800a3ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3bc:	4798      	blx	r3
 800a3be:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 800a3c0:	e05a      	b.n	800a478 <_ux_device_stack_descriptor_send+0x400>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800a3c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ca:	3303      	adds	r3, #3
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d8:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	3301      	adds	r3, #1
 800a3de:	2203      	movs	r2, #3
 800a3e0:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e6:	e015      	b.n	800a414 <_ux_device_stack_descriptor_send+0x39c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800a3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ee:	441a      	add	r2, r3
 800a3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f8:	440b      	add	r3, r1
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800a3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a400:	3301      	adds	r3, #1
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	3301      	adds	r3, #1
 800a406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a408:	4413      	add	r3, r2
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800a40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a410:	3301      	adds	r3, #1
 800a412:	643b      	str	r3, [r7, #64]	@ 0x40
 800a414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a416:	3303      	adds	r3, #3
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41e:	4293      	cmp	r3, r2
 800a420:	d3e2      	bcc.n	800a3e8 <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800a422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a424:	3303      	adds	r3, #3
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	461a      	mov	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4293      	cmp	r3, r2
 800a432:	d906      	bls.n	800a442 <_ux_device_stack_descriptor_send+0x3ca>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800a434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a436:	3303      	adds	r3, #3
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	3301      	adds	r3, #1
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a440:	e001      	b.n	800a446 <_ux_device_stack_descriptor_send+0x3ce>
                            length =  host_length;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a44a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a44c:	f000 fd3e 	bl	800aecc <_ux_device_stack_transfer_request>
 800a450:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 800a452:	e011      	b.n	800a478 <_ux_device_stack_descriptor_send+0x400>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800a454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a456:	3303      	adds	r3, #3
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45e:	1a9b      	subs	r3, r3, r2
 800a460:	3b04      	subs	r3, #4
 800a462:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800a464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a466:	3303      	adds	r3, #3
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	3304      	adds	r3, #4
 800a46c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a46e:	4413      	add	r3, r2
 800a470:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800a472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a474:	2b00      	cmp	r3, #0
 800a476:	d181      	bne.n	800a37c <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 800a478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d111      	bne.n	800a4a2 <_ux_device_stack_descriptor_send+0x42a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a484:	2114      	movs	r1, #20
 800a486:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a488:	4798      	blx	r3
                return(UX_ERROR);
 800a48a:	23ff      	movs	r3, #255	@ 0xff
 800a48c:	e00b      	b.n	800a4a6 <_ux_device_stack_descriptor_send+0x42e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a494:	2114      	movs	r1, #20
 800a496:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a498:	4798      	blx	r3
        return(UX_ERROR);
 800a49a:	23ff      	movs	r3, #255	@ 0xff
 800a49c:	e003      	b.n	800a4a6 <_ux_device_stack_descriptor_send+0x42e>
        break;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <_ux_device_stack_descriptor_send+0x42c>
        break;
 800a4a2:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3768      	adds	r7, #104	@ 0x68
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20003514 	.word	0x20003514

0800a4b4 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b092      	sub	sp, #72	@ 0x48
 800a4b8:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800a4ba:	23ff      	movs	r3, #255	@ 0xff
 800a4bc:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a4be:	4b29      	ldr	r3, [pc, #164]	@ (800a564 <_ux_device_stack_disconnect+0xb0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a4c4:	4b27      	ldr	r3, [pc, #156]	@ (800a564 <_ux_device_stack_disconnect+0xb0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3320      	adds	r3, #32
 800a4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d123      	bne.n	800a51c <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a4da:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800a4dc:	e018      	b.n	800a510 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800a4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4e4:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800a4e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4fa:	1d3a      	adds	r2, r7, #4
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800a500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800a506:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a508:	f000 fa8c 	bl	800aa24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800a510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e3      	bne.n	800a4de <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d107      	bne.n	800a534 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800a524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a526:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800a528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a52a:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800a52c:	210f      	movs	r1, #15
 800a52e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a530:	4798      	blx	r3
 800a532:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800a542:	4b08      	ldr	r3, [pc, #32]	@ (800a564 <_ux_device_stack_disconnect+0xb0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800a54e:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <_ux_device_stack_disconnect+0xb0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800a556:	200a      	movs	r0, #10
 800a558:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800a55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3748      	adds	r7, #72	@ 0x48
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20003514 	.word	0x20003514

0800a568 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a570:	4b18      	ldr	r3, [pc, #96]	@ (800a5d4 <_ux_device_stack_endpoint_stall+0x6c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800a576:	23ff      	movs	r3, #255	@ 0xff
 800a578:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a57a:	f3ef 8310 	mrs	r3, PRIMASK
 800a57e:	613b      	str	r3, [r7, #16]
    return(posture);
 800a580:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a582:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a584:	b672      	cpsid	i
    return(int_posture);
 800a586:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800a588:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <_ux_device_stack_endpoint_stall+0x6c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d013      	beq.n	800a5bc <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d00f      	beq.n	800a5bc <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	2114      	movs	r1, #20
 800a5a4:	69b8      	ldr	r0, [r7, #24]
 800a5a6:	4798      	blx	r3
 800a5a8:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	7bdb      	ldrb	r3, [r3, #15]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f383 8810 	msr	PRIMASK, r3
}
 800a5c6:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800a5c8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3720      	adds	r7, #32
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20003514 	.word	0x20003514

0800a5d8 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	@ 0x28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a5e4:	4b39      	ldr	r3, [pc, #228]	@ (800a6cc <_ux_device_stack_get_status+0xf4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a5ea:	4b38      	ldr	r3, [pc, #224]	@ (800a6cc <_ux_device_stack_get_status+0xf4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3320      	adds	r3, #32
 800a5f0:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	3318      	adds	r3, #24
 800a5f6:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	3320      	adds	r3, #32
 800a5fc:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	2200      	movs	r2, #0
 800a60e:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800a610:	2302      	movs	r3, #2
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <_ux_device_stack_get_status+0x4c>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d021      	beq.n	800a666 <_ux_device_stack_get_status+0x8e>
 800a622:	e03a      	b.n	800a69a <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800a62a:	d102      	bne.n	800a632 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800a62c:	2301      	movs	r3, #1
 800a62e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800a630:	e03b      	b.n	800a6aa <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800a632:	4b26      	ldr	r3, [pc, #152]	@ (800a6cc <_ux_device_stack_get_status+0xf4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d103      	bne.n	800a646 <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800a646:	4b21      	ldr	r3, [pc, #132]	@ (800a6cc <_ux_device_stack_get_status+0xf4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d02b      	beq.n	800a6aa <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	781a      	ldrb	r2, [r3, #0]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f042 0202 	orr.w	r2, r2, #2
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
        break;
 800a664:	e021      	b.n	800a6aa <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	2115      	movs	r1, #21
 800a66e:	6a38      	ldr	r0, [r7, #32]
 800a670:	4798      	blx	r3
 800a672:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2bff      	cmp	r3, #255	@ 0xff
 800a678:	d007      	beq.n	800a68a <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d116      	bne.n	800a6ae <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800a688:	e011      	b.n	800a6ae <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	2114      	movs	r1, #20
 800a692:	6a38      	ldr	r0, [r7, #32]
 800a694:	4798      	blx	r3
            return(UX_SUCCESS);            
 800a696:	2300      	movs	r3, #0
 800a698:	e014      	b.n	800a6c4 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	69ba      	ldr	r2, [r7, #24]
 800a6a0:	2114      	movs	r1, #20
 800a6a2:	6a38      	ldr	r0, [r7, #32]
 800a6a4:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e00c      	b.n	800a6c4 <_ux_device_stack_get_status+0xec>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <_ux_device_stack_get_status+0xd8>
        break;
 800a6ae:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800a6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6ba:	6978      	ldr	r0, [r7, #20]
 800a6bc:	f000 fc06 	bl	800aecc <_ux_device_stack_transfer_request>
 800a6c0:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800a6c2:	693b      	ldr	r3, [r7, #16]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3728      	adds	r7, #40	@ 0x28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20003514 	.word	0x20003514

0800a6d0 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b094      	sub	sp, #80	@ 0x50
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a6de:	4b9a      	ldr	r3, [pc, #616]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3320      	adds	r3, #32
 800a6e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800a6e6:	4b98      	ldr	r3, [pc, #608]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800a6f0:	4b95      	ldr	r3, [pc, #596]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800a6fa:	4b93      	ldr	r3, [pc, #588]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800a704:	4b90      	ldr	r3, [pc, #576]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800a70e:	4b8e      	ldr	r3, [pc, #568]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a714:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800a718:	4b8b      	ldr	r3, [pc, #556]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a71e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800a722:	4b89      	ldr	r3, [pc, #548]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a728:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800a72c:	4b86      	ldr	r3, [pc, #536]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a732:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800a736:	4b84      	ldr	r3, [pc, #528]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a73c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800a740:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800a744:	2100      	movs	r1, #0
 800a746:	2000      	movs	r0, #0
 800a748:	f000 fde2 	bl	800b310 <_ux_utility_memory_allocate>
 800a74c:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800a754:	2312      	movs	r3, #18
 800a756:	e15d      	b.n	800aa14 <_ux_device_stack_initialize+0x344>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800a758:	4b7b      	ldr	r3, [pc, #492]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800a762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a764:	3338      	adds	r3, #56	@ 0x38
 800a766:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800a768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a76c:	2101      	movs	r1, #1
 800a76e:	2000      	movs	r0, #0
 800a770:	f000 fdce 	bl	800b310 <_ux_utility_memory_allocate>
 800a774:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800a782:	2312      	movs	r3, #18
 800a784:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a786:	e001      	b.n	800a78c <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800a788:	2300      	movs	r3, #0
 800a78a:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800a790:	2300      	movs	r3, #0
 800a792:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800a798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f040 8090 	bne.w	800a8c0 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800a7a0:	4b69      	ldr	r3, [pc, #420]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800a7aa:	4b67      	ldr	r3, [pc, #412]	@ (800a948 <_ux_device_stack_initialize+0x278>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a7b2:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800a7c0:	e054      	b.n	800a86c <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	785b      	ldrb	r3, [r3, #1]
 800a7cc:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d029      	beq.n	800a828 <_ux_device_stack_initialize+0x158>
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d13e      	bne.n	800a856 <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	3303      	adds	r3, #3
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10b      	bne.n	800a7fa <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800a7e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	4413      	add	r3, r2
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800a7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7f8:	e00a      	b.n	800a810 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	4293      	cmp	r3, r2
 800a806:	d203      	bcs.n	800a810 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	3304      	adds	r3, #4
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800a810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a812:	3302      	adds	r3, #2
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d21d      	bcs.n	800a85a <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800a81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a820:	3302      	adds	r3, #2
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800a826:	e018      	b.n	800a85a <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800a828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a82a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d901      	bls.n	800a834 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800a834:	2300      	movs	r3, #0
 800a836:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800a838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	4413      	add	r3, r2
 800a83e:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800a840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a844:	429a      	cmp	r2, r3
 800a846:	d901      	bls.n	800a84c <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800a848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84a:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800a850:	2300      	movs	r3, #0
 800a852:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800a854:	e002      	b.n	800a85c <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800a856:	bf00      	nop
 800a858:	e000      	b.n	800a85c <_ux_device_stack_initialize+0x18c>
                break;
 800a85a:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800a85c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800a864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	4413      	add	r3, r2
 800a86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1a7      	bne.n	800a7c2 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800a872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	4413      	add	r3, r2
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800a87a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a87c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87e:	429a      	cmp	r2, r3
 800a880:	d901      	bls.n	800a886 <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800a882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a884:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800a886:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d901      	bls.n	800a892 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800a892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800a898:	2242      	movs	r2, #66	@ 0x42
 800a89a:	2103      	movs	r1, #3
 800a89c:	2002      	movs	r0, #2
 800a89e:	f000 fb9f 	bl	800afe0 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800a8a2:	2342      	movs	r3, #66	@ 0x42
 800a8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800a8a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <_ux_device_stack_initialize+0x1f0>
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ae:	2b0f      	cmp	r3, #15
 800a8b0:	d906      	bls.n	800a8c0 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800a8b2:	2212      	movs	r2, #18
 800a8b4:	2103      	movs	r1, #3
 800a8b6:	2002      	movs	r0, #2
 800a8b8:	f000 fb92 	bl	800afe0 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800a8bc:	2312      	movs	r3, #18
 800a8be:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800a8c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d118      	bne.n	800a8f8 <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800a8d6:	2320      	movs	r3, #32
 800a8d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f000 fe0b 	bl	800b4f8 <_ux_utility_memory_allocate_mulc_safe>
 800a8e2:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800a8ea:	2312      	movs	r3, #18
 800a8ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ee:	e003      	b.n	800a8f8 <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800a8f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d042      	beq.n	800a984 <_ux_device_stack_initialize+0x2b4>
 800a8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a900:	2b00      	cmp	r3, #0
 800a902:	d13f      	bne.n	800a984 <_ux_device_stack_initialize+0x2b4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800a904:	2380      	movs	r3, #128	@ 0x80
 800a906:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a908:	2100      	movs	r1, #0
 800a90a:	2000      	movs	r0, #0
 800a90c:	f000 fdf4 	bl	800b4f8 <_ux_utility_memory_allocate_mulc_safe>
 800a910:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800a912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800a918:	2312      	movs	r3, #18
 800a91a:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800a91c:	e034      	b.n	800a988 <_ux_device_stack_initialize+0x2b8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a922:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800a926:	e022      	b.n	800a96e <_ux_device_stack_initialize+0x29e>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800a928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a92c:	2101      	movs	r1, #1
 800a92e:	2000      	movs	r0, #0
 800a930:	f000 fcee 	bl	800b310 <_ux_utility_memory_allocate>
 800a934:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800a936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a938:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800a93a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d104      	bne.n	800a94c <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800a942:	2312      	movs	r3, #18
 800a944:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800a946:	e01c      	b.n	800a982 <_ux_device_stack_initialize+0x2b2>
 800a948:	20003514 	.word	0x20003514
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800a94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a94e:	3350      	adds	r3, #80	@ 0x50
 800a950:	2200      	movs	r2, #0
 800a952:	4932      	ldr	r1, [pc, #200]	@ (800aa1c <_ux_device_stack_initialize+0x34c>)
 800a954:	4618      	mov	r0, r3
 800a956:	f000 ffe5 	bl	800b924 <_ux_utility_semaphore_create>
 800a95a:	64b8      	str	r0, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800a95c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800a962:	2315      	movs	r3, #21
 800a964:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800a966:	e00c      	b.n	800a982 <_ux_device_stack_initialize+0x2b2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800a968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a96a:	3380      	adds	r3, #128	@ 0x80
 800a96c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800a974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a976:	01db      	lsls	r3, r3, #7
 800a978:	4413      	add	r3, r2
 800a97a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d3d3      	bcc.n	800a928 <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800a980:	e002      	b.n	800a988 <_ux_device_stack_initialize+0x2b8>
 800a982:	e001      	b.n	800a988 <_ux_device_stack_initialize+0x2b8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800a988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <_ux_device_stack_initialize+0x2c2>
        return(UX_SUCCESS);
 800a98e:	2300      	movs	r3, #0
 800a990:	e040      	b.n	800aa14 <_ux_device_stack_initialize+0x344>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800a992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d021      	beq.n	800a9dc <_ux_device_stack_initialize+0x30c>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800a998:	e014      	b.n	800a9c4 <_ux_device_stack_initialize+0x2f4>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800a99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a99c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <_ux_device_stack_initialize+0x2dc>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800a9a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a4:	3350      	adds	r3, #80	@ 0x50
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ffd6 	bl	800b958 <_ux_utility_semaphore_delete>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800a9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <_ux_device_stack_initialize+0x2ee>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fecd 	bl	800b758 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800a9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9c0:	3b80      	subs	r3, #128	@ 0x80
 800a9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d2e4      	bcs.n	800a99a <_ux_device_stack_initialize+0x2ca>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 febe 	bl	800b758 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <_ux_device_stack_initialize+0x322>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 feb3 	bl	800b758 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 feaa 	bl	800b758 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <_ux_device_stack_initialize+0x350>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fea3 	bl	800b758 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800aa12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3750      	adds	r7, #80	@ 0x50
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	0800d578 	.word	0x0800d578
 800aa20:	20003514 	.word	0x20003514

0800aa24 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800aa2c:	4b20      	ldr	r3, [pc, #128]	@ (800aab0 <_ux_device_stack_interface_delete+0x8c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3320      	adds	r3, #32
 800aa32:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800aa3a:	e01c      	b.n	800aa76 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800aa46:	4b1a      	ldr	r3, [pc, #104]	@ (800aab0 <_ux_device_stack_interface_delete+0x8c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	210f      	movs	r1, #15
 800aa54:	68b8      	ldr	r0, [r7, #8]
 800aa56:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1df      	bne.n	800aa3c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699a      	ldr	r2, [r3, #24]
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20003514 	.word	0x20003514

0800aab4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b092      	sub	sp, #72	@ 0x48
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800aac0:	4b82      	ldr	r3, [pc, #520]	@ (800accc <_ux_device_stack_interface_set+0x218>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800aac6:	4b81      	ldr	r3, [pc, #516]	@ (800accc <_ux_device_stack_interface_set+0x218>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3320      	adds	r3, #32
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aad4:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800aade:	e009      	b.n	800aaf4 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800aae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800aae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaea:	3320      	adds	r3, #32
 800aaec:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1f2      	bne.n	800aae0 <_ux_device_stack_interface_set+0x2c>
 800aafa:	e000      	b.n	800aafe <_ux_device_stack_interface_set+0x4a>
            break;
 800aafc:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800aafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800ab04:	2312      	movs	r3, #18
 800ab06:	e0dd      	b.n	800acc4 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800ab08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800ab0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab10:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800ab12:	2209      	movs	r2, #9
 800ab14:	496e      	ldr	r1, [pc, #440]	@ (800acd0 <_ux_device_stack_interface_set+0x21c>)
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fb5c 	bl	800b1d4 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab2a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800ab2e:	e00e      	b.n	800ab4e <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ab36:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800ab38:	e002      	b.n	800ab40 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800ab3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800ab40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1f8      	bne.n	800ab3a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800ab48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab4c:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800ab66:	e0a4      	b.n	800acb2 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	785b      	ldrb	r3, [r3, #1]
 800ab72:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800ab74:	7efb      	ldrb	r3, [r7, #27]
 800ab76:	2b05      	cmp	r3, #5
 800ab78:	d009      	beq.n	800ab8e <_ux_device_stack_interface_set+0xda>
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	f300 8090 	bgt.w	800aca0 <_ux_device_stack_interface_set+0x1ec>
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	f000 8087 	beq.w	800ac94 <_ux_device_stack_interface_set+0x1e0>
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	f000 8084 	beq.w	800ac94 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800ab8c:	e088      	b.n	800aca0 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab94:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ab9c:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800ab9e:	e00d      	b.n	800abbc <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	2201      	movs	r2, #1
 800abac:	601a      	str	r2, [r3, #0]
                    break;
 800abae:	e008      	b.n	800abc2 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	3380      	adds	r3, #128	@ 0x80
 800abb4:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	3b01      	subs	r3, #1
 800abba:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1ee      	bne.n	800aba0 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800abc8:	2312      	movs	r3, #18
 800abca:	e07b      	b.n	800acc4 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800abd0:	2206      	movs	r2, #6
 800abd2:	4940      	ldr	r1, [pc, #256]	@ (800acd4 <_ux_device_stack_interface_set+0x220>)
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 fafd 	bl	800b1d4 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abdc:	3320      	adds	r3, #32
 800abde:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800abe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800abea:	4b38      	ldr	r3, [pc, #224]	@ (800accc <_ux_device_stack_interface_set+0x218>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d118      	bne.n	800ac28 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800abf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf8:	7bdb      	ldrb	r3, [r3, #15]
 800abfa:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d012      	beq.n	800ac28 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ac02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac04:	8a1b      	ldrh	r3, [r3, #16]
 800ac06:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800ac0a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	0adb      	lsrs	r3, r3, #11
 800ac16:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800ac1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	fb02 f303 	mul.w	r3, r2, r3
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac2c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac32:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3a:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac40:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac46:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800ac48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac4e:	210e      	movs	r1, #14
 800ac50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac52:	4798      	blx	r3
 800ac54:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]
                return(status);
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	e02e      	b.n	800acc4 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800ac66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d103      	bne.n	800ac76 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800ac6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac72:	61da      	str	r2, [r3, #28]
            break;
 800ac74:	e015      	b.n	800aca2 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ac76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800ac7c:	e002      	b.n	800ac84 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1f8      	bne.n	800ac7e <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac90:	615a      	str	r2, [r3, #20]
            break;
 800ac92:	e006      	b.n	800aca2 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800ac94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ac96:	f000 f81f 	bl	800acd8 <_ux_device_stack_interface_start>
 800ac9a:	6238      	str	r0, [r7, #32]
            return(status);
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	e011      	b.n	800acc4 <_ux_device_stack_interface_set+0x210>
            break;
 800aca0:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	4413      	add	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f47f af57 	bne.w	800ab68 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800acba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800acbc:	f000 f80c 	bl	800acd8 <_ux_device_stack_interface_start>
 800acc0:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800acc2:	6a3b      	ldr	r3, [r7, #32]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3748      	adds	r7, #72	@ 0x48
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20003514 	.word	0x20003514
 800acd0:	20000048 	.word	0x20000048
 800acd4:	20000028 	.word	0x20000028

0800acd8 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b090      	sub	sp, #64	@ 0x40
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800ace0:	4b25      	ldr	r3, [pc, #148]	@ (800ad78 <_ux_device_stack_interface_start+0xa0>)
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	7b9b      	ldrb	r3, [r3, #14]
 800ace8:	3344      	adds	r3, #68	@ 0x44
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800acf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800acf8:	2357      	movs	r3, #87	@ 0x57
 800acfa:	e038      	b.n	800ad6e <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800acfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ad78 <_ux_device_stack_interface_start+0xa0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3320      	adds	r3, #32
 800ad02:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800ad04:	2301      	movs	r3, #1
 800ad06:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	7c5b      	ldrb	r3, [r3, #17]
 800ad10:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	7c9b      	ldrb	r3, [r3, #18]
 800ad16:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7cdb      	ldrb	r3, [r3, #19]
 800ad1c:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	899b      	ldrh	r3, [r3, #12]
 800ad22:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	89db      	ldrh	r3, [r3, #14]
 800ad28:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800ad2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ad32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad36:	f107 0208 	add.w	r2, r7, #8
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	4798      	blx	r3
 800ad3e:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800ad40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d112      	bne.n	800ad6c <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800ad46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad48:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ad4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad52:	f107 0208 	add.w	r2, r7, #8
 800ad56:	4610      	mov	r0, r2
 800ad58:	4798      	blx	r3
 800ad5a:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d102      	bne.n	800ad68 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad66:	605a      	str	r2, [r3, #4]

        return(status); 
 800ad68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6a:	e000      	b.n	800ad6e <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800ad6c:	2357      	movs	r3, #87	@ 0x57
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3740      	adds	r7, #64	@ 0x40
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20003514 	.word	0x20003514

0800ad7c <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	@ 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ad88:	4b29      	ldr	r3, [pc, #164]	@ (800ae30 <_ux_device_stack_set_feature+0xb4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ad8e:	4b28      	ldr	r3, [pc, #160]	@ (800ae30 <_ux_device_stack_set_feature+0xb4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3320      	adds	r3, #32
 800ad94:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	3318      	adds	r3, #24
 800ad9a:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f003 0303 	and.w	r3, r3, #3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <_ux_device_stack_set_feature+0x30>
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d014      	beq.n	800add4 <_ux_device_stack_set_feature+0x58>
 800adaa:	e036      	b.n	800ae1a <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d10e      	bne.n	800add0 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800adb2:	4b1f      	ldr	r3, [pc, #124]	@ (800ae30 <_ux_device_stack_set_feature+0xb4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d006      	beq.n	800adcc <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800adbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ae30 <_ux_device_stack_set_feature+0xb4>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* OK. */
                return (UX_SUCCESS);
 800adc8:	2300      	movs	r3, #0
 800adca:	e02d      	b.n	800ae28 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800adcc:	2354      	movs	r3, #84	@ 0x54
 800adce:	e02b      	b.n	800ae28 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800add0:	2354      	movs	r3, #84	@ 0x54
 800add2:	e029      	b.n	800ae28 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800adda:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800addc:	e01a      	b.n	800ae14 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800ade4:	e010      	b.n	800ae08 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	7b9b      	ldrb	r3, [r3, #14]
 800adea:	461a      	mov	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4293      	cmp	r3, r2
 800adf0:	d107      	bne.n	800ae02 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	2114      	movs	r1, #20
 800adfa:	69f8      	ldr	r0, [r7, #28]
 800adfc:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800adfe:	2300      	movs	r3, #0
 800ae00:	e012      	b.n	800ae28 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1eb      	bne.n	800ade6 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e1      	bne.n	800adde <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	2114      	movs	r1, #20
 800ae22:	69f8      	ldr	r0, [r7, #28]
 800ae24:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ae26:	2300      	movs	r3, #0
    }
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3728      	adds	r7, #40	@ 0x28
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20003514 	.word	0x20003514

0800ae34 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ae3e:	4b19      	ldr	r3, [pc, #100]	@ (800aea4 <_ux_device_stack_transfer_abort+0x70>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae4e:	617b      	str	r3, [r7, #20]
    return(posture);
 800ae50:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ae52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae54:	b672      	cpsid	i
    return(int_posture);
 800ae56:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800ae58:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d114      	bne.n	800ae8c <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	210d      	movs	r1, #13
 800ae6a:	69f8      	ldr	r0, [r7, #28]
 800ae6c:	4798      	blx	r3
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f383 8810 	msr	PRIMASK, r3
}
 800ae78:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2204      	movs	r2, #4
 800ae7e:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3330      	adds	r3, #48	@ 0x30
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fd74 	bl	800b972 <_ux_utility_semaphore_put>
 800ae8a:	e005      	b.n	800ae98 <_ux_device_stack_transfer_abort+0x64>
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f383 8810 	msr	PRIMASK, r3
}
 800ae96:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20003514 	.word	0x20003514

0800aea8 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3320      	adds	r3, #32
 800aeb6:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7ff ffba 	bl	800ae34 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08e      	sub	sp, #56	@ 0x38
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d101      	bne.n	800aee4 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800aee0:	2300      	movs	r3, #0
 800aee2:	e077      	b.n	800afd4 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aee4:	f3ef 8310 	mrs	r3, PRIMASK
 800aee8:	623b      	str	r3, [r7, #32]
    return(posture);
 800aeea:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aeec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aeee:	b672      	cpsid	i
    return(int_posture);
 800aef0:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800aef2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800aef4:	4b39      	ldr	r3, [pc, #228]	@ (800afdc <_ux_device_stack_transfer_request+0x110>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d005      	beq.n	800af0e <_ux_device_stack_transfer_request+0x42>
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	2b02      	cmp	r3, #2
 800af06:	d002      	beq.n	800af0e <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d115      	bne.n	800af3a <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f383 8810 	msr	PRIMASK, r3
}
 800af1e:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800af20:	4b2e      	ldr	r3, [pc, #184]	@ (800afdc <_ux_device_stack_transfer_request+0x110>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	7bdb      	ldrb	r3, [r3, #15]
 800af30:	f003 0303 	and.w	r3, r3, #3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10b      	bne.n	800af50 <_ux_device_stack_transfer_request+0x84>
 800af38:	e01a      	b.n	800af70 <_ux_device_stack_transfer_request+0xa4>
 800af3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f383 8810 	msr	PRIMASK, r3
}
 800af44:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800af46:	2325      	movs	r3, #37	@ 0x25
 800af48:	e044      	b.n	800afd4 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800af4a:	2064      	movs	r0, #100	@ 0x64
 800af4c:	f000 f928 	bl	800b1a0 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800af50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d0f8      	beq.n	800af4a <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800af58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5a:	7b9b      	ldrb	r3, [r3, #14]
 800af5c:	b25b      	sxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	da03      	bge.n	800af6a <_ux_device_stack_transfer_request+0x9e>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2203      	movs	r2, #3
 800af66:	629a      	str	r2, [r3, #40]	@ 0x28
 800af68:	e002      	b.n	800af70 <_ux_device_stack_transfer_request+0xa4>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2202      	movs	r2, #2
 800af6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af74:	2b03      	cmp	r3, #3
 800af76:	d115      	bne.n	800afa4 <_ux_device_stack_transfer_request+0xd8>
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d012      	beq.n	800afa4 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	429a      	cmp	r2, r3
 800af84:	d00e      	beq.n	800afa4 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800af86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af88:	8a1b      	ldrh	r3, [r3, #16]
 800af8a:	461a      	mov	r2, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800af92:	fb01 f202 	mul.w	r2, r1, r2
 800af96:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2201      	movs	r2, #1
 800afa0:	651a      	str	r2, [r3, #80]	@ 0x50
 800afa2:	e002      	b.n	800afaa <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800afc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	210c      	movs	r1, #12
 800afcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afce:	4798      	blx	r3
 800afd0:	6278      	str	r0, [r7, #36]	@ 0x24

    /* And return the status.  */
    return(status);
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

#endif
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3738      	adds	r7, #56	@ 0x38
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20003514 	.word	0x20003514

0800afe0 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800afec:	4b0c      	ldr	r3, [pc, #48]	@ (800b020 <_ux_system_error_handler+0x40>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	641a      	str	r2, [r3, #64]	@ 0x40
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800aff4:	4b0a      	ldr	r3, [pc, #40]	@ (800b020 <_ux_system_error_handler+0x40>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800affa:	3201      	adds	r2, #1
 800affc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800affe:	4b08      	ldr	r3, [pc, #32]	@ (800b020 <_ux_system_error_handler+0x40>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b004:	2b00      	cmp	r3, #0
 800b006:	d006      	beq.n	800b016 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800b008:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <_ux_system_error_handler+0x40>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	4798      	blx	r3
    }
}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20003518 	.word	0x20003518

0800b024 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08a      	sub	sp, #40	@ 0x28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <_ux_system_initialize+0x1a>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800b03e:	23fa      	movs	r3, #250	@ 0xfa
 800b040:	e08a      	b.n	800b158 <_ux_system_initialize+0x134>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	2100      	movs	r1, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fc0a 	bl	800b860 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800b04c:	4a44      	ldr	r2, [pc, #272]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800b052:	234c      	movs	r3, #76	@ 0x4c
 800b054:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05a:	4413      	add	r3, r2
 800b05c:	4a41      	ldr	r2, [pc, #260]	@ (800b164 <_ux_system_initialize+0x140>)
 800b05e:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b062:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800b066:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800b068:	4b3d      	ldr	r3, [pc, #244]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68f9      	ldr	r1, [r7, #12]
 800b06e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b070:	440a      	add	r2, r1
 800b072:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	3314      	adds	r3, #20
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00c      	beq.n	800b09a <_ux_system_initialize+0x76>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d009      	beq.n	800b09a <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800b086:	4b36      	ldr	r3, [pc, #216]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b08e:	440a      	add	r2, r1
 800b090:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	3314      	adds	r3, #20
 800b096:	627b      	str	r3, [r7, #36]	@ 0x24
 800b098:	e005      	b.n	800b0a6 <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800b09a:	4b31      	ldr	r3, [pc, #196]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b30      	ldr	r3, [pc, #192]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6812      	ldr	r2, [r2, #0]
 800b0a4:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0aa:	4413      	add	r3, r2
 800b0ac:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	3307      	adds	r3, #7
 800b0b2:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	f023 0307 	bic.w	r3, r3, #7
 800b0ba:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	6a3a      	ldr	r2, [r7, #32]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d301      	bcc.n	800b0d0 <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800b0cc:	2312      	movs	r3, #18
 800b0ce:	e043      	b.n	800b158 <_ux_system_initialize+0x134>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800b0d8:	4b21      	ldr	r3, [pc, #132]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a39      	ldr	r1, [r7, #32]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fa2e 	bl	800b544 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d026      	beq.n	800b13c <_ux_system_initialize+0x118>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d023      	beq.n	800b13c <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fbb1 	bl	800b860 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	3307      	adds	r3, #7
 800b106:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	4413      	add	r3, r2
 800b116:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d301      	bcc.n	800b124 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800b120:	2312      	movs	r3, #18
 800b122:	e019      	b.n	800b158 <_ux_system_initialize+0x134>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	6a39      	ldr	r1, [r7, #32]
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fa04 	bl	800b544 <_ux_utility_memory_byte_pool_create>
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800b13c:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <_ux_system_initialize+0x13c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	330c      	adds	r3, #12
 800b142:	4909      	ldr	r1, [pc, #36]	@ (800b168 <_ux_system_initialize+0x144>)
 800b144:	4618      	mov	r0, r3
 800b146:	f000 fba5 	bl	800b894 <_ux_utility_mutex_create>
 800b14a:	6138      	str	r0, [r7, #16]
    if(status != UX_SUCCESS)
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <_ux_system_initialize+0x132>
        return(UX_MUTEX_ERROR);
 800b152:	2317      	movs	r3, #23
 800b154:	e000      	b.n	800b158 <_ux_system_initialize+0x134>
#endif

    return(UX_SUCCESS);
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3728      	adds	r7, #40	@ 0x28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20003518 	.word	0x20003518
 800b164:	20003514 	.word	0x20003514
 800b168:	0800d598 	.word	0x0800d598

0800b16c <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <_uxe_system_initialize+0x1a>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800b186:	23fa      	movs	r3, #250	@ 0xfa
 800b188:	e006      	b.n	800b198 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff ff47 	bl	800b024 <_ux_system_initialize>
 800b196:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2264      	movs	r2, #100	@ 0x64
 800b1ac:	fb02 f303 	mul.w	r3, r2, r3
 800b1b0:	4a07      	ldr	r2, [pc, #28]	@ (800b1d0 <_ux_utility_delay_ms+0x30>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	099b      	lsrs	r3, r3, #6
 800b1b8:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7fc ff8d 	bl	80080e0 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800b1c6:	bf00      	nop
}
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	10624dd3 	.word	0x10624dd3

0800b1d4 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800b1e2:	e041      	b.n	800b268 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	60ba      	str	r2, [r7, #8]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d01e      	beq.n	800b22e <_ux_utility_descriptor_parse+0x5a>
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d12f      	bne.n	800b254 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800b1f4:	e004      	b.n	800b200 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	603a      	str	r2, [r7, #0]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1f5      	bne.n	800b1f6 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f000 f835 	bl	800b27a <_ux_utility_long_get>
 800b210:	4602      	mov	r2, r0
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3304      	adds	r3, #4
 800b21a:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	3304      	adds	r3, #4
 800b220:	603b      	str	r3, [r7, #0]
            break;
 800b222:	e021      	b.n	800b268 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	603a      	str	r2, [r7, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1f5      	bne.n	800b224 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fba7 	bl	800b98c <_ux_utility_short_get>
 800b23e:	4603      	mov	r3, r0
 800b240:	b29a      	uxth	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3302      	adds	r3, #2
 800b24a:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	3302      	adds	r3, #2
 800b250:	603b      	str	r3, [r7, #0]
            break;
 800b252:	e009      	b.n	800b268 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	781a      	ldrb	r2, [r3, #0]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3301      	adds	r3, #1
 800b260:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	3301      	adds	r3, #1
 800b266:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	1e5a      	subs	r2, r3, #1
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1b8      	bne.n	800b1e4 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800b272:	bf00      	nop
}
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b085      	sub	sp, #20
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	021b      	lsls	r3, r3, #8
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	041b      	lsls	r3, r3, #16
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	061b      	lsls	r3, r3, #24
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	b2d2      	uxtb	r2, r2
 800b2da:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	0a19      	lsrs	r1, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	b2ca      	uxtb	r2, r1
 800b2e8:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	0c19      	lsrs	r1, r3, #16
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	b2ca      	uxtb	r2, r1
 800b2f6:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	0e1b      	lsrs	r3, r3, #24
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800b302:	bf00      	nop
}
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08e      	sub	sp, #56	@ 0x38
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d104      	bne.n	800b32c <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800b322:	4b73      	ldr	r3, [pc, #460]	@ (800b4f0 <_ux_utility_memory_allocate+0x1e0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	637b      	str	r3, [r7, #52]	@ 0x34
 800b32a:	e009      	b.n	800b340 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d104      	bne.n	800b33c <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800b332:	4b6f      	ldr	r3, [pc, #444]	@ (800b4f0 <_ux_utility_memory_allocate+0x1e0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	637b      	str	r3, [r7, #52]	@ 0x34
 800b33a:	e001      	b.n	800b340 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800b33c:	2300      	movs	r3, #0
 800b33e:	e0d2      	b.n	800b4e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800b346:	2300      	movs	r3, #0
 800b348:	e0cd      	b.n	800b4e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800b350:	2300      	movs	r3, #0
 800b352:	e0c8      	b.n	800b4e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800b354:	4b66      	ldr	r3, [pc, #408]	@ (800b4f0 <_ux_utility_memory_allocate+0x1e0>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 facb 	bl	800b8f6 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b366:	d101      	bne.n	800b36c <_ux_utility_memory_allocate+0x5c>
        memory_alignment = UX_NO_ALIGN;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b06      	cmp	r3, #6
 800b370:	d801      	bhi.n	800b376 <_ux_utility_memory_allocate+0x66>
        memory_alignment =  UX_ALIGN_MIN;
 800b372:	2307      	movs	r3, #7
 800b374:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3307      	adds	r3, #7
 800b37a:	f023 0307 	bic.w	r3, r3, #7
 800b37e:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b07      	cmp	r3, #7
 800b384:	d805      	bhi.n	800b392 <_ux_utility_memory_allocate+0x82>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b38a:	f000 f92b 	bl	800b5e4 <_ux_utility_memory_byte_pool_search>
 800b38e:	6338      	str	r0, [r7, #48]	@ 0x30
 800b390:	e007      	b.n	800b3a2 <_ux_utility_memory_allocate+0x92>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b39c:	f000 f922 	bl	800b5e4 <_ux_utility_memory_byte_pool_search>
 800b3a0:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10c      	bne.n	800b3c2 <_ux_utility_memory_allocate+0xb2>
    {

        /* We could not find a memory block.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b3a8:	4b51      	ldr	r3, [pc, #324]	@ (800b4f0 <_ux_utility_memory_allocate+0x1e0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	330c      	adds	r3, #12
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fa96 	bl	800b8e0 <_ux_utility_mutex_off>

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800b3b4:	2212      	movs	r2, #18
 800b3b6:	2108      	movs	r1, #8
 800b3b8:	2002      	movs	r0, #2
 800b3ba:	f7ff fe11 	bl	800afe0 <_ux_system_error_handler>

        return(UX_NULL);
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e091      	b.n	800b4e6 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	3b08      	subs	r3, #8
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	3308      	adds	r3, #8
 800b3de:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800b3e0:	6a3a      	ldr	r2, [r7, #32]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d02f      	beq.n	800b44a <_ux_utility_memory_allocate+0x13a>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800b3f0:	6a3a      	ldr	r2, [r7, #32]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	43db      	mvns	r3, r3
 800b3fc:	6a3a      	ldr	r2, [r7, #32]
 800b3fe:	4013      	ands	r3, r2
 800b400:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	3b08      	subs	r3, #8
 800b406:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	3304      	adds	r3, #4
 800b41c:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	4a33      	ldr	r2, [pc, #204]	@ (800b4f4 <_ux_utility_memory_allocate+0x1e4>)
 800b426:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b430:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b436:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	461a      	mov	r2, r3
 800b440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800b446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b448:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800b44a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	2b13      	cmp	r3, #19
 800b452:	d91e      	bls.n	800b492 <_ux_utility_memory_allocate+0x182>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3308      	adds	r3, #8
 800b458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b45a:	4413      	add	r3, r2
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b470:	3304      	adds	r3, #4
 800b472:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f4 <_ux_utility_memory_allocate+0x1e4>)
 800b47c:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800b47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b486:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800b488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b48c:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	3304      	adds	r3, #4
 800b496:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4a0:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800b4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	f1a3 0208 	sub.w	r2, r3, #8
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b0:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d105      	bne.n	800b4c8 <_ux_utility_memory_allocate+0x1b8>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c6:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800b4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	69b8      	ldr	r0, [r7, #24]
 800b4d4:	f000 f9c4 	bl	800b860 <_ux_utility_memory_set>
    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)
        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b4d8:	4b05      	ldr	r3, [pc, #20]	@ (800b4f0 <_ux_utility_memory_allocate+0x1e0>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f9fe 	bl	800b8e0 <_ux_utility_mutex_off>

    return(work_ptr);
 800b4e4:	69bb      	ldr	r3, [r7, #24]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3738      	adds	r7, #56	@ 0x38
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20003518 	.word	0x20003518
 800b4f4:	ffffeeee 	.word	0xffffeeee

0800b4f8 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800b50c:	2100      	movs	r1, #0
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	fba3 2302 	umull	r2, r3, r3, r2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d000      	beq.n	800b51c <_ux_utility_memory_allocate_mulc_safe+0x24>
 800b51a:	2101      	movs	r1, #1
 800b51c:	460b      	mov	r3, r1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	fb02 f303 	mul.w	r3, r2, r3
 800b52a:	461a      	mov	r2, r3
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7ff feee 	bl	800b310 <_ux_utility_memory_allocate>
 800b534:	4603      	mov	r3, r0
 800b536:	e000      	b.n	800b53a <_ux_utility_memory_allocate_mulc_safe+0x42>
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800b550:	2214      	movs	r2, #20
 800b552:	2100      	movs	r1, #0
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 f983 	bl	800b860 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f023 0303 	bic.w	r3, r3, #3
 800b560:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f1a3 0208 	sub.w	r2, r3, #8
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2202      	movs	r2, #2
 800b582:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	3b04      	subs	r3, #4
 800b594:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	3b04      	subs	r3, #4
 800b5a8:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	69fa      	ldr	r2, [r7, #28]
 800b5c0:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	4a03      	ldr	r2, [pc, #12]	@ (800b5e0 <_ux_utility_memory_byte_pool_create+0x9c>)
 800b5d4:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3720      	adds	r7, #32
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	ffffeeee 	.word	0xffffeeee

0800b5e4 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b08d      	sub	sp, #52	@ 0x34
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	3b02      	subs	r3, #2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	429a      	cmp	r2, r3
 800b608:	d301      	bcc.n	800b60e <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800b60a:	2300      	movs	r3, #0
 800b60c:	e07d      	b.n	800b70a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	429a      	cmp	r2, r3
 800b618:	d308      	bcc.n	800b62c <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689a      	ldr	r2, [r3, #8]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68d9      	ldr	r1, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800b628:	429a      	cmp	r2, r3
 800b62a:	d901      	bls.n	800b630 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800b62c:	2300      	movs	r3, #0
 800b62e:	e06c      	b.n	800b70a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	3301      	adds	r3, #1
 800b63c:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800b63e:	2300      	movs	r3, #0
 800b640:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b644:	3304      	adds	r3, #4
 800b646:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a31      	ldr	r2, [pc, #196]	@ (800b718 <_ux_utility_memory_byte_pool_search+0x134>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d143      	bne.n	800b6de <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b660:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800b662:	2301      	movs	r3, #1
 800b664:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b668:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800b678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67a:	3b08      	subs	r3, #8
 800b67c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800b67e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d23a      	bcs.n	800b6fc <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800b686:	2300      	movs	r3, #0
 800b688:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3304      	adds	r3, #4
 800b68e:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a1f      	ldr	r2, [pc, #124]	@ (800b718 <_ux_utility_memory_byte_pool_search+0x134>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d113      	bne.n	800b6c6 <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	1e5a      	subs	r2, r3, #1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d114      	bne.n	800b6e8 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6c2:	609a      	str	r2, [r3, #8]
 800b6c4:	e010      	b.n	800b6e8 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6dc:	e004      	b.n	800b6e8 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e0:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1a3      	bne.n	800b642 <_ux_utility_memory_byte_pool_search+0x5e>
 800b6fa:	e000      	b.n	800b6fe <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800b6fc:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800b6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800b704:	2300      	movs	r3, #0
 800b706:	e000      	b.n	800b70a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3734      	adds	r7, #52	@ 0x34
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	ffffeeee 	.word	0xffffeeee

0800b71c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800b730:	e007      	b.n	800b742 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	1c53      	adds	r3, r2, #1
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	1c59      	adds	r1, r3, #1
 800b73c:	6139      	str	r1, [r7, #16]
 800b73e:	7812      	ldrb	r2, [r2, #0]
 800b740:	701a      	strb	r2, [r3, #0]
    while(length--)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f2      	bne.n	800b732 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800b74c:	bf00      	nop
}
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	@ 0x28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800b760:	4b3d      	ldr	r3, [pc, #244]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f8c5 	bl	800b8f6 <_ux_utility_mutex_on>
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d03b      	beq.n	800b7f2 <_ux_utility_memory_free+0x9a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	3b08      	subs	r3, #8
 800b77e:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	3304      	adds	r3, #4
 800b784:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a33      	ldr	r2, [pc, #204]	@ (800b85c <_ux_utility_memory_free+0x104>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d022      	beq.n	800b7da <_ux_utility_memory_free+0x82>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	3304      	adds	r3, #4
 800b798:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00b      	beq.n	800b7c2 <_ux_utility_memory_free+0x6a>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800b7aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d029      	beq.n	800b80a <_ux_utility_memory_free+0xb2>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 800b7b6:	4b28      	ldr	r3, [pc, #160]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800b7bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d023      	beq.n	800b80a <_ux_utility_memory_free+0xb2>
            {

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b7c2:	4b25      	ldr	r3, [pc, #148]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 f889 	bl	800b8e0 <_ux_utility_mutex_off>

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b7ce:	2219      	movs	r2, #25
 800b7d0:	2108      	movs	r1, #8
 800b7d2:	2002      	movs	r0, #2
 800b7d4:	f7ff fc04 	bl	800afe0 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 800b7d8:	e03b      	b.n	800b852 <_ux_utility_memory_free+0xfa>
            }
        }
        else
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b7da:	4b1f      	ldr	r3, [pc, #124]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	330c      	adds	r3, #12
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 f87d 	bl	800b8e0 <_ux_utility_mutex_off>

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b7e6:	2219      	movs	r2, #25
 800b7e8:	2108      	movs	r1, #8
 800b7ea:	2002      	movs	r0, #2
 800b7ec:	f7ff fbf8 	bl	800afe0 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 800b7f0:	e02f      	b.n	800b852 <_ux_utility_memory_free+0xfa>
    }
    else
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b7f2:	4b19      	ldr	r3, [pc, #100]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	330c      	adds	r3, #12
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 f871 	bl	800b8e0 <_ux_utility_mutex_off>

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b7fe:	2219      	movs	r2, #25
 800b800:	2108      	movs	r1, #8
 800b802:	2002      	movs	r0, #2
 800b804:	f7ff fbec 	bl	800afe0 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 800b808:	e023      	b.n	800b852 <_ux_utility_memory_free+0xfa>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	3304      	adds	r3, #4
 800b80e:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	4a11      	ldr	r2, [pc, #68]	@ (800b85c <_ux_utility_memory_free+0x104>)
 800b818:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800b824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68f9      	ldr	r1, [r7, #12]
 800b82a:	6a3a      	ldr	r2, [r7, #32]
 800b82c:	1a8a      	subs	r2, r1, r2
 800b82e:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d202      	bcs.n	800b844 <_ux_utility_memory_free+0xec>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 800b83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b840:	6a3a      	ldr	r2, [r7, #32]
 800b842:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <_ux_utility_memory_free+0x100>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	330c      	adds	r3, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f848 	bl	800b8e0 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800b850:	bf00      	nop
}
 800b852:	3728      	adds	r7, #40	@ 0x28
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	20003518 	.word	0x20003518
 800b85c:	ffffeeee 	.word	0xffffeeee

0800b860 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	460b      	mov	r3, r1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800b872:	e004      	b.n	800b87e <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	617a      	str	r2, [r7, #20]
 800b87a:	7afa      	ldrb	r2, [r7, #11]
 800b87c:	701a      	strb	r2, [r3, #0]
    while(length--)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1f5      	bne.n	800b874 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800b888:	bf00      	nop
}
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800b89e:	2334      	movs	r3, #52	@ 0x34
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	6839      	ldr	r1, [r7, #0]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7fd fac5 	bl	8008e34 <_txe_mutex_create>
 800b8aa:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	2108      	movs	r1, #8
 800b8b6:	2002      	movs	r0, #2
 800b8b8:	f7ff fb92 	bl	800afe0 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7fd fb4e 	bl	8008f70 <_txe_mutex_delete>
 800b8d4:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7fd fbd9 	bl	80090a0 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800b8ee:	bf00      	nop
}
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800b8fe:	f04f 31ff 	mov.w	r1, #4294967295
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7fd fb72 	bl	8008fec <_txe_mutex_get>
 800b908:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	2108      	movs	r1, #8
 800b914:	2002      	movs	r0, #2
 800b916:	f7ff fb63 	bl	800afe0 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800b91a:	bf00      	nop
 800b91c:	bf00      	nop
}
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800b930:	231c      	movs	r3, #28
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7fd fbec 	bl	8009114 <_txe_semaphore_create>
 800b93c:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	2108      	movs	r1, #8
 800b948:	2002      	movs	r0, #2
 800b94a:	f7ff fb49 	bl	800afe0 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800b94e:	697b      	ldr	r3, [r7, #20]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7fd fc6d 	bl	8009240 <_txe_semaphore_delete>
 800b966:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b968:	68fb      	ldr	r3, [r7, #12]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fd fc9e 	bl	80092bc <_txe_semaphore_put>
 800b980:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b982:	68fb      	ldr	r3, [r7, #12]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	607a      	str	r2, [r7, #4]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	89fb      	ldrh	r3, [r7, #14]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800b9ac:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	60b9      	str	r1, [r7, #8]
 800b9c4:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800b9cc:	23ff      	movs	r3, #255	@ 0xff
 800b9ce:	e01d      	b.n	800ba0c <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	4413      	add	r3, r2
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00d      	beq.n	800b9fc <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d9f2      	bls.n	800b9d4 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800b9ee:	22ff      	movs	r2, #255	@ 0xff
 800b9f0:	2108      	movs	r1, #8
 800b9f2:	2002      	movs	r0, #2
 800b9f4:	f7ff faf4 	bl	800afe0 <_ux_system_error_handler>

            return(UX_ERROR);
 800b9f8:	23ff      	movs	r3, #255	@ 0xff
 800b9fa:	e007      	b.n	800ba0c <_ux_utility_string_length_check+0x52>
            break;
 800b9fc:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba26:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08a      	sub	sp, #40	@ 0x28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba66:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ba68:	4b51      	ldr	r3, [pc, #324]	@ (800bbb0 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3320      	adds	r3, #32
 800ba6e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	3338      	adds	r3, #56	@ 0x38
 800ba74:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800ba7c:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	3354      	adds	r3, #84	@ 0x54
 800ba82:	3302      	adds	r3, #2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff ff81 	bl	800b98c <_ux_utility_short_get>
 800ba8a:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	3354      	adds	r3, #84	@ 0x54
 800ba90:	3306      	adds	r3, #6
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff ff7a 	bl	800b98c <_ux_utility_short_get>
 800ba98:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b22      	cmp	r3, #34	@ 0x22
 800baa2:	d009      	beq.n	800bab8 <_ux_device_class_cdc_acm_control_request+0x64>
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2b22      	cmp	r3, #34	@ 0x22
 800baa8:	d877      	bhi.n	800bb9a <_ux_device_class_cdc_acm_control_request+0x146>
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b20      	cmp	r3, #32
 800baae:	d051      	beq.n	800bb54 <_ux_device_class_cdc_acm_control_request+0x100>
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b21      	cmp	r3, #33	@ 0x21
 800bab4:	d023      	beq.n	800bafe <_ux_device_class_cdc_acm_control_request+0xaa>
 800bab6:	e070      	b.n	800bb9a <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f003 0302 	and.w	r3, r3, #2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d054      	beq.n	800bb9e <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	69f8      	ldr	r0, [r7, #28]
 800bafa:	4798      	blx	r3
            }

            break ;
 800bafc:	e04f      	b.n	800bb9e <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b07      	cmp	r3, #7
 800bb02:	d901      	bls.n	800bb08 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800bb04:	2307      	movs	r3, #7
 800bb06:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb10:	4619      	mov	r1, r3
 800bb12:	4610      	mov	r0, r2
 800bb14:	f7ff fbd7 	bl	800b2c6 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	69fa      	ldr	r2, [r7, #28]
 800bb20:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 800bb24:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	3305      	adds	r3, #5
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 800bb32:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	3306      	adds	r3, #6
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	f892 207e 	ldrb.w	r2, [r2, #126]	@ 0x7e
 800bb40:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2203      	movs	r2, #3
 800bb46:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb4c:	6978      	ldr	r0, [r7, #20]
 800bb4e:	f7ff f9bd 	bl	800aecc <_ux_device_stack_transfer_request>
            break; 
 800bb52:	e027      	b.n	800bba4 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fb8e 	bl	800b27a <_ux_utility_long_get>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	791a      	ldrb	r2, [r3, #4]
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	795a      	ldrb	r2, [r3, #5]
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	799a      	ldrb	r2, [r3, #6]
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d008      	beq.n	800bba2 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	69f8      	ldr	r0, [r7, #28]
 800bb96:	4798      	blx	r3
            }

            break ;
 800bb98:	e003      	b.n	800bba2 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800bb9a:	23ff      	movs	r3, #255	@ 0xff
 800bb9c:	e003      	b.n	800bba6 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800bb9e:	bf00      	nop
 800bba0:	e000      	b.n	800bba4 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800bba2:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3728      	adds	r7, #40	@ 0x28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20003514 	.word	0x20003514

0800bbb4 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbc6:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	7b9b      	ldrb	r3, [r3, #14]
 800bbd8:	b25b      	sxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	db05      	blt.n	800bbea <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	61fb      	str	r3, [r7, #28]
 800bbe8:	e002      	b.n	800bbf0 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800bbf0:	2126      	movs	r1, #38	@ 0x26
 800bbf2:	69f8      	ldr	r0, [r7, #28]
 800bbf4:	f7ff f958 	bl	800aea8 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800bbf8:	2126      	movs	r1, #38	@ 0x26
 800bbfa:	69b8      	ldr	r0, [r7, #24]
 800bbfc:	f7ff f954 	bl	800aea8 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800bc00:	2200      	movs	r2, #0
 800bc02:	2107      	movs	r1, #7
 800bc04:	6938      	ldr	r0, [r7, #16]
 800bc06:	f000 f8bb 	bl	800bd80 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	6938      	ldr	r0, [r7, #16]
 800bc18:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	2b06      	cmp	r3, #6
 800bc44:	d836      	bhi.n	800bcb4 <_ux_device_class_cdc_acm_entry+0x80>
 800bc46:	a201      	add	r2, pc, #4	@ (adr r2, 800bc4c <_ux_device_class_cdc_acm_entry+0x18>)
 800bc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4c:	0800bc81 	.word	0x0800bc81
 800bc50:	0800bc91 	.word	0x0800bc91
 800bc54:	0800bc9d 	.word	0x0800bc9d
 800bc58:	0800bca9 	.word	0x0800bca9
 800bc5c:	0800bc69 	.word	0x0800bc69
 800bc60:	0800bcb5 	.word	0x0800bcb5
 800bc64:	0800bc75 	.word	0x0800bc75
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f829 	bl	800bcc0 <_ux_device_class_cdc_acm_initialize>
 800bc6e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	e020      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f94d 	bl	800bf14 <_ux_device_class_cdc_acm_uninitialize>
 800bc7a:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	e01a      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	2b0a      	cmp	r3, #10
 800bc86:	d101      	bne.n	800bc8c <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e014      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800bc8c:	2357      	movs	r3, #87	@ 0x57
 800bc8e:	e012      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff febf 	bl	800ba14 <_ux_device_class_cdc_acm_activate>
 800bc96:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	e00c      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7ff ff89 	bl	800bbb4 <_ux_device_class_cdc_acm_deactivate>
 800bca2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	e006      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff fed3 	bl	800ba54 <_ux_device_class_cdc_acm_control_request>
 800bcae:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	e000      	b.n	800bcb6 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800bcb4:	2354      	movs	r3, #84	@ 0x54
    }   
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop

0800bcc0 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800bcce:	2284      	movs	r2, #132	@ 0x84
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	f7ff fb1c 	bl	800b310 <_ux_utility_memory_allocate>
 800bcd8:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800bce0:	2312      	movs	r3, #18
 800bce2:	e045      	b.n	800bd70 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcee:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	60da      	str	r2, [r3, #12]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	3310      	adds	r3, #16
 800bd0c:	491a      	ldr	r1, [pc, #104]	@ (800bd78 <_ux_device_class_cdc_acm_initialize+0xb8>)
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fdc0 	bl	800b894 <_ux_utility_mutex_create>
 800bd14:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <_ux_device_class_cdc_acm_initialize+0x66>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800bd1c:	6938      	ldr	r0, [r7, #16]
 800bd1e:	f7ff fd1b 	bl	800b758 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800bd22:	2317      	movs	r3, #23
 800bd24:	e024      	b.n	800bd70 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3344      	adds	r3, #68	@ 0x44
 800bd2a:	4914      	ldr	r1, [pc, #80]	@ (800bd7c <_ux_device_class_cdc_acm_initialize+0xbc>)
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fdb1 	bl	800b894 <_ux_utility_mutex_create>
 800bd32:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3310      	adds	r3, #16
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fdc1 	bl	800b8c6 <_ux_utility_mutex_delete>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800bd44:	6938      	ldr	r0, [r7, #16]
 800bd46:	f7ff fd07 	bl	800b758 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800bd4a:	2317      	movs	r3, #23
 800bd4c:	e010      	b.n	800bd70 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bd54:	679a      	str	r2, [r3, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	2208      	movs	r2, #8
 800bd6a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	0800d5a8 	.word	0x0800d5a8
 800bd7c:	0800d5c8 	.word	0x0800d5c8

0800bd80 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	@ 0x28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	f200 80ae 	bhi.w	800bef6 <_ux_device_class_cdc_acm_ioctl+0x176>
 800bd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bda0 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800bdc5 	.word	0x0800bdc5
 800bda4:	0800bdf1 	.word	0x0800bdf1
 800bda8:	0800be1d 	.word	0x0800be1d
 800bdac:	0800be51 	.word	0x0800be51
 800bdb0:	0800be37 	.word	0x0800be37
 800bdb4:	0800bef7 	.word	0x0800bef7
 800bdb8:	0800bef7 	.word	0x0800bef7
 800bdbc:	0800beb1 	.word	0x0800beb1
 800bdc0:	0800beb1 	.word	0x0800beb1
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	791a      	ldrb	r2, [r3, #4]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	795a      	ldrb	r2, [r3, #5]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	799a      	ldrb	r2, [r3, #6]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
            
            break;
 800bdee:	e08b      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	719a      	strb	r2, [r3, #6]
            
            break;
 800be1a:	e075      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	705a      	strb	r2, [r3, #1]
            
            break;
 800be34:	e068      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	785a      	ldrb	r2, [r3, #1]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            
            break;
 800be4e:	e05b      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d002      	beq.n	800be68 <_ux_device_class_cdc_acm_ioctl+0xe8>
 800be62:	2b02      	cmp	r3, #2
 800be64:	d009      	beq.n	800be7a <_ux_device_class_cdc_acm_ioctl+0xfa>
 800be66:	e011      	b.n	800be8c <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	7b9b      	ldrb	r3, [r3, #14]
 800be6c:	b25b      	sxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	db0f      	blt.n	800be92 <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	623b      	str	r3, [r7, #32]
                }
                break;
 800be78:	e00b      	b.n	800be92 <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	7b9b      	ldrb	r3, [r3, #14]
 800be7e:	b25b      	sxtb	r3, r3
 800be80:	2b00      	cmp	r3, #0
 800be82:	da08      	bge.n	800be96 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	623b      	str	r3, [r7, #32]
                }
                break;
 800be8a:	e004      	b.n	800be96 <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800be8c:	2353      	movs	r3, #83	@ 0x53
 800be8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be90:	e002      	b.n	800be98 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800be92:	bf00      	nop
 800be94:	e000      	b.n	800be98 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800be96:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	3320      	adds	r3, #32
 800be9c:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d12f      	bne.n	800bf06 <_ux_device_class_cdc_acm_ioctl+0x186>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800bea6:	21f9      	movs	r1, #249	@ 0xf9
 800bea8:	69b8      	ldr	r0, [r7, #24]
 800beaa:	f7fe ffc3 	bl	800ae34 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800beae:	e02a      	b.n	800bf06 <_ux_device_class_cdc_acm_ioctl+0x186>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	7b9b      	ldrb	r3, [r3, #14]
 800bec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	2a08      	cmp	r2, #8
 800bec8:	d101      	bne.n	800bece <_ux_device_class_cdc_acm_ioctl+0x14e>
 800beca:	2200      	movs	r2, #0
 800becc:	e000      	b.n	800bed0 <_ux_device_class_cdc_acm_ioctl+0x150>
 800bece:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d002      	beq.n	800beda <_ux_device_class_cdc_acm_ioctl+0x15a>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	3320      	adds	r3, #32
 800bede:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d102      	bne.n	800beee <_ux_device_class_cdc_acm_ioctl+0x16e>
                status = UX_ERROR;
 800bee8:	23ff      	movs	r3, #255	@ 0xff
 800beea:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800beec:	e00c      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800bef4:	e008      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800bef6:	2254      	movs	r2, #84	@ 0x54
 800bef8:	2107      	movs	r1, #7
 800befa:	2002      	movs	r0, #2
 800befc:	f7ff f870 	bl	800afe0 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800bf00:	2354      	movs	r3, #84	@ 0x54
 800bf02:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf04:	e000      	b.n	800bf08 <_ux_device_class_cdc_acm_ioctl+0x188>
            break;
 800bf06:	bf00      	nop
    }

    /* Return status to caller.  */
    return(status);
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3728      	adds	r7, #40	@ 0x28
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop

0800bf14 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf26:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00c      	beq.n	800bf48 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	3310      	adds	r3, #16
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fcc7 	bl	800b8c6 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	3344      	adds	r3, #68	@ 0x44
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff fcc2 	bl	800b8c6 <_ux_utility_mutex_delete>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800bf42:	68b8      	ldr	r0, [r7, #8]
 800bf44:	f7ff fc08 	bl	800b758 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2280      	movs	r2, #128	@ 0x80
 800bf60:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800bf68:	6838      	ldr	r0, [r7, #0]
 800bf6a:	f7fd ff33 	bl	8009dd4 <_ux_device_stack_control_request_process>
}
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2280      	movs	r2, #128	@ 0x80
 800bf8c:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800bf8e:	68b8      	ldr	r0, [r7, #8]
 800bf90:	f7fd ff20 	bl	8009dd4 <_ux_device_stack_control_request_process>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d108      	bne.n	800bfac <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7f6 f88b 	bl	80020c2 <HAL_PCD_EP_Transmit>
    }
}
 800bfac:	bf00      	nop
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2280      	movs	r2, #128	@ 0x80
 800bfc4:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800bfc6:	68b8      	ldr	r0, [r7, #8]
 800bfc8:	f7fd ff04 	bl	8009dd4 <_ux_device_stack_control_request_process>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d108      	bne.n	800bfe4 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2204      	movs	r2, #4
 800bfd6:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7f6 f86f 	bl	80020c2 <HAL_PCD_EP_Transmit>
    }
}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bff4:	4b39      	ldr	r3, [pc, #228]	@ (800c0dc <HAL_PCD_SetupStageCallback+0xf0>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	3304      	adds	r3, #4
 800c004:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3320      	adds	r3, #32
 800c00c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c01a:	2208      	movs	r2, #8
 800c01c:	4619      	mov	r1, r3
 800c01e:	f7ff fb7d 	bl	800b71c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2200      	movs	r2, #0
 800c026:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2201      	movs	r2, #1
 800c02c:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2200      	movs	r2, #0
 800c032:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f023 020e 	bic.w	r2, r3, #14
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c046:	b25b      	sxtb	r3, r3
 800c048:	2b00      	cmp	r3, #0
 800c04a:	da04      	bge.n	800c056 <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800c04c:	6939      	ldr	r1, [r7, #16]
 800c04e:	6978      	ldr	r0, [r7, #20]
 800c050:	f7ff ff7f 	bl	800bf52 <_ux_dcd_stm32_setup_in>
 800c054:	e03e      	b.n	800c0d4 <HAL_PCD_SetupStageCallback+0xe8>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2200      	movs	r2, #0
 800c05a:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d105      	bne.n	800c07c <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	6939      	ldr	r1, [r7, #16]
 800c074:	6978      	ldr	r0, [r7, #20]
 800c076:	f7ff ff9d 	bl	800bfb4 <_ux_dcd_stm32_setup_status>
 800c07a:	e02b      	b.n	800c0d4 <HAL_PCD_SetupStageCallback+0xe8>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3354      	adds	r3, #84	@ 0x54
 800c086:	3306      	adds	r3, #6
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fc7f 	bl	800b98c <_ux_utility_short_get>
 800c08e:	4602      	mov	r2, r0
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c09c:	d907      	bls.n	800c0ae <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800c09e:	68f9      	ldr	r1, [r7, #12]
 800c0a0:	69b8      	ldr	r0, [r7, #24]
 800c0a2:	f000 f9f9 	bl	800c498 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800c0ac:	e012      	b.n	800c0d4 <HAL_PCD_SetupStageCallback+0xe8>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	68da      	ldr	r2, [r3, #12]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7f5 ffa7 	bl	800201c <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800c0d4:	3720      	adds	r7, #32
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20003514 	.word	0x20003514

0800c0e0 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c0ec:	4b56      	ldr	r3, [pc, #344]	@ (800c248 <HAL_PCD_DataInStageCallback+0x168>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	69db      	ldr	r3, [r3, #28]
 800c0f6:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00b      	beq.n	800c11a <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800c102:	78fb      	ldrb	r3, [r7, #3]
 800c104:	f003 020f 	and.w	r2, r3, #15
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	3370      	adds	r3, #112	@ 0x70
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	4413      	add	r3, r2
 800c116:	61fb      	str	r3, [r7, #28]
 800c118:	e00a      	b.n	800c130 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	f003 020f 	and.w	r2, r3, #15
 800c120:	4613      	mov	r3, r2
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4413      	add	r3, r2
 800c12c:	3304      	adds	r3, #4
 800c12e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3320      	adds	r3, #32
 800c136:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800c138:	78fb      	ldrb	r3, [r7, #3]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d15c      	bne.n	800c1f8 <HAL_PCD_DataInStageCallback+0x118>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	7a1b      	ldrb	r3, [r3, #8]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d179      	bne.n	800c240 <HAL_PCD_DataInStageCallback+0x160>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800c14c:	2300      	movs	r3, #0
 800c14e:	2200      	movs	r2, #0
 800c150:	2100      	movs	r1, #0
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7f5 ff62 	bl	800201c <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800c160:	4293      	cmp	r3, r2
 800c162:	d824      	bhi.n	800c1ae <HAL_PCD_DataInStageCallback+0xce>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d10a      	bne.n	800c182 <HAL_PCD_DataInStageCallback+0xa2>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	7b99      	ldrb	r1, [r3, #14]
 800c170:	2300      	movs	r3, #0
 800c172:	2200      	movs	r2, #0
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7f5 ffa4 	bl	80020c2 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800c180:	e05e      	b.n	800c240 <HAL_PCD_DataInStageCallback+0x160>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2202      	movs	r2, #2
 800c18c:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_PCD_DataInStageCallback+0xc6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	721a      	strb	r2, [r3, #8]
}
 800c1ac:	e048      	b.n	800c240 <HAL_PCD_DataInStageCallback+0x160>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	8a12      	ldrh	r2, [r2, #16]
 800c1b6:	1a9b      	subs	r3, r3, r2
 800c1b8:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	8a1b      	ldrh	r3, [r3, #16]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d902      	bls.n	800c1cc <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	8a1b      	ldrh	r3, [r3, #16]
 800c1ca:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	8a12      	ldrh	r2, [r2, #16]
 800c1d4:	441a      	add	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	69da      	ldr	r2, [r3, #28]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	1ad2      	subs	r2, r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7f5 ff66 	bl	80020c2 <HAL_PCD_EP_Transmit>
}
 800c1f6:	e023      	b.n	800c240 <HAL_PCD_DataInStageCallback+0x160>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d010      	beq.n	800c222 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00c      	beq.n	800c222 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	651a      	str	r2, [r3, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800c214:	78f9      	ldrb	r1, [r7, #3]
 800c216:	2300      	movs	r3, #0
 800c218:	2200      	movs	r2, #0
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7f5 ff51 	bl	80020c2 <HAL_PCD_EP_Transmit>
}
 800c220:	e00e      	b.n	800c240 <HAL_PCD_DataInStageCallback+0x160>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2202      	movs	r2, #2
 800c22c:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3330      	adds	r3, #48	@ 0x30
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fb99 	bl	800b972 <_ux_utility_semaphore_put>
}
 800c240:	bf00      	nop
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20003514 	.word	0x20003514

0800c24c <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800c258:	4b3b      	ldr	r3, [pc, #236]	@ (800c348 <HAL_PCD_DataOutStageCallback+0xfc>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	f003 020f 	and.w	r2, r3, #15
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	4413      	add	r3, r2
 800c276:	3304      	adds	r3, #4
 800c278:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3320      	adds	r3, #32
 800c280:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d147      	bne.n	800c318 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	7a1b      	ldrb	r3, [r3, #8]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d156      	bne.n	800c33e <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800c296:	78fb      	ldrb	r3, [r7, #3]
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7f5 fef9 	bl	8002092 <HAL_PCD_EP_GetRxCount>
 800c2a0:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	441a      	add	r2, r3
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d822      	bhi.n	800c300 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d005      	beq.n	800c2d2 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	8a1b      	ldrh	r3, [r3, #16]
 800c2ca:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d005      	beq.n	800c2de <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6939      	ldr	r1, [r7, #16]
 800c2d6:	6978      	ldr	r0, [r7, #20]
 800c2d8:	f7ff fe4d 	bl	800bf76 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800c2dc:	e02f      	b.n	800c33e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	8a12      	ldrh	r2, [r2, #16]
 800c2e6:	441a      	add	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7f5 fe8f 	bl	800201c <HAL_PCD_EP_Receive>
}
 800c2fe:	e01e      	b.n	800c33e <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2227      	movs	r2, #39	@ 0x27
 800c304:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d017      	beq.n	800c33e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c312:	6938      	ldr	r0, [r7, #16]
 800c314:	4798      	blx	r3
}
 800c316:	e012      	b.n	800c33e <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7f5 feb8 	bl	8002092 <HAL_PCD_EP_GetRxCount>
 800c322:	4602      	mov	r2, r0
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2200      	movs	r2, #0
 800c32c:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2202      	movs	r2, #2
 800c332:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3330      	adds	r3, #48	@ 0x30
 800c338:	4618      	mov	r0, r3
 800c33a:	f7ff fb1a 	bl	800b972 <_ux_utility_semaphore_put>
}
 800c33e:	bf00      	nop
 800c340:	3720      	adds	r7, #32
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20003514 	.word	0x20003514

0800c34c <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800c354:	4b14      	ldr	r3, [pc, #80]	@ (800c3a8 <HAL_PCD_ResetCallback+0x5c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800c35e:	f7fe f8a9 	bl	800a4b4 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	79db      	ldrb	r3, [r3, #7]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <HAL_PCD_ResetCallback+0x24>
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d006      	beq.n	800c37c <HAL_PCD_ResetCallback+0x30>
 800c36e:	e00b      	b.n	800c388 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800c370:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a8 <HAL_PCD_ResetCallback+0x5c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2202      	movs	r2, #2
 800c376:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c37a:	e00b      	b.n	800c394 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800c37c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a8 <HAL_PCD_ResetCallback+0x5c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2201      	movs	r2, #1
 800c382:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c386:	e005      	b.n	800c394 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800c388:	4b07      	ldr	r3, [pc, #28]	@ (800c3a8 <HAL_PCD_ResetCallback+0x5c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c392:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800c394:	f000 f8a0 	bl	800c4d8 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800c398:	4b03      	ldr	r3, [pc, #12]	@ (800c3a8 <HAL_PCD_ResetCallback+0x5c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2201      	movs	r2, #1
 800c39e:	621a      	str	r2, [r3, #32]
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20003514 	.word	0x20003514

0800c3ac <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c3b4:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <HAL_PCD_ConnectCallback+0x28>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800c3c0:	4b04      	ldr	r3, [pc, #16]	@ (800c3d4 <HAL_PCD_ConnectCallback+0x28>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3c8:	20f1      	movs	r0, #241	@ 0xf1
 800c3ca:	4798      	blx	r3
    }
}
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20003514 	.word	0x20003514

0800c3d8 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c410 <HAL_PCD_DisconnectCallback+0x38>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d005      	beq.n	800c3f8 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800c3ec:	4b08      	ldr	r3, [pc, #32]	@ (800c410 <HAL_PCD_DisconnectCallback+0x38>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3f4:	20f2      	movs	r0, #242	@ 0xf2
 800c3f6:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800c3f8:	4b05      	ldr	r3, [pc, #20]	@ (800c410 <HAL_PCD_DisconnectCallback+0x38>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800c402:	f7fe f857 	bl	800a4b4 <_ux_device_stack_disconnect>
    }
}
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20003514 	.word	0x20003514

0800c414 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c41c:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <HAL_PCD_SuspendCallback+0x28>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800c428:	4b04      	ldr	r3, [pc, #16]	@ (800c43c <HAL_PCD_SuspendCallback+0x28>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c430:	20f4      	movs	r0, #244	@ 0xf4
 800c432:	4798      	blx	r3
    }
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20003514 	.word	0x20003514

0800c440 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c448:	4b07      	ldr	r3, [pc, #28]	@ (800c468 <HAL_PCD_ResumeCallback+0x28>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c450:	2b00      	cmp	r3, #0
 800c452:	d005      	beq.n	800c460 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800c454:	4b04      	ldr	r3, [pc, #16]	@ (800c468 <HAL_PCD_ResumeCallback+0x28>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c45c:	20f3      	movs	r0, #243	@ 0xf3
 800c45e:	4798      	blx	r3
    }
}
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20003514 	.word	0x20003514

0800c46c <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c474:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <HAL_PCD_SOFCallback+0x28>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800c480:	4b04      	ldr	r3, [pc, #16]	@ (800c494 <HAL_PCD_SOFCallback+0x28>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c488:	20f0      	movs	r0, #240	@ 0xf0
 800c48a:	4798      	blx	r3
    }
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20003514 	.word	0x20003514

0800c498 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	f043 0204 	orr.w	r2, r3, #4
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	7b9a      	ldrb	r2, [r3, #14]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	7a9b      	ldrb	r3, [r3, #10]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f7f5 fe35 	bl	8002136 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c4de:	4b62      	ldr	r3, [pc, #392]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c4ea:	4b5f      	ldr	r3, [pc, #380]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3320      	adds	r3, #32
 800c4f0:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800c4f2:	4b5d      	ldr	r3, [pc, #372]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d110      	bne.n	800c520 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800c4fe:	4b5a      	ldr	r3, [pc, #360]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b59      	ldr	r3, [pc, #356]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
 800c50a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800c50e:	4b56      	ldr	r3, [pc, #344]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b55      	ldr	r3, [pc, #340]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 800c51a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c51e:	e02b      	b.n	800c578 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800c520:	4b51      	ldr	r3, [pc, #324]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2200      	movs	r2, #0
 800c526:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800c52a:	4b4f      	ldr	r3, [pc, #316]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800c532:	2b01      	cmp	r3, #1
 800c534:	d110      	bne.n	800c558 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c536:	4b4c      	ldr	r3, [pc, #304]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b4b      	ldr	r3, [pc, #300]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 800c542:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c546:	4b48      	ldr	r3, [pc, #288]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4b47      	ldr	r3, [pc, #284]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800c552:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c556:	e00f      	b.n	800c578 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800c558:	4b43      	ldr	r3, [pc, #268]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	4b42      	ldr	r3, [pc, #264]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c564:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800c568:	4b3f      	ldr	r3, [pc, #252]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b3e      	ldr	r3, [pc, #248]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 800c574:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c578:	4b3b      	ldr	r3, [pc, #236]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c580:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800c586:	220e      	movs	r2, #14
 800c588:	4938      	ldr	r1, [pc, #224]	@ (800c66c <_ux_dcd_stm32_initialize_complete+0x194>)
 800c58a:	68b8      	ldr	r0, [r7, #8]
 800c58c:	f7fe fe22 	bl	800b1d4 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3338      	adds	r3, #56	@ 0x38
 800c594:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c59c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f103 0218 	add.w	r2, r3, #24
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	7adb      	ldrb	r3, [r3, #11]
 800c5be:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f103 0218 	add.w	r2, r3, #24
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800c5d6:	210e      	movs	r1, #14
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f5 fe3a 	bl	800225e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	7adb      	ldrb	r3, [r3, #11]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	f7f5 fca5 	bl	8001f48 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c604:	2180      	movs	r1, #128	@ 0x80
 800c606:	4618      	mov	r0, r3
 800c608:	f7f5 fe29 	bl	800225e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	7adb      	ldrb	r3, [r3, #11]
 800c616:	461a      	mov	r2, r3
 800c618:	2300      	movs	r3, #0
 800c61a:	2180      	movs	r1, #128	@ 0x80
 800c61c:	f7f5 fc94 	bl	8001f48 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2208      	movs	r2, #8
 800c636:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2208      	movs	r2, #8
 800c63c:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c644:	4b08      	ldr	r3, [pc, #32]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800c650:	4b05      	ldr	r3, [pc, #20]	@ (800c668 <_ux_dcd_stm32_initialize_complete+0x190>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c658:	2001      	movs	r0, #1
 800c65a:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20003514 	.word	0x20003514
 800c66c:	20000030 	.word	0x20000030

0800c670 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 800c670:	b590      	push	{r4, r7, lr}
 800c672:	b097      	sub	sp, #92	@ 0x5c
 800c674:	af08      	add	r7, sp, #32
 800c676:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 800c678:	2300      	movs	r3, #0
 800c67a:	637b      	str	r3, [r7, #52]	@ 0x34
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;

  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	633b      	str	r3, [r7, #48]	@ 0x30

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 800c680:	f107 010c 	add.w	r1, r7, #12
 800c684:	2300      	movs	r3, #0
 800c686:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c68a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c68c:	f7fc fabe 	bl	8008c0c <_txe_byte_allocate>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800c696:	2302      	movs	r3, #2
 800c698:	e08b      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	2300      	movs	r3, #0
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c6a4:	f7fe fd62 	bl	800b16c <_uxe_system_initialize>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 800c6ae:	23ff      	movs	r3, #255	@ 0xff
 800c6b0:	e07f      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800c6b2:	f107 031c 	add.w	r3, r7, #28
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	f000 f8bd 	bl	800c838 <USBD_Get_Device_Framework_Speed>
 800c6be:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800c6c0:	f107 0318 	add.w	r3, r7, #24
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f000 f8b6 	bl	800c838 <USBD_Get_Device_Framework_Speed>
 800c6cc:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 800c6ce:	f107 0314 	add.w	r3, r7, #20
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 f8f2 	bl	800c8bc <USBD_Get_String_Framework>
 800c6d8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 800c6da:	f107 0310 	add.w	r3, r7, #16
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 f970 	bl	800c9c4 <USBD_Get_Language_Id_Framework>
 800c6e4:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 800c6e6:	69f9      	ldr	r1, [r7, #28]
 800c6e8:	69b8      	ldr	r0, [r7, #24]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	9404      	str	r4, [sp, #16]
 800c6f2:	9203      	str	r2, [sp, #12]
 800c6f4:	6a3a      	ldr	r2, [r7, #32]
 800c6f6:	9202      	str	r2, [sp, #8]
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	4603      	mov	r3, r0
 800c700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c704:	f7fd ffe4 	bl	800a6d0 <_ux_device_stack_initialize>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
      return UX_ERROR;
 800c70e:	23ff      	movs	r3, #255	@ 0xff
 800c710:	e04f      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 800c712:	4b2a      	ldr	r3, [pc, #168]	@ (800c7bc <MX_USBX_Device_Init+0x14c>)
 800c714:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c0 <MX_USBX_Device_Init+0x150>)
 800c716:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 800c718:	4b28      	ldr	r3, [pc, #160]	@ (800c7bc <MX_USBX_Device_Init+0x14c>)
 800c71a:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c4 <MX_USBX_Device_Init+0x154>)
 800c71c:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 800c71e:	4b27      	ldr	r3, [pc, #156]	@ (800c7bc <MX_USBX_Device_Init+0x14c>)
 800c720:	4a29      	ldr	r2, [pc, #164]	@ (800c7c8 <MX_USBX_Device_Init+0x158>)
 800c722:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 800c724:	2100      	movs	r1, #0
 800c726:	2002      	movs	r0, #2
 800c728:	f000 f9ac 	bl	800ca84 <USBD_Get_Configuration_Number>
 800c72c:	4603      	mov	r3, r0
 800c72e:	461a      	mov	r2, r3
 800c730:	4b26      	ldr	r3, [pc, #152]	@ (800c7cc <MX_USBX_Device_Init+0x15c>)
 800c732:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 800c734:	2100      	movs	r1, #0
 800c736:	2002      	movs	r0, #2
 800c738:	f000 f966 	bl	800ca08 <USBD_Get_Interface_Number>
 800c73c:	4603      	mov	r3, r0
 800c73e:	461a      	mov	r2, r3
 800c740:	4b23      	ldr	r3, [pc, #140]	@ (800c7d0 <MX_USBX_Device_Init+0x160>)
 800c742:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 800c744:	4b21      	ldr	r3, [pc, #132]	@ (800c7cc <MX_USBX_Device_Init+0x15c>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	4b21      	ldr	r3, [pc, #132]	@ (800c7d0 <MX_USBX_Device_Init+0x160>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	491b      	ldr	r1, [pc, #108]	@ (800c7bc <MX_USBX_Device_Init+0x14c>)
 800c74e:	9100      	str	r1, [sp, #0]
 800c750:	4920      	ldr	r1, [pc, #128]	@ (800c7d4 <MX_USBX_Device_Init+0x164>)
 800c752:	4821      	ldr	r0, [pc, #132]	@ (800c7d8 <MX_USBX_Device_Init+0x168>)
 800c754:	f7fd f906 	bl	8009964 <_ux_device_stack_class_register>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 800c75e:	23ff      	movs	r3, #255	@ 0xff
 800c760:	e027      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 800c762:	f107 010c 	add.w	r1, r7, #12
 800c766:	2300      	movs	r3, #0
 800c768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c76e:	f7fc fa4d 	bl	8008c0c <_txe_byte_allocate>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800c778:	2302      	movs	r3, #2
 800c77a:	e01a      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	22b0      	movs	r2, #176	@ 0xb0
 800c780:	9206      	str	r2, [sp, #24]
 800c782:	2201      	movs	r2, #1
 800c784:	9205      	str	r2, [sp, #20]
 800c786:	2200      	movs	r2, #0
 800c788:	9204      	str	r2, [sp, #16]
 800c78a:	220a      	movs	r2, #10
 800c78c:	9203      	str	r2, [sp, #12]
 800c78e:	220a      	movs	r2, #10
 800c790:	9202      	str	r2, [sp, #8]
 800c792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c796:	9201      	str	r2, [sp, #4]
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	2300      	movs	r3, #0
 800c79c:	4a0f      	ldr	r2, [pc, #60]	@ (800c7dc <MX_USBX_Device_Init+0x16c>)
 800c79e:	4910      	ldr	r1, [pc, #64]	@ (800c7e0 <MX_USBX_Device_Init+0x170>)
 800c7a0:	4810      	ldr	r0, [pc, #64]	@ (800c7e4 <MX_USBX_Device_Init+0x174>)
 800c7a2:	f7fc fda9 	bl	80092f8 <_txe_thread_create>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d001      	beq.n	800c7b0 <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERROR */
    return TX_THREAD_ERROR;
 800c7ac:	230e      	movs	r3, #14
 800c7ae:	e000      	b.n	800c7b2 <MX_USBX_Device_Init+0x142>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	373c      	adds	r7, #60	@ 0x3c
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd90      	pop	{r4, r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20003524 	.word	0x20003524
 800c7c0:	0800c7fd 	.word	0x0800c7fd
 800c7c4:	0800c811 	.word	0x0800c811
 800c7c8:	0800c825 	.word	0x0800c825
 800c7cc:	20003520 	.word	0x20003520
 800c7d0:	2000351c 	.word	0x2000351c
 800c7d4:	0800bc35 	.word	0x0800bc35
 800c7d8:	20000010 	.word	0x20000010
 800c7dc:	0800c7e9 	.word	0x0800c7e9
 800c7e0:	0800d5ec 	.word	0x0800d5ec
 800c7e4:	20003530 	.word	0x20003530

0800c7e8 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
 // TX_PARAMETER_NOT_USED(thread_input);
  /* USER CODE END app_ux_device_thread_entry */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 800c804:	bf00      	nop
}
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 800c818:	bf00      	nop
}
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 800c82c:	bf00      	nop
}
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d113      	bne.n	800c876 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800c84e:	4b16      	ldr	r3, [pc, #88]	@ (800c8a8 <USBD_Get_Device_Framework_Speed+0x70>)
 800c850:	6819      	ldr	r1, [r3, #0]
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	4a15      	ldr	r2, [pc, #84]	@ (800c8ac <USBD_Get_Device_Framework_Speed+0x74>)
 800c856:	4816      	ldr	r0, [pc, #88]	@ (800c8b0 <USBD_Get_Device_Framework_Speed+0x78>)
 800c858:	f000 f974 	bl	800cb44 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800c85c:	4b14      	ldr	r3, [pc, #80]	@ (800c8b0 <USBD_Get_Device_Framework_Speed+0x78>)
 800c85e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800c862:	4b13      	ldr	r3, [pc, #76]	@ (800c8b0 <USBD_Get_Device_Framework_Speed+0x78>)
 800c864:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c868:	441a      	add	r2, r3
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800c86e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a8 <USBD_Get_Device_Framework_Speed+0x70>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e012      	b.n	800c89c <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800c876:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <USBD_Get_Device_Framework_Speed+0x7c>)
 800c878:	6819      	ldr	r1, [r3, #0]
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	4a0b      	ldr	r2, [pc, #44]	@ (800c8ac <USBD_Get_Device_Framework_Speed+0x74>)
 800c87e:	480e      	ldr	r0, [pc, #56]	@ (800c8b8 <USBD_Get_Device_Framework_Speed+0x80>)
 800c880:	f000 f960 	bl	800cb44 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800c884:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b8 <USBD_Get_Device_Framework_Speed+0x80>)
 800c886:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800c88a:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b8 <USBD_Get_Device_Framework_Speed+0x80>)
 800c88c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c890:	441a      	add	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 800c896:	4b07      	ldr	r3, [pc, #28]	@ (800c8b4 <USBD_Get_Device_Framework_Speed+0x7c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 800c89c:	68fb      	ldr	r3, [r7, #12]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000064 	.word	0x20000064
 800c8ac:	20000058 	.word	0x20000058
 800c8b0:	200035e0 	.word	0x200035e0
 800c8b4:	20000068 	.word	0x20000068
 800c8b8:	20003708 	.word	0x20003708

0800c8bc <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	73fa      	strb	r2, [r7, #15]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	4b37      	ldr	r3, [pc, #220]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c8d6:	2109      	movs	r1, #9
 800c8d8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	73fa      	strb	r2, [r7, #15]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	4b34      	ldr	r3, [pc, #208]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c8e4:	2104      	movs	r1, #4
 800c8e6:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	73fa      	strb	r2, [r7, #15]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4b30      	ldr	r3, [pc, #192]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	4a2e      	ldr	r2, [pc, #184]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f107 020c 	add.w	r2, r7, #12
 800c900:	4619      	mov	r1, r3
 800c902:	482d      	ldr	r0, [pc, #180]	@ (800c9b8 <USBD_Get_String_Framework+0xfc>)
 800c904:	f000 f8d0 	bl	800caa8 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 800c908:	89bb      	ldrh	r3, [r7, #12]
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
 800c90e:	4413      	add	r3, r2
 800c910:	b2db      	uxtb	r3, r3
 800c912:	3301      	adds	r3, #1
 800c914:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c916:	7bfb      	ldrb	r3, [r7, #15]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	73fa      	strb	r2, [r7, #15]
 800c91c:	461a      	mov	r2, r3
 800c91e:	4b25      	ldr	r3, [pc, #148]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c920:	2109      	movs	r1, #9
 800c922:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	73fa      	strb	r2, [r7, #15]
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b21      	ldr	r3, [pc, #132]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c92e:	2104      	movs	r1, #4
 800c930:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	73fa      	strb	r2, [r7, #15]
 800c938:	461a      	mov	r2, r3
 800c93a:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c93c:	2102      	movs	r1, #2
 800c93e:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c944:	4413      	add	r3, r2
 800c946:	f107 020c 	add.w	r2, r7, #12
 800c94a:	4619      	mov	r1, r3
 800c94c:	481b      	ldr	r0, [pc, #108]	@ (800c9bc <USBD_Get_String_Framework+0x100>)
 800c94e:	f000 f8ab 	bl	800caa8 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800c952:	89bb      	ldrh	r3, [r7, #12]
 800c954:	b2da      	uxtb	r2, r3
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	4413      	add	r3, r2
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	3301      	adds	r3, #1
 800c95e:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	73fa      	strb	r2, [r7, #15]
 800c966:	461a      	mov	r2, r3
 800c968:	4b12      	ldr	r3, [pc, #72]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c96a:	2109      	movs	r1, #9
 800c96c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	73fa      	strb	r2, [r7, #15]
 800c974:	461a      	mov	r2, r3
 800c976:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c978:	2104      	movs	r1, #4
 800c97a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	73fa      	strb	r2, [r7, #15]
 800c982:	461a      	mov	r2, r3
 800c984:	4b0b      	ldr	r3, [pc, #44]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c986:	2103      	movs	r1, #3
 800c988:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	4a09      	ldr	r2, [pc, #36]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c98e:	4413      	add	r3, r2
 800c990:	f107 020c 	add.w	r2, r7, #12
 800c994:	4619      	mov	r1, r3
 800c996:	480a      	ldr	r0, [pc, #40]	@ (800c9c0 <USBD_Get_String_Framework+0x104>)
 800c998:	f000 f886 	bl	800caa8 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800c99c:	4805      	ldr	r0, [pc, #20]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
 800c99e:	f7f3 fd95 	bl	80004cc <strlen>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 800c9a8:	4b02      	ldr	r3, [pc, #8]	@ (800c9b4 <USBD_Get_String_Framework+0xf8>)
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200039c0 	.word	0x200039c0
 800c9b8:	0800d608 	.word	0x0800d608
 800c9bc:	0800d61c 	.word	0x0800d61c
 800c9c0:	0800d634 	.word	0x0800d634

0800c9c4 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	73fa      	strb	r2, [r7, #15]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800ca04 <USBD_Get_Language_Id_Framework+0x40>)
 800c9da:	2109      	movs	r1, #9
 800c9dc:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	73fa      	strb	r2, [r7, #15]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ca04 <USBD_Get_Language_Id_Framework+0x40>)
 800c9e8:	2104      	movs	r1, #4
 800c9ea:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800c9ec:	4805      	ldr	r0, [pc, #20]	@ (800ca04 <USBD_Get_Language_Id_Framework+0x40>)
 800c9ee:	f7f3 fd6d 	bl	80004cc <strlen>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 800c9f8:	4b02      	ldr	r3, [pc, #8]	@ (800ca04 <USBD_Get_Language_Id_Framework+0x40>)
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20003ac0 	.word	0x20003ac0

0800ca08 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	460a      	mov	r2, r1
 800ca12:	71fb      	strb	r3, [r7, #7]
 800ca14:	4613      	mov	r3, r2
 800ca16:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800ca20:	2300      	movs	r3, #0
 800ca22:	73bb      	strb	r3, [r7, #14]
 800ca24:	e021      	b.n	800ca6a <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	4a15      	ldr	r2, [pc, #84]	@ (800ca80 <USBD_Get_Interface_Number+0x78>)
 800ca2a:	215c      	movs	r1, #92	@ 0x5c
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	4413      	add	r3, r2
 800ca32:	330c      	adds	r3, #12
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	79fa      	ldrb	r2, [r7, #7]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d113      	bne.n	800ca64 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	4a10      	ldr	r2, [pc, #64]	@ (800ca80 <USBD_Get_Interface_Number+0x78>)
 800ca40:	215c      	movs	r1, #92	@ 0x5c
 800ca42:	fb01 f303 	mul.w	r3, r1, r3
 800ca46:	4413      	add	r3, r2
 800ca48:	3314      	adds	r3, #20
 800ca4a:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800ca4c:	79ba      	ldrb	r2, [r7, #6]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d108      	bne.n	800ca64 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800ca52:	7bbb      	ldrb	r3, [r7, #14]
 800ca54:	4a0a      	ldr	r2, [pc, #40]	@ (800ca80 <USBD_Get_Interface_Number+0x78>)
 800ca56:	215c      	movs	r1, #92	@ 0x5c
 800ca58:	fb01 f303 	mul.w	r3, r1, r3
 800ca5c:	4413      	add	r3, r2
 800ca5e:	335a      	adds	r3, #90	@ 0x5a
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800ca64:	7bbb      	ldrb	r3, [r7, #14]
 800ca66:	3301      	adds	r3, #1
 800ca68:	73bb      	strb	r3, [r7, #14]
 800ca6a:	7bbb      	ldrb	r3, [r7, #14]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d9da      	bls.n	800ca26 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	b29b      	uxth	r3, r3
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	200035e0 	.word	0x200035e0

0800ca84 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	460a      	mov	r2, r1
 800ca8e:	71fb      	strb	r3, [r7, #7]
 800ca90:	4613      	mov	r3, r2
 800ca92:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800ca94:	2301      	movs	r3, #1
 800ca96:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	b29b      	uxth	r3, r3
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cab4:	2300      	movs	r3, #0
 800cab6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d023      	beq.n	800cb06 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800cac2:	6938      	ldr	r0, [r7, #16]
 800cac4:	f000 f823 	bl	800cb0e <USBD_Desc_GetLen>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	75fa      	strb	r2, [r7, #23]
 800cad6:	461a      	mov	r2, r3
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4413      	add	r3, r2
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	7812      	ldrb	r2, [r2, #0]
 800cae0:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800cae2:	e00b      	b.n	800cafc <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	75fa      	strb	r2, [r7, #23]
 800caea:	461a      	mov	r2, r3
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	4413      	add	r3, r2
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	7812      	ldrb	r2, [r2, #0]
 800caf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	3301      	adds	r3, #1
 800cafa:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1ef      	bne.n	800cae4 <USBD_Desc_GetString+0x3c>
 800cb04:	e000      	b.n	800cb08 <USBD_Desc_GetString+0x60>
    return;
 800cb06:	bf00      	nop
  }
}
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b085      	sub	sp, #20
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb1e:	e005      	b.n	800cb2c <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800cb20:	7bfb      	ldrb	r3, [r7, #15]
 800cb22:	3301      	adds	r3, #1
 800cb24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1f5      	bne.n	800cb20 <USBD_Desc_GetLen+0x12>
  }

  return len;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
	...

0800cb44 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af02      	add	r7, sp, #8
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800cb66:	4a73      	ldr	r2, [pc, #460]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800cb6c:	4b71      	ldr	r3, [pc, #452]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2212      	movs	r2, #18
 800cb72:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800cb74:	4b6f      	ldr	r3, [pc, #444]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800cb7c:	4b6d      	ldr	r3, [pc, #436]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2200      	movs	r2, #0
 800cb82:	709a      	strb	r2, [r3, #2]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f042 0202 	orr.w	r2, r2, #2
 800cb8a:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800cb8c:	4b69      	ldr	r3, [pc, #420]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2200      	movs	r2, #0
 800cb92:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800cb94:	4b67      	ldr	r3, [pc, #412]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800cb9c:	4b65      	ldr	r3, [pc, #404]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2200      	movs	r2, #0
 800cba2:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800cba4:	4b63      	ldr	r3, [pc, #396]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2240      	movs	r2, #64	@ 0x40
 800cbaa:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800cbac:	4b61      	ldr	r3, [pc, #388]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 800cbb6:	721a      	strb	r2, [r3, #8]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f042 0204 	orr.w	r2, r2, #4
 800cbbe:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800cbc0:	4b5c      	ldr	r3, [pc, #368]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cbca:	729a      	strb	r2, [r3, #10]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 800cbd2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800cbd4:	4b57      	ldr	r3, [pc, #348]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	731a      	strb	r2, [r3, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f042 0202 	orr.w	r2, r2, #2
 800cbe2:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800cbe4:	4b53      	ldr	r3, [pc, #332]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800cbec:	4b51      	ldr	r3, [pc, #324]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800cbf4:	4b4f      	ldr	r3, [pc, #316]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2203      	movs	r2, #3
 800cbfa:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800cbfc:	4b4d      	ldr	r3, [pc, #308]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2201      	movs	r2, #1
 800cc02:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cc0a:	f103 0212 	add.w	r2, r3, #18
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800cc14:	78fb      	ldrb	r3, [r7, #3]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d162      	bne.n	800cce0 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	4413      	add	r3, r2
 800cc24:	4a44      	ldr	r2, [pc, #272]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc26:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800cc28:	4b43      	ldr	r3, [pc, #268]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	220a      	movs	r2, #10
 800cc2e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800cc30:	4b41      	ldr	r3, [pc, #260]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2206      	movs	r2, #6
 800cc36:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800cc38:	4b3f      	ldr	r3, [pc, #252]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	709a      	strb	r2, [r3, #2]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f042 0202 	orr.w	r2, r2, #2
 800cc46:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800cc48:	4b3b      	ldr	r3, [pc, #236]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800cc50:	4b39      	ldr	r3, [pc, #228]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2200      	movs	r2, #0
 800cc56:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800cc58:	4b37      	ldr	r3, [pc, #220]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800cc60:	4b35      	ldr	r3, [pc, #212]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2240      	movs	r2, #64	@ 0x40
 800cc66:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800cc68:	4b33      	ldr	r3, [pc, #204]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800cc70:	4b31      	ldr	r3, [pc, #196]	@ (800cd38 <USBD_Device_Framework_Builder+0x1f4>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cc7e:	f103 020a 	add.w	r2, r3, #10
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800cc88:	e02a      	b.n	800cce0 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d823      	bhi.n	800ccda <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d81f      	bhi.n	800ccda <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	4413      	add	r3, r2
 800cca0:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d019      	beq.n	800ccda <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800ccac:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	78fa      	ldrb	r2, [r7, #3]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 f83b 	bl	800cd3c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	1c5a      	adds	r2, r3, #1
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d9d1      	bls.n	800cc8a <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d90c      	bls.n	800cd08 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800ccee:	4b11      	ldr	r3, [pc, #68]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	22ef      	movs	r2, #239	@ 0xef
 800ccf4:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2201      	movs	r2, #1
 800cd04:	719a      	strb	r2, [r3, #6]
 800cd06:	e00f      	b.n	800cd28 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d10b      	bne.n	800cd28 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800cd10:	4b08      	ldr	r3, [pc, #32]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2202      	movs	r2, #2
 800cd16:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800cd18:	4b06      	ldr	r3, [pc, #24]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800cd20:	4b04      	ldr	r3, [pc, #16]	@ (800cd34 <USBD_Device_Framework_Builder+0x1f0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2200      	movs	r2, #0
 800cd26:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800cd28:	68bb      	ldr	r3, [r7, #8]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3718      	adds	r7, #24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20003ac4 	.word	0x20003ac4
 800cd38:	20003ac8 	.word	0x20003ac8

0800cd3c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	4608      	mov	r0, r1
 800cd46:	4611      	mov	r1, r2
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	70fb      	strb	r3, [r7, #3]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	70bb      	strb	r3, [r7, #2]
 800cd52:	4613      	mov	r3, r2
 800cd54:	707b      	strb	r3, [r7, #1]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d834      	bhi.n	800cdc8 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	215c      	movs	r1, #92	@ 0x5c
 800cd66:	fb01 f303 	mul.w	r3, r1, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3318      	adds	r3, #24
 800cd6e:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d129      	bne.n	800cdc8 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	6852      	ldr	r2, [r2, #4]
 800cd7c:	6879      	ldr	r1, [r7, #4]
 800cd7e:	205c      	movs	r0, #92	@ 0x5c
 800cd80:	fb00 f303 	mul.w	r3, r0, r3
 800cd84:	440b      	add	r3, r1
 800cd86:	3310      	adds	r3, #16
 800cd88:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	215c      	movs	r1, #92	@ 0x5c
 800cd92:	fb01 f303 	mul.w	r3, r1, r3
 800cd96:	4413      	add	r3, r2
 800cd98:	3318      	adds	r3, #24
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	215c      	movs	r1, #92	@ 0x5c
 800cda6:	fb01 f303 	mul.w	r3, r1, r3
 800cdaa:	4413      	add	r3, r2
 800cdac:	330c      	adds	r3, #12
 800cdae:	78fa      	ldrb	r2, [r7, #3]
 800cdb0:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800cdb2:	787b      	ldrb	r3, [r7, #1]
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f80a 	bl	800cdd2 <USBD_FrameWork_AddToConfDesc>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 800cdc4:	23ff      	movs	r3, #255	@ 0xff
 800cdc6:	e000      	b.n	800cdca <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b086      	sub	sp, #24
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	460b      	mov	r3, r1
 800cddc:	607a      	str	r2, [r7, #4]
 800cdde:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	7afa      	ldrb	r2, [r7, #11]
 800cde8:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d107      	bne.n	800ce02 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f000 f8a1 	bl	800cf44 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	215c      	movs	r1, #92	@ 0x5c
 800ce0a:	fb01 f303 	mul.w	r3, r1, r3
 800ce0e:	4413      	add	r3, r2
 800ce10:	330c      	adds	r3, #12
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d162      	bne.n	800cede <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f000 f866 	bl	800ceea <USBD_FrameWork_FindFreeIFNbr>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	215c      	movs	r1, #92	@ 0x5c
 800ce2a:	fb01 f303 	mul.w	r3, r1, r3
 800ce2e:	4413      	add	r3, r2
 800ce30:	3320      	adds	r3, #32
 800ce32:	2202      	movs	r2, #2
 800ce34:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	215c      	movs	r1, #92	@ 0x5c
 800ce3e:	fb01 f303 	mul.w	r3, r1, r3
 800ce42:	4413      	add	r3, r2
 800ce44:	335a      	adds	r3, #90	@ 0x5a
 800ce46:	7dfa      	ldrb	r2, [r7, #23]
 800ce48:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	7dfa      	ldrb	r2, [r7, #23]
 800ce50:	3201      	adds	r2, #1
 800ce52:	b2d0      	uxtb	r0, r2
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	215c      	movs	r1, #92	@ 0x5c
 800ce58:	fb01 f303 	mul.w	r3, r1, r3
 800ce5c:	4413      	add	r3, r2
 800ce5e:	335b      	adds	r3, #91	@ 0x5b
 800ce60:	4602      	mov	r2, r0
 800ce62:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	215c      	movs	r1, #92	@ 0x5c
 800ce6c:	fb01 f303 	mul.w	r3, r1, r3
 800ce70:	4413      	add	r3, r2
 800ce72:	331c      	adds	r3, #28
 800ce74:	2203      	movs	r2, #3
 800ce76:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d114      	bne.n	800cea8 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800ce7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce82:	2202      	movs	r2, #2
 800ce84:	2103      	movs	r1, #3
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 f889 	bl	800cf9e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ce8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce90:	2202      	movs	r2, #2
 800ce92:	2182      	movs	r1, #130	@ 0x82
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 f882 	bl	800cf9e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ce9a:	2308      	movs	r3, #8
 800ce9c:	2203      	movs	r2, #3
 800ce9e:	2181      	movs	r1, #129	@ 0x81
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 f87c 	bl	800cf9e <USBD_FrameWork_AssignEp>
 800cea6:	e011      	b.n	800cecc <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800cea8:	2340      	movs	r3, #64	@ 0x40
 800ceaa:	2202      	movs	r2, #2
 800ceac:	2103      	movs	r1, #3
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 f875 	bl	800cf9e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ceb4:	2340      	movs	r3, #64	@ 0x40
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	2182      	movs	r1, #130	@ 0x82
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f000 f86f 	bl	800cf9e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800cec0:	2308      	movs	r3, #8
 800cec2:	2203      	movs	r2, #3
 800cec4:	2181      	movs	r1, #129	@ 0x81
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 f869 	bl	800cf9e <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ced4:	461a      	mov	r2, r3
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 f8d4 	bl	800d084 <USBD_FrameWork_CDCDesc>

      break;
 800cedc:	e000      	b.n	800cee0 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 800cede:	bf00      	nop
  }

  return UX_SUCCESS;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b087      	sub	sp, #28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	613b      	str	r3, [r7, #16]
 800cefa:	e016      	b.n	800cf2a <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e005      	b.n	800cf0e <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	3301      	adds	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	215c      	movs	r1, #92	@ 0x5c
 800cf14:	fb01 f303 	mul.w	r3, r1, r3
 800cf18:	4413      	add	r3, r2
 800cf1a:	3320      	adds	r3, #32
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d3ee      	bcc.n	800cf02 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	3301      	adds	r3, #1
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d3e3      	bcc.n	800cefc <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	b2db      	uxtb	r3, r3
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	371c      	adds	r7, #28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2209      	movs	r2, #9
 800cf56:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	709a      	strb	r2, [r3, #2]
 800cf64:	2200      	movs	r2, #0
 800cf66:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	22c0      	movs	r2, #192	@ 0xc0
 800cf7e:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f103 0209 	add.w	r2, r3, #9
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	601a      	str	r2, [r3, #0]
}
 800cf92:	bf00      	nop
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800cf9e:	b490      	push	{r4, r7}
 800cfa0:	b086      	sub	sp, #24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	72fb      	strb	r3, [r7, #11]
 800cfac:	4613      	mov	r3, r2
 800cfae:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cfb4:	e002      	b.n	800cfbc <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	215c      	movs	r1, #92	@ 0x5c
 800cfc4:	fb01 f303 	mul.w	r3, r1, r3
 800cfc8:	4413      	add	r3, r2
 800cfca:	331c      	adds	r3, #28
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d210      	bcs.n	800cff6 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6858      	ldr	r0, [r3, #4]
 800cfd8:	68f9      	ldr	r1, [r7, #12]
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	4413      	add	r3, r2
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	225c      	movs	r2, #92	@ 0x5c
 800cfe6:	fb00 f202 	mul.w	r2, r0, r2
 800cfea:	4413      	add	r3, r2
 800cfec:	440b      	add	r3, r1
 800cfee:	3328      	adds	r3, #40	@ 0x28
 800cff0:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1df      	bne.n	800cfb6 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6858      	ldr	r0, [r3, #4]
 800cffa:	68f9      	ldr	r1, [r7, #12]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	4613      	mov	r3, r2
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	4413      	add	r3, r2
 800d004:	005b      	lsls	r3, r3, #1
 800d006:	225c      	movs	r2, #92	@ 0x5c
 800d008:	fb00 f202 	mul.w	r2, r0, r2
 800d00c:	4413      	add	r3, r2
 800d00e:	440b      	add	r3, r1
 800d010:	3324      	adds	r3, #36	@ 0x24
 800d012:	7afa      	ldrb	r2, [r7, #11]
 800d014:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6858      	ldr	r0, [r3, #4]
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	4613      	mov	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	4413      	add	r3, r2
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	225c      	movs	r2, #92	@ 0x5c
 800d028:	fb00 f202 	mul.w	r2, r0, r2
 800d02c:	4413      	add	r3, r2
 800d02e:	440b      	add	r3, r1
 800d030:	3325      	adds	r3, #37	@ 0x25
 800d032:	7aba      	ldrb	r2, [r7, #10]
 800d034:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6858      	ldr	r0, [r3, #4]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	b29c      	uxth	r4, r3
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	4613      	mov	r3, r2
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	4413      	add	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	225c      	movs	r2, #92	@ 0x5c
 800d04c:	fb00 f202 	mul.w	r2, r0, r2
 800d050:	4413      	add	r3, r2
 800d052:	440b      	add	r3, r1
 800d054:	3326      	adds	r3, #38	@ 0x26
 800d056:	4622      	mov	r2, r4
 800d058:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6858      	ldr	r0, [r3, #4]
 800d05e:	68f9      	ldr	r1, [r7, #12]
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	4613      	mov	r3, r2
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4413      	add	r3, r2
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	225c      	movs	r2, #92	@ 0x5c
 800d06c:	fb00 f202 	mul.w	r2, r0, r2
 800d070:	4413      	add	r3, r2
 800d072:	440b      	add	r3, r1
 800d074:	3328      	adds	r3, #40	@ 0x28
 800d076:	2201      	movs	r2, #1
 800d078:	701a      	strb	r2, [r3, #0]
}
 800d07a:	bf00      	nop
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bc90      	pop	{r4, r7}
 800d082:	4770      	bx	lr

0800d084 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	4413      	add	r3, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4b99      	ldr	r3, [pc, #612]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d09c:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800d09e:	4b98      	ldr	r3, [pc, #608]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 800d0a6:	4b96      	ldr	r3, [pc, #600]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	220b      	movs	r2, #11
 800d0ac:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	4b93      	ldr	r3, [pc, #588]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68f9      	ldr	r1, [r7, #12]
 800d0b8:	205c      	movs	r0, #92	@ 0x5c
 800d0ba:	fb00 f202 	mul.w	r2, r0, r2
 800d0be:	440a      	add	r2, r1
 800d0c0:	325a      	adds	r2, #90	@ 0x5a
 800d0c2:	7812      	ldrb	r2, [r2, #0]
 800d0c4:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 800d0c6:	4b8e      	ldr	r3, [pc, #568]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 800d0ce:	4b8c      	ldr	r3, [pc, #560]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 800d0d6:	4b8a      	ldr	r3, [pc, #552]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 800d0de:	4b88      	ldr	r3, [pc, #544]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 800d0e6:	4b86      	ldr	r3, [pc, #536]	@ (800d300 <USBD_FrameWork_CDCDesc+0x27c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f103 0208 	add.w	r2, r3, #8
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4413      	add	r3, r2
 800d102:	461a      	mov	r2, r3
 800d104:	4b7f      	ldr	r3, [pc, #508]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	4b7e      	ldr	r3, [pc, #504]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2209      	movs	r2, #9
 800d10e:	701a      	strb	r2, [r3, #0]
 800d110:	4b7c      	ldr	r3, [pc, #496]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2204      	movs	r2, #4
 800d116:	705a      	strb	r2, [r3, #1]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	4b79      	ldr	r3, [pc, #484]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68f9      	ldr	r1, [r7, #12]
 800d122:	205c      	movs	r0, #92	@ 0x5c
 800d124:	fb00 f202 	mul.w	r2, r0, r2
 800d128:	440a      	add	r2, r1
 800d12a:	325a      	adds	r2, #90	@ 0x5a
 800d12c:	7812      	ldrb	r2, [r2, #0]
 800d12e:	709a      	strb	r2, [r3, #2]
 800d130:	4b74      	ldr	r3, [pc, #464]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2200      	movs	r2, #0
 800d136:	70da      	strb	r2, [r3, #3]
 800d138:	4b72      	ldr	r3, [pc, #456]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2201      	movs	r2, #1
 800d13e:	711a      	strb	r2, [r3, #4]
 800d140:	4b70      	ldr	r3, [pc, #448]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2202      	movs	r2, #2
 800d146:	715a      	strb	r2, [r3, #5]
 800d148:	4b6e      	ldr	r3, [pc, #440]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2202      	movs	r2, #2
 800d14e:	719a      	strb	r2, [r3, #6]
 800d150:	4b6c      	ldr	r3, [pc, #432]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2201      	movs	r2, #1
 800d156:	71da      	strb	r2, [r3, #7]
 800d158:	4b6a      	ldr	r3, [pc, #424]	@ (800d304 <USBD_FrameWork_CDCDesc+0x280>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2200      	movs	r2, #0
 800d15e:	721a      	strb	r2, [r3, #8]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f103 0209 	add.w	r2, r3, #9
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	4413      	add	r3, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4b64      	ldr	r3, [pc, #400]	@ (800d308 <USBD_FrameWork_CDCDesc+0x284>)
 800d178:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 800d17a:	4b63      	ldr	r3, [pc, #396]	@ (800d308 <USBD_FrameWork_CDCDesc+0x284>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2205      	movs	r2, #5
 800d180:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 800d182:	4b61      	ldr	r3, [pc, #388]	@ (800d308 <USBD_FrameWork_CDCDesc+0x284>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2224      	movs	r2, #36	@ 0x24
 800d188:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 800d18a:	4b5f      	ldr	r3, [pc, #380]	@ (800d308 <USBD_FrameWork_CDCDesc+0x284>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2200      	movs	r2, #0
 800d190:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 800d192:	4b5d      	ldr	r3, [pc, #372]	@ (800d308 <USBD_FrameWork_CDCDesc+0x284>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2200      	movs	r2, #0
 800d198:	f042 0210 	orr.w	r2, r2, #16
 800d19c:	70da      	strb	r2, [r3, #3]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f042 0201 	orr.w	r2, r2, #1
 800d1a4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	1d5a      	adds	r2, r3, #5
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4b54      	ldr	r3, [pc, #336]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1bc:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 800d1be:	4b53      	ldr	r3, [pc, #332]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2205      	movs	r2, #5
 800d1c4:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 800d1c6:	4b51      	ldr	r3, [pc, #324]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2224      	movs	r2, #36	@ 0x24
 800d1cc:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 800d1ce:	4b4f      	ldr	r3, [pc, #316]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800d1d6:	4b4d      	ldr	r3, [pc, #308]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4b4a      	ldr	r3, [pc, #296]	@ (800d30c <USBD_FrameWork_CDCDesc+0x288>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68f9      	ldr	r1, [r7, #12]
 800d1e8:	205c      	movs	r0, #92	@ 0x5c
 800d1ea:	fb00 f202 	mul.w	r2, r0, r2
 800d1ee:	440a      	add	r2, r1
 800d1f0:	325b      	adds	r2, #91	@ 0x5b
 800d1f2:	7812      	ldrb	r2, [r2, #0]
 800d1f4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	1d5a      	adds	r2, r3, #5
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4413      	add	r3, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	4b41      	ldr	r3, [pc, #260]	@ (800d310 <USBD_FrameWork_CDCDesc+0x28c>)
 800d20c:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 800d20e:	4b40      	ldr	r3, [pc, #256]	@ (800d310 <USBD_FrameWork_CDCDesc+0x28c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2204      	movs	r2, #4
 800d214:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 800d216:	4b3e      	ldr	r3, [pc, #248]	@ (800d310 <USBD_FrameWork_CDCDesc+0x28c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2224      	movs	r2, #36	@ 0x24
 800d21c:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 800d21e:	4b3c      	ldr	r3, [pc, #240]	@ (800d310 <USBD_FrameWork_CDCDesc+0x28c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2202      	movs	r2, #2
 800d224:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 800d226:	4b3a      	ldr	r3, [pc, #232]	@ (800d310 <USBD_FrameWork_CDCDesc+0x28c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2202      	movs	r2, #2
 800d22c:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	1d1a      	adds	r2, r3, #4
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	4413      	add	r3, r2
 800d240:	461a      	mov	r2, r3
 800d242:	4b34      	ldr	r3, [pc, #208]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d244:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 800d246:	4b33      	ldr	r3, [pc, #204]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2205      	movs	r2, #5
 800d24c:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 800d24e:	4b31      	ldr	r3, [pc, #196]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2224      	movs	r2, #36	@ 0x24
 800d254:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800d256:	4b2f      	ldr	r3, [pc, #188]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2206      	movs	r2, #6
 800d25c:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	4b2c      	ldr	r3, [pc, #176]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68f9      	ldr	r1, [r7, #12]
 800d268:	205c      	movs	r0, #92	@ 0x5c
 800d26a:	fb00 f202 	mul.w	r2, r0, r2
 800d26e:	440a      	add	r2, r1
 800d270:	325a      	adds	r2, #90	@ 0x5a
 800d272:	7812      	ldrb	r2, [r2, #0]
 800d274:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	685a      	ldr	r2, [r3, #4]
 800d27a:	4b26      	ldr	r3, [pc, #152]	@ (800d314 <USBD_FrameWork_CDCDesc+0x290>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68f9      	ldr	r1, [r7, #12]
 800d280:	205c      	movs	r0, #92	@ 0x5c
 800d282:	fb00 f202 	mul.w	r2, r0, r2
 800d286:	440a      	add	r2, r1
 800d288:	325b      	adds	r2, #91	@ 0x5b
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	1d5a      	adds	r2, r3, #5
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	4413      	add	r3, r2
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2207      	movs	r2, #7
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2205      	movs	r2, #5
 800d2b4:	705a      	strb	r2, [r3, #1]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685a      	ldr	r2, [r3, #4]
 800d2ba:	4b17      	ldr	r3, [pc, #92]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68f9      	ldr	r1, [r7, #12]
 800d2c0:	205c      	movs	r0, #92	@ 0x5c
 800d2c2:	fb00 f202 	mul.w	r2, r0, r2
 800d2c6:	440a      	add	r2, r1
 800d2c8:	3230      	adds	r2, #48	@ 0x30
 800d2ca:	7812      	ldrb	r2, [r2, #0]
 800d2cc:	709a      	strb	r2, [r3, #2]
 800d2ce:	4b12      	ldr	r3, [pc, #72]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2203      	movs	r2, #3
 800d2d4:	70da      	strb	r2, [r3, #3]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	4b0f      	ldr	r3, [pc, #60]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	205c      	movs	r0, #92	@ 0x5c
 800d2e2:	fb00 f202 	mul.w	r2, r0, r2
 800d2e6:	440a      	add	r2, r1
 800d2e8:	3232      	adds	r2, #50	@ 0x32
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	809a      	strh	r2, [r3, #4]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d112      	bne.n	800d31c <USBD_FrameWork_CDCDesc+0x298>
 800d2f6:	4b08      	ldr	r3, [pc, #32]	@ (800d318 <USBD_FrameWork_CDCDesc+0x294>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2205      	movs	r2, #5
 800d2fc:	719a      	strb	r2, [r3, #6]
 800d2fe:	e011      	b.n	800d324 <USBD_FrameWork_CDCDesc+0x2a0>
 800d300:	20003acc 	.word	0x20003acc
 800d304:	20003ad0 	.word	0x20003ad0
 800d308:	20003ad4 	.word	0x20003ad4
 800d30c:	20003ad8 	.word	0x20003ad8
 800d310:	20003adc 	.word	0x20003adc
 800d314:	20003ae0 	.word	0x20003ae0
 800d318:	20003ae4 	.word	0x20003ae4
 800d31c:	4b66      	ldr	r3, [pc, #408]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2205      	movs	r2, #5
 800d322:	719a      	strb	r2, [r3, #6]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	1dda      	adds	r2, r3, #7
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	4413      	add	r3, r2
 800d336:	461a      	mov	r2, r3
 800d338:	4b60      	ldr	r3, [pc, #384]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	4b5f      	ldr	r3, [pc, #380]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2209      	movs	r2, #9
 800d342:	701a      	strb	r2, [r3, #0]
 800d344:	4b5d      	ldr	r3, [pc, #372]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2204      	movs	r2, #4
 800d34a:	705a      	strb	r2, [r3, #1]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	4b5a      	ldr	r3, [pc, #360]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68f9      	ldr	r1, [r7, #12]
 800d356:	205c      	movs	r0, #92	@ 0x5c
 800d358:	fb00 f202 	mul.w	r2, r0, r2
 800d35c:	440a      	add	r2, r1
 800d35e:	325b      	adds	r2, #91	@ 0x5b
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	709a      	strb	r2, [r3, #2]
 800d364:	4b55      	ldr	r3, [pc, #340]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2200      	movs	r2, #0
 800d36a:	70da      	strb	r2, [r3, #3]
 800d36c:	4b53      	ldr	r3, [pc, #332]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2202      	movs	r2, #2
 800d372:	711a      	strb	r2, [r3, #4]
 800d374:	4b51      	ldr	r3, [pc, #324]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	220a      	movs	r2, #10
 800d37a:	715a      	strb	r2, [r3, #5]
 800d37c:	4b4f      	ldr	r3, [pc, #316]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2200      	movs	r2, #0
 800d382:	719a      	strb	r2, [r3, #6]
 800d384:	4b4d      	ldr	r3, [pc, #308]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2200      	movs	r2, #0
 800d38a:	71da      	strb	r2, [r3, #7]
 800d38c:	4b4b      	ldr	r3, [pc, #300]	@ (800d4bc <USBD_FrameWork_CDCDesc+0x438>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2200      	movs	r2, #0
 800d392:	721a      	strb	r2, [r3, #8]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f103 0209 	add.w	r2, r3, #9
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	4b43      	ldr	r3, [pc, #268]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3ac:	601a      	str	r2, [r3, #0]
 800d3ae:	4b42      	ldr	r3, [pc, #264]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2207      	movs	r2, #7
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	4b40      	ldr	r3, [pc, #256]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2205      	movs	r2, #5
 800d3bc:	705a      	strb	r2, [r3, #1]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	4b3d      	ldr	r3, [pc, #244]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	205c      	movs	r0, #92	@ 0x5c
 800d3ca:	fb00 f202 	mul.w	r2, r0, r2
 800d3ce:	440a      	add	r2, r1
 800d3d0:	3224      	adds	r2, #36	@ 0x24
 800d3d2:	7812      	ldrb	r2, [r2, #0]
 800d3d4:	709a      	strb	r2, [r3, #2]
 800d3d6:	4b38      	ldr	r3, [pc, #224]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2202      	movs	r2, #2
 800d3dc:	70da      	strb	r2, [r3, #3]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	4b35      	ldr	r3, [pc, #212]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68f9      	ldr	r1, [r7, #12]
 800d3e8:	205c      	movs	r0, #92	@ 0x5c
 800d3ea:	fb00 f202 	mul.w	r2, r0, r2
 800d3ee:	440a      	add	r2, r1
 800d3f0:	3226      	adds	r2, #38	@ 0x26
 800d3f2:	8812      	ldrh	r2, [r2, #0]
 800d3f4:	809a      	strh	r2, [r3, #4]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d104      	bne.n	800d408 <USBD_FrameWork_CDCDesc+0x384>
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2200      	movs	r2, #0
 800d404:	719a      	strb	r2, [r3, #6]
 800d406:	e003      	b.n	800d410 <USBD_FrameWork_CDCDesc+0x38c>
 800d408:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2200      	movs	r2, #0
 800d40e:	719a      	strb	r2, [r3, #6]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	1dda      	adds	r2, r3, #7
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	461a      	mov	r2, r3
 800d424:	4b24      	ldr	r3, [pc, #144]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	4b23      	ldr	r3, [pc, #140]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2207      	movs	r2, #7
 800d42e:	701a      	strb	r2, [r3, #0]
 800d430:	4b21      	ldr	r3, [pc, #132]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2205      	movs	r2, #5
 800d436:	705a      	strb	r2, [r3, #1]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68f9      	ldr	r1, [r7, #12]
 800d442:	205c      	movs	r0, #92	@ 0x5c
 800d444:	fb00 f202 	mul.w	r2, r0, r2
 800d448:	440a      	add	r2, r1
 800d44a:	322a      	adds	r2, #42	@ 0x2a
 800d44c:	7812      	ldrb	r2, [r2, #0]
 800d44e:	709a      	strb	r2, [r3, #2]
 800d450:	4b19      	ldr	r3, [pc, #100]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2202      	movs	r2, #2
 800d456:	70da      	strb	r2, [r3, #3]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	4b16      	ldr	r3, [pc, #88]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68f9      	ldr	r1, [r7, #12]
 800d462:	205c      	movs	r0, #92	@ 0x5c
 800d464:	fb00 f202 	mul.w	r2, r0, r2
 800d468:	440a      	add	r2, r1
 800d46a:	322c      	adds	r2, #44	@ 0x2c
 800d46c:	8812      	ldrh	r2, [r2, #0]
 800d46e:	809a      	strh	r2, [r3, #4]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d104      	bne.n	800d482 <USBD_FrameWork_CDCDesc+0x3fe>
 800d478:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2200      	movs	r2, #0
 800d47e:	719a      	strb	r2, [r3, #6]
 800d480:	e003      	b.n	800d48a <USBD_FrameWork_CDCDesc+0x406>
 800d482:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b8 <USBD_FrameWork_CDCDesc+0x434>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2200      	movs	r2, #0
 800d488:	719a      	strb	r2, [r3, #6]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	1dda      	adds	r2, r3, #7
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	791a      	ldrb	r2, [r3, #4]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	3202      	adds	r2, #2
 800d49c:	b2d2      	uxtb	r2, r2
 800d49e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	b292      	uxth	r2, r2
 800d4a8:	805a      	strh	r2, [r3, #2]
}
 800d4aa:	bf00      	nop
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20003ae4 	.word	0x20003ae4
 800d4bc:	20003ad0 	.word	0x20003ad0

0800d4c0 <memset>:
 800d4c0:	4402      	add	r2, r0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d100      	bne.n	800d4ca <memset+0xa>
 800d4c8:	4770      	bx	lr
 800d4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d4ce:	e7f9      	b.n	800d4c4 <memset+0x4>

0800d4d0 <__libc_init_array>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d508 <__libc_init_array+0x38>)
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	4c0d      	ldr	r4, [pc, #52]	@ (800d50c <__libc_init_array+0x3c>)
 800d4d8:	1b64      	subs	r4, r4, r5
 800d4da:	10a4      	asrs	r4, r4, #2
 800d4dc:	42a6      	cmp	r6, r4
 800d4de:	d109      	bne.n	800d4f4 <__libc_init_array+0x24>
 800d4e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d510 <__libc_init_array+0x40>)
 800d4e2:	2600      	movs	r6, #0
 800d4e4:	4c0b      	ldr	r4, [pc, #44]	@ (800d514 <__libc_init_array+0x44>)
 800d4e6:	f000 f817 	bl	800d518 <_init>
 800d4ea:	1b64      	subs	r4, r4, r5
 800d4ec:	10a4      	asrs	r4, r4, #2
 800d4ee:	42a6      	cmp	r6, r4
 800d4f0:	d105      	bne.n	800d4fe <__libc_init_array+0x2e>
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f8:	3601      	adds	r6, #1
 800d4fa:	4798      	blx	r3
 800d4fc:	e7ee      	b.n	800d4dc <__libc_init_array+0xc>
 800d4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d502:	3601      	adds	r6, #1
 800d504:	4798      	blx	r3
 800d506:	e7f2      	b.n	800d4ee <__libc_init_array+0x1e>
 800d508:	0800d724 	.word	0x0800d724
 800d50c:	0800d724 	.word	0x0800d724
 800d510:	0800d724 	.word	0x0800d724
 800d514:	0800d728 	.word	0x0800d728

0800d518 <_init>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	bf00      	nop
 800d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51e:	bc08      	pop	{r3}
 800d520:	469e      	mov	lr, r3
 800d522:	4770      	bx	lr

0800d524 <_fini>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr
