
27_1u595rit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082e0  080082e0  000092e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080082e4  080082e4  000092e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000048  20000000  080082e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a28  20000048  08008330  0000a048  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004a70  08008330  0000aa70  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d3b9  00000000  00000000  0000a07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004702  00000000  00000000  00027437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001110  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c3e  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d04  00000000  00000000  0002d88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001de68  00000000  00000000  00066592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a916  00000000  00000000  000843fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ced10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c0c  00000000  00000000  001ced54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001d2960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000048 	.word	0x20000048
 800026c:	00000000 	.word	0x00000000
 8000270:	08008238 	.word	0x08008238

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000004c 	.word	0x2000004c
 800028c:	08008238 	.word	0x08008238

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fa06 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f80a 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 f88e 	bl	80003cc <MX_GPIO_Init>
  MX_USB_OTG_HS_PCD_Init();
 80002b0:	f000 f85e 	bl	8000370 <MX_USB_OTG_HS_PCD_Init>
  MX_USBX_Device_Init();
 80002b4:	f007 f85e 	bl	8007374 <MX_USBX_Device_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// ux_dcd_stm32_interrupt_handler();
	  HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fac1 	bl	8000840 <HAL_Delay>
 80002be:	e7fb      	b.n	80002b8 <main+0x18>

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09e      	sub	sp, #120	@ 0x78
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2260      	movs	r2, #96	@ 0x60
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f007 ff86 	bl	80081e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80002e4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80002e8:	f001 fe1e 	bl	8001f28 <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002f2:	f000 f895 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000304:	2303      	movs	r3, #3
 8000306:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800030c:	2301      	movs	r3, #1
 800030e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000310:	2308      	movs	r3, #8
 8000312:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000314:	2308      	movs	r3, #8
 8000316:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000318:	2302      	movs	r3, #2
 800031a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
 800031c:	2308      	movs	r3, #8
 800031e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000320:	230c      	movs	r3, #12
 8000322:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4618      	mov	r0, r3
 800032e:	f001 feb5 	bl	800209c <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000338:	f000 f872 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	231f      	movs	r3, #31
 800033e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2303      	movs	r3, #3
 8000342:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	463b      	mov	r3, r7
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f002 fd7b 	bl	8002e54 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000364:	f000 f85c 	bl	8000420 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3778      	adds	r7, #120	@ 0x78
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000374:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000376:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8000378:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800037c:	2209      	movs	r2, #9
 800037e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000382:	2202      	movs	r2, #2
 8000384:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000388:	2203      	movs	r2, #3
 800038a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800038e:	2200      	movs	r2, #0
 8000390:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000394:	2200      	movs	r2, #0
 8000396:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800039a:	2200      	movs	r2, #0
 800039c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003b2:	f000 fc25 	bl	8000c00 <HAL_PCD_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80003bc:	f000 f830 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000064 	.word	0x20000064
 80003c8:	42040000 	.word	0x42040000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_GPIO_Init+0x50>)
 80003d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003d8:	4a10      	ldr	r2, [pc, #64]	@ (800041c <MX_GPIO_Init+0x50>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_GPIO_Init+0x50>)
 80003e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_GPIO_Init+0x50>)
 80003f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003f6:	4a09      	ldr	r2, [pc, #36]	@ (800041c <MX_GPIO_Init+0x50>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_GPIO_Init+0x50>)
 8000402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	46020c00 	.word	0x46020c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <HAL_MspInit+0x30>)
 8000434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000438:	4a08      	ldr	r2, [pc, #32]	@ (800045c <HAL_MspInit+0x30>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <HAL_MspInit+0x30>)
 8000444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000450:	f001 fdf6 	bl	8002040 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	46020c00 	.word	0x46020c00

08000460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b0bc      	sub	sp, #240	@ 0xf0
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	22d8      	movs	r2, #216	@ 0xd8
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f007 feb5 	bl	80081e0 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a3e      	ldr	r2, [pc, #248]	@ (8000574 <HAL_PCD_MspInit+0x114>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d175      	bne.n	800056c <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000480:	4b3d      	ldr	r3, [pc, #244]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000486:	4a3c      	ldr	r2, [pc, #240]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000490:	4b39      	ldr	r3, [pc, #228]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800049e:	f04f 0200 	mov.w	r2, #0
 80004a2:	f04f 0308 	mov.w	r3, #8
 80004a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80004aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 f860 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80004c2:	f7ff ffad 	bl	8000420 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80004c6:	200c      	movs	r0, #12
 80004c8:	f000 f9f2 	bl	80008b0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80004cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d2:	4a29      	ldr	r2, [pc, #164]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004dc:	4b26      	ldr	r3, [pc, #152]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80004ea:	4b23      	ldr	r3, [pc, #140]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004f0:	4a21      	ldr	r2, [pc, #132]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 80004fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000508:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 800050a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	2b00      	cmp	r3, #0
 8000514:	d11b      	bne.n	800054e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800051c:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000526:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000534:	f001 fd84 	bl	8002040 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000538:	f001 fd92 	bl	8002060 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 800053e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000542:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <HAL_PCD_MspInit+0x118>)
 8000544:	f023 0304 	bic.w	r3, r3, #4
 8000548:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800054c:	e003      	b.n	8000556 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800054e:	f001 fd77 	bl	8002040 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000552:	f001 fd85 	bl	8002060 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f996 	bl	8000888 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2049      	movs	r0, #73	@ 0x49
 8000562:	f000 fa71 	bl	8000a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000566:	2049      	movs	r0, #73	@ 0x49
 8000568:	f000 fa88 	bl	8000a7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	37f0      	adds	r7, #240	@ 0xf0
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	42040000 	.word	0x42040000
 8000578:	46020c00 	.word	0x46020c00

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f915 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <OTG_HS_IRQHandler+0x10>)
 80005e2:	f000 fc19 	bl	8000e18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000064 	.word	0x20000064

080005f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <SystemInit+0x68>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fa:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <SystemInit+0x68>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <SystemInit+0x6c>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <SystemInit+0x6c>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <SystemInit+0x6c>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <SystemInit+0x6c>)
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <SystemInit+0x6c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <SystemInit+0x6c>)
 8000622:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000626:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <SystemInit+0x6c>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <SystemInit+0x6c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <SystemInit+0x6c>)
 8000638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800063c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <SystemInit+0x6c>)
 8000640:	2200      	movs	r2, #0
 8000642:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <SystemInit+0x68>)
 8000646:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800064a:	609a      	str	r2, [r3, #8]
  #endif
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	46020c00 	.word	0x46020c00

08000660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000698 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff ffc4 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000668:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800066a:	e003      	b.n	8000674 <LoopCopyDataInit>

0800066c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800066e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000670:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000672:	3104      	adds	r1, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000678:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800067a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800067c:	d3f6      	bcc.n	800066c <CopyDataInit>
	ldr	r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000680:	e002      	b.n	8000688 <LoopFillZerobss>

08000682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000682:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000684:	f842 3b04 	str.w	r3, [r2], #4

08000688 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <LoopForever+0x16>)
	cmp	r2, r3
 800068a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800068c:	d3f9      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f007 fdaf 	bl	80081f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000692:	f7ff fe05 	bl	80002a0 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000698:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800069c:	080082e8 	.word	0x080082e8
	ldr	r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006a4:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 80006a8:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 80006ac:	20004a70 	.word	0x20004a70

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_Init+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a11      	ldr	r2, [pc, #68]	@ (8000704 <HAL_Init+0x50>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f9b4 	bl	8000a32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80006ca:	f002 fdb5 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80006ce:	4602      	mov	r2, r0
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <HAL_Init+0x54>)
 80006d2:	6a1b      	ldr	r3, [r3, #32]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	490c      	ldr	r1, [pc, #48]	@ (800070c <HAL_Init+0x58>)
 80006da:	5ccb      	ldrb	r3, [r1, r3]
 80006dc:	fa22 f303 	lsr.w	r3, r2, r3
 80006e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_Init+0x5c>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f000 f9f9 	bl	8000adc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ea:	200e      	movs	r0, #14
 80006ec:	f000 f812 	bl	8000714 <HAL_InitTick>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e002      	b.n	8000700 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006fa:	f7ff fe97 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40022000 	.word	0x40022000
 8000708:	46020c00 	.word	0x46020c00
 800070c:	08008288 	.word	0x08008288
 8000710:	20000000 	.word	0x20000000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <HAL_InitTick+0xdc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d101      	bne.n	800072c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	e05c      	b.n	80007e6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800072c:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <HAL_InitTick+0xe0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	2b04      	cmp	r3, #4
 8000736:	d10c      	bne.n	8000752 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <HAL_InitTick+0xe4>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <HAL_InitTick+0xdc>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e037      	b.n	80007c2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000752:	f000 fa1b 	bl	8000b8c <HAL_SYSTICK_GetCLKSourceConfig>
 8000756:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d023      	beq.n	80007a6 <HAL_InitTick+0x92>
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d82d      	bhi.n	80007c0 <HAL_InitTick+0xac>
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <HAL_InitTick+0x5e>
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00d      	beq.n	800078c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000770:	e026      	b.n	80007c0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <HAL_InitTick+0xe4>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <HAL_InitTick+0xdc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4619      	mov	r1, r3
 800077c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000780:	fbb3 f3f1 	udiv	r3, r3, r1
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]
        break;
 800078a:	e01a      	b.n	80007c2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <HAL_InitTick+0xdc>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000796:	fbb3 f3f2 	udiv	r3, r3, r2
 800079a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a2:	60fb      	str	r3, [r7, #12]
        break;
 80007a4:	e00d      	b.n	80007c2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_InitTick+0xdc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80007b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007bc:	60fb      	str	r3, [r7, #12]
        break;
 80007be:	e000      	b.n	80007c2 <HAL_InitTick+0xae>
        break;
 80007c0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f000 f968 	bl	8000a98 <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e009      	b.n	80007e6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d2:	2200      	movs	r2, #0
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	f04f 30ff 	mov.w	r0, #4294967295
 80007da:	f000 f935 	bl	8000a48 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_InitTick+0xe8>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	e000e010 	.word	0xe000e010
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000548 	.word	0x20000548

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000548 	.word	0x20000548

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff ffee 	bl	8000828 <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffde 	bl	8000828 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000894:	f023 0201 	bic.w	r2, r3, #1
 8000898:	4904      	ldr	r1, [pc, #16]	@ (80008ac <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	46000400 	.word	0x46000400

080008b0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80008ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80008bc:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80008c0:	4904      	ldr	r1, [pc, #16]	@ (80008d4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	46000400 	.word	0x46000400

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	@ (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	@ (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff4c 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a56:	f7ff ff63 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f7ff ffb3 	bl	80009cc <NVIC_EncodePriority>
 8000a66:	4602      	mov	r2, r0
 8000a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff82 	bl	8000978 <__NVIC_SetPriority>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff56 	bl	800093c <__NVIC_EnableIRQ>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00d      	b.n	8000aca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_SYSTICK_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_SYSTICK_Config+0x40>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_SYSTICK_Config+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <HAL_SYSTICK_Config+0x40>)
 8000ac2:	f043 0303 	orr.w	r3, r3, #3
 8000ac6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d844      	bhi.n	8000b74 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000aea:	a201      	add	r2, pc, #4	@ (adr r2, 8000af0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b13 	.word	0x08000b13
 8000af4:	08000b31 	.word	0x08000b31
 8000af8:	08000b53 	.word	0x08000b53
 8000afc:	08000b75 	.word	0x08000b75
 8000b00:	08000b05 	.word	0x08000b05
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6013      	str	r3, [r2, #0]
      break;
 8000b10:	e031      	b.n	8000b76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1b      	ldr	r2, [pc, #108]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b18:	f023 0304 	bic.w	r3, r3, #4
 8000b1c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a18      	ldr	r2, [pc, #96]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b2e:	e022      	b.n	8000b76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b36:	f023 0304 	bic.w	r3, r3, #4
 8000b3a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b50:	e011      	b.n	8000b76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b58:	f023 0304 	bic.w	r3, r3, #4
 8000b5c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b72:	e000      	b.n	8000b76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000b74:	bf00      	nop
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010
 8000b88:	46020c00 	.word	0x46020c00

08000b8c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	e021      	b.n	8000be8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000bae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bb6:	d011      	beq.n	8000bdc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bbe:	d810      	bhi.n	8000be2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d004      	beq.n	8000bd0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bcc:	d003      	beq.n	8000bd6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000bce:	e008      	b.n	8000be2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
        break;
 8000bd4:	e008      	b.n	8000be8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
        break;
 8000bda:	e005      	b.n	8000be8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
        break;
 8000be0:	e002      	b.n	8000be8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
        break;
 8000be6:	bf00      	nop
    }
  }
  return systick_source;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010
 8000bfc:	46020c00 	.word	0x46020c00

08000c00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e0fe      	b.n	8000e10 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fc1a 	bl	8000460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fd3f 	bl	80046bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7c1a      	ldrb	r2, [r3, #16]
 8000c46:	f88d 2000 	strb.w	r2, [sp]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c4e:	f003 fc63 	bl	8004518 <USB_CoreInit>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0d5      	b.n	8000e10 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fd37 	bl	80046de <USB_SetCurrentMode>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2202      	movs	r2, #2
 8000c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e0c6      	b.n	8000e10 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	e04a      	b.n	8000d1e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	3315      	adds	r3, #21
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	3314      	adds	r3, #20
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	332e      	adds	r3, #46	@ 0x2e
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	331c      	adds	r3, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3320      	adds	r3, #32
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	3324      	adds	r3, #36	@ 0x24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d3af      	bcc.n	8000c88 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e044      	b.n	8000db8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d2e:	7bfa      	ldrb	r2, [r7, #15]
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d70:	7bfa      	ldrb	r2, [r7, #15]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4413      	add	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	3301      	adds	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3b5      	bcc.n	8000d2e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1a      	ldrb	r2, [r3, #16]
 8000dca:	f88d 2000 	strb.w	r2, [sp]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd2:	f003 fcd1 	bl	8004778 <USB_DevInit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2202      	movs	r2, #2
 8000de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e013      	b.n	8000e10 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7b1b      	ldrb	r3, [r3, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d102      	bne.n	8000e04 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 f862 	bl	8001ec8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 fb97 	bl	800553c <USB_DevDisconnect>

  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b08d      	sub	sp, #52	@ 0x34
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fc38 	bl	80056a4 <USB_GetMode>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 84b9 	bne.w	80017ae <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fb9c 	bl	800557e <USB_ReadInterrupts>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 84af 	beq.w	80017ac <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fb89 	bl	800557e <USB_ReadInterrupts>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d107      	bne.n	8000e86 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f002 0202 	and.w	r2, r2, #2
 8000e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 fb77 	bl	800557e <USB_ReadInterrupts>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d161      	bne.n	8000f5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	f003 020f 	and.w	r2, r3, #15
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	0c5b      	lsrs	r3, r3, #17
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d124      	bne.n	8000f20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d035      	beq.n	8000f4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	6a38      	ldr	r0, [r7, #32]
 8000ef6:	f004 fa5b 	bl	80053b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f06:	441a      	add	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f18:	441a      	add	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	e016      	b.n	8000f4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	0c5b      	lsrs	r3, r3, #17
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	2b06      	cmp	r3, #6
 8000f2a:	d110      	bne.n	8000f4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000f32:	2208      	movs	r2, #8
 8000f34:	4619      	mov	r1, r3
 8000f36:	6a38      	ldr	r0, [r7, #32]
 8000f38:	f004 fa3a 	bl	80053b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	695a      	ldr	r2, [r3, #20]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f48:	441a      	add	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	699a      	ldr	r2, [r3, #24]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fb0b 	bl	800557e <USB_ReadInterrupts>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000f72:	f040 80a7 	bne.w	80010c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 fb10 	bl	80055a4 <USB_ReadDevAllOutEpInterrupt>
 8000f84:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8000f86:	e099      	b.n	80010bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 808e 	beq.w	80010b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fb34 	bl	800560c <USB_ReadDevOutEPInterrupt>
 8000fa4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fe51 	bl	8001c6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	015a      	lsls	r2, r3, #5
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 ff27 	bl	8001e3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	015a      	lsls	r2, r3, #5
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001004:	461a      	mov	r2, r3
 8001006:	2310      	movs	r3, #16
 8001008:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d030      	beq.n	8001076 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101c:	2b80      	cmp	r3, #128	@ 0x80
 800101e:	d109      	bne.n	8001034 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800102e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001032:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	78db      	ldrb	r3, [r3, #3]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2200      	movs	r2, #0
 8001056:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fba8 	bl	80017b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	015a      	lsls	r2, r3, #5
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	4413      	add	r3, r2
 800106c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001070:	461a      	mov	r2, r3
 8001072:	2302      	movs	r3, #2
 8001074:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	015a      	lsls	r2, r3, #5
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	4413      	add	r3, r2
 8001088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800108c:	461a      	mov	r2, r3
 800108e:	2320      	movs	r3, #32
 8001090:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80010a8:	461a      	mov	r2, r3
 80010aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	3301      	adds	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80010b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80010bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f af62 	bne.w	8000f88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 fa58 	bl	800557e <USB_ReadInterrupts>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80010d8:	f040 80db 	bne.w	8001292 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fa79 	bl	80055d8 <USB_ReadDevAllInEpInterrupt>
 80010e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80010ec:	e0cd      	b.n	800128a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80c2 	beq.w	800127e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fa9f 	bl	8005648 <USB_ReadDevInEPInterrupt>
 800110a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d057      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	2201      	movs	r2, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800112a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	69f9      	ldr	r1, [r7, #28]
 8001132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001136:	4013      	ands	r3, r2
 8001138:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	4413      	add	r3, r2
 8001142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001146:	461a      	mov	r2, r3
 8001148:	2301      	movs	r3, #1
 800114a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	799b      	ldrb	r3, [r3, #6]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d132      	bne.n	80011ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3320      	adds	r3, #32
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4403      	add	r3, r0
 8001174:	331c      	adds	r3, #28
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4419      	add	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4403      	add	r3, r0
 8001188:	3320      	adds	r3, #32
 800118a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	2b00      	cmp	r3, #0
 8001190:	d113      	bne.n	80011ba <HAL_PCD_IRQHandler+0x3a2>
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3324      	adds	r3, #36	@ 0x24
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80011b2:	461a      	mov	r2, r3
 80011b4:	2101      	movs	r1, #1
 80011b6:	f004 faa7 	bl	8005708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f005 fdff 	bl	8006dc4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80011dc:	461a      	mov	r2, r3
 80011de:	2308      	movs	r3, #8
 80011e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	015a      	lsls	r2, r3, #5
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80011f8:	461a      	mov	r2, r3
 80011fa:	2310      	movs	r3, #16
 80011fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	015a      	lsls	r2, r3, #5
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001214:	461a      	mov	r2, r3
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d023      	beq.n	800126c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001226:	6a38      	ldr	r0, [r7, #32]
 8001228:	f003 fc16 	bl	8004a58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800122c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3310      	adds	r3, #16
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2200      	movs	r2, #0
 800124c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fab9 	bl	80017cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	4413      	add	r3, r2
 8001262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001266:	461a      	mov	r2, r3
 8001268:	2302      	movs	r3, #2
 800126a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fc6b 	bl	8001b54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001286:	085b      	lsrs	r3, r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800128a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f af2e 	bne.w	80010ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f004 f971 	bl	800557e <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80012a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80012a6:	d122      	bne.n	80012ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fe1d 	bl	8001f10 <HAL_PCDEx_LPM_Callback>
 80012d6:	e002      	b.n	80012de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f005 ff33 	bl	8007144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80012ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 f943 	bl	800557e <USB_ReadInterrupts>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001302:	d112      	bne.n	800132a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f005 feff 	bl	8007118 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001328:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f925 	bl	800557e <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800133a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800133e:	d121      	bne.n	8001384 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800134e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001356:	2b00      	cmp	r3, #0
 8001358:	d111      	bne.n	800137e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	f003 020f 	and.w	r2, r3, #15
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001374:	2101      	movs	r1, #1
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fdca 	bl	8001f10 <HAL_PCDEx_LPM_Callback>
 800137c:	e002      	b.n	8001384 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f005 feca 	bl	8007118 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f8f8 	bl	800557e <USB_ReadInterrupts>
 800138e:	4603      	mov	r3, r0
 8001390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001398:	f040 80b7 	bne.w	800150a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2110      	movs	r1, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fb4e 	bl	8004a58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c0:	e046      	b.n	8001450 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013ce:	461a      	mov	r2, r3
 80013d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80013d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80013d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013e6:	0151      	lsls	r1, r2, #5
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	440a      	add	r2, r1
 80013ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80013f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80013f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80013f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f8:	015a      	lsls	r2, r3, #5
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001402:	461a      	mov	r2, r3
 8001404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001408:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800140a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800141a:	0151      	lsls	r1, r2, #5
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	440a      	add	r2, r1
 8001420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800143a:	0151      	lsls	r1, r2, #5
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	440a      	add	r2, r1
 8001440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001448:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144c:	3301      	adds	r3, #1
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	461a      	mov	r2, r3
 8001456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001458:	4293      	cmp	r3, r2
 800145a:	d3b2      	bcc.n	80013c2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800146a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800146e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7bdb      	ldrb	r3, [r3, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d016      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800147e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001488:	f043 030b 	orr.w	r3, r3, #11
 800148c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800149e:	f043 030b 	orr.w	r3, r3, #11
 80014a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a4:	e015      	b.n	80014d2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014b8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80014bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014cc:	f043 030b 	orr.w	r3, r3, #11
 80014d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014e0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80014e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80014f4:	461a      	mov	r2, r3
 80014f6:	f004 f907 	bl	8005708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f835 	bl	800557e <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800151e:	d123      	bne.n	8001568 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f004 f8cb 	bl	80056c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fb0b 	bl	8004b4a <USB_GetDevSpeed>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681c      	ldr	r4, [r3, #0]
 8001540:	f001 ff7c 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8001544:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800154a:	461a      	mov	r2, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f003 f813 	bl	8004578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f005 fd7c 	bl	8007050 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001566:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f806 	bl	800557e <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b08      	cmp	r3, #8
 800157a:	d10a      	bne.n	8001592 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f005 fdf7 	bl	8007170 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f002 0208 	and.w	r2, r2, #8
 8001590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fff1 	bl	800557e <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	2b80      	cmp	r3, #128	@ 0x80
 80015a4:	d123      	bne.n	80015ee <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015b2:	2301      	movs	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b6:	e014      	b.n	80015e2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa5e 	bl	8001a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	3301      	adds	r3, #1
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	461a      	mov	r2, r3
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d3e4      	bcc.n	80015b8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 ffc3 	bl	800557e <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001602:	d13c      	bne.n	800167e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
 8001608:	e02b      	b.n	8001662 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	015a      	lsls	r2, r3, #5
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3318      	adds	r3, #24
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d115      	bne.n	800165c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001630:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001632:	2b00      	cmp	r3, #0
 8001634:	da12      	bge.n	800165c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3317      	adds	r3, #23
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fa1e 	bl	8001a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	3301      	adds	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	4293      	cmp	r3, r2
 800166c:	d3cd      	bcc.n	800160a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800167c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f003 ff7b 	bl	800557e <USB_ReadInterrupts>
 8001688:	4603      	mov	r3, r0
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001692:	d156      	bne.n	8001742 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001694:	2301      	movs	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
 8001698:	e045      	b.n	8001726 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d12e      	bne.n	8001720 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80016c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da2b      	bge.n	8001720 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	0c1a      	lsrs	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80016d2:	4053      	eors	r3, r2
 80016d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d121      	bne.n	8001720 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10a      	bne.n	8001720 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001718:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171c:	6053      	str	r3, [r2, #4]
            break;
 800171e:	e008      	b.n	8001732 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	3301      	adds	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	791b      	ldrb	r3, [r3, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	4293      	cmp	r3, r2
 8001730:	d3b3      	bcc.n	800169a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 ff19 	bl	800557e <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001756:	d10a      	bne.n	800176e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 fca9 	bl	80070b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800176c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 ff03 	bl	800557e <USB_ReadInterrupts>
 8001778:	4603      	mov	r3, r0
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b04      	cmp	r3, #4
 8001780:	d115      	bne.n	80017ae <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 fca1 	bl	80070dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	e000      	b.n	80017ae <HAL_PCD_IRQHandler+0x996>
      return;
 80017ac:	bf00      	nop
    }
  }
}
 80017ae:	3734      	adds	r7, #52	@ 0x34
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	70fb      	strb	r3, [r7, #3]
 80017f6:	460b      	mov	r3, r1
 80017f8:	803b      	strh	r3, [r7, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da0f      	bge.n	800182a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f003 020f 	and.w	r2, r3, #15
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3310      	adds	r3, #16
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	3304      	adds	r3, #4
 8001820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	705a      	strb	r2, [r3, #1]
 8001828:	e00f      	b.n	800184a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 020f 	and.w	r2, r3, #15
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	b2da      	uxtb	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001856:	883b      	ldrh	r3, [r7, #0]
 8001858:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	78ba      	ldrb	r2, [r7, #2]
 8001864:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	785b      	ldrb	r3, [r3, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d102      	bne.n	8001884 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_PCD_EP_Open+0xae>
 800188e:	2302      	movs	r3, #2
 8001890:	e00e      	b.n	80018b0 <HAL_PCD_EP_Open+0xcc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f977 	bl	8004b94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	460b      	mov	r3, r1
 80018c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	f003 020f 	and.w	r2, r3, #15
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	b2da      	uxtb	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	799b      	ldrb	r3, [r3, #6]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	799b      	ldrb	r3, [r3, #6]
 800191c:	461a      	mov	r2, r3
 800191e:	6979      	ldr	r1, [r7, #20]
 8001920:	f003 f9c0 	bl	8004ca4 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 020f 	and.w	r2, r3, #15
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001950:	681b      	ldr	r3, [r3, #0]
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	460b      	mov	r3, r1
 800196c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3310      	adds	r3, #16
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2201      	movs	r2, #1
 800199c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	799b      	ldrb	r3, [r3, #6]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	799b      	ldrb	r3, [r3, #6]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6979      	ldr	r1, [r7, #20]
 80019c4:	f003 f96e 	bl	8004ca4 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	7912      	ldrb	r2, [r2, #4]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04f      	b.n	8001a90 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da0f      	bge.n	8001a18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 020f 	and.w	r2, r3, #15
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3310      	adds	r3, #16
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]
 8001a16:	e00d      	b.n	8001a34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_EP_SetStall+0x82>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e01d      	b.n	8001a90 <HAL_PCD_EP_SetStall+0xbe>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fcfc 	bl	8005460 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7999      	ldrb	r1, [r3, #6]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a80:	461a      	mov	r2, r3
 8001a82:	f003 fe41 	bl	8005708 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da0c      	bge.n	8001ac6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3310      	adds	r3, #16
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e00c      	b.n	8001ae0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fb7a 	bl	80051e0 <USB_EPStopXfer>
 8001aec:	4603      	mov	r3, r0
 8001aee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001af0:	7afb      	ldrb	r3, [r7, #11]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_PCD_EP_Flush+0x1a>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e01b      	b.n	8001b4c <HAL_PCD_EP_Flush+0x52>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8001b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da09      	bge.n	8001b38 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f002 ff91 	bl	8004a58 <USB_FlushTxFifo>
 8001b36:	e004      	b.n	8001b42 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 ffbd 	bl	8004abc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3310      	adds	r3, #16
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d901      	bls.n	8001b8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e06b      	b.n	8001c64 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d902      	bls.n	8001ba8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	3303      	adds	r3, #3
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bb0:	e02a      	b.n	8001c08 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d902      	bls.n	8001bce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68d9      	ldr	r1, [r3, #12]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4603      	mov	r3, r0
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f003 fba2 	bl	8005334 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	441a      	add	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d809      	bhi.n	8001c32 <PCD_WriteEmptyTxFifo+0xde>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d203      	bcs.n	8001c32 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1bf      	bne.n	8001bb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d811      	bhi.n	8001c62 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	2201      	movs	r2, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	6939      	ldr	r1, [r7, #16]
 8001c5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c5e:	4013      	ands	r3, r2
 8001c60:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	333c      	adds	r3, #60	@ 0x3c
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	799b      	ldrb	r3, [r3, #6]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d17b      	bne.n	8001d9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	4a61      	ldr	r2, [pc, #388]	@ (8001e34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	f240 80b9 	bls.w	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80b3 	beq.w	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cd4:	6093      	str	r3, [r2, #8]
 8001cd6:	e0a7      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	e098      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 8093 	bne.w	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	@ (8001e34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d90f      	bls.n	8001d2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d20:	461a      	mov	r2, r3
 8001d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d26:	6093      	str	r3, [r2, #8]
 8001d28:	e07e      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d114      	bne.n	8001d8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d74:	461a      	mov	r2, r3
 8001d76:	2101      	movs	r1, #1
 8001d78:	f003 fcc6 	bl	8005708 <USB_EP0_OutStart>
 8001d7c:	e006      	b.n	8001d8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	441a      	add	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f005 f8d4 	bl	8006f40 <HAL_PCD_DataOutStageCallback>
 8001d98:	e046      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	@ (8001e38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d124      	bne.n	8001dec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001db8:	461a      	mov	r2, r3
 8001dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	e032      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2320      	movs	r3, #32
 8001ddc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f005 f8ab 	bl	8006f40 <HAL_PCD_DataOutStageCallback>
 8001dea:	e01d      	b.n	8001e28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d114      	bne.n	8001e1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f003 fc76 	bl	8005708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f005 f88c 	bl	8006f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	4f54300a 	.word	0x4f54300a
 8001e38:	4f54310a 	.word	0x4f54310a

08001e3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	333c      	adds	r3, #60	@ 0x3c
 8001e54:	3304      	adds	r3, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <PCD_EP_OutSetupPacket_int+0x88>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d90e      	bls.n	8001e90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f004 ff15 	bl	8006cc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <PCD_EP_OutSetupPacket_int+0x88>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d90c      	bls.n	8001eb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	799b      	ldrb	r3, [r3, #6]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f003 fc28 	bl	8005708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	4f54300a 	.word	0x4f54300a

08001ec8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	f043 0303 	orr.w	r3, r3, #3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001f30:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f38:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d10b      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f48:	d905      	bls.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001f4a:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a32      	ldr	r2, [pc, #200]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e057      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f60:	d90a      	bls.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001f62:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f74:	60d3      	str	r3, [r2, #12]
 8001f76:	e007      	b.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001f80:	4925      	ldr	r1, [pc, #148]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a24      	ldr	r2, [pc, #144]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	2232      	movs	r2, #50	@ 0x32
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001fa6:	e002      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f3      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01b      	beq.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a15      	ldr	r2, [pc, #84]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2232      	movs	r2, #50	@ 0x32
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001fe4:	e002      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f3      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e000      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	46020800 	.word	0x46020800
 800201c:	20000000 	.word	0x20000000
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_PWREx_GetVoltageRange+0x18>)
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	46020800 	.word	0x46020800

08002040 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_PWREx_EnableVddUSB+0x1c>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6113      	str	r3, [r2, #16]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	46020800 	.word	0x46020800

08002060 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8002066:	f7ff ffdd 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002072:	d003      	beq.n	800207c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800207a:	d107      	bne.n	800208c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8002082:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8002086:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	46020800 	.word	0x46020800

0800209c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	@ 0x38
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f000 bec8 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b99      	ldr	r3, [pc, #612]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b96      	ldr	r3, [pc, #600]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 816c 	beq.w	80023b0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_RCC_OscConfig+0x52>
 80020de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	f040 80de 	bne.w	80022a2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 80da 	bne.w	80022a2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f000 bea5 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002100:	4b86      	ldr	r3, [pc, #536]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_RCC_OscConfig+0x7a>
 800210c:	4b83      	ldr	r3, [pc, #524]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002114:	e005      	b.n	8002122 <HAL_RCC_OscConfig+0x86>
 8002116:	4b81      	ldr	r3, [pc, #516]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002122:	4293      	cmp	r3, r2
 8002124:	d255      	bcs.n	80021d2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	4618      	mov	r0, r3
 8002132:	f001 f99d 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f000 be82 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002142:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4a75      	ldr	r2, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002148:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800214c:	6093      	str	r3, [r2, #8]
 800214e:	4b73      	ldr	r3, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	4970      	ldr	r1, [pc, #448]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002168:	d309      	bcc.n	800217e <HAL_RCC_OscConfig+0xe2>
 800216a:	4b6c      	ldr	r3, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f023 021f 	bic.w	r2, r3, #31
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4969      	ldr	r1, [pc, #420]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
 800217c:	e07e      	b.n	800227c <HAL_RCC_OscConfig+0x1e0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0a      	bge.n	800219c <HAL_RCC_OscConfig+0x100>
 8002186:	4b65      	ldr	r3, [pc, #404]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	4961      	ldr	r1, [pc, #388]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
 800219a:	e06f      	b.n	800227c <HAL_RCC_OscConfig+0x1e0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a4:	d30a      	bcc.n	80021bc <HAL_RCC_OscConfig+0x120>
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4959      	ldr	r1, [pc, #356]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60cb      	str	r3, [r1, #12]
 80021ba:	e05f      	b.n	800227c <HAL_RCC_OscConfig+0x1e0>
 80021bc:	4b57      	ldr	r3, [pc, #348]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	03db      	lsls	r3, r3, #15
 80021ca:	4954      	ldr	r1, [pc, #336]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80021d2:	4b52      	ldr	r3, [pc, #328]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a51      	ldr	r2, [pc, #324]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021dc:	6093      	str	r3, [r2, #8]
 80021de:	4b4f      	ldr	r3, [pc, #316]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	494c      	ldr	r1, [pc, #304]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80021f8:	d309      	bcc.n	800220e <HAL_RCC_OscConfig+0x172>
 80021fa:	4b48      	ldr	r3, [pc, #288]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 021f 	bic.w	r2, r3, #31
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4945      	ldr	r1, [pc, #276]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
 800220c:	e028      	b.n	8002260 <HAL_RCC_OscConfig+0x1c4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0a      	bge.n	800222c <HAL_RCC_OscConfig+0x190>
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	493d      	ldr	r1, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002226:	4313      	orrs	r3, r2
 8002228:	60cb      	str	r3, [r1, #12]
 800222a:	e019      	b.n	8002260 <HAL_RCC_OscConfig+0x1c4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002234:	d30a      	bcc.n	800224c <HAL_RCC_OscConfig+0x1b0>
 8002236:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	029b      	lsls	r3, r3, #10
 8002244:	4935      	ldr	r1, [pc, #212]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002246:	4313      	orrs	r3, r2
 8002248:	60cb      	str	r3, [r1, #12]
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0x1c4>
 800224c:	4b33      	ldr	r3, [pc, #204]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	03db      	lsls	r3, r3, #15
 800225a:	4930      	ldr	r1, [pc, #192]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	4618      	mov	r0, r3
 800226c:	f001 f900 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f000 bde5 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800227c:	f001 f8de 	bl	800343c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_RCC_OscConfig+0x284>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fa45 	bl	8000714 <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 808a 	beq.w	80023ae <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800229a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800229e:	f000 bdd2 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d066      	beq.n	8002378 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022b6:	f7fe fab7 	bl	8000828 <HAL_GetTick>
 80022ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80022bc:	e009      	b.n	80022d2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022be:	f7fe fab3 	bl	8000828 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f000 bdba 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ef      	beq.n	80022be <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a0e      	ldr	r2, [pc, #56]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022e8:	6093      	str	r3, [r2, #8]
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	4909      	ldr	r1, [pc, #36]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002304:	d30e      	bcc.n	8002324 <HAL_RCC_OscConfig+0x288>
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f023 021f 	bic.w	r2, r3, #31
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4902      	ldr	r1, [pc, #8]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
 8002318:	e04a      	b.n	80023b0 <HAL_RCC_OscConfig+0x314>
 800231a:	bf00      	nop
 800231c:	46020c00 	.word	0x46020c00
 8002320:	20000004 	.word	0x20000004
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	da0a      	bge.n	8002342 <HAL_RCC_OscConfig+0x2a6>
 800232c:	4b98      	ldr	r3, [pc, #608]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	4995      	ldr	r1, [pc, #596]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
 8002340:	e036      	b.n	80023b0 <HAL_RCC_OscConfig+0x314>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234a:	d30a      	bcc.n	8002362 <HAL_RCC_OscConfig+0x2c6>
 800234c:	4b90      	ldr	r3, [pc, #576]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	029b      	lsls	r3, r3, #10
 800235a:	498d      	ldr	r1, [pc, #564]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
 8002360:	e026      	b.n	80023b0 <HAL_RCC_OscConfig+0x314>
 8002362:	4b8b      	ldr	r3, [pc, #556]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	03db      	lsls	r3, r3, #15
 8002370:	4987      	ldr	r1, [pc, #540]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]
 8002376:	e01b      	b.n	80023b0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002378:	4b85      	ldr	r3, [pc, #532]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a84      	ldr	r2, [pc, #528]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002384:	f7fe fa50 	bl	8000828 <HAL_GetTick>
 8002388:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800238a:	e009      	b.n	80023a0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7fe fa4c 	bl	8000828 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	f000 bd53 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80023a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ef      	bne.n	800238c <HAL_RCC_OscConfig+0x2f0>
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 808b 	beq.w	80024d4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x334>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d109      	bne.n	80023de <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d17d      	bne.n	80024d4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f000 bd34 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x35a>
 80023e8:	4b69      	ldr	r3, [pc, #420]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a68      	ldr	r2, [pc, #416]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e041      	b.n	800247a <HAL_RCC_OscConfig+0x3de>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x38a>
 8002400:	4b63      	ldr	r3, [pc, #396]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a62      	ldr	r2, [pc, #392]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b60      	ldr	r3, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5f      	ldr	r2, [pc, #380]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b5d      	ldr	r3, [pc, #372]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5c      	ldr	r2, [pc, #368]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	e029      	b.n	800247a <HAL_RCC_OscConfig+0x3de>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800242e:	d112      	bne.n	8002456 <HAL_RCC_OscConfig+0x3ba>
 8002430:	4b57      	ldr	r3, [pc, #348]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a56      	ldr	r2, [pc, #344]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b54      	ldr	r3, [pc, #336]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a53      	ldr	r2, [pc, #332]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b51      	ldr	r3, [pc, #324]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e011      	b.n	800247a <HAL_RCC_OscConfig+0x3de>
 8002456:	4b4e      	ldr	r3, [pc, #312]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4d      	ldr	r2, [pc, #308]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b48      	ldr	r3, [pc, #288]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a47      	ldr	r2, [pc, #284]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002482:	f7fe f9d1 	bl	8000828 <HAL_GetTick>
 8002486:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248a:	f7fe f9cd 	bl	8000828 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	@ 0x64
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bcd4 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	4b3c      	ldr	r3, [pc, #240]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x3ee>
 80024aa:	e013      	b.n	80024d4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80024ac:	f7fe f9bc 	bl	8000828 <HAL_GetTick>
 80024b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe f9b8 	bl	8000828 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d902      	bls.n	80024c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	f000 bcbf 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c8:	4b31      	ldr	r3, [pc, #196]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ef      	bne.n	80024b4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05f      	beq.n	80025a0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x456>
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	d114      	bne.n	8002516 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d111      	bne.n	8002516 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f000 bca3 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	4920      	ldr	r1, [pc, #128]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002514:	e044      	b.n	80025a0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002528:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800252a:	f7fe f97d 	bl	8000828 <HAL_GetTick>
 800252e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	e009      	b.n	8002546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe f979 	bl	8000828 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d902      	bls.n	8002546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	f000 bc80 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ef      	beq.n	8002532 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	490b      	ldr	r1, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002568:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002572:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002574:	f7fe f958 	bl	8000828 <HAL_GetTick>
 8002578:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe f954 	bl	8000828 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d904      	bls.n	8002594 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	f000 bc5b 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
 8002590:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002594:	4baf      	ldr	r3, [pc, #700]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ed      	bne.n	800257c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80c8 	beq.w	800273e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b4:	4ba7      	ldr	r3, [pc, #668]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d111      	bne.n	80025e6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c8:	4aa2      	ldr	r2, [pc, #648]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80025e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80025f2:	4b99      	ldr	r3, [pc, #612]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	4a98      	ldr	r2, [pc, #608]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7fe f913 	bl	8000828 <HAL_GetTick>
 8002602:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7fe f90f 	bl	8000828 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d902      	bls.n	800261a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	f000 bc16 	b.w	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800261a:	4b8f      	ldr	r3, [pc, #572]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ef      	beq.n	8002606 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05f      	beq.n	80026ee <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800262e:	4b89      	ldr	r3, [pc, #548]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002634:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002640:	429a      	cmp	r2, r3
 8002642:	d037      	beq.n	80026b4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e3f4      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01b      	beq.n	800269e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002666:	4b7b      	ldr	r3, [pc, #492]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800266c:	4a79      	ldr	r2, [pc, #484]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 800266e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002676:	f7fe f8d7 	bl	8000828 <HAL_GetTick>
 800267a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe f8d3 	bl	8000828 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b05      	cmp	r3, #5
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e3da      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002690:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002696:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800269e:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4969      	ldr	r1, [pc, #420]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b67      	ldr	r3, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ba:	4a66      	ldr	r2, [pc, #408]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80026c4:	f7fe f8b0 	bl	8000828 <HAL_GetTick>
 80026c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe f8ac 	bl	8000828 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e3b3      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026de:	4b5d      	ldr	r3, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x630>
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026f4:	4a57      	ldr	r2, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80026f6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80026fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80026fe:	f7fe f893 	bl	8000828 <HAL_GetTick>
 8002702:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7fe f88f 	bl	8000828 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e396      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002718:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 800271a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800271e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002726:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002734:	4a47      	ldr	r2, [pc, #284]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8111 	beq.w	800296e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b3c      	ldr	r3, [pc, #240]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002766:	4a3b      	ldr	r2, [pc, #236]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002770:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d118      	bne.n	80027c2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	4a30      	ldr	r2, [pc, #192]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279c:	f7fe f844 	bl	8000828 <HAL_GetTick>
 80027a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fe f840 	bl	8000828 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e347      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80027b6:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x7bc>)
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01f      	beq.n	800280e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027da:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80027dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80027ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027fa:	e018      	b.n	800282e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fc:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 80027fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800280c:	e00f      	b.n	800282e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a0f      	ldr	r2, [pc, #60]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <HAL_RCC_OscConfig+0x7b8>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d057      	beq.n	80028e6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002836:	f7fd fff7 	bl	8000828 <HAL_GetTick>
 800283a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283c:	e00e      	b.n	800285c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fd fff3 	bl	8000828 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d905      	bls.n	800285c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2f8      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
 8002854:	46020c00 	.word	0x46020c00
 8002858:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 800285e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0e9      	beq.n	800283e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01b      	beq.n	80028ae <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002876:	4b96      	ldr	r3, [pc, #600]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287c:	4a94      	ldr	r2, [pc, #592]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 800287e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fd ffce 	bl	8000828 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e2d3      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800289e:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ed      	beq.n	8002888 <HAL_RCC_OscConfig+0x7ec>
 80028ac:	e053      	b.n	8002956 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80028b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b4:	4a86      	ldr	r2, [pc, #536]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80028b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fd ffb2 	bl	8000828 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2b7      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80028d6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80028d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ed      	bne.n	80028c0 <HAL_RCC_OscConfig+0x824>
 80028e4:	e037      	b.n	8002956 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80028e6:	f7fd ff9f 	bl	8000828 <HAL_GetTick>
 80028ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fd ff9b 	bl	8000828 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e2a0      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002904:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ed      	bne.n	80028ee <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002912:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01a      	beq.n	8002956 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002920:	4b6b      	ldr	r3, [pc, #428]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002926:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800292c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fd ff79 	bl	8000828 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e27e      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 800294a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800294e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ed      	bne.n	8002932 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002956:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002964:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d036      	beq.n	80029e8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002982:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800298c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800298e:	f7fd ff4b 	bl	8000828 <HAL_GetTick>
 8002992:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002996:	f7fd ff47 	bl	8000828 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e24e      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029a8:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x8fa>
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80029b6:	4b46      	ldr	r3, [pc, #280]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a45      	ldr	r2, [pc, #276]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80029bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80029c2:	f7fd ff31 	bl	8000828 <HAL_GetTick>
 80029c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ca:	f7fd ff2d 	bl	8000828 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e234      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029dc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d036      	beq.n	8002a62 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d019      	beq.n	8002a30 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a33      	ldr	r2, [pc, #204]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a08:	f7fd ff0e 	bl	8000828 <HAL_GetTick>
 8002a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002a10:	f7fd ff0a 	bl	8000828 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e211      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002a22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x974>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a3c:	f7fd fef4 	bl	8000828 <HAL_GetTick>
 8002a40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002a44:	f7fd fef0 	bl	8000828 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1f7      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002a56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d07f      	beq.n	8002b6e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d062      	beq.n	8002b3c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002a76:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a80:	6093      	str	r3, [r2, #8]
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	4910      	ldr	r1, [pc, #64]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a9c:	d309      	bcc.n	8002ab2 <HAL_RCC_OscConfig+0xa16>
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 021f 	bic.w	r2, r3, #31
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4909      	ldr	r1, [pc, #36]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
 8002ab0:	e02a      	b.n	8002b08 <HAL_RCC_OscConfig+0xa6c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da0c      	bge.n	8002ad4 <HAL_RCC_OscConfig+0xa38>
 8002aba:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	4901      	ldr	r1, [pc, #4]	@ (8002ad0 <HAL_RCC_OscConfig+0xa34>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0xa6c>
 8002ad0:	46020c00 	.word	0x46020c00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002adc:	d30a      	bcc.n	8002af4 <HAL_RCC_OscConfig+0xa58>
 8002ade:	4ba1      	ldr	r3, [pc, #644]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	499d      	ldr	r1, [pc, #628]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60cb      	str	r3, [r1, #12]
 8002af2:	e009      	b.n	8002b08 <HAL_RCC_OscConfig+0xa6c>
 8002af4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	03db      	lsls	r3, r3, #15
 8002b02:	4998      	ldr	r1, [pc, #608]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002b08:	4b96      	ldr	r3, [pc, #600]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a95      	ldr	r2, [pc, #596]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b14:	f7fd fe88 	bl	8000828 <HAL_GetTick>
 8002b18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002b1c:	f7fd fe84 	bl	8000828 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e18b      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xa80>
 8002b3a:	e018      	b.n	8002b6e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002b3c:	4b89      	ldr	r3, [pc, #548]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a88      	ldr	r2, [pc, #544]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b42:	f023 0310 	bic.w	r3, r3, #16
 8002b46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b48:	f7fd fe6e 	bl	8000828 <HAL_GetTick>
 8002b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002b50:	f7fd fe6a 	bl	8000828 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e171      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002b62:	4b80      	ldr	r3, [pc, #512]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8166 	beq.w	8002e44 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7e:	4b79      	ldr	r3, [pc, #484]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	f000 80f2 	beq.w	8002d70 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	f040 80c5 	bne.w	8002d20 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b73      	ldr	r3, [pc, #460]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a72      	ldr	r2, [pc, #456]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ba2:	f7fd fe41 	bl	8000828 <HAL_GetTick>
 8002ba6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fd fe3d 	bl	8000828 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e144      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002bbc:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc8:	4b66      	ldr	r3, [pc, #408]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d111      	bne.n	8002bfa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bdc:	4a61      	ldr	r2, [pc, #388]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002be6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d68 <HAL_RCC_OscConfig+0xccc>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002c0e:	4b56      	ldr	r3, [pc, #344]	@ (8002d68 <HAL_RCC_OscConfig+0xccc>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a55      	ldr	r2, [pc, #340]	@ (8002d68 <HAL_RCC_OscConfig+0xccc>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c18:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002c1a:	4b52      	ldr	r3, [pc, #328]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	0212      	lsls	r2, r2, #8
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	494a      	ldr	r1, [pc, #296]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c40:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c44:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <HAL_RCC_OscConfig+0xcd0>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0252      	lsls	r2, r2, #9
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0412      	lsls	r2, r2, #16
 8002c66:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0612      	lsls	r2, r2, #24
 8002c74:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	493a      	ldr	r1, [pc, #232]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002c80:	4b38      	ldr	r3, [pc, #224]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	4a37      	ldr	r2, [pc, #220]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c86:	f023 0310 	bic.w	r3, r3, #16
 8002c8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	4a34      	ldr	r2, [pc, #208]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002c96:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002c9c:	f043 0310 	orr.w	r3, r3, #16
 8002ca0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002ca2:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	f023 020c 	bic.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	492d      	ldr	r1, [pc, #180]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_RCC_OscConfig+0xccc>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a29      	ldr	r2, [pc, #164]	@ (8002d68 <HAL_RCC_OscConfig+0xccc>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002cc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd6:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cec:	f7fd fd9c 	bl	8000828 <HAL_GetTick>
 8002cf0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fd fd98 	bl	8000828 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e09f      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d06:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	4a13      	ldr	r2, [pc, #76]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	6293      	str	r3, [r2, #40]	@ 0x28
 8002d1e:	e091      	b.n	8002e44 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d2c:	f7fd fd7c 	bl	8000828 <HAL_GetTick>
 8002d30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fd fd78 	bl	8000828 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	4a03      	ldr	r2, [pc, #12]	@ (8002d64 <HAL_RCC_OscConfig+0xcc8>)
 8002d58:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002d5c:	f023 0303 	bic.w	r3, r3, #3
 8002d60:	6293      	str	r3, [r2, #40]	@ 0x28
 8002d62:	e06f      	b.n	8002e44 <HAL_RCC_OscConfig+0xda8>
 8002d64:	46020c00 	.word	0x46020c00
 8002d68:	46020800 	.word	0x46020800
 8002d6c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002d70:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d039      	beq.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d132      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d129      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d122      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11a      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	0a5b      	lsrs	r3, r3, #9
 8002dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d108      	bne.n	8002df8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e024      	b.n	8002e46 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e00:	08db      	lsrs	r3, r3, #3
 8002e02:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d01a      	beq.n	8002e44 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	4a0f      	ldr	r2, [pc, #60]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002e14:	f023 0310 	bic.w	r3, r3, #16
 8002e18:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fd fd05 	bl	8000828 <HAL_GetTick>
 8002e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002e20:	bf00      	nop
 8002e22:	f7fd fd01 	bl	8000828 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d0f9      	beq.n	8002e22 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	4a07      	ldr	r2, [pc, #28]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_RCC_OscConfig+0xdb4>)
 8002e3e:	f043 0310 	orr.w	r3, r3, #16
 8002e42:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3738      	adds	r7, #56	@ 0x38
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	46020c00 	.word	0x46020c00

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e1d9      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b9b      	ldr	r3, [pc, #620]	@ (80030d8 <HAL_RCC_ClockConfig+0x284>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b98      	ldr	r3, [pc, #608]	@ (80030d8 <HAL_RCC_ClockConfig+0x284>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4996      	ldr	r1, [pc, #600]	@ (80030d8 <HAL_RCC_ClockConfig+0x284>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b94      	ldr	r3, [pc, #592]	@ (80030d8 <HAL_RCC_ClockConfig+0x284>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e1c1      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002eb4:	4b89      	ldr	r3, [pc, #548]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4986      	ldr	r1, [pc, #536]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	4b81      	ldr	r3, [pc, #516]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d909      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	497a      	ldr	r1, [pc, #488]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b74      	ldr	r3, [pc, #464]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d908      	bls.n	8002f26 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b71      	ldr	r3, [pc, #452]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	496e      	ldr	r1, [pc, #440]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	4b69      	ldr	r3, [pc, #420]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d908      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002f42:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 020f 	bic.w	r2, r3, #15
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4963      	ldr	r1, [pc, #396]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80d2 	beq.w	8003106 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d143      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b57      	ldr	r3, [pc, #348]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	4a56      	ldr	r2, [pc, #344]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fc43 	bl	8000828 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80030e0 <HAL_RCC_ClockConfig+0x28c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002fb2:	f7fd fc39 	bl	8000828 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e12b      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002fc4:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <HAL_RCC_ClockConfig+0x28c>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e112      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	4b37      	ldr	r3, [pc, #220]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d115      	bne.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e106      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003016:	4b31      	ldr	r3, [pc, #196]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0fa      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0f2      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4926      	ldr	r1, [pc, #152]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003048:	f7fd fbee 	bl	8000828 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d112      	bne.n	800307c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fd fbe6 	bl	8000828 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0d6      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306e:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d1ee      	bne.n	8003058 <HAL_RCC_ClockConfig+0x204>
 800307a:	e044      	b.n	8003106 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d112      	bne.n	80030aa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003084:	e00a      	b.n	800309c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003086:	f7fd fbcf 	bl	8000828 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0bf      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	4b0f      	ldr	r3, [pc, #60]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d1ee      	bne.n	8003086 <HAL_RCC_ClockConfig+0x232>
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d123      	bne.n	80030fa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fd fbb8 	bl	8000828 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0a8      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <HAL_RCC_ClockConfig+0x288>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ee      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x260>
 80030d6:	e016      	b.n	8003106 <HAL_RCC_ClockConfig+0x2b2>
 80030d8:	40022000 	.word	0x40022000
 80030dc:	46020c00 	.word	0x46020c00
 80030e0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fd fba0 	bl	8000828 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e090      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d1ee      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	4b43      	ldr	r3, [pc, #268]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	429a      	cmp	r2, r3
 8003120:	d208      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003122:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	493d      	ldr	r1, [pc, #244]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b3c      	ldr	r3, [pc, #240]	@ (8003228 <HAL_RCC_ClockConfig+0x3d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d210      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <HAL_RCC_ClockConfig+0x3d4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	4937      	ldr	r1, [pc, #220]	@ (8003228 <HAL_RCC_ClockConfig+0x3d4>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <HAL_RCC_ClockConfig+0x3d4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e05b      	b.n	800321c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800317c:	429a      	cmp	r2, r3
 800317e:	d208      	bcs.n	8003192 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b28      	ldr	r3, [pc, #160]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4925      	ldr	r1, [pc, #148]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d012      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d209      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80031b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4919      	ldr	r1, [pc, #100]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031dc:	429a      	cmp	r2, r3
 80031de:	d208      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80031e0:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	490d      	ldr	r1, [pc, #52]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_RCC_ClockConfig+0x3d0>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	490a      	ldr	r1, [pc, #40]	@ (800322c <HAL_RCC_ClockConfig+0x3d8>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	4a09      	ldr	r2, [pc, #36]	@ (8003230 <HAL_RCC_ClockConfig+0x3dc>)
 800320a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_RCC_ClockConfig+0x3e0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fa7f 	bl	8000714 <HAL_InitTick>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]

  return status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	46020c00 	.word	0x46020c00
 8003228:	40022000 	.word	0x40022000
 800322c:	08008288 	.word	0x08008288
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b08b      	sub	sp, #44	@ 0x2c
 800323c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003250:	4b75      	ldr	r3, [pc, #468]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x34>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d121      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d11e      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800326c:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003278:	4b6b      	ldr	r3, [pc, #428]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800327a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800327e:	0b1b      	lsrs	r3, r3, #12
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
 8003286:	e005      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003288:	4b67      	ldr	r3, [pc, #412]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	0f1b      	lsrs	r3, r3, #28
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003294:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d110      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032a8:	e00d      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d102      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	e004      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80032c4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	f040 80a5 	bne.w	8003418 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80032ce:	4b56      	ldr	r3, [pc, #344]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80032e6:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80032f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	08db      	lsrs	r3, r3, #3
 80032f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d003      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xe4>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d022      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x128>
 800331a:	e043      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003434 <HAL_RCC_GetSysClockFreq+0x1fc>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b3e      	ldr	r3, [pc, #248]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800333e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003342:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003438 <HAL_RCC_GetSysClockFreq+0x200>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800334e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335e:	e046      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003434 <HAL_RCC_GetSysClockFreq+0x1fc>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003382:	ed97 6a01 	vldr	s12, [r7, #4]
 8003386:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003438 <HAL_RCC_GetSysClockFreq+0x200>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033a2:	e024      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80033cc:	ed97 6a01 	vldr	s12, [r7, #4]
 80033d0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003438 <HAL_RCC_GetSysClockFreq+0x200>
 80033d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80033dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ec:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	0e1b      	lsrs	r3, r3, #24
 80033f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033f8:	3301      	adds	r3, #1
 80033fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003406:	edd7 6a07 	vldr	s13, [r7, #28]
 800340a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800340e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003412:	ee17 3a90 	vmov	r3, s15
 8003416:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003418:	6a3b      	ldr	r3, [r7, #32]
}
 800341a:	4618      	mov	r0, r3
 800341c:	372c      	adds	r7, #44	@ 0x2c
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	46020c00 	.word	0x46020c00
 800342c:	08008298 	.word	0x08008298
 8003430:	00f42400 	.word	0x00f42400
 8003434:	4b742400 	.word	0x4b742400
 8003438:	46000000 	.word	0x46000000

0800343c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003440:	f7ff fefa 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x28>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	4906      	ldr	r1, [pc, #24]	@ (8003468 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <HAL_RCC_GetHCLKFreq+0x30>)
 8003458:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_RCC_GetHCLKFreq+0x30>)
 800345c:	681b      	ldr	r3, [r3, #0]
}
 800345e:	4618      	mov	r0, r3
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	46020c00 	.word	0x46020c00
 8003468:	08008288 	.word	0x08008288
 800346c:	20000000 	.word	0x20000000

08003470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003478:	4b3e      	ldr	r3, [pc, #248]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003486:	f7fe fdcd 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 800348a:	6178      	str	r0, [r7, #20]
 800348c:	e019      	b.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003494:	4a37      	ldr	r2, [pc, #220]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800349e:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7fe fdba 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b30      	ldr	r3, [pc, #192]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003574 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034c8:	d003      	beq.n	80034d2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d0:	d109      	bne.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d8:	d202      	bcs.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80034da:	2301      	movs	r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80034de:	e033      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80034e4:	e030      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ec:	d208      	bcs.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f4:	d102      	bne.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80034f6:	2303      	movs	r3, #3
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	e025      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e035      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003506:	d90f      	bls.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003514:	d902      	bls.n	800351c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e015      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800351c:	2301      	movs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	e012      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e00f      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800352e:	d109      	bne.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	d102      	bne.n	800353e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e004      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800353e:	2302      	movs	r3, #2
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e001      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 020f 	bic.w	r2, r3, #15
 8003550:	4909      	ldr	r1, [pc, #36]	@ (8003578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003558:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	46020c00 	.word	0x46020c00
 8003578:	40022000 	.word	0x40022000

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800357c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003580:	b0c2      	sub	sp, #264	@ 0x108
 8003582:	af00      	add	r7, sp, #0
 8003584:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800358e:	2300      	movs	r3, #0
 8003590:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f002 0401 	and.w	r4, r2, #1
 80035a0:	2500      	movs	r5, #0
 80035a2:	ea54 0305 	orrs.w	r3, r4, r5
 80035a6:	d00b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80035a8:	4bd5      	ldr	r3, [pc, #852]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ae:	f023 0103 	bic.w	r1, r3, #3
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b8:	4ad1      	ldr	r2, [pc, #836]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 0802 	and.w	r8, r2, #2
 80035cc:	f04f 0900 	mov.w	r9, #0
 80035d0:	ea58 0309 	orrs.w	r3, r8, r9
 80035d4:	d00b      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80035d6:	4bca      	ldr	r3, [pc, #808]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035dc:	f023 010c 	bic.w	r1, r3, #12
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	4ac6      	ldr	r2, [pc, #792]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f002 0a04 	and.w	sl, r2, #4
 80035fa:	f04f 0b00 	mov.w	fp, #0
 80035fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003604:	4bbe      	ldr	r3, [pc, #760]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	4aba      	ldr	r2, [pc, #744]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f002 0308 	and.w	r3, r2, #8
 8003628:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003632:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d00b      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800363c:	4bb0      	ldr	r3, [pc, #704]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800363e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	4aac      	ldr	r2, [pc, #688]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800364e:	430b      	orrs	r3, r1
 8003650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f002 0310 	and.w	r3, r2, #16
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800366a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	d00b      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003674:	4ba2      	ldr	r3, [pc, #648]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	4a9e      	ldr	r2, [pc, #632]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003686:	430b      	orrs	r3, r1
 8003688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80036ac:	4b94      	ldr	r3, [pc, #592]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	4a90      	ldr	r2, [pc, #576]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036be:	430b      	orrs	r3, r1
 80036c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f002 0320 	and.w	r3, r2, #32
 80036d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80036da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80036de:	460b      	mov	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	d00b      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80036e4:	4b86      	ldr	r3, [pc, #536]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036ea:	f023 0107 	bic.w	r1, r3, #7
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f4:	4a82      	ldr	r2, [pc, #520]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80036f6:	430b      	orrs	r3, r1
 80036f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d00b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800371c:	4b78      	ldr	r3, [pc, #480]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800371e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003722:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372c:	4a74      	ldr	r2, [pc, #464]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800372e:	430b      	orrs	r3, r1
 8003730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800374a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d00b      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003754:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800375a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003764:	4a66      	ldr	r2, [pc, #408]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003766:	430b      	orrs	r3, r1
 8003768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003782:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003786:	460b      	mov	r3, r1
 8003788:	4313      	orrs	r3, r2
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800378c:	4b5c      	ldr	r3, [pc, #368]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800378e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379c:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800379e:	430b      	orrs	r3, r1
 80037a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d00b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80037c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037f6:	460b      	mov	r3, r1
 80037f8:	4313      	orrs	r3, r2
 80037fa:	d00b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80037fc:	4b40      	ldr	r3, [pc, #256]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003802:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800380c:	4a3c      	ldr	r2, [pc, #240]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800380e:	430b      	orrs	r3, r1
 8003810:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003820:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800382a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d00c      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003834:	4b32      	ldr	r3, [pc, #200]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800383a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003846:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003848:	430b      	orrs	r3, r1
 800384a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800385a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003864:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d00c      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003874:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003880:	4a1f      	ldr	r2, [pc, #124]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800389e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d00c      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80038a8:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	4a11      	ldr	r2, [pc, #68]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d010      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80038e2:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038f4:	4a02      	ldr	r2, [pc, #8]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80038fe:	bf00      	nop
 8003900:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800391a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d04c      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d02d      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003930:	2b80      	cmp	r3, #128	@ 0x80
 8003932:	d827      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003934:	2b60      	cmp	r3, #96	@ 0x60
 8003936:	d02b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003938:	2b60      	cmp	r3, #96	@ 0x60
 800393a:	d823      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	d006      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d81f      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d011      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800394c:	e01a      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800394e:	4bbd      	ldr	r3, [pc, #756]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	4abc      	ldr	r2, [pc, #752]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003958:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800395a:	e01a      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	3308      	adds	r3, #8
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fca8 	bl	80042b8 <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 800396e:	e010      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	332c      	adds	r3, #44	@ 0x2c
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fd36 	bl	80043e8 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003982:	e006      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003992:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800399a:	4baa      	ldr	r3, [pc, #680]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800399c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039a0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ac:	4aa5      	ldr	r2, [pc, #660]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039b4:	e003      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80039ba:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039cc:	2300      	movs	r3, #0
 80039ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d053      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e6:	d033      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ec:	d82c      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80039ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039f2:	d02f      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80039f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039f8:	d826      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80039fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fe:	d008      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a04:	d820      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a0e:	d011      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8003a10:	e01a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a12:	4b8c      	ldr	r3, [pc, #560]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	4a8b      	ldr	r2, [pc, #556]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a1e:	e01a      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	3308      	adds	r3, #8
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc46 	bl	80042b8 <RCCEx_PLL2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a32:	e010      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	332c      	adds	r3, #44	@ 0x2c
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fcd4 	bl	80043e8 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a46:	e006      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003a5e:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a64:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a70:	4a74      	ldr	r2, [pc, #464]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003a7e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a90:	2300      	movs	r3, #0
 8003a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	d046      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aa6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003aaa:	d028      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003aac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ab0:	d821      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab6:	d022      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003abc:	d81b      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ac4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ac8:	d815      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	d80f      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d011      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ade:	d00e      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ae0:	e009      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fbe5 	bl	80042b8 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003b08:	4b4e      	ldr	r3, [pc, #312]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b0e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003b28:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d03f      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d81e      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003b54:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b9b 	.word	0x08003b9b
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b7f 	.word	0x08003b7f
 8003b68:	08003b9b 	.word	0x08003b9b
 8003b6c:	08003b9b 	.word	0x08003b9b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b70:	4b34      	ldr	r3, [pc, #208]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	332c      	adds	r3, #44	@ 0x2c
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc2f 	bl	80043e8 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003b90:	e004      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8003b9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b9c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003ba4:	4b27      	ldr	r3, [pc, #156]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003baa:	f023 0107 	bic.w	r1, r3, #7
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	4a23      	ldr	r2, [pc, #140]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003bc4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d04c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bf0:	d02a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bf6:	d821      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003bf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bfc:	d026      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003bfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c02:	d81b      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c08:	d00e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c0e:	d815      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01d      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d110      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c24:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003c26:	e014      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	332c      	adds	r3, #44	@ 0x2c
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fbda 	bl	80043e8 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003c42:	e006      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003c44:	46020c00 	.word	0x46020c00
        break;
 8003c48:	bf00      	nop
 8003c4a:	e002      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003c50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c52:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003c5a:	4baf      	ldr	r3, [pc, #700]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c6c:	4aaa      	ldr	r2, [pc, #680]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c7a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c90:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f000 80b5 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b9d      	ldr	r3, [pc, #628]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d113      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b99      	ldr	r3, [pc, #612]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb6:	4a98      	ldr	r2, [pc, #608]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cc0:	4b95      	ldr	r3, [pc, #596]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003cd8:	4b90      	ldr	r3, [pc, #576]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	4a8f      	ldr	r2, [pc, #572]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce4:	f7fc fda0 	bl	8000828 <HAL_GetTick>
 8003ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cec:	e00b      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cee:	f7fc fd9b 	bl	8000828 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d903      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003d04:	e005      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d06:	4b85      	ldr	r3, [pc, #532]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ed      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 8003d12:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d165      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d023      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01b      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d40:	4b75      	ldr	r3, [pc, #468]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4e:	4b72      	ldr	r3, [pc, #456]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d54:	4a70      	ldr	r2, [pc, #448]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d64:	4a6c      	ldr	r2, [pc, #432]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d019      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fc fd50 	bl	8000828 <HAL_GetTick>
 8003d88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8c:	e00d      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fc fd4b 	bl	8000828 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d903      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8003da8:	e006      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003daa:	4b5b      	ldr	r3, [pc, #364]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ea      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8003db8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003dc0:	4b55      	ldr	r3, [pc, #340]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003dd2:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dda:	e008      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ddc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003de0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003dea:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dee:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b48      	ldr	r3, [pc, #288]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfc:	4a46      	ldr	r2, [pc, #280]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e14:	2300      	movs	r3, #0
 8003e16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e18:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d042      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e2e:	d022      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8003e30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e34:	d81b      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e3a:	d011      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8003e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e40:	d815      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e4a:	d110      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	3308      	adds	r3, #8
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fa30 	bl	80042b8 <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e5e:	e00d      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e60:	4b2d      	ldr	r3, [pc, #180]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e6c:	e006      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e74:	e002      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8003e7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e7c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003e84:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e96:	4a20      	ldr	r2, [pc, #128]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e9e:	e003      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ea4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d031      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed6:	d804      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee0:	d007      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8003ef2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ef4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003efc:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003efe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f0e:	4a02      	ldr	r2, [pc, #8]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f10:	430b      	orrs	r3, r1
 8003f12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f16:	e007      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8003f18:	46020c00 	.word	0x46020c00
 8003f1c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003f24:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f36:	2300      	movs	r3, #0
 8003f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d019      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f50:	d105      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f52:	4ba1      	ldr	r3, [pc, #644]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	4aa0      	ldr	r2, [pc, #640]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003f60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f70:	4a99      	ldr	r2, [pc, #612]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f86:	2300      	movs	r3, #0
 8003f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d00c      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f94:	4b90      	ldr	r3, [pc, #576]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fa6:	4a8c      	ldr	r2, [pc, #560]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003fca:	4b83      	ldr	r3, [pc, #524]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fdc:	4a7e      	ldr	r2, [pc, #504]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d00c      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004000:	4b75      	ldr	r3, [pc, #468]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004006:	f023 0218 	bic.w	r2, r3, #24
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004012:	4971      	ldr	r1, [pc, #452]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
 800402c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d032      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800403e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004044:	4b64      	ldr	r3, [pc, #400]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	4a63      	ldr	r2, [pc, #396]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800404a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800404e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004058:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800405c:	d108      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	3308      	adds	r3, #8
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f927 	bl	80042b8 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 8004070:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004078:	4b57      	ldr	r3, [pc, #348]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800407a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800407e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800408a:	4953      	ldr	r1, [pc, #332]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004098:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	2100      	movs	r1, #0
 80040a6:	61b9      	str	r1, [r7, #24]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80040c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040c4:	d01e      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80040c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040ca:	d825      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040d0:	d00e      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040d6:	d81f      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d021      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80040dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e0:	d11a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e2:	4b3d      	ldr	r3, [pc, #244]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	4a3c      	ldr	r2, [pc, #240]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80040ee:	e018      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	3308      	adds	r3, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f8de 	bl	80042b8 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004102:	e00e      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	332c      	adds	r3, #44	@ 0x2c
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f96c 	bl	80043e8 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800412c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004130:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800413c:	4926      	ldr	r1, [pc, #152]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800414a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d03c      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004176:	d00e      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800417c:	d815      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d017      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004186:	d110      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004194:	e00e      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419a:	3308      	adds	r3, #8
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f88b 	bl	80042b8 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 80041b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041b4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80041bc:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	4902      	ldr	r1, [pc, #8]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80041d6:	e005      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80041d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80041e0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d00c      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004200:	4b2c      	ldr	r3, [pc, #176]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004206:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004212:	4928      	ldr	r1, [pc, #160]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	2100      	movs	r1, #0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d036      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800423e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004242:	d00d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004244:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004248:	d811      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 800424a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800424e:	d012      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004254:	d80b      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425e:	d106      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004260:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800426c:	e004      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 8004276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004278:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10d      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8004280:	4b0c      	ldr	r3, [pc, #48]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004282:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004286:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004292:	4908      	ldr	r1, [pc, #32]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042a0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80042a4:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80042ae:	46bd      	mov	sp, r7
 80042b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b4:	46020c00 	.word	0x46020c00

080042b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80042c0:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a46      	ldr	r2, [pc, #280]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80042c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042cc:	f7fc faac 	bl	8000828 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042d4:	f7fc faa8 	bl	8000828 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e077      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042e6:	4b3e      	ldr	r3, [pc, #248]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6852      	ldr	r2, [r2, #4]
 8004306:	3a01      	subs	r2, #1
 8004308:	0212      	lsls	r2, r2, #8
 800430a:	430a      	orrs	r2, r1
 800430c:	4934      	ldr	r1, [pc, #208]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 800430e:	4313      	orrs	r3, r2
 8004310:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004312:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004316:	4b33      	ldr	r3, [pc, #204]	@ (80043e4 <RCCEx_PLL2_Config+0x12c>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6892      	ldr	r2, [r2, #8]
 800431e:	3a01      	subs	r2, #1
 8004320:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68d2      	ldr	r2, [r2, #12]
 8004328:	3a01      	subs	r2, #1
 800432a:	0252      	lsls	r2, r2, #9
 800432c:	b292      	uxth	r2, r2
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6912      	ldr	r2, [r2, #16]
 8004334:	3a01      	subs	r2, #1
 8004336:	0412      	lsls	r2, r2, #16
 8004338:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6952      	ldr	r2, [r2, #20]
 8004342:	3a01      	subs	r2, #1
 8004344:	0612      	lsls	r2, r2, #24
 8004346:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800434a:	430a      	orrs	r2, r1
 800434c:	4924      	ldr	r1, [pc, #144]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 800434e:	4313      	orrs	r3, r2
 8004350:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	f023 020c 	bic.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4920      	ldr	r1, [pc, #128]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004360:	4313      	orrs	r3, r2
 8004362:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004364:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	491c      	ldr	r1, [pc, #112]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 800436e:	4313      	orrs	r3, r2
 8004370:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004372:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800437e:	4b18      	ldr	r3, [pc, #96]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	69d2      	ldr	r2, [r2, #28]
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	4913      	ldr	r1, [pc, #76]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004392:	4313      	orrs	r3, r2
 8004394:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004396:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	4a11      	ldr	r2, [pc, #68]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 800439c:	f043 0310 	orr.w	r3, r3, #16
 80043a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80043a2:	4b0f      	ldr	r3, [pc, #60]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80043a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043ae:	f7fc fa3b 	bl	8000828 <HAL_GetTick>
 80043b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043b4:	e008      	b.n	80043c8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043b6:	f7fc fa37 	bl	8000828 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <RCCEx_PLL2_Config+0x128>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0

}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	46020c00 	.word	0x46020c00
 80043e4:	80800000 	.word	0x80800000

080043e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80043f0:	4b47      	ldr	r3, [pc, #284]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a46      	ldr	r2, [pc, #280]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043fc:	f7fc fa14 	bl	8000828 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004402:	e008      	b.n	8004416 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004404:	f7fc fa10 	bl	8000828 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e077      	b.n	8004506 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004416:	4b3e      	ldr	r3, [pc, #248]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004422:	4b3b      	ldr	r3, [pc, #236]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6811      	ldr	r1, [r2, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6852      	ldr	r2, [r2, #4]
 8004436:	3a01      	subs	r2, #1
 8004438:	0212      	lsls	r2, r2, #8
 800443a:	430a      	orrs	r2, r1
 800443c:	4934      	ldr	r1, [pc, #208]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 800443e:	4313      	orrs	r3, r2
 8004440:	630b      	str	r3, [r1, #48]	@ 0x30
 8004442:	4b33      	ldr	r3, [pc, #204]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004446:	4b33      	ldr	r3, [pc, #204]	@ (8004514 <RCCEx_PLL3_Config+0x12c>)
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	3a01      	subs	r2, #1
 8004450:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68d2      	ldr	r2, [r2, #12]
 8004458:	3a01      	subs	r2, #1
 800445a:	0252      	lsls	r2, r2, #9
 800445c:	b292      	uxth	r2, r2
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6912      	ldr	r2, [r2, #16]
 8004464:	3a01      	subs	r2, #1
 8004466:	0412      	lsls	r2, r2, #16
 8004468:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6952      	ldr	r2, [r2, #20]
 8004472:	3a01      	subs	r2, #1
 8004474:	0612      	lsls	r2, r2, #24
 8004476:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800447a:	430a      	orrs	r2, r1
 800447c:	4924      	ldr	r1, [pc, #144]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 800447e:	4313      	orrs	r3, r2
 8004480:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004482:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	f023 020c 	bic.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	4920      	ldr	r1, [pc, #128]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004490:	4313      	orrs	r3, r2
 8004492:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004494:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 8004496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	491c      	ldr	r1, [pc, #112]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80044a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044ae:	4b18      	ldr	r3, [pc, #96]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69d2      	ldr	r2, [r2, #28]
 80044be:	00d2      	lsls	r2, r2, #3
 80044c0:	4913      	ldr	r1, [pc, #76]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80044c6:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044cc:	f043 0310 	orr.w	r3, r3, #16
 80044d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044de:	f7fc f9a3 	bl	8000828 <HAL_GetTick>
 80044e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044e4:	e008      	b.n	80044f8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044e6:	f7fc f99f 	bl	8000828 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e006      	b.n	8004506 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <RCCEx_PLL3_Config+0x128>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	46020c00 	.word	0x46020c00
 8004514:	80800000 	.word	0x80800000

08004518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004518:	b084      	sub	sp, #16
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	f107 001c 	add.w	r0, r7, #28
 8004526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800452a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800452e:	2b03      	cmp	r3, #3
 8004530:	d105      	bne.n	800453e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 f940 	bl	80057c4 <USB_CoreReset>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8004548:	7fbb      	ldrb	r3, [r7, #30]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10b      	bne.n	8004566 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0208 	orr.w	r2, r3, #8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004572:	b004      	add	sp, #16
 8004574:	4770      	bx	lr
	...

08004578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d165      	bne.n	8004658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a41      	ldr	r2, [pc, #260]	@ (8004694 <USB_SetTurnaroundTime+0x11c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0x2a>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a40      	ldr	r2, [pc, #256]	@ (8004698 <USB_SetTurnaroundTime+0x120>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d202      	bcs.n	80045a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800459c:	230f      	movs	r3, #15
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e062      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004698 <USB_SetTurnaroundTime+0x120>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d306      	bcc.n	80045b8 <USB_SetTurnaroundTime+0x40>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a3b      	ldr	r2, [pc, #236]	@ (800469c <USB_SetTurnaroundTime+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d202      	bcs.n	80045b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045b2:	230e      	movs	r3, #14
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e057      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a38      	ldr	r2, [pc, #224]	@ (800469c <USB_SetTurnaroundTime+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d306      	bcc.n	80045ce <USB_SetTurnaroundTime+0x56>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a37      	ldr	r2, [pc, #220]	@ (80046a0 <USB_SetTurnaroundTime+0x128>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045c8:	230d      	movs	r3, #13
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e04c      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a33      	ldr	r2, [pc, #204]	@ (80046a0 <USB_SetTurnaroundTime+0x128>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0x6c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <USB_SetTurnaroundTime+0x12c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045de:	230c      	movs	r3, #12
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e041      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <USB_SetTurnaroundTime+0x12c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0x82>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <USB_SetTurnaroundTime+0x130>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d802      	bhi.n	80045fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045f4:	230b      	movs	r3, #11
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e036      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <USB_SetTurnaroundTime+0x130>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d906      	bls.n	8004610 <USB_SetTurnaroundTime+0x98>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <USB_SetTurnaroundTime+0x134>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800460a:	230a      	movs	r3, #10
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e02b      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a26      	ldr	r2, [pc, #152]	@ (80046ac <USB_SetTurnaroundTime+0x134>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0xae>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <USB_SetTurnaroundTime+0x138>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d202      	bcs.n	8004626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004620:	2309      	movs	r3, #9
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e020      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <USB_SetTurnaroundTime+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d306      	bcc.n	800463c <USB_SetTurnaroundTime+0xc4>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4a20      	ldr	r2, [pc, #128]	@ (80046b4 <USB_SetTurnaroundTime+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004636:	2308      	movs	r3, #8
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e015      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <USB_SetTurnaroundTime+0x13c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d906      	bls.n	8004652 <USB_SetTurnaroundTime+0xda>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <USB_SetTurnaroundTime+0x140>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d202      	bcs.n	8004652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800464c:	2307      	movs	r3, #7
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00a      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004652:	2306      	movs	r3, #6
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e007      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800465e:	2309      	movs	r3, #9
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e001      	b.n	8004668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004664:	2309      	movs	r3, #9
 8004666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00d8acbf 	.word	0x00d8acbf
 8004698:	00e4e1c0 	.word	0x00e4e1c0
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	01067380 	.word	0x01067380
 80046a4:	011a499f 	.word	0x011a499f
 80046a8:	01312cff 	.word	0x01312cff
 80046ac:	014ca43f 	.word	0x014ca43f
 80046b0:	016e3600 	.word	0x016e3600
 80046b4:	01a6ab1f 	.word	0x01a6ab1f
 80046b8:	01e84800 	.word	0x01e84800

080046bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 0201 	bic.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d115      	bne.n	800472c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800470c:	200a      	movs	r0, #10
 800470e:	f7fc f897 	bl	8000840 <HAL_Delay>
      ms += 10U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	330a      	adds	r3, #10
 8004716:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 ffc3 	bl	80056a4 <USB_GetMode>
 800471e:	4603      	mov	r3, r0
 8004720:	2b01      	cmp	r3, #1
 8004722:	d01e      	beq.n	8004762 <USB_SetCurrentMode+0x84>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2bc7      	cmp	r3, #199	@ 0xc7
 8004728:	d9f0      	bls.n	800470c <USB_SetCurrentMode+0x2e>
 800472a:	e01a      	b.n	8004762 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d115      	bne.n	800475e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800473e:	200a      	movs	r0, #10
 8004740:	f7fc f87e 	bl	8000840 <HAL_Delay>
      ms += 10U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	330a      	adds	r3, #10
 8004748:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ffaa 	bl	80056a4 <USB_GetMode>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <USB_SetCurrentMode+0x84>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2bc7      	cmp	r3, #199	@ 0xc7
 800475a:	d9f0      	bls.n	800473e <USB_SetCurrentMode+0x60>
 800475c:	e001      	b.n	8004762 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e005      	b.n	800476e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2bc8      	cmp	r3, #200	@ 0xc8
 8004766:	d101      	bne.n	800476c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004778:	b084      	sub	sp, #16
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e009      	b.n	80047ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3340      	adds	r3, #64	@ 0x40
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b0e      	cmp	r3, #14
 80047b0:	d9f2      	bls.n	8004798 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11c      	bne.n	8004800 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80047fe:	e011      	b.n	8004824 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800482a:	461a      	mov	r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004830:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004834:	2b03      	cmp	r3, #3
 8004836:	d10d      	bne.n	8004854 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004840:	2100      	movs	r1, #0
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f968 	bl	8004b18 <USB_SetDevSpeed>
 8004848:	e008      	b.n	800485c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800484a:	2101      	movs	r1, #1
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f963 	bl	8004b18 <USB_SetDevSpeed>
 8004852:	e003      	b.n	800485c <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004854:	2103      	movs	r1, #3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f95e 	bl	8004b18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800485c:	2110      	movs	r1, #16
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8fa 	bl	8004a58 <USB_FlushTxFifo>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f924 	bl	8004abc <USB_FlushRxFifo>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004890:	461a      	mov	r2, r3
 8004892:	2300      	movs	r3, #0
 8004894:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489c:	461a      	mov	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e043      	b.n	8004930 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048be:	d118      	bne.n	80048f2 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e013      	b.n	8004904 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e008      	b.n	8004904 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004922:	461a      	mov	r2, r3
 8004924:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004928:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	3301      	adds	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004934:	461a      	mov	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4293      	cmp	r3, r2
 800493a:	d3b5      	bcc.n	80048a8 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e043      	b.n	80049ca <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004954:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004958:	d118      	bne.n	800498c <USB_DevInit+0x214>
    {
      if (i == 0U)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e013      	b.n	800499e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004982:	461a      	mov	r2, r3
 8004984:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e008      	b.n	800499e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049bc:	461a      	mov	r2, r3
 80049be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3301      	adds	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049ce:	461a      	mov	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d3b5      	bcc.n	8004942 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80049f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f043 0210 	orr.w	r2, r3, #16
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <USB_DevInit+0x2dc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f043 0208 	orr.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a50:	b004      	add	sp, #16
 8004a52:	4770      	bx	lr
 8004a54:	803c3800 	.word	0x803c3800

08004a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a72:	d901      	bls.n	8004a78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e01b      	b.n	8004ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	daf2      	bge.n	8004a66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	019b      	lsls	r3, r3, #6
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a9c:	d901      	bls.n	8004aa2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e006      	b.n	8004ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d0f0      	beq.n	8004a90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ad4:	d901      	bls.n	8004ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e018      	b.n	8004b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	daf2      	bge.n	8004ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2210      	movs	r2, #16
 8004aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004af8:	d901      	bls.n	8004afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e006      	b.n	8004b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d0f0      	beq.n	8004aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
 8004b6e:	e00a      	b.n	8004b86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d002      	beq.n	8004b7c <USB_GetDevSpeed+0x32>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d102      	bne.n	8004b82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	75fb      	strb	r3, [r7, #23]
 8004b80:	e001      	b.n	8004b86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b82:	230f      	movs	r3, #15
 8004b84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d13a      	bne.n	8004c26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d155      	bne.n	8004c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	791b      	ldrb	r3, [r3, #4]
 8004c02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	059b      	lsls	r3, r3, #22
 8004c0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e036      	b.n	8004c94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11a      	bne.n	8004c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	791b      	ldrb	r3, [r3, #4]
 8004c78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	f040 817f 	bne.w	8004fc4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d132      	bne.n	8004d34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004cec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2c:	0cdb      	lsrs	r3, r3, #19
 8004d2e:	04db      	lsls	r3, r3, #19
 8004d30:	6113      	str	r3, [r2, #16]
 8004d32:	e097      	b.n	8004e64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4e:	0cdb      	lsrs	r3, r3, #19
 8004d50:	04db      	lsls	r3, r3, #19
 8004d52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d76:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11a      	bne.n	8004db4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d903      	bls.n	8004d92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e044      	b.n	8004e3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	8afb      	ldrh	r3, [r7, #22]
 8004dda:	04d9      	lsls	r1, r3, #19
 8004ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8005070 <USB_EPStartXfer+0x3cc>)
 8004dde:	400b      	ands	r3, r1
 8004de0:	69b9      	ldr	r1, [r7, #24]
 8004de2:	0148      	lsls	r0, r1, #5
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	4401      	add	r1, r0
 8004de8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dec:	4313      	orrs	r3, r2
 8004dee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004e16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	075b      	lsls	r3, r3, #29
 8004e2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	0148      	lsls	r0, r1, #5
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	4401      	add	r1, r0
 8004e36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	69b9      	ldr	r1, [r7, #24]
 8004e56:	0148      	lsls	r0, r1, #5
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	4401      	add	r1, r0
 8004e5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d14b      	bne.n	8004f02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d128      	bne.n	8004ee0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d110      	bne.n	8004ec0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e00f      	b.n	8004ee0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e166      	b.n	80051d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	791b      	ldrb	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d015      	beq.n	8004f56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 814e 	beq.w	80051d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f50:	4313      	orrs	r3, r2
 8004f52:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f54:	e13c      	b.n	80051d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d110      	bne.n	8004f88 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00f      	b.n	8004fa8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68d9      	ldr	r1, [r3, #12]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	b298      	uxth	r0, r3
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4603      	mov	r3, r0
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9b9 	bl	8005334 <USB_WritePacket>
 8004fc2:	e105      	b.n	80051d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fde:	0cdb      	lsrs	r3, r3, #19
 8004fe0:	04db      	lsls	r3, r3, #19
 8004fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005002:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005006:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d132      	bne.n	8005074 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	0148      	lsls	r0, r1, #5
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	4401      	add	r1, r0
 8005044:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005048:	4313      	orrs	r3, r2
 800504a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800506a:	6113      	str	r3, [r2, #16]
 800506c:	e062      	b.n	8005134 <USB_EPStartXfer+0x490>
 800506e:	bf00      	nop
 8005070:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d123      	bne.n	80050c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005092:	69b9      	ldr	r1, [r7, #24]
 8005094:	0148      	lsls	r0, r1, #5
 8005096:	69f9      	ldr	r1, [r7, #28]
 8005098:	4401      	add	r1, r0
 800509a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800509e:	4313      	orrs	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050c0:	6113      	str	r3, [r2, #16]
 80050c2:	e037      	b.n	8005134 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	1e5a      	subs	r2, r3, #1
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	8afa      	ldrh	r2, [r7, #22]
 80050e0:	fb03 f202 	mul.w	r2, r3, r2
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	8afb      	ldrh	r3, [r7, #22]
 80050f8:	04d9      	lsls	r1, r3, #19
 80050fa:	4b38      	ldr	r3, [pc, #224]	@ (80051dc <USB_EPStartXfer+0x538>)
 80050fc:	400b      	ands	r3, r1
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	0148      	lsls	r0, r1, #5
 8005102:	69f9      	ldr	r1, [r7, #28]
 8005104:	4401      	add	r1, r0
 8005106:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	0148      	lsls	r0, r1, #5
 8005128:	69f9      	ldr	r1, [r7, #28]
 800512a:	4401      	add	r1, r0
 800512c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005130:	4313      	orrs	r3, r2
 8005132:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d10d      	bne.n	8005156 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005152:	460a      	mov	r2, r1
 8005154:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d128      	bne.n	80051b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d110      	bne.n	8005190 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005188:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e00f      	b.n	80051b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	1ff80000 	.word	0x1ff80000

080051e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d14a      	bne.n	8005294 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005212:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005216:	f040 8086 	bne.w	8005326 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	7812      	ldrb	r2, [r2, #0]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005238:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800523c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005260:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800526e:	4293      	cmp	r3, r2
 8005270:	d902      	bls.n	8005278 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
          break;
 8005276:	e056      	b.n	8005326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800528c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005290:	d0e7      	beq.n	8005262 <USB_EPStopXfer+0x82>
 8005292:	e048      	b.n	8005326 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ac:	d13b      	bne.n	8005326 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	7812      	ldrb	r2, [r2, #0]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005302:	4293      	cmp	r3, r2
 8005304:	d902      	bls.n	800530c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
          break;
 800530a:	e00c      	b.n	8005326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005324:	d0e7      	beq.n	80052f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	@ 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	460b      	mov	r3, r1
 8005344:	71fb      	strb	r3, [r7, #7]
 8005346:	4613      	mov	r3, r2
 8005348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005352:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005356:	2b00      	cmp	r3, #0
 8005358:	d123      	bne.n	80053a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800535a:	88bb      	ldrh	r3, [r7, #4]
 800535c:	3303      	adds	r3, #3
 800535e:	089b      	lsrs	r3, r3, #2
 8005360:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e018      	b.n	800539a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	031a      	lsls	r2, r3, #12
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005374:	461a      	mov	r2, r3
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3301      	adds	r3, #1
 8005386:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3301      	adds	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3301      	adds	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	3301      	adds	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3e2      	bcc.n	8005368 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3724      	adds	r7, #36	@ 0x24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b08b      	sub	sp, #44	@ 0x2c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	089b      	lsrs	r3, r3, #2
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	623b      	str	r3, [r7, #32]
 80053da:	e014      	b.n	8005406 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	3301      	adds	r3, #1
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	3301      	adds	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	3301      	adds	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	3301      	adds	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	3301      	adds	r3, #1
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	429a      	cmp	r2, r3
 800540c:	d3e6      	bcc.n	80053dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800540e:	8bfb      	ldrh	r3, [r7, #30]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01e      	beq.n	8005452 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800541e:	461a      	mov	r2, r3
 8005420:	f107 0310 	add.w	r3, r7, #16
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	b2da      	uxtb	r2, r3
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	701a      	strb	r2, [r3, #0]
      i++;
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	3301      	adds	r3, #1
 800543e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	3301      	adds	r3, #1
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005446:	8bfb      	ldrh	r3, [r7, #30]
 8005448:	3b01      	subs	r3, #1
 800544a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800544c:	8bfb      	ldrh	r3, [r7, #30]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1ea      	bne.n	8005428 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005454:	4618      	mov	r0, r3
 8005456:	372c      	adds	r7, #44	@ 0x2c
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d12c      	bne.n	80054d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	db12      	blt.n	80054b4 <USB_EPSetStall+0x54>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e02b      	b.n	800552e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db12      	blt.n	800550e <USB_EPSetStall+0xae>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00f      	beq.n	800550e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005508:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800550c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800552c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4013      	ands	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	0c1b      	lsrs	r3, r3, #16
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	4013      	ands	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	b29b      	uxth	r3, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800563a:	68bb      	ldr	r3, [r7, #8]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	01db      	lsls	r3, r3, #7
 800567a:	b2db      	uxtb	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005696:	68bb      	ldr	r3, [r7, #8]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056de:	f023 0307 	bic.w	r3, r3, #7
 80056e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	460b      	mov	r3, r1
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	333c      	adds	r3, #60	@ 0x3c
 800571e:	3304      	adds	r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4a26      	ldr	r2, [pc, #152]	@ (80057c0 <USB_EP0_OutStart+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d90a      	bls.n	8005742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800573c:	d101      	bne.n	8005742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e037      	b.n	80057b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800575c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005770:	f043 0318 	orr.w	r3, r3, #24
 8005774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005784:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10f      	bne.n	80057b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80057ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	4f54300a 	.word	0x4f54300a

080057c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057dc:	d901      	bls.n	80057e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e01b      	b.n	800581a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	daf2      	bge.n	80057d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005806:	d901      	bls.n	800580c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d0f0      	beq.n	80057fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b092      	sub	sp, #72	@ 0x48
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	223f      	movs	r2, #63	@ 0x3f
 8005840:	4619      	mov	r1, r3
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 ff9b 	bl	800677e <_ux_utility_string_length_check>
 8005848:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 800584a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <_ux_device_stack_class_register+0x2c>
        return(status);
 8005850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005852:	e032      	b.n	80058ba <_ux_device_stack_class_register+0x92>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <_ux_device_stack_class_register+0x9c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800585c:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800585e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d128      	bne.n	80058b8 <_ux_device_stack_class_register+0x90>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8005866:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3301      	adds	r3, #1
 800586c:	461a      	mov	r2, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f000 fed0 	bl	8006614 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8005874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800587a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800587c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8005880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	65da      	str	r2, [r3, #92]	@ 0x5c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8005886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	659a      	str	r2, [r3, #88]	@ 0x58
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800588c:	2305      	movs	r3, #5
 800588e:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 8005890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005892:	63bb      	str	r3, [r7, #56]	@ 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8005894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 8005898:	f107 0214 	add.w	r2, r7, #20
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4610      	mov	r0, r2
 80058a0:	4798      	blx	r3
 80058a2:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <_ux_device_stack_class_register+0x86>
                return(status);
 80058aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ac:	e005      	b.n	80058ba <_ux_device_stack_class_register+0x92>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 80058ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b0:	2201      	movs	r2, #1
 80058b2:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 80058b4:	2300      	movs	r3, #0
 80058b6:	e000      	b.n	80058ba <_ux_device_stack_class_register+0x92>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80058b8:	2312      	movs	r3, #18
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3748      	adds	r7, #72	@ 0x48
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	2000054c 	.word	0x2000054c

080058c8 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b092      	sub	sp, #72	@ 0x48
 80058cc:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 80058ce:	23ff      	movs	r3, #255	@ 0xff
 80058d0:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80058d2:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <_ux_device_stack_disconnect+0xb0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80058d8:	4b27      	ldr	r3, [pc, #156]	@ (8005978 <_ux_device_stack_disconnect+0xb0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3324      	adds	r3, #36	@ 0x24
 80058de:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d123      	bne.n	8005930 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ee:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 80058f0:	e018      	b.n	8005924 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80058f2:	2303      	movs	r3, #3
 80058f4:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 80058f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f8:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 80058fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800590a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	1d3a      	adds	r2, r7, #4
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8005914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800591a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800591c:	f000 f9ca 	bl	8005cb4 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 8005924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d107      	bne.n	8005948 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800593c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800593e:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8005940:	210f      	movs	r1, #15
 8005942:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005944:	4798      	blx	r3
 8005946:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <_ux_device_stack_disconnect+0xb0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <_ux_device_stack_disconnect+0xb0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800596a:	200a      	movs	r0, #10
 800596c:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800596e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8005970:	4618      	mov	r0, r3
 8005972:	3748      	adds	r7, #72	@ 0x48
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	2000054c 	.word	0x2000054c

0800597c <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b094      	sub	sp, #80	@ 0x50
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800598a:	4b9a      	ldr	r3, [pc, #616]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3324      	adds	r3, #36	@ 0x24
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8005992:	4b98      	ldr	r3, [pc, #608]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800599c:	4b95      	ldr	r3, [pc, #596]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 80059a6:	4b93      	ldr	r3, [pc, #588]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 80059b0:	4b90      	ldr	r3, [pc, #576]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 80059ba:	4b8e      	ldr	r3, [pc, #568]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059c0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 80059c4:	4b8b      	ldr	r3, [pc, #556]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80059ca:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 80059ce:	4b89      	ldr	r3, [pc, #548]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80059d4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 80059d8:	4b86      	ldr	r3, [pc, #536]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059de:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 80059e2:	4b84      	ldr	r3, [pc, #528]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80059e8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 80059ec:	2264      	movs	r2, #100	@ 0x64
 80059ee:	2100      	movs	r1, #0
 80059f0:	2000      	movs	r0, #0
 80059f2:	f000 fc1b 	bl	800622c <_ux_utility_memory_allocate>
 80059f6:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <_ux_device_stack_initialize+0x86>
        return(UX_MEMORY_INSUFFICIENT);
 80059fe:	2312      	movs	r3, #18
 8005a00:	e151      	b.n	8005ca6 <_ux_device_stack_initialize+0x32a>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8005a02:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	3338      	adds	r3, #56	@ 0x38
 8005a10:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8005a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a16:	2101      	movs	r1, #1
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f000 fc07 	bl	800622c <_ux_utility_memory_allocate>
 8005a1e:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <_ux_device_stack_initialize+0xb6>
        status = UX_MEMORY_INSUFFICIENT;
 8005a2c:	2312      	movs	r3, #18
 8005a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a30:	e001      	b.n	8005a36 <_ux_device_stack_initialize+0xba>
    else
        status = UX_SUCCESS;
 8005a32:	2300      	movs	r3, #0
 8005a34:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 8005a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 8090 	bne.w	8005b6a <_ux_device_stack_initialize+0x1ee>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8005a54:	4b67      	ldr	r3, [pc, #412]	@ (8005bf4 <_ux_device_stack_initialize+0x278>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 8005a6a:	e054      	b.n	8005b16 <_ux_device_stack_initialize+0x19a>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8005a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d029      	beq.n	8005ad2 <_ux_device_stack_initialize+0x156>
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d13e      	bne.n	8005b00 <_ux_device_stack_initialize+0x184>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 8005a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a84:	3303      	adds	r3, #3
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <_ux_device_stack_initialize+0x128>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 8005a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	4413      	add	r3, r2
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	3304      	adds	r3, #4
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aa2:	e00a      	b.n	8005aba <_ux_device_stack_initialize+0x13e>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d203      	bcs.n	8005aba <_ux_device_stack_initialize+0x13e>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	3302      	adds	r3, #2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d21d      	bcs.n	8005b04 <_ux_device_stack_initialize+0x188>
                    max_interface_number = *(device_framework + 2);
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	3302      	adds	r3, #2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 8005ad0:	e018      	b.n	8005b04 <_ux_device_stack_initialize+0x188>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 8005ad2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d901      	bls.n	8005ade <_ux_device_stack_initialize+0x162>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 8005ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	4413      	add	r3, r2
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 8005aea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d901      	bls.n	8005af6 <_ux_device_stack_initialize+0x17a>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 8005af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 8005afe:	e002      	b.n	8005b06 <_ux_device_stack_initialize+0x18a>

            default:
                break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <_ux_device_stack_initialize+0x18a>
                break;
 8005b04:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8005b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8005b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1a7      	bne.n	8005a6c <_ux_device_stack_initialize+0xf0>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 8005b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	4413      	add	r3, r2
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 8005b24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d901      	bls.n	8005b30 <_ux_device_stack_initialize+0x1b4>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2e:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 8005b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d901      	bls.n	8005b3c <_ux_device_stack_initialize+0x1c0>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <_ux_device_stack_initialize+0x1d4>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 8005b42:	2242      	movs	r2, #66	@ 0x42
 8005b44:	2103      	movs	r1, #3
 8005b46:	2002      	movs	r0, #2
 8005b48:	f000 fa00 	bl	8005f4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 8005b4c:	2342      	movs	r3, #66	@ 0x42
 8005b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 8005b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <_ux_device_stack_initialize+0x1ee>
 8005b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d906      	bls.n	8005b6a <_ux_device_stack_initialize+0x1ee>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8005b5c:	2212      	movs	r2, #18
 8005b5e:	2103      	movs	r1, #3
 8005b60:	2002      	movs	r0, #2
 8005b62:	f000 f9f3 	bl	8005f4c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 8005b66:	2312      	movs	r3, #18
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d118      	bne.n	8005ba2 <_ux_device_stack_initialize+0x226>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b74:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 8005b80:	2320      	movs	r3, #32
 8005b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b84:	2100      	movs	r1, #0
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 fc32 	bl	80063f0 <_ux_utility_memory_allocate_mulc_safe>
 8005b8c:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <_ux_device_stack_initialize+0x21e>
            status = UX_MEMORY_INSUFFICIENT;
 8005b94:	2312      	movs	r3, #18
 8005b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b98:	e003      	b.n	8005ba2 <_ux_device_stack_initialize+0x226>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d03f      	beq.n	8005c28 <_ux_device_stack_initialize+0x2ac>
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d13c      	bne.n	8005c28 <_ux_device_stack_initialize+0x2ac>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 8005bae:	2368      	movs	r3, #104	@ 0x68
 8005bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f000 fc1b 	bl	80063f0 <_ux_utility_memory_allocate_mulc_safe>
 8005bba:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <_ux_device_stack_initialize+0x24c>
            status = UX_MEMORY_INSUFFICIENT;
 8005bc2:	2312      	movs	r3, #18
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 8005bc6:	e031      	b.n	8005c2c <_ux_device_stack_initialize+0x2b0>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8005bd0:	e01d      	b.n	8005c0e <_ux_device_stack_initialize+0x292>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 8005bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f000 fb27 	bl	800622c <_ux_utility_memory_allocate>
 8005bde:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8005be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be2:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 8005be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 8005bec:	2312      	movs	r3, #18
 8005bee:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 8005bf0:	e019      	b.n	8005c26 <_ux_device_stack_initialize+0x2aa>
 8005bf2:	bf00      	nop
 8005bf4:	2000054c 	.word	0x2000054c
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <_ux_device_stack_initialize+0x28c>
                {
                    status = UX_SEMAPHORE_ERROR;
 8005c02:	2315      	movs	r3, #21
 8005c04:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 8005c06:	e00e      	b.n	8005c26 <_ux_device_stack_initialize+0x2aa>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8005c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0a:	3368      	adds	r3, #104	@ 0x68
 8005c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c16:	2168      	movs	r1, #104	@ 0x68
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d3d6      	bcc.n	8005bd2 <_ux_device_stack_initialize+0x256>
        if (endpoints_pool == UX_NULL)
 8005c24:	e002      	b.n	8005c2c <_ux_device_stack_initialize+0x2b0>
 8005c26:	e001      	b.n	8005c2c <_ux_device_stack_initialize+0x2b0>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <_ux_device_stack_initialize+0x2ba>
        return(UX_SUCCESS);
 8005c32:	2300      	movs	r3, #0
 8005c34:	e037      	b.n	8005ca6 <_ux_device_stack_initialize+0x32a>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8005c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d018      	beq.n	8005c6e <_ux_device_stack_initialize+0x2f2>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8005c3c:	e00b      	b.n	8005c56 <_ux_device_stack_initialize+0x2da>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8005c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <_ux_device_stack_initialize+0x2d4>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8005c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fd00 	bl	8006650 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	3b68      	subs	r3, #104	@ 0x68
 8005c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d2ed      	bcs.n	8005c3e <_ux_device_stack_initialize+0x2c2>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fcf1 	bl	8006650 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <_ux_device_stack_initialize+0x308>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fce6 	bl	8006650 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <_ux_device_stack_initialize+0x31a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fcdd 	bl	8006650 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <_ux_device_stack_initialize+0x334>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fcd6 	bl	8006650 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3750      	adds	r7, #80	@ 0x50
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	2000054c 	.word	0x2000054c

08005cb4 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8005cbc:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <_ux_device_stack_interface_delete+0x8c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3324      	adds	r3, #36	@ 0x24
 8005cc2:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8005cca:	e01c      	b.n	8005d06 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <_ux_device_stack_interface_delete+0x8c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	210f      	movs	r1, #15
 8005ce4:	68b8      	ldr	r0, [r7, #8]
 8005ce6:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1df      	bne.n	8005ccc <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2000054c 	.word	0x2000054c

08005d44 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8005d4e:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <_ux_device_stack_transfer_abort+0x50>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8005d5a:	f001 fb8d 	bl	8007478 <_ux_utility_interrupt_disable>
 8005d5e:	60b8      	str	r0, [r7, #8]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <_ux_device_stack_transfer_abort+0x3e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	210d      	movs	r1, #13
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f001 fb90 	bl	800749a <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e002      	b.n	8005d88 <_ux_device_stack_transfer_abort+0x44>
    }
    else
    {

        /* Restore interrupts.  */
        UX_RESTORE
 8005d82:	68b8      	ldr	r0, [r7, #8]
 8005d84:	f001 fb89 	bl	800749a <_ux_utility_interrupt_restore>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000054c 	.word	0x2000054c

08005d98 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3320      	adds	r3, #32
 8005da6:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ffca 	bl	8005d44 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f811 	bl	8005df8 <_ux_device_stack_transfer_run>
 8005dd6:	6178      	str	r0, [r7, #20]
    if (status == UX_STATE_LOCK)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d101      	bne.n	8005de2 <_ux_device_stack_transfer_request+0x28>
        return(UX_BUSY);
 8005dde:	23fe      	movs	r3, #254	@ 0xfe
 8005de0:	e006      	b.n	8005df0 <_ux_device_stack_transfer_request+0x36>
    if (status < UX_STATE_NEXT)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d802      	bhi.n	8005dee <_ux_device_stack_transfer_request+0x34>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	e000      	b.n	8005df0 <_ux_device_stack_transfer_request+0x36>

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 8005dee:	2300      	movs	r3, #0

    /* And return the status.  */
    return(status);

#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	@ 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <_ux_device_stack_transfer_run+0x24>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2204      	movs	r2, #4
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_NEXT);
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e090      	b.n	8005f3e <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8005e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <_ux_device_stack_transfer_run+0x150>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d00d      	beq.n	8005e46 <_ux_device_stack_transfer_run+0x4e>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d00a      	beq.n	8005e46 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_ADDRESSED) &&
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d007      	beq.n	8005e46 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_CONFIGURED))
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2225      	movs	r2, #37	@ 0x25
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 8005e42:	2301      	movs	r3, #1
 8005e44:	e07b      	b.n	8005f3e <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8005e46:	4b40      	ldr	r3, [pc, #256]	@ (8005f48 <_ux_device_stack_transfer_run+0x150>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	623b      	str	r3, [r7, #32]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	61fb      	str	r3, [r7, #28]

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	61bb      	str	r3, [r7, #24]
    switch(state)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b21      	cmp	r3, #33	@ 0x21
 8005e5c:	d05a      	beq.n	8005f14 <_ux_device_stack_transfer_run+0x11c>
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b21      	cmp	r3, #33	@ 0x21
 8005e62:	d865      	bhi.n	8005f30 <_ux_device_stack_transfer_run+0x138>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <_ux_device_stack_transfer_run+0x7a>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d042      	beq.n	8005ef6 <_ux_device_stack_transfer_run+0xfe>
 8005e70:	e05e      	b.n	8005f30 <_ux_device_stack_transfer_run+0x138>
    case UX_STATE_RESET:

        /* Prepare transfer parameters.  */

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	7bdb      	ldrb	r3, [r3, #15]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <_ux_device_stack_transfer_run+0x9e>
        {

            /* Isolate the direction from the endpoint address.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	7b9b      	ldrb	r3, [r3, #14]
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da03      	bge.n	8005e90 <_ux_device_stack_transfer_run+0x98>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e8e:	e002      	b.n	8005e96 <_ux_device_stack_transfer_run+0x9e>
            else
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28

        /* See if we need to force a zero length packet at the end of the transfer.
           This happens on a DATA IN and when the host requested length is not met
           and the last packet is on a boundary. If slave_length is zero, then it is
           a explicit ZLP request, no need to force ZLP.  */
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d115      	bne.n	8005eca <_ux_device_stack_transfer_run+0xd2>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <_ux_device_stack_transfer_run+0xd2>
            (slave_length != 0) && (host_length != slave_length) &&
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d00e      	beq.n	8005eca <_ux_device_stack_transfer_run+0xd2>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	8a1b      	ldrh	r3, [r3, #16]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eb8:	fb01 f202 	mul.w	r2, r1, r2
 8005ebc:	1a9b      	subs	r3, r3, r2
            (slave_length != 0) && (host_length != slave_length) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <_ux_device_stack_transfer_run+0xd2>
        {

            /* If so force Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ec8:	e002      	b.n	8005ed0 <_ux_device_stack_transfer_run+0xd8>
        }
        else
        {

            /* Condition is not met, do not force a Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        /* Reset the number of bytes sent/received.  */
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]

        /* Determine how many bytes to send in this transaction.  We keep track of the original
           length and have a working length.  */
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	61da      	str	r2, [r3, #28]

        /* Save the buffer pointer.  */
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
                                transfer_request -> ux_slave_transfer_request_data_pointer;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68da      	ldr	r2, [r3, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT:

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	7bdb      	ldrb	r3, [r3, #15]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <_ux_device_stack_transfer_run+0x116>
        {

            /* Return WAIT until halt cleared.  */
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d101      	bne.n	8005f0e <_ux_device_stack_transfer_run+0x116>
                return(UX_STATE_WAIT);
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	e017      	b.n	8005f3e <_ux_device_stack_transfer_run+0x146>

        }

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2221      	movs	r2, #33	@ 0x21
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT:

        /* Call the DCD driver transfer function.   */
        /* Transfer state is adjusted inside DCD driver.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	210c      	movs	r1, #12
 8005f1c:	6a38      	ldr	r0, [r7, #32]
 8005f1e:	4798      	blx	r3
 8005f20:	6178      	str	r0, [r7, #20]

        /* Any error case or normal end: reset state for next transfer.  */
        if (status < UX_STATE_WAIT)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d808      	bhi.n	8005f3a <_ux_device_stack_transfer_run+0x142>
        {
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        }
        break;
 8005f2e:	e004      	b.n	8005f3a <_ux_device_stack_transfer_run+0x142>

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 8005f36:	2301      	movs	r3, #1
 8005f38:	e001      	b.n	8005f3e <_ux_device_stack_transfer_run+0x146>
        break;
 8005f3a:	bf00      	nop
    }

    /* And return the status.  */
    return(status);
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	@ 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	2000054c 	.word	0x2000054c

08005f4c <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8005f58:	4b0c      	ldr	r3, [pc, #48]	@ (8005f8c <_ux_system_error_handler+0x40>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <_ux_system_error_handler+0x40>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	3201      	adds	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8005f6a:	4b08      	ldr	r3, [pc, #32]	@ (8005f8c <_ux_system_error_handler+0x40>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <_ux_system_error_handler+0x40>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	4798      	blx	r3
    }
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000550 	.word	0x20000550

08005f90 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	@ 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <_ux_system_initialize+0x1a>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 8005faa:	23fa      	movs	r3, #250	@ 0xfa
 8005fac:	e07d      	b.n	80060aa <_ux_system_initialize+0x11a>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fbb2 	bl	800671c <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8005fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80060b4 <_ux_system_initialize+0x124>)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8005fbe:	2318      	movs	r3, #24
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	4413      	add	r3, r2
 8005fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80060b8 <_ux_system_initialize+0x128>)
 8005fca:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8005fd4:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <_ux_system_initialize+0x124>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	440a      	add	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	3314      	adds	r3, #20
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00c      	beq.n	8006006 <_ux_system_initialize+0x76>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8005ff2:	4b30      	ldr	r3, [pc, #192]	@ (80060b4 <_ux_system_initialize+0x124>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffa:	440a      	add	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	3314      	adds	r3, #20
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
 8006004:	e005      	b.n	8006012 <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8006006:	4b2b      	ldr	r3, [pc, #172]	@ (80060b4 <_ux_system_initialize+0x124>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b2a      	ldr	r3, [pc, #168]	@ (80060b4 <_ux_system_initialize+0x124>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	4413      	add	r3, r2
 8006018:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	3307      	adds	r3, #7
 800601e:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	429a      	cmp	r2, r3
 8006036:	d301      	bcc.n	800603c <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8006038:	2312      	movs	r3, #18
 800603a:	e036      	b.n	80060aa <_ux_system_initialize+0x11a>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 8006044:	4b1b      	ldr	r3, [pc, #108]	@ (80060b4 <_ux_system_initialize+0x124>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a39      	ldr	r1, [r7, #32]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f9f4 	bl	800643c <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d026      	beq.n	80060a8 <_ux_system_initialize+0x118>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d023      	beq.n	80060a8 <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	2100      	movs	r1, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fb59 	bl	800671c <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	3307      	adds	r3, #7
 8006072:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	4413      	add	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	429a      	cmp	r2, r3
 800608a:	d301      	bcc.n	8006090 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800608c:	2312      	movs	r3, #18
 800608e:	e00c      	b.n	80060aa <_ux_system_initialize+0x11a>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8006098:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <_ux_system_initialize+0x124>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	6a39      	ldr	r1, [r7, #32]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f9ca 	bl	800643c <_ux_utility_memory_byte_pool_create>
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3728      	adds	r7, #40	@ 0x28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000550 	.word	0x20000550
 80060b8:	2000054c 	.word	0x2000054c

080060bc <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <_uxe_system_initialize+0x1a>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 80060d6:	23fa      	movs	r3, #250	@ 0xfa
 80060d8:	e006      	b.n	80060e8 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff ff55 	bl	8005f90 <_ux_system_initialize>
 80060e6:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 80060fe:	e041      	b.n	8006184 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	60ba      	str	r2, [r7, #8]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d01e      	beq.n	800614a <_ux_utility_descriptor_parse+0x5a>
 800610c:	2b04      	cmp	r3, #4
 800610e:	d12f      	bne.n	8006170 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 8006110:	e004      	b.n	800611c <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	603a      	str	r2, [r7, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f5      	bne.n	8006112 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f835 	bl	8006196 <_ux_utility_long_get>
 800612c:	4602      	mov	r2, r0
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	3304      	adds	r3, #4
 800613c:	603b      	str	r3, [r7, #0]
            break;
 800613e:	e021      	b.n	8006184 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	603a      	str	r2, [r7, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f5      	bne.n	8006140 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fafb 	bl	8006750 <_ux_utility_short_get>
 800615a:	4603      	mov	r3, r0
 800615c:	b29a      	uxth	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3302      	adds	r3, #2
 8006166:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	3302      	adds	r3, #2
 800616c:	603b      	str	r3, [r7, #0]
            break;
 800616e:	e009      	b.n	8006184 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1b8      	bne.n	8006100 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800618e:	bf00      	nop
}
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 80061d4:	68fb      	ldr	r3, [r7, #12]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	0a19      	lsrs	r1, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	b2ca      	uxtb	r2, r1
 8006204:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	0c19      	lsrs	r1, r3, #16
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	b2ca      	uxtb	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	0e1b      	lsrs	r3, r3, #24
 8006218:	b2da      	uxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800621e:	bf00      	nop
}
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	@ 0x38
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800623e:	4b6a      	ldr	r3, [pc, #424]	@ (80063e8 <_ux_utility_memory_allocate+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
 8006246:	e009      	b.n	800625c <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d104      	bne.n	8006258 <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800624e:	4b66      	ldr	r3, [pc, #408]	@ (80063e8 <_ux_utility_memory_allocate+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	637b      	str	r3, [r7, #52]	@ 0x34
 8006256:	e001      	b.n	800625c <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 8006258:	2300      	movs	r3, #0
 800625a:	e0c0      	b.n	80063de <_ux_utility_memory_allocate+0x1b2>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 8006262:	2300      	movs	r3, #0
 8006264:	e0bb      	b.n	80063de <_ux_utility_memory_allocate+0x1b2>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800626c:	2300      	movs	r3, #0
 800626e:	e0b6      	b.n	80063de <_ux_utility_memory_allocate+0x1b2>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d101      	bne.n	800627c <_ux_utility_memory_allocate+0x50>
        memory_alignment = UX_NO_ALIGN;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b06      	cmp	r3, #6
 8006280:	d801      	bhi.n	8006286 <_ux_utility_memory_allocate+0x5a>
        memory_alignment =  UX_ALIGN_MIN;
 8006282:	2307      	movs	r3, #7
 8006284:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3307      	adds	r3, #7
 800628a:	f023 0307 	bic.w	r3, r3, #7
 800628e:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b07      	cmp	r3, #7
 8006294:	d805      	bhi.n	80062a2 <_ux_utility_memory_allocate+0x76>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800629a:	f000 f91f 	bl	80064dc <_ux_utility_memory_byte_pool_search>
 800629e:	6338      	str	r0, [r7, #48]	@ 0x30
 80062a0:	e007      	b.n	80062b2 <_ux_utility_memory_allocate+0x86>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80062ac:	f000 f916 	bl	80064dc <_ux_utility_memory_byte_pool_search>
 80062b0:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <_ux_utility_memory_allocate+0x9a>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 80062b8:	2212      	movs	r2, #18
 80062ba:	2108      	movs	r1, #8
 80062bc:	2002      	movs	r0, #2
 80062be:	f7ff fe45 	bl	8005f4c <_ux_system_error_handler>

        return(UX_NULL);
 80062c2:	2300      	movs	r3, #0
 80062c4:	e08b      	b.n	80063de <_ux_utility_memory_allocate+0x1b2>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80062d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	3b08      	subs	r3, #8
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	3308      	adds	r3, #8
 80062e2:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d02f      	beq.n	800634e <_ux_utility_memory_allocate+0x122>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	3308      	adds	r3, #8
 80062f2:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	43db      	mvns	r3, r3
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	4013      	ands	r3, r2
 8006304:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	3b08      	subs	r3, #8
 800630a:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	3304      	adds	r3, #4
 8006320:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4a30      	ldr	r2, [pc, #192]	@ (80063ec <_ux_utility_memory_allocate+0x1c0>)
 800632a:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006334:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633a:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800633c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	461a      	mov	r2, r3
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800634e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b13      	cmp	r3, #19
 8006356:	d91e      	bls.n	8006396 <_ux_utility_memory_allocate+0x16a>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3308      	adds	r3, #8
 800635c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635e:	4413      	add	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	3304      	adds	r3, #4
 8006376:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <_ux_utility_memory_allocate+0x1c0>)
 8006380:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006390:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	3304      	adds	r3, #4
 800639a:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063a4:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 80063a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f1a3 0208 	sub.w	r2, r3, #8
 80063b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b4:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 80063b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063bc:	429a      	cmp	r2, r3
 80063be:	d105      	bne.n	80063cc <_ux_utility_memory_allocate+0x1a0>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	3308      	adds	r3, #8
 80063d0:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 80063d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063d4:	2100      	movs	r1, #0
 80063d6:	69b8      	ldr	r0, [r7, #24]
 80063d8:	f000 f9a0 	bl	800671c <_ux_utility_memory_set>
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
 80063dc:	69bb      	ldr	r3, [r7, #24]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3738      	adds	r7, #56	@ 0x38
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000550 	.word	0x20000550
 80063ec:	ffffeeee 	.word	0xffffeeee

080063f0 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <_ux_utility_memory_allocate_mulc_safe+0x2a>
 8006404:	2100      	movs	r1, #0
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d000      	beq.n	8006414 <_ux_utility_memory_allocate_mulc_safe+0x24>
 8006412:	2101      	movs	r1, #1
 8006414:	460b      	mov	r3, r1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	461a      	mov	r2, r3
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff ff00 	bl	800622c <_ux_utility_memory_allocate>
 800642c:	4603      	mov	r3, r0
 800642e:	e000      	b.n	8006432 <_ux_utility_memory_allocate_mulc_safe+0x42>
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8006448:	2214      	movs	r2, #20
 800644a:	2100      	movs	r1, #0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f965 	bl	800671c <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f023 0303 	bic.w	r3, r3, #3
 8006458:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1a3 0208 	sub.w	r2, r3, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2202      	movs	r2, #2
 800647a:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3b04      	subs	r3, #4
 800648c:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3b04      	subs	r3, #4
 80064a0:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3304      	adds	r3, #4
 80064c2:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4a03      	ldr	r2, [pc, #12]	@ (80064d8 <_ux_utility_memory_byte_pool_create+0x9c>)
 80064cc:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	ffffeeee 	.word	0xffffeeee

080064dc <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80064dc:	b480      	push	{r7}
 80064de:	b08d      	sub	sp, #52	@ 0x34
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	3b02      	subs	r3, #2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d301      	bcc.n	8006506 <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8006502:	2300      	movs	r3, #0
 8006504:	e07d      	b.n	8006602 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d308      	bcc.n	8006524 <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d901      	bls.n	8006528 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 8006524:	2300      	movs	r3, #0
 8006526:	e06c      	b.n	8006602 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 8006536:	2300      	movs	r3, #0
 8006538:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	3304      	adds	r3, #4
 800653e:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a31      	ldr	r2, [pc, #196]	@ (8006610 <_ux_utility_memory_byte_pool_search+0x134>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d143      	bne.n	80065d6 <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006558:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	3b08      	subs	r3, #8
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 8006576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d23a      	bcs.n	80065f4 <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800657e:	2300      	movs	r3, #0
 8006580:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3304      	adds	r3, #4
 8006586:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1f      	ldr	r2, [pc, #124]	@ (8006610 <_ux_utility_memory_byte_pool_search+0x134>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d113      	bne.n	80065be <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d114      	bne.n	80065e0 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e010      	b.n	80065e0 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	3b01      	subs	r3, #1
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d4:	e004      	b.n	80065e0 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	3b01      	subs	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1a3      	bne.n	800653a <_ux_utility_memory_byte_pool_search+0x5e>
 80065f2:	e000      	b.n	80065f6 <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 80065f4:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006602:	4618      	mov	r0, r3
 8006604:	3734      	adds	r7, #52	@ 0x34
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	ffffeeee 	.word	0xffffeeee

08006614 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 8006628:	e007      	b.n	800663a <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	1c53      	adds	r3, r2, #1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1c59      	adds	r1, r3, #1
 8006634:	6139      	str	r1, [r7, #16]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	701a      	strb	r2, [r3, #0]
    while(length--)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1e5a      	subs	r2, r3, #1
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f2      	bne.n	800662a <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8006644:	bf00      	nop
}
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02f      	beq.n	80066c6 <_ux_utility_memory_free+0x76>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	3b08      	subs	r3, #8
 800666a:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3304      	adds	r3, #4
 8006670:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a26      	ldr	r2, [pc, #152]	@ (8006714 <_ux_utility_memory_free+0xc4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d01c      	beq.n	80066ba <_ux_utility_memory_free+0x6a>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	3304      	adds	r3, #4
 8006684:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <_ux_utility_memory_free+0x5e>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8006696:	4b20      	ldr	r3, [pc, #128]	@ (8006718 <_ux_utility_memory_free+0xc8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	429a      	cmp	r2, r3
 80066a0:	d017      	beq.n	80066d2 <_ux_utility_memory_free+0x82>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 80066a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <_ux_utility_memory_free+0xc8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80066a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d011      	beq.n	80066d2 <_ux_utility_memory_free+0x82>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80066ae:	2219      	movs	r2, #25
 80066b0:	2108      	movs	r1, #8
 80066b2:	2002      	movs	r0, #2
 80066b4:	f7ff fc4a 	bl	8005f4c <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 80066b8:	e029      	b.n	800670e <_ux_utility_memory_free+0xbe>
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80066ba:	2219      	movs	r2, #25
 80066bc:	2108      	movs	r1, #8
 80066be:	2002      	movs	r0, #2
 80066c0:	f7ff fc44 	bl	8005f4c <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 80066c4:	e023      	b.n	800670e <_ux_utility_memory_free+0xbe>

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80066c6:	2219      	movs	r2, #25
 80066c8:	2108      	movs	r1, #8
 80066ca:	2002      	movs	r0, #2
 80066cc:	f7ff fc3e 	bl	8005f4c <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 80066d0:	e01d      	b.n	800670e <_ux_utility_memory_free+0xbe>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	3304      	adds	r3, #4
 80066d6:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	4a0d      	ldr	r2, [pc, #52]	@ (8006714 <_ux_utility_memory_free+0xc4>)
 80066e0:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	1a8a      	subs	r2, r1, r2
 80066f6:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	429a      	cmp	r2, r3
 8006704:	d202      	bcs.n	800670c <_ux_utility_memory_free+0xbc>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	6a3a      	ldr	r2, [r7, #32]
 800670a:	609a      	str	r2, [r3, #8]

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
 800670c:	bf00      	nop
}
 800670e:	3728      	adds	r7, #40	@ 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	ffffeeee 	.word	0xffffeeee
 8006718:	20000550 	.word	0x20000550

0800671c <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	460b      	mov	r3, r1
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800672e:	e004      	b.n	800673a <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	617a      	str	r2, [r7, #20]
 8006736:	7afa      	ldrb	r2, [r7, #11]
 8006738:	701a      	strb	r2, [r3, #0]
    while(length--)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	1e5a      	subs	r2, r3, #1
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f5      	bne.n	8006730 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 8006744:	bf00      	nop
}
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	b29a      	uxth	r2, r3
 800676a:	89fb      	ldrh	r3, [r7, #14]
 800676c:	4313      	orrs	r3, r2
 800676e:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 8006770:	89fb      	ldrh	r3, [r7, #14]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8006790:	23ff      	movs	r3, #255	@ 0xff
 8006792:	e01d      	b.n	80067d0 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3301      	adds	r3, #1
 80067a8:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d9f2      	bls.n	8006798 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 80067b2:	22ff      	movs	r2, #255	@ 0xff
 80067b4:	2108      	movs	r1, #8
 80067b6:	2002      	movs	r0, #2
 80067b8:	f7ff fbc8 	bl	8005f4c <_ux_system_error_handler>

            return(UX_ERROR);
 80067bc:	23ff      	movs	r3, #255	@ 0xff
 80067be:	e007      	b.n	80067d0 <_ux_utility_string_length_check+0x52>
            break;
 80067c0:	bf00      	nop
        }
    }

    if (string_length_ptr)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ea:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	6938      	ldr	r0, [r7, #16]
 800680c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	@ 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800682a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800682c:	4b51      	ldr	r3, [pc, #324]	@ (8006974 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3324      	adds	r3, #36	@ 0x24
 8006832:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	3338      	adds	r3, #56	@ 0x38
 8006838:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006840:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	333c      	adds	r3, #60	@ 0x3c
 8006846:	3302      	adds	r3, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff ff81 	bl	8006750 <_ux_utility_short_get>
 800684e:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	333c      	adds	r3, #60	@ 0x3c
 8006854:	3306      	adds	r3, #6
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ff7a 	bl	8006750 <_ux_utility_short_get>
 800685c:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b22      	cmp	r3, #34	@ 0x22
 8006866:	d009      	beq.n	800687c <_ux_device_class_cdc_acm_control_request+0x64>
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b22      	cmp	r3, #34	@ 0x22
 800686c:	d877      	bhi.n	800695e <_ux_device_class_cdc_acm_control_request+0x146>
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b20      	cmp	r3, #32
 8006872:	d051      	beq.n	8006918 <_ux_device_class_cdc_acm_control_request+0x100>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b21      	cmp	r3, #33	@ 0x21
 8006878:	d023      	beq.n	80068c2 <_ux_device_class_cdc_acm_control_request+0xaa>
 800687a:	e070      	b.n	800695e <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d054      	beq.n	8006962 <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	69f8      	ldr	r0, [r7, #28]
 80068be:	4798      	blx	r3
            }

            break ;
 80068c0:	e04f      	b.n	8006962 <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b07      	cmp	r3, #7
 80068c6:	d901      	bls.n	80068cc <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 80068c8:	2307      	movs	r3, #7
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f7ff fc83 	bl	80061e2 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	3304      	adds	r3, #4
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80068e8:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	3305      	adds	r3, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	f892 2049 	ldrb.w	r2, [r2, #73]	@ 0x49
 80068f6:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	3306      	adds	r3, #6
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 8006904:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2203      	movs	r2, #3
 800690a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006910:	6978      	ldr	r0, [r7, #20]
 8006912:	f7ff fa52 	bl	8005dba <_ux_device_stack_transfer_request>
            break; 
 8006916:	e027      	b.n	8006968 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fc3a 	bl	8006196 <_ux_utility_long_get>
 8006922:	4602      	mov	r2, r0
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	791a      	ldrb	r2, [r3, #4]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	795a      	ldrb	r2, [r3, #5]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	799a      	ldrb	r2, [r3, #6]
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	69f8      	ldr	r0, [r7, #28]
 800695a:	4798      	blx	r3
            }

            break ;
 800695c:	e003      	b.n	8006966 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800695e:	23ff      	movs	r3, #255	@ 0xff
 8006960:	e003      	b.n	800696a <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 8006962:	bf00      	nop
 8006964:	e000      	b.n	8006968 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 8006966:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	@ 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	2000054c 	.word	0x2000054c

08006978 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698a:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	7b9b      	ldrb	r3, [r3, #14]
 800699c:	b25b      	sxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	db05      	blt.n	80069ae <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e002      	b.n	80069b4 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 80069b4:	2126      	movs	r1, #38	@ 0x26
 80069b6:	69f8      	ldr	r0, [r7, #28]
 80069b8:	f7ff f9ee 	bl	8005d98 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 80069bc:	2126      	movs	r1, #38	@ 0x26
 80069be:	69b8      	ldr	r0, [r7, #24]
 80069c0:	f7ff f9ea 	bl	8005d98 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 80069c4:	2200      	movs	r2, #0
 80069c6:	2107      	movs	r1, #7
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f000 f895 	bl	8006af8 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d836      	bhi.n	8006a78 <_ux_device_class_cdc_acm_entry+0x80>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <_ux_device_class_cdc_acm_entry+0x18>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a55 	.word	0x08006a55
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a6d 	.word	0x08006a6d
 8006a20:	08006a2d 	.word	0x08006a2d
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	08006a39 	.word	0x08006a39
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f829 	bl	8006a84 <_ux_device_class_cdc_acm_initialize>
 8006a32:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	e020      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f92b 	bl	8006c94 <_ux_device_class_cdc_acm_uninitialize>
 8006a3e:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	e01a      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b0a      	cmp	r3, #10
 8006a4a:	d101      	bne.n	8006a50 <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e014      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 8006a50:	2357      	movs	r3, #87	@ 0x57
 8006a52:	e012      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff febf 	bl	80067d8 <_ux_device_class_cdc_acm_activate>
 8006a5a:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	e00c      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff89 	bl	8006978 <_ux_device_class_cdc_acm_deactivate>
 8006a66:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	e006      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fed3 	bl	8006818 <_ux_device_class_cdc_acm_control_request>
 8006a72:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	e000      	b.n	8006a7a <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8006a78:	2354      	movs	r3, #84	@ 0x54
    }   
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 8006a92:	2250      	movs	r2, #80	@ 0x50
 8006a94:	2100      	movs	r1, #0
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7ff fbc8 	bl	800622c <_ux_utility_memory_allocate>
 8006a9c:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 8006aa4:	2312      	movs	r3, #18
 8006aa6:	e022      	b.n	8006aee <_ux_device_class_cdc_acm_initialize+0x6a>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	60da      	str	r2, [r3, #12]
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006ad2:	645a      	str	r2, [r3, #68]	@ 0x44
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 8006b04:	2300      	movs	r3, #0
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	f200 80b4 	bhi.w	8006c7a <_ux_device_class_cdc_acm_ioctl+0x182>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <_ux_device_class_cdc_acm_ioctl+0x20>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b95 	.word	0x08006b95
 8006b24:	08006bc9 	.word	0x08006bc9
 8006b28:	08006baf 	.word	0x08006baf
 8006b2c:	08006c7b 	.word	0x08006c7b
 8006b30:	08006c7b 	.word	0x08006c7b
 8006b34:	08006c35 	.word	0x08006c35
 8006b38:	08006c35 	.word	0x08006c35
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	645a      	str	r2, [r3, #68]	@ 0x44
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	791a      	ldrb	r2, [r3, #4]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	795a      	ldrb	r2, [r3, #5]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	799a      	ldrb	r2, [r3, #6]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            
            break;
 8006b66:	e08f      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	719a      	strb	r2, [r3, #6]
            
            break;
 8006b92:	e079      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	705a      	strb	r2, [r3, #1]
            
            break;
 8006bac:	e06c      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	785a      	ldrb	r2, [r3, #1]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
            
            break;
 8006bc6:	e05f      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d002      	beq.n	8006be0 <_ux_device_class_cdc_acm_ioctl+0xe8>
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d009      	beq.n	8006bf2 <_ux_device_class_cdc_acm_ioctl+0xfa>
 8006bde:	e011      	b.n	8006c04 <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	7b9b      	ldrb	r3, [r3, #14]
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db0f      	blt.n	8006c0a <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	623b      	str	r3, [r7, #32]
                }
                break;
 8006bf0:	e00b      	b.n	8006c0a <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	7b9b      	ldrb	r3, [r3, #14]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da08      	bge.n	8006c0e <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	623b      	str	r3, [r7, #32]
                }
                break;
 8006c02:	e004      	b.n	8006c0e <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 8006c04:	2353      	movs	r3, #83	@ 0x53
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	e002      	b.n	8006c10 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 8006c0e:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	3320      	adds	r3, #32
 8006c14:	61bb      	str	r3, [r7, #24]

#if defined(UX_DEVICE_STANDALONE)

            /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 8006c16:	2104      	movs	r1, #4
 8006c18:	69b8      	ldr	r0, [r7, #24]
 8006c1a:	f7ff f893 	bl	8005d44 <_ux_device_stack_transfer_abort>
            if ((ULONG) (ALIGN_TYPE) parameter == UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d103      	bne.n	8006c2c <_ux_device_class_cdc_acm_ioctl+0x134>
                cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	641a      	str	r2, [r3, #64]	@ 0x40
                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);

            }
#endif
            break;
 8006c2a:	e02d      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	621a      	str	r2, [r3, #32]
            break;
 8006c32:	e029      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	7b9b      	ldrb	r3, [r3, #14]
 8006c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	2a08      	cmp	r2, #8
 8006c4c:	d101      	bne.n	8006c52 <_ux_device_class_cdc_acm_ioctl+0x15a>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	e000      	b.n	8006c54 <_ux_device_class_cdc_acm_ioctl+0x15c>
 8006c52:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d002      	beq.n	8006c5e <_ux_device_class_cdc_acm_ioctl+0x166>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	3320      	adds	r3, #32
 8006c62:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d102      	bne.n	8006c72 <_ux_device_class_cdc_acm_ioctl+0x17a>
                status = UX_ERROR;
 8006c6c:	23ff      	movs	r3, #255	@ 0xff
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 8006c70:	e00a      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8006c78:	e006      	b.n	8006c88 <_ux_device_class_cdc_acm_ioctl+0x190>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8006c7a:	2254      	movs	r2, #84	@ 0x54
 8006c7c:	2107      	movs	r1, #7
 8006c7e:	2002      	movs	r0, #2
 8006c80:	f7ff f964 	bl	8005f4c <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8006c84:	2354      	movs	r3, #84	@ 0x54
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return status to caller.  */
    return(status);
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3728      	adds	r7, #40	@ 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop

08006c94 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca6:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <_ux_device_class_cdc_acm_uninitialize+0x20>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8006cae:	68b8      	ldr	r0, [r7, #8]
 8006cb0:	f7ff fcce 	bl	8006650 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8006cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc0 <HAL_PCD_SetupStageCallback+0x100>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3320      	adds	r3, #32
 8006ce0:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cee:	2208      	movs	r2, #8
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f7ff fc8f 	bl	8006614 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2200      	movs	r2, #0
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f023 020e 	bic.w	r2, r3, #14
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da06      	bge.n	8006d2e <HAL_PCD_SetupStageCallback+0x6e>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	e045      	b.n	8006dba <HAL_PCD_SetupStageCallback+0xfa>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10b      	bne.n	8006d56 <HAL_PCD_SetupStageCallback+0x96>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_PCD_SetupStageCallback+0x96>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	605a      	str	r2, [r3, #4]
 8006d54:	e031      	b.n	8006dba <HAL_PCD_SetupStageCallback+0xfa>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	333c      	adds	r3, #60	@ 0x3c
 8006d60:	3306      	adds	r3, #6
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fcf4 	bl	8006750 <_ux_utility_short_get>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d76:	d90d      	bls.n	8006d94 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8006d78:	68f9      	ldr	r1, [r7, #12]
 8006d7a:	69b8      	ldr	r0, [r7, #24]
 8006d7c:	f000 fa0e 	bl	800719c <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2200      	movs	r2, #0
 8006d84:	721a      	strb	r2, [r3, #8]

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	605a      	str	r2, [r3, #4]
#endif

                /* We are done.  */
                return;
 8006d92:	e012      	b.n	8006dba <HAL_PCD_SetupStageCallback+0xfa>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2200      	movs	r2, #0
 8006d98:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fa fd82 	bl	80018b8 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2202      	movs	r2, #2
 8006db8:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	2000054c 	.word	0x2000054c

08006dc4 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8006dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f3c <HAL_PCD_DataInStageCallback+0x178>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	f003 020f 	and.w	r2, r3, #15
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	3370      	adds	r3, #112	@ 0x70
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e00a      	b.n	8006e14 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	3304      	adds	r3, #4
 8006e12:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3320      	adds	r3, #32
 8006e1a:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d163      	bne.n	8006eea <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	7a1b      	ldrb	r3, [r3, #8]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8081 	bne.w	8006f34 <HAL_PCD_DataInStageCallback+0x170>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8006e32:	2300      	movs	r3, #0
 8006e34:	2200      	movs	r2, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fa fd3d 	bl	80018b8 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d82a      	bhi.n	8006ea0 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d10a      	bne.n	8006e68 <HAL_PCD_DataInStageCallback+0xa4>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	7b99      	ldrb	r1, [r3, #14]
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fa fd7f 	bl	800195e <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8006e66:	e065      	b.n	8006f34 <HAL_PCD_DataInStageCallback+0x170>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2202      	movs	r2, #2
 8006e72:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	619a      	str	r2, [r3, #24]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f043 0208 	orr.w	r2, r3, #8
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	605a      	str	r2, [r3, #4]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	721a      	strb	r2, [r3, #8]
}
 8006e9e:	e049      	b.n	8006f34 <HAL_PCD_DataInStageCallback+0x170>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	8a12      	ldrh	r2, [r2, #16]
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	8a1b      	ldrh	r3, [r3, #16]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d902      	bls.n	8006ebe <HAL_PCD_DataInStageCallback+0xfa>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	8a1b      	ldrh	r3, [r3, #16]
 8006ebc:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	8a12      	ldrh	r2, [r2, #16]
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	1ad2      	subs	r2, r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fa fd3b 	bl	800195e <HAL_PCD_EP_Transmit>
}
 8006ee8:	e024      	b.n	8006f34 <HAL_PCD_DataInStageCallback+0x170>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <HAL_PCD_DataInStageCallback+0x150>
            transfer_request -> ux_slave_transfer_request_requested_length)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00c      	beq.n	8006f14 <HAL_PCD_DataInStageCallback+0x150>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	639a      	str	r2, [r3, #56]	@ 0x38
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8006f06:	78f9      	ldrb	r1, [r7, #3]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fa fd26 	bl	800195e <HAL_PCD_EP_Transmit>
}
 8006f12:	e00f      	b.n	8006f34 <HAL_PCD_DataInStageCallback+0x170>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	619a      	str	r2, [r3, #24]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f043 0208 	orr.w	r2, r3, #8
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	605a      	str	r2, [r3, #4]
}
 8006f34:	bf00      	nop
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	2000054c 	.word	0x2000054c

08006f40 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8006f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800704c <HAL_PCD_DataOutStageCallback+0x10c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4413      	add	r3, r2
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3320      	adds	r3, #32
 8006f74:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d14e      	bne.n	800701a <HAL_PCD_DataOutStageCallback+0xda>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	7a1b      	ldrb	r3, [r3, #8]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d15e      	bne.n	8007042 <HAL_PCD_DataOutStageCallback+0x102>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa fccd 	bl	800192e <HAL_PCD_EP_GetRxCount>
 8006f94:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	441a      	add	r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d823      	bhi.n	8006ff6 <HAL_PCD_DataOutStageCallback+0xb6>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d005      	beq.n	8006fc6 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8a1b      	ldrh	r3, [r3, #16]
 8006fbe:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d006      	beq.n	8006fd4 <HAL_PCD_DataOutStageCallback+0x94>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8006fd2:	e036      	b.n	8007042 <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	8a12      	ldrh	r2, [r2, #16]
 8006fdc:	441a      	add	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fa fc62 	bl	80018b8 <HAL_PCD_EP_Receive>
}
 8006ff4:	e025      	b.n	8007042 <HAL_PCD_DataOutStageCallback+0x102>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2227      	movs	r2, #39	@ 0x27
 8006ffa:	625a      	str	r2, [r3, #36]	@ 0x24
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f043 0208 	orr.w	r2, r3, #8
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	605a      	str	r2, [r3, #4]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	6938      	ldr	r0, [r7, #16]
 8007016:	4798      	blx	r3
}
 8007018:	e013      	b.n	8007042 <HAL_PCD_DataOutStageCallback+0x102>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fa fc85 	bl	800192e <HAL_PCD_EP_GetRxCount>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2200      	movs	r2, #0
 800702e:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2202      	movs	r2, #2
 8007034:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f043 0208 	orr.w	r2, r3, #8
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	605a      	str	r2, [r3, #4]
}
 8007042:	bf00      	nop
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	2000054c 	.word	0x2000054c

08007050 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8007058:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <HAL_PCD_ResetCallback+0x5c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8007062:	f7fe fc31 	bl	80058c8 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	79db      	ldrb	r3, [r3, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_PCD_ResetCallback+0x24>
 800706e:	2b02      	cmp	r3, #2
 8007070:	d006      	beq.n	8007080 <HAL_PCD_ResetCallback+0x30>
 8007072:	e00b      	b.n	800708c <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 8007074:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <HAL_PCD_ResetCallback+0x5c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2202      	movs	r2, #2
 800707a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 800707e:	e00b      	b.n	8007098 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <HAL_PCD_ResetCallback+0x5c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 800708a:	e005      	b.n	8007098 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800708c:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <HAL_PCD_ResetCallback+0x5c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2201      	movs	r2, #1
 8007092:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 8007096:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8007098:	f000 f8a0 	bl	80071dc <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800709c:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <HAL_PCD_ResetCallback+0x5c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2201      	movs	r2, #1
 80070a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000054c 	.word	0x2000054c

080070b0 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80070b8:	4b07      	ldr	r3, [pc, #28]	@ (80070d8 <HAL_PCD_ConnectCallback+0x28>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 80070c4:	4b04      	ldr	r3, [pc, #16]	@ (80070d8 <HAL_PCD_ConnectCallback+0x28>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80070cc:	20f1      	movs	r0, #241	@ 0xf1
 80070ce:	4798      	blx	r3
    }
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	2000054c 	.word	0x2000054c

080070dc <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80070e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007114 <HAL_PCD_DisconnectCallback+0x38>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 80070f0:	4b08      	ldr	r3, [pc, #32]	@ (8007114 <HAL_PCD_DisconnectCallback+0x38>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80070f8:	20f2      	movs	r0, #242	@ 0xf2
 80070fa:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80070fc:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <HAL_PCD_DisconnectCallback+0x38>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8007106:	f7fe fbdf 	bl	80058c8 <_ux_device_stack_disconnect>
    }
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2000054c 	.word	0x2000054c

08007118 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007120:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <HAL_PCD_SuspendCallback+0x28>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <HAL_PCD_SuspendCallback+0x28>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007134:	20f4      	movs	r0, #244	@ 0xf4
 8007136:	4798      	blx	r3
    }
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	2000054c 	.word	0x2000054c

08007144 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800714c:	4b07      	ldr	r3, [pc, #28]	@ (800716c <HAL_PCD_ResumeCallback+0x28>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <HAL_PCD_ResumeCallback+0x28>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007160:	20f3      	movs	r0, #243	@ 0xf3
 8007162:	4798      	blx	r3
    }
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	2000054c 	.word	0x2000054c

08007170 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007178:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <HAL_PCD_SOFCallback+0x28>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8007184:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <HAL_PCD_SOFCallback+0x28>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800718c:	20f0      	movs	r0, #240	@ 0xf0
 800718e:	4798      	blx	r3
    }
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	2000054c 	.word	0x2000054c

0800719c <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f043 0204 	orr.w	r2, r3, #4
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	7b9a      	ldrb	r2, [r3, #14]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	7a9b      	ldrb	r3, [r3, #10]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	f7fa fc01 	bl	80019d2 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80071e2:	4b62      	ldr	r3, [pc, #392]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80071ee:	4b5f      	ldr	r3, [pc, #380]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3324      	adds	r3, #36	@ 0x24
 80071f4:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 80071f6:	4b5d      	ldr	r3, [pc, #372]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d110      	bne.n	8007224 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8007202:	4b5a      	ldr	r3, [pc, #360]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b59      	ldr	r3, [pc, #356]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 800720e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8007212:	4b56      	ldr	r3, [pc, #344]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b55      	ldr	r3, [pc, #340]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800721e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007222:	e02b      	b.n	800727c <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8007224:	4b51      	ldr	r3, [pc, #324]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800722e:	4b4f      	ldr	r3, [pc, #316]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007236:	2b01      	cmp	r3, #1
 8007238:	d110      	bne.n	800725c <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800723a:	4b4c      	ldr	r3, [pc, #304]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b4b      	ldr	r3, [pc, #300]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 8007246:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800724a:	4b48      	ldr	r3, [pc, #288]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b47      	ldr	r3, [pc, #284]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8d2 20d8 	ldr.w	r2, [r2, #216]	@ 0xd8
 8007256:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800725a:	e00f      	b.n	800727c <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800725c:	4b43      	ldr	r3, [pc, #268]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b42      	ldr	r3, [pc, #264]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 8007268:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800726c:	4b3f      	ldr	r3, [pc, #252]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b3e      	ldr	r3, [pc, #248]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8007278:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800727c:	4b3b      	ldr	r3, [pc, #236]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007284:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800728a:	220e      	movs	r2, #14
 800728c:	4938      	ldr	r1, [pc, #224]	@ (8007370 <_ux_dcd_stm32_initialize_complete+0x194>)
 800728e:	68b8      	ldr	r0, [r7, #8]
 8007290:	f7fe ff2e 	bl	80060f0 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3338      	adds	r3, #56	@ 0x38
 8007298:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f103 0218 	add.w	r2, r3, #24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7adb      	ldrb	r3, [r3, #11]
 80072c2:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f103 0218 	add.w	r2, r3, #24
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80072da:	210e      	movs	r1, #14
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fa fc06 	bl	8001afa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	7adb      	ldrb	r3, [r3, #11]
 80072f8:	461a      	mov	r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	f7fa fa71 	bl	80017e4 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007308:	2180      	movs	r1, #128	@ 0x80
 800730a:	4618      	mov	r0, r3
 800730c:	f7fa fbf5 	bl	8001afa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	7adb      	ldrb	r3, [r3, #11]
 800731a:	461a      	mov	r2, r3
 800731c:	2300      	movs	r3, #0
 800731e:	2180      	movs	r1, #128	@ 0x80
 8007320:	f7fa fa60 	bl	80017e4 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2208      	movs	r2, #8
 800733a:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2208      	movs	r2, #8
 8007340:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8007348:	4b08      	ldr	r3, [pc, #32]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8007354:	4b05      	ldr	r3, [pc, #20]	@ (800736c <_ux_dcd_stm32_initialize_complete+0x190>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800735c:	2001      	movs	r0, #1
 800735e:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	2000054c 	.word	0x2000054c
 8007370:	20000024 	.word	0x20000024

08007374 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  none
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b091      	sub	sp, #68	@ 0x44
 8007378:	af06      	add	r7, sp, #24
  UINT ret = UX_SUCCESS;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
  UCHAR *pointer;

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  pointer = ux_device_byte_pool_buffer;
 800737e:	4b34      	ldr	r3, [pc, #208]	@ (8007450 <MX_USBX_Device_Init+0xdc>)
 8007380:	623b      	str	r3, [r7, #32]

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800738a:	6a38      	ldr	r0, [r7, #32]
 800738c:	f7fe fe96 	bl	80060bc <_uxe_system_initialize>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <MX_USBX_Device_Init+0x26>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 8007396:	23ff      	movs	r3, #255	@ 0xff
 8007398:	e056      	b.n	8007448 <MX_USBX_Device_Init+0xd4>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4619      	mov	r1, r3
 80073a0:	2001      	movs	r0, #1
 80073a2:	f000 f8d9 	bl	8007558 <USBD_Get_Device_Framework_Speed>
 80073a6:	61f8      	str	r0, [r7, #28]
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	4619      	mov	r1, r3
 80073ae:	2000      	movs	r0, #0
 80073b0:	f000 f8d2 	bl	8007558 <USBD_Get_Device_Framework_Speed>
 80073b4:	61b8      	str	r0, [r7, #24]
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f90f 	bl	80075dc <USBD_Get_String_Framework>
 80073be:	6178      	str	r0, [r7, #20]

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80073c0:	463b      	mov	r3, r7
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f98e 	bl	80076e4 <USBD_Get_Language_Id_Framework>
 80073c8:	6138      	str	r0, [r7, #16]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	68b8      	ldr	r0, [r7, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	4c20      	ldr	r4, [pc, #128]	@ (8007454 <MX_USBX_Device_Init+0xe0>)
 80073d4:	9404      	str	r4, [sp, #16]
 80073d6:	9203      	str	r2, [sp, #12]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	9202      	str	r2, [sp, #8]
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4603      	mov	r3, r0
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	69f8      	ldr	r0, [r7, #28]
 80073e8:	f7fe fac8 	bl	800597c <_ux_device_stack_initialize>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <MX_USBX_Device_Init+0x82>
                                 language_id_framework,
                                 language_id_framework_length,
                                 USBD_ChangeFunction) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
      return UX_ERROR;
 80073f2:	23ff      	movs	r3, #255	@ 0xff
 80073f4:	e028      	b.n	8007448 <MX_USBX_Device_Init+0xd4>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 80073f6:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <MX_USBX_Device_Init+0xe4>)
 80073f8:	4a18      	ldr	r2, [pc, #96]	@ (800745c <MX_USBX_Device_Init+0xe8>)
 80073fa:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 80073fc:	4b16      	ldr	r3, [pc, #88]	@ (8007458 <MX_USBX_Device_Init+0xe4>)
 80073fe:	4a18      	ldr	r2, [pc, #96]	@ (8007460 <MX_USBX_Device_Init+0xec>)
 8007400:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 8007402:	4b15      	ldr	r3, [pc, #84]	@ (8007458 <MX_USBX_Device_Init+0xe4>)
 8007404:	4a17      	ldr	r2, [pc, #92]	@ (8007464 <MX_USBX_Device_Init+0xf0>)
 8007406:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 8007408:	2100      	movs	r1, #0
 800740a:	2002      	movs	r0, #2
 800740c:	f000 f9ca 	bl	80077a4 <USBD_Get_Configuration_Number>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	4b14      	ldr	r3, [pc, #80]	@ (8007468 <MX_USBX_Device_Init+0xf4>)
 8007416:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 8007418:	2100      	movs	r1, #0
 800741a:	2002      	movs	r0, #2
 800741c:	f000 f984 	bl	8007728 <USBD_Get_Interface_Number>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	4b11      	ldr	r3, [pc, #68]	@ (800746c <MX_USBX_Device_Init+0xf8>)
 8007426:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8007428:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <MX_USBX_Device_Init+0xf4>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4b0f      	ldr	r3, [pc, #60]	@ (800746c <MX_USBX_Device_Init+0xf8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4909      	ldr	r1, [pc, #36]	@ (8007458 <MX_USBX_Device_Init+0xe4>)
 8007432:	9100      	str	r1, [sp, #0]
 8007434:	490e      	ldr	r1, [pc, #56]	@ (8007470 <MX_USBX_Device_Init+0xfc>)
 8007436:	480f      	ldr	r0, [pc, #60]	@ (8007474 <MX_USBX_Device_Init+0x100>)
 8007438:	f7fe f9f6 	bl	8005828 <_ux_device_stack_class_register>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <MX_USBX_Device_Init+0xd2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 8007442:	23ff      	movs	r3, #255	@ 0xff
 8007444:	e000      	b.n	8007448 <MX_USBX_Device_Init+0xd4>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007448:	4618      	mov	r0, r3
 800744a:	372c      	adds	r7, #44	@ 0x2c
 800744c:	46bd      	mov	sp, r7
 800744e:	bd90      	pop	{r4, r7, pc}
 8007450:	20000554 	.word	0x20000554
 8007454:	080074bd 	.word	0x080074bd
 8007458:	2000455c 	.word	0x2000455c
 800745c:	0800751d 	.word	0x0800751d
 8007460:	08007531 	.word	0x08007531
 8007464:	08007545 	.word	0x08007545
 8007468:	20004558 	.word	0x20004558
 800746c:	20004554 	.word	0x20004554
 8007470:	080069f9 	.word	0x080069f9
 8007474:	2000000c 	.word	0x2000000c

08007478 <_ux_utility_interrupt_disable>:
  *         USB utility interrupt disable.
  * @param  none
  * @retval none
  */
ALIGN_TYPE _ux_utility_interrupt_disable(VOID)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800747e:	f3ef 8310 	mrs	r3, PRIMASK
 8007482:	603b      	str	r3, [r7, #0]
  return(result);
 8007484:	683b      	ldr	r3, [r7, #0]
  UINT interrupt_save;
  /* USER CODE BEGIN _ux_utility_interrupt_disable */
  interrupt_save = __get_PRIMASK();
 8007486:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007488:	b672      	cpsid	i
}
 800748a:	bf00      	nop
  __disable_irq();
  /* USER CODE END _ux_utility_interrupt_disable */

  return interrupt_save;
 800748c:	687b      	ldr	r3, [r7, #4]
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <_ux_utility_interrupt_restore>:
  *         USB utility interrupt restore.
  * @param  flags
  * @retval none
  */
VOID _ux_utility_interrupt_restore(ALIGN_TYPE flags)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f383 8810 	msr	PRIMASK, r3
}
 80074ac:	bf00      	nop

  /* USER CODE BEGIN _ux_utility_interrupt_restore */
  __set_PRIMASK(flags);
  /* USER CODE END _ux_utility_interrupt_restore */
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <USBD_ChangeFunction>:
  *         This function is called when the device state changes.
  * @param  Device_State: USB Device State
  * @retval status
  */
static UINT USBD_ChangeFunction(ULONG Device_State)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
   UINT status = UX_SUCCESS;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN USBD_ChangeFunction0 */

  /* USER CODE END USBD_ChangeFunction0 */

  switch (Device_State)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2bf4      	cmp	r3, #244	@ 0xf4
 80074cc:	d81a      	bhi.n	8007504 <USBD_ChangeFunction+0x48>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80074d2:	d206      	bcs.n	80074e2 <USBD_ChangeFunction+0x26>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d016      	beq.n	8007508 <USBD_ChangeFunction+0x4c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b0a      	cmp	r3, #10
 80074de:	d015      	beq.n	800750c <USBD_ChangeFunction+0x50>

      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */

      break;
 80074e0:	e010      	b.n	8007504 <USBD_ChangeFunction+0x48>
  switch (Device_State)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3bf0      	subs	r3, #240	@ 0xf0
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d80c      	bhi.n	8007504 <USBD_ChangeFunction+0x48>
 80074ea:	a201      	add	r2, pc, #4	@ (adr r2, 80074f0 <USBD_ChangeFunction+0x34>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007505 	.word	0x08007505
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007505 	.word	0x08007505
 80074fc:	08007505 	.word	0x08007505
 8007500:	08007505 	.word	0x08007505
      break;
 8007504:	bf00      	nop
 8007506:	e002      	b.n	800750e <USBD_ChangeFunction+0x52>
      break;
 8007508:	bf00      	nop
 800750a:	e000      	b.n	800750e <USBD_ChangeFunction+0x52>
      break;
 800750c:	bf00      	nop

  /* USER CODE BEGIN USBD_ChangeFunction1 */

  /* USER CODE END USBD_ChangeFunction1 */

  return status;
 800750e:	68fb      	ldr	r3, [r7, #12]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 8007524:	bf00      	nop
}
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 8007538:	bf00      	nop
}
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 800754c:	bf00      	nop
}
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	6039      	str	r1, [r7, #0]
 8007562:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d113      	bne.n	8007596 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800756e:	4b16      	ldr	r3, [pc, #88]	@ (80075c8 <USBD_Get_Device_Framework_Speed+0x70>)
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	4a15      	ldr	r2, [pc, #84]	@ (80075cc <USBD_Get_Device_Framework_Speed+0x74>)
 8007576:	4816      	ldr	r0, [pc, #88]	@ (80075d0 <USBD_Get_Device_Framework_Speed+0x78>)
 8007578:	f000 f974 	bl	8007864 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800757c:	4b14      	ldr	r3, [pc, #80]	@ (80075d0 <USBD_Get_Device_Framework_Speed+0x78>)
 800757e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007582:	4b13      	ldr	r3, [pc, #76]	@ (80075d0 <USBD_Get_Device_Framework_Speed+0x78>)
 8007584:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007588:	441a      	add	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <USBD_Get_Device_Framework_Speed+0x70>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e012      	b.n	80075bc <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <USBD_Get_Device_Framework_Speed+0x7c>)
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	4a0b      	ldr	r2, [pc, #44]	@ (80075cc <USBD_Get_Device_Framework_Speed+0x74>)
 800759e:	480e      	ldr	r0, [pc, #56]	@ (80075d8 <USBD_Get_Device_Framework_Speed+0x80>)
 80075a0:	f000 f960 	bl	8007864 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 80075a4:	4b0c      	ldr	r3, [pc, #48]	@ (80075d8 <USBD_Get_Device_Framework_Speed+0x80>)
 80075a6:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <USBD_Get_Device_Framework_Speed+0x80>)
 80075ac:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80075b0:	441a      	add	r2, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 80075b6:	4b07      	ldr	r3, [pc, #28]	@ (80075d4 <USBD_Get_Device_Framework_Speed+0x7c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000040 	.word	0x20000040
 80075cc:	20000034 	.word	0x20000034
 80075d0:	20004568 	.word	0x20004568
 80075d4:	20000044 	.word	0x20000044
 80075d8:	20004690 	.word	0x20004690

080075dc <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	73fa      	strb	r2, [r7, #15]
 80075f2:	461a      	mov	r2, r3
 80075f4:	4b37      	ldr	r3, [pc, #220]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 80075f6:	2109      	movs	r1, #9
 80075f8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	73fa      	strb	r2, [r7, #15]
 8007600:	461a      	mov	r2, r3
 8007602:	4b34      	ldr	r3, [pc, #208]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 8007604:	2104      	movs	r1, #4
 8007606:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	73fa      	strb	r2, [r7, #15]
 800760e:	461a      	mov	r2, r3
 8007610:	4b30      	ldr	r3, [pc, #192]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 8007612:	2101      	movs	r1, #1
 8007614:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	4a2e      	ldr	r2, [pc, #184]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 800761a:	4413      	add	r3, r2
 800761c:	f107 020c 	add.w	r2, r7, #12
 8007620:	4619      	mov	r1, r3
 8007622:	482d      	ldr	r0, [pc, #180]	@ (80076d8 <USBD_Get_String_Framework+0xfc>)
 8007624:	f000 f8d0 	bl	80077c8 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8007628:	89bb      	ldrh	r3, [r7, #12]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	4413      	add	r3, r2
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3301      	adds	r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	73fa      	strb	r2, [r7, #15]
 800763c:	461a      	mov	r2, r3
 800763e:	4b25      	ldr	r3, [pc, #148]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 8007640:	2109      	movs	r1, #9
 8007642:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	73fa      	strb	r2, [r7, #15]
 800764a:	461a      	mov	r2, r3
 800764c:	4b21      	ldr	r3, [pc, #132]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 800764e:	2104      	movs	r1, #4
 8007650:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	73fa      	strb	r2, [r7, #15]
 8007658:	461a      	mov	r2, r3
 800765a:	4b1e      	ldr	r3, [pc, #120]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 800765c:	2102      	movs	r1, #2
 800765e:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4a1c      	ldr	r2, [pc, #112]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 8007664:	4413      	add	r3, r2
 8007666:	f107 020c 	add.w	r2, r7, #12
 800766a:	4619      	mov	r1, r3
 800766c:	481b      	ldr	r0, [pc, #108]	@ (80076dc <USBD_Get_String_Framework+0x100>)
 800766e:	f000 f8ab 	bl	80077c8 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 8007672:	89bb      	ldrh	r3, [r7, #12]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4413      	add	r3, r2
 800767a:	b2db      	uxtb	r3, r3
 800767c:	3301      	adds	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	73fa      	strb	r2, [r7, #15]
 8007686:	461a      	mov	r2, r3
 8007688:	4b12      	ldr	r3, [pc, #72]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 800768a:	2109      	movs	r1, #9
 800768c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	73fa      	strb	r2, [r7, #15]
 8007694:	461a      	mov	r2, r3
 8007696:	4b0f      	ldr	r3, [pc, #60]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 8007698:	2104      	movs	r1, #4
 800769a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	73fa      	strb	r2, [r7, #15]
 80076a2:	461a      	mov	r2, r3
 80076a4:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 80076a6:	2103      	movs	r1, #3
 80076a8:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	4a09      	ldr	r2, [pc, #36]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 80076ae:	4413      	add	r3, r2
 80076b0:	f107 020c 	add.w	r2, r7, #12
 80076b4:	4619      	mov	r1, r3
 80076b6:	480a      	ldr	r0, [pc, #40]	@ (80076e0 <USBD_Get_String_Framework+0x104>)
 80076b8:	f000 f886 	bl	80077c8 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 80076bc:	4805      	ldr	r0, [pc, #20]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
 80076be:	f7f8 fde7 	bl	8000290 <strlen>
 80076c2:	4602      	mov	r2, r0
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 80076c8:	4b02      	ldr	r3, [pc, #8]	@ (80076d4 <USBD_Get_String_Framework+0xf8>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20004948 	.word	0x20004948
 80076d8:	08008250 	.word	0x08008250
 80076dc:	08008264 	.word	0x08008264
 80076e0:	08008278 	.word	0x08008278

080076e4 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	73fa      	strb	r2, [r7, #15]
 80076f6:	461a      	mov	r2, r3
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <USBD_Get_Language_Id_Framework+0x40>)
 80076fa:	2109      	movs	r1, #9
 80076fc:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	73fa      	strb	r2, [r7, #15]
 8007704:	461a      	mov	r2, r3
 8007706:	4b07      	ldr	r3, [pc, #28]	@ (8007724 <USBD_Get_Language_Id_Framework+0x40>)
 8007708:	2104      	movs	r1, #4
 800770a:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800770c:	4805      	ldr	r0, [pc, #20]	@ (8007724 <USBD_Get_Language_Id_Framework+0x40>)
 800770e:	f7f8 fdbf 	bl	8000290 <strlen>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8007718:	4b02      	ldr	r3, [pc, #8]	@ (8007724 <USBD_Get_Language_Id_Framework+0x40>)
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20004a48 	.word	0x20004a48

08007728 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	460a      	mov	r2, r1
 8007732:	71fb      	strb	r3, [r7, #7]
 8007734:	4613      	mov	r3, r2
 8007736:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8007740:	2300      	movs	r3, #0
 8007742:	73bb      	strb	r3, [r7, #14]
 8007744:	e021      	b.n	800778a <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <USBD_Get_Interface_Number+0x78>)
 800774a:	215c      	movs	r1, #92	@ 0x5c
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	4413      	add	r3, r2
 8007752:	330c      	adds	r3, #12
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	79fa      	ldrb	r2, [r7, #7]
 8007758:	429a      	cmp	r2, r3
 800775a:	d113      	bne.n	8007784 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	4a10      	ldr	r2, [pc, #64]	@ (80077a0 <USBD_Get_Interface_Number+0x78>)
 8007760:	215c      	movs	r1, #92	@ 0x5c
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	4413      	add	r3, r2
 8007768:	3314      	adds	r3, #20
 800776a:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800776c:	79ba      	ldrb	r2, [r7, #6]
 800776e:	429a      	cmp	r2, r3
 8007770:	d108      	bne.n	8007784 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4a0a      	ldr	r2, [pc, #40]	@ (80077a0 <USBD_Get_Interface_Number+0x78>)
 8007776:	215c      	movs	r1, #92	@ 0x5c
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	4413      	add	r3, r2
 800777e:	335a      	adds	r3, #90	@ 0x5a
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	3301      	adds	r3, #1
 8007788:	73bb      	strb	r3, [r7, #14]
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d9da      	bls.n	8007746 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	b29b      	uxth	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20004568 	.word	0x20004568

080077a4 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	460a      	mov	r2, r1
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	4613      	mov	r3, r2
 80077b2:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	b29b      	uxth	r3, r3
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d023      	beq.n	8007826 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 80077e2:	6938      	ldr	r0, [r7, #16]
 80077e4:	f000 f823 	bl	800782e <USBD_Desc_GetLen>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	75fa      	strb	r2, [r7, #23]
 80077f6:	461a      	mov	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4413      	add	r3, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7812      	ldrb	r2, [r2, #0]
 8007800:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8007802:	e00b      	b.n	800781c <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	75fa      	strb	r2, [r7, #23]
 800780a:	461a      	mov	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4413      	add	r3, r2
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	3301      	adds	r3, #1
 800781a:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ef      	bne.n	8007804 <USBD_Desc_GetString+0x3c>
 8007824:	e000      	b.n	8007828 <USBD_Desc_GetString+0x60>
    return;
 8007826:	bf00      	nop
  }
}
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800783e:	e005      	b.n	800784c <USBD_Desc_GetLen+0x1e>
  {
    len++;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	3301      	adds	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3301      	adds	r3, #1
 800784a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f5      	bne.n	8007840 <USBD_Desc_GetLen+0x12>
  }

  return len;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
	...

08007864 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8007886:	4a73      	ldr	r2, [pc, #460]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800788c:	4b71      	ldr	r3, [pc, #452]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2212      	movs	r2, #18
 8007892:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8007894:	4b6f      	ldr	r3, [pc, #444]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2201      	movs	r2, #1
 800789a:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800789c:	4b6d      	ldr	r3, [pc, #436]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	709a      	strb	r2, [r3, #2]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f042 0202 	orr.w	r2, r2, #2
 80078aa:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 80078ac:	4b69      	ldr	r3, [pc, #420]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2200      	movs	r2, #0
 80078b2:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80078b4:	4b67      	ldr	r3, [pc, #412]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80078bc:	4b65      	ldr	r3, [pc, #404]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2200      	movs	r2, #0
 80078c2:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80078c4:	4b63      	ldr	r3, [pc, #396]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2240      	movs	r2, #64	@ 0x40
 80078ca:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 80078cc:	4b61      	ldr	r3, [pc, #388]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 80078d6:	721a      	strb	r2, [r3, #8]
 80078d8:	2200      	movs	r2, #0
 80078da:	f042 0204 	orr.w	r2, r2, #4
 80078de:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 80078e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f042 0210 	orr.w	r2, r2, #16
 80078ea:	729a      	strb	r2, [r3, #10]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 80078f2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 80078f4:	4b57      	ldr	r3, [pc, #348]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	731a      	strb	r2, [r3, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f042 0202 	orr.w	r2, r2, #2
 8007902:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8007904:	4b53      	ldr	r3, [pc, #332]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2201      	movs	r2, #1
 800790a:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800790c:	4b51      	ldr	r3, [pc, #324]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2202      	movs	r2, #2
 8007912:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8007914:	4b4f      	ldr	r3, [pc, #316]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2203      	movs	r2, #3
 800791a:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800791c:	4b4d      	ldr	r3, [pc, #308]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800792a:	f103 0212 	add.w	r2, r3, #18
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d162      	bne.n	8007a00 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	4413      	add	r3, r2
 8007944:	4a44      	ldr	r2, [pc, #272]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 8007946:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8007948:	4b43      	ldr	r3, [pc, #268]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	220a      	movs	r2, #10
 800794e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8007950:	4b41      	ldr	r3, [pc, #260]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2206      	movs	r2, #6
 8007956:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8007958:	4b3f      	ldr	r3, [pc, #252]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2200      	movs	r2, #0
 800795e:	709a      	strb	r2, [r3, #2]
 8007960:	2200      	movs	r2, #0
 8007962:	f042 0202 	orr.w	r2, r2, #2
 8007966:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8007968:	4b3b      	ldr	r3, [pc, #236]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8007970:	4b39      	ldr	r3, [pc, #228]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2200      	movs	r2, #0
 8007976:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8007978:	4b37      	ldr	r3, [pc, #220]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2200      	movs	r2, #0
 800797e:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8007980:	4b35      	ldr	r3, [pc, #212]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2240      	movs	r2, #64	@ 0x40
 8007986:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8007988:	4b33      	ldr	r3, [pc, #204]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2201      	movs	r2, #1
 800798e:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8007990:	4b31      	ldr	r3, [pc, #196]	@ (8007a58 <USBD_Device_Framework_Builder+0x1f4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2200      	movs	r2, #0
 8007996:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800799e:	f103 020a 	add.w	r2, r3, #10
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80079a8:	e02a      	b.n	8007a00 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d823      	bhi.n	80079fa <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d81f      	bhi.n	80079fa <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d019      	beq.n	80079fa <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 80079cc:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4413      	add	r3, r2
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f83b 	bl	8007a5c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	3301      	adds	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d9d1      	bls.n	80079aa <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d90c      	bls.n	8007a28 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8007a0e:	4b11      	ldr	r3, [pc, #68]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	22ef      	movs	r2, #239	@ 0xef
 8007a14:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8007a16:	4b0f      	ldr	r3, [pc, #60]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2201      	movs	r2, #1
 8007a24:	719a      	strb	r2, [r3, #6]
 8007a26:	e00f      	b.n	8007a48 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d10b      	bne.n	8007a48 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 8007a30:	4b08      	ldr	r3, [pc, #32]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2202      	movs	r2, #2
 8007a36:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8007a38:	4b06      	ldr	r3, [pc, #24]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <USBD_Device_Framework_Builder+0x1f0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 8007a48:	68bb      	ldr	r3, [r7, #8]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20004a4c 	.word	0x20004a4c
 8007a58:	20004a50 	.word	0x20004a50

08007a5c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	70fb      	strb	r3, [r7, #3]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70bb      	strb	r3, [r7, #2]
 8007a72:	4613      	mov	r3, r2
 8007a74:	707b      	strb	r3, [r7, #1]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d834      	bhi.n	8007ae8 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	215c      	movs	r1, #92	@ 0x5c
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3318      	adds	r3, #24
 8007a8e:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d129      	bne.n	8007ae8 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6852      	ldr	r2, [r2, #4]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	205c      	movs	r0, #92	@ 0x5c
 8007aa0:	fb00 f303 	mul.w	r3, r0, r3
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	215c      	movs	r1, #92	@ 0x5c
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3318      	adds	r3, #24
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	215c      	movs	r1, #92	@ 0x5c
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	330c      	adds	r3, #12
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8007ad2:	787b      	ldrb	r3, [r7, #1]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f80a 	bl	8007af2 <USBD_FrameWork_AddToConfDesc>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8007ae4:	23ff      	movs	r3, #255	@ 0xff
 8007ae6:	e000      	b.n	8007aea <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	460b      	mov	r3, r1
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	7afa      	ldrb	r2, [r7, #11]
 8007b08:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f000 f8a1 	bl	8007c64 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	215c      	movs	r1, #92	@ 0x5c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	330c      	adds	r3, #12
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d162      	bne.n	8007bfe <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f866 	bl	8007c0a <USBD_FrameWork_FindFreeIFNbr>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	215c      	movs	r1, #92	@ 0x5c
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	3320      	adds	r3, #32
 8007b52:	2202      	movs	r2, #2
 8007b54:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	215c      	movs	r1, #92	@ 0x5c
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	335a      	adds	r3, #90	@ 0x5a
 8007b66:	7dfa      	ldrb	r2, [r7, #23]
 8007b68:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	7dfa      	ldrb	r2, [r7, #23]
 8007b70:	3201      	adds	r2, #1
 8007b72:	b2d0      	uxtb	r0, r2
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	215c      	movs	r1, #92	@ 0x5c
 8007b78:	fb01 f303 	mul.w	r3, r1, r3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	335b      	adds	r3, #91	@ 0x5b
 8007b80:	4602      	mov	r2, r0
 8007b82:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	215c      	movs	r1, #92	@ 0x5c
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	4413      	add	r3, r2
 8007b92:	331c      	adds	r3, #28
 8007b94:	2203      	movs	r2, #3
 8007b96:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d114      	bne.n	8007bc8 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8007b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	2103      	movs	r1, #3
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f889 	bl	8007cbe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8007bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	2182      	movs	r1, #130	@ 0x82
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f882 	bl	8007cbe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8007bba:	2308      	movs	r3, #8
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	2181      	movs	r1, #129	@ 0x81
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f87c 	bl	8007cbe <USBD_FrameWork_AssignEp>
 8007bc6:	e011      	b.n	8007bec <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	2202      	movs	r2, #2
 8007bcc:	2103      	movs	r1, #3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f875 	bl	8007cbe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8007bd4:	2340      	movs	r3, #64	@ 0x40
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	2182      	movs	r1, #130	@ 0x82
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f86f 	bl	8007cbe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8007be0:	2308      	movs	r3, #8
 8007be2:	2203      	movs	r2, #3
 8007be4:	2181      	movs	r1, #129	@ 0x81
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f869 	bl	8007cbe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f8d4 	bl	8007da4 <USBD_FrameWork_CDCDesc>

      break;
 8007bfc:	e000      	b.n	8007c00 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 8007bfe:	bf00      	nop
  }

  return UX_SUCCESS;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	e016      	b.n	8007c4a <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e005      	b.n	8007c2e <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	3301      	adds	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	215c      	movs	r1, #92	@ 0x5c
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	3320      	adds	r3, #32
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d3ee      	bcc.n	8007c22 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3301      	adds	r3, #1
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3e3      	bcc.n	8007c1c <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	b2db      	uxtb	r3, r3
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2209      	movs	r2, #9
 8007c76:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	709a      	strb	r2, [r3, #2]
 8007c84:	2200      	movs	r2, #0
 8007c86:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	22c0      	movs	r2, #192	@ 0xc0
 8007c9e:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2219      	movs	r2, #25
 8007ca4:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f103 0209 	add.w	r2, r3, #9
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	601a      	str	r2, [r3, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8007cbe:	b490      	push	{r4, r7}
 8007cc0:	b086      	sub	sp, #24
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	72fb      	strb	r3, [r7, #11]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8007cd4:	e002      	b.n	8007cdc <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	215c      	movs	r1, #92	@ 0x5c
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	331c      	adds	r3, #28
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d210      	bcs.n	8007d16 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6858      	ldr	r0, [r3, #4]
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	4413      	add	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	225c      	movs	r2, #92	@ 0x5c
 8007d06:	fb00 f202 	mul.w	r2, r0, r2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	3328      	adds	r3, #40	@ 0x28
 8007d10:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1df      	bne.n	8007cd6 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6858      	ldr	r0, [r3, #4]
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4413      	add	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	225c      	movs	r2, #92	@ 0x5c
 8007d28:	fb00 f202 	mul.w	r2, r0, r2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	440b      	add	r3, r1
 8007d30:	3324      	adds	r3, #36	@ 0x24
 8007d32:	7afa      	ldrb	r2, [r7, #11]
 8007d34:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6858      	ldr	r0, [r3, #4]
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	4413      	add	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	225c      	movs	r2, #92	@ 0x5c
 8007d48:	fb00 f202 	mul.w	r2, r0, r2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3325      	adds	r3, #37	@ 0x25
 8007d52:	7aba      	ldrb	r2, [r7, #10]
 8007d54:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6858      	ldr	r0, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	b29c      	uxth	r4, r3
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4613      	mov	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	225c      	movs	r2, #92	@ 0x5c
 8007d6c:	fb00 f202 	mul.w	r2, r0, r2
 8007d70:	4413      	add	r3, r2
 8007d72:	440b      	add	r3, r1
 8007d74:	3326      	adds	r3, #38	@ 0x26
 8007d76:	4622      	mov	r2, r4
 8007d78:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6858      	ldr	r0, [r3, #4]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	225c      	movs	r2, #92	@ 0x5c
 8007d8c:	fb00 f202 	mul.w	r2, r0, r2
 8007d90:	4413      	add	r3, r2
 8007d92:	440b      	add	r3, r1
 8007d94:	3328      	adds	r3, #40	@ 0x28
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc90      	pop	{r4, r7}
 8007da2:	4770      	bx	lr

08007da4 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b99      	ldr	r3, [pc, #612]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007dbc:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 8007dbe:	4b98      	ldr	r3, [pc, #608]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8007dc6:	4b96      	ldr	r3, [pc, #600]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	220b      	movs	r2, #11
 8007dcc:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	4b93      	ldr	r3, [pc, #588]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	205c      	movs	r0, #92	@ 0x5c
 8007dda:	fb00 f202 	mul.w	r2, r0, r2
 8007dde:	440a      	add	r2, r1
 8007de0:	325a      	adds	r2, #90	@ 0x5a
 8007de2:	7812      	ldrb	r2, [r2, #0]
 8007de4:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8007de6:	4b8e      	ldr	r3, [pc, #568]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2202      	movs	r2, #2
 8007dec:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 8007dee:	4b8c      	ldr	r3, [pc, #560]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2202      	movs	r2, #2
 8007df4:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8007df6:	4b8a      	ldr	r3, [pc, #552]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 8007dfe:	4b88      	ldr	r3, [pc, #544]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 8007e06:	4b86      	ldr	r3, [pc, #536]	@ (8008020 <USBD_FrameWork_CDCDesc+0x27c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b7f      	ldr	r3, [pc, #508]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	4b7e      	ldr	r3, [pc, #504]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2209      	movs	r2, #9
 8007e2e:	701a      	strb	r2, [r3, #0]
 8007e30:	4b7c      	ldr	r3, [pc, #496]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2204      	movs	r2, #4
 8007e36:	705a      	strb	r2, [r3, #1]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	4b79      	ldr	r3, [pc, #484]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68f9      	ldr	r1, [r7, #12]
 8007e42:	205c      	movs	r0, #92	@ 0x5c
 8007e44:	fb00 f202 	mul.w	r2, r0, r2
 8007e48:	440a      	add	r2, r1
 8007e4a:	325a      	adds	r2, #90	@ 0x5a
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	709a      	strb	r2, [r3, #2]
 8007e50:	4b74      	ldr	r3, [pc, #464]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	70da      	strb	r2, [r3, #3]
 8007e58:	4b72      	ldr	r3, [pc, #456]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	711a      	strb	r2, [r3, #4]
 8007e60:	4b70      	ldr	r3, [pc, #448]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2202      	movs	r2, #2
 8007e66:	715a      	strb	r2, [r3, #5]
 8007e68:	4b6e      	ldr	r3, [pc, #440]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	719a      	strb	r2, [r3, #6]
 8007e70:	4b6c      	ldr	r3, [pc, #432]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2201      	movs	r2, #1
 8007e76:	71da      	strb	r2, [r3, #7]
 8007e78:	4b6a      	ldr	r3, [pc, #424]	@ (8008024 <USBD_FrameWork_CDCDesc+0x280>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	721a      	strb	r2, [r3, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f103 0209 	add.w	r2, r3, #9
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4413      	add	r3, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b64      	ldr	r3, [pc, #400]	@ (8008028 <USBD_FrameWork_CDCDesc+0x284>)
 8007e98:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8007e9a:	4b63      	ldr	r3, [pc, #396]	@ (8008028 <USBD_FrameWork_CDCDesc+0x284>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2205      	movs	r2, #5
 8007ea0:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8007ea2:	4b61      	ldr	r3, [pc, #388]	@ (8008028 <USBD_FrameWork_CDCDesc+0x284>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2224      	movs	r2, #36	@ 0x24
 8007ea8:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8007eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8008028 <USBD_FrameWork_CDCDesc+0x284>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8007eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8008028 <USBD_FrameWork_CDCDesc+0x284>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f042 0210 	orr.w	r2, r2, #16
 8007ebc:	70da      	strb	r2, [r3, #3]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f042 0201 	orr.w	r2, r2, #1
 8007ec4:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	1d5a      	adds	r2, r3, #5
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4b54      	ldr	r3, [pc, #336]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007edc:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8007ede:	4b53      	ldr	r3, [pc, #332]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8007ee6:	4b51      	ldr	r3, [pc, #324]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2224      	movs	r2, #36	@ 0x24
 8007eec:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8007eee:	4b4f      	ldr	r3, [pc, #316]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8007ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	4b4a      	ldr	r3, [pc, #296]	@ (800802c <USBD_FrameWork_CDCDesc+0x288>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	205c      	movs	r0, #92	@ 0x5c
 8007f0a:	fb00 f202 	mul.w	r2, r0, r2
 8007f0e:	440a      	add	r2, r1
 8007f10:	325b      	adds	r2, #91	@ 0x5b
 8007f12:	7812      	ldrb	r2, [r2, #0]
 8007f14:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1d5a      	adds	r2, r3, #5
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4b41      	ldr	r3, [pc, #260]	@ (8008030 <USBD_FrameWork_CDCDesc+0x28c>)
 8007f2c:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8007f2e:	4b40      	ldr	r3, [pc, #256]	@ (8008030 <USBD_FrameWork_CDCDesc+0x28c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2204      	movs	r2, #4
 8007f34:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8007f36:	4b3e      	ldr	r3, [pc, #248]	@ (8008030 <USBD_FrameWork_CDCDesc+0x28c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2224      	movs	r2, #36	@ 0x24
 8007f3c:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8007f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8008030 <USBD_FrameWork_CDCDesc+0x28c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2202      	movs	r2, #2
 8007f44:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8007f46:	4b3a      	ldr	r3, [pc, #232]	@ (8008030 <USBD_FrameWork_CDCDesc+0x28c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4413      	add	r3, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4b34      	ldr	r3, [pc, #208]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f64:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8007f66:	4b33      	ldr	r3, [pc, #204]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2205      	movs	r2, #5
 8007f6c:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8007f6e:	4b31      	ldr	r3, [pc, #196]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2224      	movs	r2, #36	@ 0x24
 8007f74:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8007f76:	4b2f      	ldr	r3, [pc, #188]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2206      	movs	r2, #6
 8007f7c:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	4b2c      	ldr	r3, [pc, #176]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	205c      	movs	r0, #92	@ 0x5c
 8007f8a:	fb00 f202 	mul.w	r2, r0, r2
 8007f8e:	440a      	add	r2, r1
 8007f90:	325a      	adds	r2, #90	@ 0x5a
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	4b26      	ldr	r3, [pc, #152]	@ (8008034 <USBD_FrameWork_CDCDesc+0x290>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	205c      	movs	r0, #92	@ 0x5c
 8007fa2:	fb00 f202 	mul.w	r2, r0, r2
 8007fa6:	440a      	add	r2, r1
 8007fa8:	325b      	adds	r2, #91	@ 0x5b
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	1d5a      	adds	r2, r3, #5
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2207      	movs	r2, #7
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	705a      	strb	r2, [r3, #1]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4b17      	ldr	r3, [pc, #92]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	205c      	movs	r0, #92	@ 0x5c
 8007fe2:	fb00 f202 	mul.w	r2, r0, r2
 8007fe6:	440a      	add	r2, r1
 8007fe8:	3230      	adds	r2, #48	@ 0x30
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	709a      	strb	r2, [r3, #2]
 8007fee:	4b12      	ldr	r3, [pc, #72]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	70da      	strb	r2, [r3, #3]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	205c      	movs	r0, #92	@ 0x5c
 8008002:	fb00 f202 	mul.w	r2, r0, r2
 8008006:	440a      	add	r2, r1
 8008008:	3232      	adds	r2, #50	@ 0x32
 800800a:	8812      	ldrh	r2, [r2, #0]
 800800c:	809a      	strh	r2, [r3, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d112      	bne.n	800803c <USBD_FrameWork_CDCDesc+0x298>
 8008016:	4b08      	ldr	r3, [pc, #32]	@ (8008038 <USBD_FrameWork_CDCDesc+0x294>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2205      	movs	r2, #5
 800801c:	719a      	strb	r2, [r3, #6]
 800801e:	e011      	b.n	8008044 <USBD_FrameWork_CDCDesc+0x2a0>
 8008020:	20004a54 	.word	0x20004a54
 8008024:	20004a58 	.word	0x20004a58
 8008028:	20004a5c 	.word	0x20004a5c
 800802c:	20004a60 	.word	0x20004a60
 8008030:	20004a64 	.word	0x20004a64
 8008034:	20004a68 	.word	0x20004a68
 8008038:	20004a6c 	.word	0x20004a6c
 800803c:	4b66      	ldr	r3, [pc, #408]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2205      	movs	r2, #5
 8008042:	719a      	strb	r2, [r3, #6]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1dda      	adds	r2, r3, #7
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	461a      	mov	r2, r3
 8008058:	4b60      	ldr	r3, [pc, #384]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	4b5f      	ldr	r3, [pc, #380]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2209      	movs	r2, #9
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	4b5d      	ldr	r3, [pc, #372]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2204      	movs	r2, #4
 800806a:	705a      	strb	r2, [r3, #1]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	4b5a      	ldr	r3, [pc, #360]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	205c      	movs	r0, #92	@ 0x5c
 8008078:	fb00 f202 	mul.w	r2, r0, r2
 800807c:	440a      	add	r2, r1
 800807e:	325b      	adds	r2, #91	@ 0x5b
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	709a      	strb	r2, [r3, #2]
 8008084:	4b55      	ldr	r3, [pc, #340]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2200      	movs	r2, #0
 800808a:	70da      	strb	r2, [r3, #3]
 800808c:	4b53      	ldr	r3, [pc, #332]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2202      	movs	r2, #2
 8008092:	711a      	strb	r2, [r3, #4]
 8008094:	4b51      	ldr	r3, [pc, #324]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	220a      	movs	r2, #10
 800809a:	715a      	strb	r2, [r3, #5]
 800809c:	4b4f      	ldr	r3, [pc, #316]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2200      	movs	r2, #0
 80080a2:	719a      	strb	r2, [r3, #6]
 80080a4:	4b4d      	ldr	r3, [pc, #308]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	71da      	strb	r2, [r3, #7]
 80080ac:	4b4b      	ldr	r3, [pc, #300]	@ (80081dc <USBD_FrameWork_CDCDesc+0x438>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2200      	movs	r2, #0
 80080b2:	721a      	strb	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f103 0209 	add.w	r2, r3, #9
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	4b43      	ldr	r3, [pc, #268]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	4b42      	ldr	r3, [pc, #264]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2207      	movs	r2, #7
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	4b40      	ldr	r3, [pc, #256]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2205      	movs	r2, #5
 80080dc:	705a      	strb	r2, [r3, #1]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	4b3d      	ldr	r3, [pc, #244]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	205c      	movs	r0, #92	@ 0x5c
 80080ea:	fb00 f202 	mul.w	r2, r0, r2
 80080ee:	440a      	add	r2, r1
 80080f0:	3224      	adds	r2, #36	@ 0x24
 80080f2:	7812      	ldrb	r2, [r2, #0]
 80080f4:	709a      	strb	r2, [r3, #2]
 80080f6:	4b38      	ldr	r3, [pc, #224]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2202      	movs	r2, #2
 80080fc:	70da      	strb	r2, [r3, #3]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	4b35      	ldr	r3, [pc, #212]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	205c      	movs	r0, #92	@ 0x5c
 800810a:	fb00 f202 	mul.w	r2, r0, r2
 800810e:	440a      	add	r2, r1
 8008110:	3226      	adds	r2, #38	@ 0x26
 8008112:	8812      	ldrh	r2, [r2, #0]
 8008114:	809a      	strh	r2, [r3, #4]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d104      	bne.n	8008128 <USBD_FrameWork_CDCDesc+0x384>
 800811e:	4b2e      	ldr	r3, [pc, #184]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	719a      	strb	r2, [r3, #6]
 8008126:	e003      	b.n	8008130 <USBD_FrameWork_CDCDesc+0x38c>
 8008128:	4b2b      	ldr	r3, [pc, #172]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	719a      	strb	r2, [r3, #6]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	1dda      	adds	r2, r3, #7
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	461a      	mov	r2, r3
 8008144:	4b24      	ldr	r3, [pc, #144]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	4b23      	ldr	r3, [pc, #140]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2207      	movs	r2, #7
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	4b21      	ldr	r3, [pc, #132]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2205      	movs	r2, #5
 8008156:	705a      	strb	r2, [r3, #1]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	4b1e      	ldr	r3, [pc, #120]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68f9      	ldr	r1, [r7, #12]
 8008162:	205c      	movs	r0, #92	@ 0x5c
 8008164:	fb00 f202 	mul.w	r2, r0, r2
 8008168:	440a      	add	r2, r1
 800816a:	322a      	adds	r2, #42	@ 0x2a
 800816c:	7812      	ldrb	r2, [r2, #0]
 800816e:	709a      	strb	r2, [r3, #2]
 8008170:	4b19      	ldr	r3, [pc, #100]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2202      	movs	r2, #2
 8008176:	70da      	strb	r2, [r3, #3]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	4b16      	ldr	r3, [pc, #88]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	205c      	movs	r0, #92	@ 0x5c
 8008184:	fb00 f202 	mul.w	r2, r0, r2
 8008188:	440a      	add	r2, r1
 800818a:	322c      	adds	r2, #44	@ 0x2c
 800818c:	8812      	ldrh	r2, [r2, #0]
 800818e:	809a      	strh	r2, [r3, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d104      	bne.n	80081a2 <USBD_FrameWork_CDCDesc+0x3fe>
 8008198:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2200      	movs	r2, #0
 800819e:	719a      	strb	r2, [r3, #6]
 80081a0:	e003      	b.n	80081aa <USBD_FrameWork_CDCDesc+0x406>
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <USBD_FrameWork_CDCDesc+0x434>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	719a      	strb	r2, [r3, #6]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	1dda      	adds	r2, r3, #7
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	791a      	ldrb	r2, [r3, #4]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3202      	adds	r2, #2
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	b292      	uxth	r2, r2
 80081c8:	805a      	strh	r2, [r3, #2]
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20004a6c 	.word	0x20004a6c
 80081dc:	20004a58 	.word	0x20004a58

080081e0 <memset>:
 80081e0:	4402      	add	r2, r0
 80081e2:	4603      	mov	r3, r0
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d100      	bne.n	80081ea <memset+0xa>
 80081e8:	4770      	bx	lr
 80081ea:	f803 1b01 	strb.w	r1, [r3], #1
 80081ee:	e7f9      	b.n	80081e4 <memset+0x4>

080081f0 <__libc_init_array>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008228 <__libc_init_array+0x38>)
 80081f4:	2600      	movs	r6, #0
 80081f6:	4c0d      	ldr	r4, [pc, #52]	@ (800822c <__libc_init_array+0x3c>)
 80081f8:	1b64      	subs	r4, r4, r5
 80081fa:	10a4      	asrs	r4, r4, #2
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	d109      	bne.n	8008214 <__libc_init_array+0x24>
 8008200:	4d0b      	ldr	r5, [pc, #44]	@ (8008230 <__libc_init_array+0x40>)
 8008202:	2600      	movs	r6, #0
 8008204:	4c0b      	ldr	r4, [pc, #44]	@ (8008234 <__libc_init_array+0x44>)
 8008206:	f000 f817 	bl	8008238 <_init>
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	42a6      	cmp	r6, r4
 8008210:	d105      	bne.n	800821e <__libc_init_array+0x2e>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	f855 3b04 	ldr.w	r3, [r5], #4
 8008218:	3601      	adds	r6, #1
 800821a:	4798      	blx	r3
 800821c:	e7ee      	b.n	80081fc <__libc_init_array+0xc>
 800821e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008222:	3601      	adds	r6, #1
 8008224:	4798      	blx	r3
 8008226:	e7f2      	b.n	800820e <__libc_init_array+0x1e>
 8008228:	080082e0 	.word	0x080082e0
 800822c:	080082e0 	.word	0x080082e0
 8008230:	080082e0 	.word	0x080082e0
 8008234:	080082e4 	.word	0x080082e4

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
