
27_1u595rit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d234  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800d484  0800d484  0000e484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d66c  0800d66c  0000e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d674  0800d674  0000e674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d678  0800d678  0000e678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  0800d67c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00011a7c  2000006c  0800d6e8  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20011ae8  0800d6e8  0000fae8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00047ec7  00000000  00000000  0000f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000abe8  00000000  00000000  00056f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002000  00000000  00000000  00061b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000166e  00000000  00000000  00063b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000438d4  00000000  00000000  000651c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042f6b  00000000  00000000  000a8a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162ecb  00000000  00000000  000eba05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024e8d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067bc  00000000  00000000  0024e914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000109  00000000  00000000  002550d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800d46c 	.word	0x0800d46c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	0800d46c 	.word	0x0800d46c

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	20010f08 	.word	0x20010f08
    LDR     r1, =SYSTICK_CYCLES
 8000300:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20010fa4 	.word	0x20010fa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	20010f0c 	.word	0x20010f0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	20010f10 	.word	0x20010f10
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	20011510 	.word	0x20011510

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f008 f942 	bl	80086f4 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f008 f8af 	bl	80085d8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20010fb0 	.word	0x20010fb0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	20011510 	.word	0x20011510
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20010fb4 	.word	0x20010fb4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20011040 	.word	0x20011040
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20011044 	.word	0x20011044
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	2001103c 	.word	0x2001103c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20011038 	.word	0x20011038
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20010fa4 	.word	0x20010fa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	20010f0c 	.word	0x20010f0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	20010f10 	.word	0x20010f10
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <strlen>:
 80004cc:	4603      	mov	r3, r0
 80004ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1fb      	bne.n	80004ce <strlen+0x2>
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	3801      	subs	r0, #1
 80004da:	4770      	bx	lr

080004dc <led_blink_entry>:
#endif

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void led_blink_entry(ULONG thread_input) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 80004e4:	2101      	movs	r1, #1
 80004e6:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <led_blink_entry+0x1c>)
 80004e8:	f000 fefc 	bl	80012e4 <HAL_GPIO_TogglePin>
        tx_thread_sleep(500); // Задержка 500 мс
 80004ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f0:	f007 fda0 	bl	8008034 <_tx_thread_sleep>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Переключение состояния пина
 80004f4:	bf00      	nop
 80004f6:	e7f5      	b.n	80004e4 <led_blink_entry+0x8>
 80004f8:	42020400 	.word	0x42020400

080004fc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	@ 0x38
 8000500:	af08      	add	r7, sp, #32
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

	static TX_THREAD led_blink_thread;
	static UCHAR led_blink_stack[1024];

	UINT mystatus = tx_thread_create(&led_blink_thread, "LED Blink", led_blink_entry, 0,
 8000504:	23b0      	movs	r3, #176	@ 0xb0
 8000506:	9306      	str	r3, [sp, #24]
 8000508:	2301      	movs	r3, #1
 800050a:	9305      	str	r3, [sp, #20]
 800050c:	2300      	movs	r3, #0
 800050e:	9304      	str	r3, [sp, #16]
 8000510:	2305      	movs	r3, #5
 8000512:	9303      	str	r3, [sp, #12]
 8000514:	2305      	movs	r3, #5
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <tx_application_define+0xa8>)
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	4a20      	ldr	r2, [pc, #128]	@ (80005a8 <tx_application_define+0xac>)
 8000526:	4921      	ldr	r1, [pc, #132]	@ (80005ac <tx_application_define+0xb0>)
 8000528:	4821      	ldr	r0, [pc, #132]	@ (80005b0 <tx_application_define+0xb4>)
 800052a:	f008 fe8f 	bl	800924c <_txe_thread_create>
 800052e:	6178      	str	r0, [r7, #20]
	                                   led_blink_stack, sizeof(led_blink_stack),
	                                   5, 5, TX_NO_TIME_SLICE, TX_AUTO_START);

	if (mystatus != TX_SUCCESS)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <tx_application_define+0x3e>
	    {
	        // Обработка ошибки
	        while (1);
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <tx_application_define+0x3a>
	    }

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800053e:	2334      	movs	r3, #52	@ 0x34
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000546:	4a1b      	ldr	r2, [pc, #108]	@ (80005b4 <tx_application_define+0xb8>)
 8000548:	491b      	ldr	r1, [pc, #108]	@ (80005b8 <tx_application_define+0xbc>)
 800054a:	481c      	ldr	r0, [pc, #112]	@ (80005bc <tx_application_define+0xc0>)
 800054c:	f008 fb7c 	bl	8008c48 <_txe_byte_pool_create>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10a      	bne.n	800056c <tx_application_define+0x70>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <tx_application_define+0xc0>)
 8000558:	60fb      	str	r3, [r7, #12]
    status = App_ThreadX_Init(memory_ptr);
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f000 f836 	bl	80005cc <App_ThreadX_Init>
 8000560:	6138      	str	r0, [r7, #16]
    if (status != TX_SUCCESS)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <tx_application_define+0x70>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <tx_application_define+0x6c>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800056c:	2334      	movs	r3, #52	@ 0x34
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <tx_application_define+0xc4>)
 8000576:	4913      	ldr	r1, [pc, #76]	@ (80005c4 <tx_application_define+0xc8>)
 8000578:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <tx_application_define+0xcc>)
 800057a:	f008 fb65 	bl	8008c48 <_txe_byte_pool_create>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10a      	bne.n	800059a <tx_application_define+0x9e>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <tx_application_define+0xcc>)
 8000586:	60fb      	str	r3, [r7, #12]
    status = MX_USBX_Device_Init(memory_ptr);
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f00c f81b 	bl	800c5c4 <MX_USBX_Device_Init>
 800058e:	6138      	str	r0, [r7, #16]
    if (status != UX_SUCCESS)
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <tx_application_define+0x9e>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <tx_application_define+0x9a>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200105a0 	.word	0x200105a0
 80005a8:	080004dd 	.word	0x080004dd
 80005ac:	0800d484 	.word	0x0800d484
 80005b0:	200104f0 	.word	0x200104f0
 80005b4:	20000088 	.word	0x20000088
 80005b8:	0800d490 	.word	0x0800d490
 80005bc:	20000488 	.word	0x20000488
 80005c0:	200004bc 	.word	0x200004bc
 80005c4:	0800d4a4 	.word	0x0800d4a4
 80005c8:	200104bc 	.word	0x200104bc

080005cc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80005d8:	68fb      	ldr	r3, [r7, #12]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 80005ea:	f006 fbdf 	bl	8006dac <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fab0 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f812 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f896 	bl	8000730 <MX_GPIO_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000604:	f000 f866 	bl	80006d4 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
 // USB_Reset(&hpcd_USB_OTG_HS);

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000608:	f7ff ffed 	bl	80005e6 <MX_ThreadX_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// ux_dcd_stm32_interrupt_handler();
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800060c:	2101      	movs	r1, #1
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <main+0x2c>)
 8000610:	f000 fe68 	bl	80012e4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f000 faf1 	bl	8000bfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800061a:	bf00      	nop
 800061c:	e7f6      	b.n	800060c <main+0x18>
 800061e:	bf00      	nop
 8000620:	42020400 	.word	0x42020400

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09e      	sub	sp, #120	@ 0x78
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	2260      	movs	r2, #96	@ 0x60
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00c feee 	bl	800d414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000648:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800064c:	f001 fff8 	bl	8002640 <HAL_PWREx_ControlVoltageScaling>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000656:	f000 f8d1 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	2303      	movs	r3, #3
 800066a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000684:	230c      	movs	r3, #12
 8000686:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f88f 	bl	80027b4 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800069c:	f000 f8ae 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	231f      	movs	r3, #31
 80006a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2303      	movs	r3, #3
 80006a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ff55 	bl	800356c <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006c8:	f000 f898 	bl	80007fc <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3778      	adds	r7, #120	@ 0x78
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <MX_USB_OTG_HS_PCD_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006e0:	2209      	movs	r2, #9
 80006e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000716:	f000 fdff 	bl	8001318 <HAL_PCD_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8000720:	f000 f86c 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200109a0 	.word	0x200109a0
 800072c:	42040000 	.word	0x42040000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800074c:	4a20      	ldr	r2, [pc, #128]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000752:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800075c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000788:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_GPIO_Init+0xa0>)
 8000794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <MX_GPIO_Init+0xa4>)
 80007a6:	f000 fd85 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_GPIO_Init+0xa4>)
 80007c2:	f000 fb9f 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	46020c00 	.word	0x46020c00
 80007d4:	42020400 	.word	0x42020400

080007d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ea:	f000 f9e7 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40012c00 	.word	0x40012c00

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_MspInit+0x30>)
 8000810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_MspInit+0x30>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_MspInit+0x30>)
 8000820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 800082c:	f001 ff94 	bl	8002758 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	46020c00 	.word	0x46020c00

0800083c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0bc      	sub	sp, #240	@ 0xf0
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	22d8      	movs	r2, #216	@ 0xd8
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f00c fde1 	bl	800d414 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a3e      	ldr	r2, [pc, #248]	@ (8000950 <HAL_PCD_MspInit+0x114>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d175      	bne.n	8000948 <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085c:	4b3d      	ldr	r3, [pc, #244]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 800085e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000862:	4a3c      	ldr	r2, [pc, #240]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800086c:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 800086e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0308 	mov.w	r3, #8
 8000882:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8000886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800088a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fa4a 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800089e:	f7ff ffad 	bl	80007fc <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80008a2:	200c      	movs	r0, #12
 80008a4:	f000 f9e2 	bl	8000c6c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ae:	4a29      	ldr	r2, [pc, #164]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008cc:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d11b      	bne.n	800092a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008f8:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 8000904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000910:	f001 ff22 	bl	8002758 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000914:	f001 ff30 	bl	8002778 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 800091a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800091e:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_PCD_MspInit+0x118>)
 8000920:	f023 0304 	bic.w	r3, r3, #4
 8000924:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000928:	e003      	b.n	8000932 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800092a:	f001 ff15 	bl	8002758 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800092e:	f001 ff23 	bl	8002778 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8000932:	2001      	movs	r0, #1
 8000934:	f000 f986 	bl	8000c44 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2049      	movs	r0, #73	@ 0x49
 800093e:	f000 fa61 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000942:	2049      	movs	r0, #73	@ 0x49
 8000944:	f000 fa78 	bl	8000e38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000948:	bf00      	nop
 800094a:	37f0      	adds	r7, #240	@ 0xf0
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	42040000 	.word	0x42040000
 8000954:	46020c00 	.word	0x46020c00

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	@ 0x38
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <HAL_InitTick+0xcc>)
 800096a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800096e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a24 <HAL_InitTick+0xcc>)
 8000970:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000974:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <HAL_InitTick+0xcc>)
 800097a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800097e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000986:	f107 0210 	add.w	r2, r7, #16
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f90d 	bl	8003bb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000996:	f003 f8f7 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 800099a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <HAL_InitTick+0xd0>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	3b01      	subs	r3, #1
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009ac:	4a20      	ldr	r2, [pc, #128]	@ (8000a30 <HAL_InitTick+0xd8>)
 80009ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80009ca:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009cc:	f004 f97c 	bl	8004cc8 <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80009d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d118      	bne.n	8000a10 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009de:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <HAL_InitTick+0xd4>)
 80009e0:	f004 f9d4 	bl	8004d8c <HAL_TIM_Base_Start_IT>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80009ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10e      	bne.n	8000a10 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d808      	bhi.n	8000a0a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	202a      	movs	r0, #42	@ 0x2a
 80009fe:	f000 fa01 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a02:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <HAL_InitTick+0xdc>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	e002      	b.n	8000a10 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a10:	202a      	movs	r0, #42	@ 0x2a
 8000a12:	f000 fa11 	bl	8000e38 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000a16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3738      	adds	r7, #56	@ 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	46020c00 	.word	0x46020c00
 8000a28:	431bde83 	.word	0x431bde83
 8000a2c:	20010e84 	.word	0x20010e84
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	20000004 	.word	0x20000004

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <TIM1_UP_IRQHandler+0x10>)
 8000a76:	f004 fa29 	bl	8004ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20010e84 	.word	0x20010e84

08000a84 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <OTG_HS_IRQHandler+0x10>)
 8000a8a:	f000 fd51 	bl	8001530 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200109a0 	.word	0x200109a0

08000a98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <SystemInit+0x68>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <SystemInit+0x68>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <SystemInit+0x6c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <SystemInit+0x6c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <SystemInit+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <SystemInit+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <SystemInit+0x6c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <SystemInit+0x6c>)
 8000aca:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000ace:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <SystemInit+0x6c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <SystemInit+0x6c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <SystemInit+0x6c>)
 8000ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <SystemInit+0x6c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <SystemInit+0x68>)
 8000aee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000af2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	46020c00 	.word	0x46020c00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b40 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff ffc4 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b1c:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
	ldr	r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b2c:	f842 3b04 	str.w	r3, [r2], #4

08000b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <LoopForever+0x16>)
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f00c fc75 	bl	800d424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fd5b 	bl	80005f4 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b40:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000b44:	0800d67c 	.word	0x0800d67c
	ldr	r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b4c:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8000b50:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8000b54:	20011ae8 	.word	0x20011ae8

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_Init+0x50>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_Init+0x50>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f93e 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b72:	f002 feed 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_Init+0x54>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <HAL_Init+0x58>)
 8000b82:	5ccb      	ldrb	r3, [r1, r3]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb8 <HAL_Init+0x5c>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 f961 	bl	8000e54 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	200f      	movs	r0, #15
 8000b94:	f7ff fee0 	bl	8000958 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e002      	b.n	8000ba8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba2:	f7ff fe31 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	46020c00 	.word	0x46020c00
 8000bb4:	0800d594 	.word	0x0800d594
 8000bb8:	20000000 	.word	0x20000000

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20010ed0 	.word	0x20010ed0

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20010ed0 	.word	0x20010ed0

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff ffee 	bl	8000be4 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffde 	bl	8000be4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c50:	f023 0201 	bic.w	r2, r3, #1
 8000c54:	4904      	ldr	r1, [pc, #16]	@ (8000c68 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	46000400 	.word	0x46000400

08000c6c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c78:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000c7c:	4904      	ldr	r1, [pc, #16]	@ (8000c90 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	46000400 	.word	0x46000400

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e12:	f7ff ff63 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ffb3 	bl	8000d88 <NVIC_EncodePriority>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff82 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff56 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d844      	bhi.n	8000eec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e62:	a201      	add	r2, pc, #4	@ (adr r2, 8000e68 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000e8b 	.word	0x08000e8b
 8000e6c:	08000ea9 	.word	0x08000ea9
 8000e70:	08000ecb 	.word	0x08000ecb
 8000e74:	08000eed 	.word	0x08000eed
 8000e78:	08000e7d 	.word	0x08000e7d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6013      	str	r3, [r2, #0]
      break;
 8000e88:	e031      	b.n	8000eee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e90:	f023 0304 	bic.w	r3, r3, #4
 8000e94:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e9e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ea6:	e022      	b.n	8000eee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eae:	f023 0304 	bic.w	r3, r3, #4
 8000eb2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ebe:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ec0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ec8:	e011      	b.n	8000eee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000eea:	e000      	b.n	8000eee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000eec:	bf00      	nop
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	46020c00 	.word	0x46020c00

08000f04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	@ 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f16:	e1ba      	b.n	800128e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 81aa 	beq.w	8001288 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a55      	ldr	r2, [pc, #340]	@ (800108c <HAL_GPIO_Init+0x188>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d15d      	bne.n	8000ff8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f6c:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <HAL_GPIO_Init+0x18c>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f74:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f76:	4a46      	ldr	r2, [pc, #280]	@ (8001090 <HAL_GPIO_Init+0x18c>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220b      	movs	r2, #11
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69f9      	ldr	r1, [r7, #28]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e067      	b.n	80010c8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x104>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d145      	bne.n	8001094 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	4013      	ands	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	f003 020f 	and.w	r2, r3, #15
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	4313      	orrs	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69f9      	ldr	r1, [r7, #28]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4313      	orrs	r3, r2
 8001080:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e01e      	b.n	80010c8 <HAL_GPIO_Init+0x1c4>
 800108a:	bf00      	nop
 800108c:	46020000 	.word	0x46020000
 8001090:	0800d5ec 	.word	0x0800d5ec
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d00b      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	2b11      	cmp	r3, #17
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	4313      	orrs	r3, r2
 8001110:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800111e:	2201      	movs	r2, #1
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	4013      	ands	r3, r2
 800112c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	4313      	orrs	r3, r2
 8001142:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	4013      	ands	r3, r2
 8001168:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	4313      	orrs	r3, r2
 800117a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d07c      	beq.n	8001288 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800118e:	4a47      	ldr	r2, [pc, #284]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3318      	adds	r3, #24
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0a9a      	lsrs	r2, r3, #10
 80011b6:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <HAL_GPIO_Init+0x3ac>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	4093      	lsls	r3, r2
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ca:	4938      	ldr	r1, [pc, #224]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3318      	adds	r3, #24
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011d8:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80011fc:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	4013      	ands	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001226:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 800122e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001232:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4013      	ands	r3, r2
 800123c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001252:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 800125c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001260:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_GPIO_Init+0x3a8>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f ae3d 	bne.w	8000f18 <HAL_GPIO_Init+0x14>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	@ 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	46022000 	.word	0x46022000
 80012b0:	002f7f7f 	.word	0x002f7f7f

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43d9      	mvns	r1, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0fe      	b.n	8001528 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fa7c 	bl	800083c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f004 f94b 	bl	80055ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7c1a      	ldrb	r2, [r3, #16]
 800135e:	f88d 2000 	strb.w	r2, [sp]
 8001362:	3304      	adds	r3, #4
 8001364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001366:	f004 f86f 	bl	8005448 <USB_CoreInit>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0d5      	b.n	8001528 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f943 	bl	800560e <USB_SetCurrentMode>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2202      	movs	r2, #2
 8001392:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0c6      	b.n	8001528 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e04a      	b.n	8001436 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	3315      	adds	r3, #21
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	3314      	adds	r3, #20
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	332e      	adds	r3, #46	@ 0x2e
 80013dc:	4602      	mov	r2, r0
 80013de:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3318      	adds	r3, #24
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	331c      	adds	r3, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3320      	adds	r3, #32
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3324      	adds	r3, #36	@ 0x24
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3af      	bcc.n	80013a0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e044      	b.n	80014d0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3b5      	bcc.n	8001446 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7c1a      	ldrb	r2, [r3, #16]
 80014e2:	f88d 2000 	strb.w	r2, [sp]
 80014e6:	3304      	adds	r3, #4
 80014e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ea:	f004 f8dd 	bl	80056a8 <USB_DevInit>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e013      	b.n	8001528 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f001 f862 	bl	80025e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f004 ffa3 	bl	800646c <USB_DevDisconnect>

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08d      	sub	sp, #52	@ 0x34
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f005 f844 	bl	80065d4 <USB_GetMode>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 84b9 	bne.w	8001ec6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f004 ffa8 	bl	80064ae <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 84af 	beq.w	8001ec4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f004 ff95 	bl	80064ae <USB_ReadInterrupts>
 8001584:	4603      	mov	r3, r0
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b02      	cmp	r3, #2
 800158c:	d107      	bne.n	800159e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f002 0202 	and.w	r2, r2, #2
 800159c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 ff83 	bl	80064ae <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d161      	bne.n	8001676 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0210 	bic.w	r2, r2, #16
 80015c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f003 020f 	and.w	r2, r3, #15
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	3304      	adds	r3, #4
 80015e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	0c5b      	lsrs	r3, r3, #17
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d124      	bne.n	8001638 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d035      	beq.n	8001666 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	6a38      	ldr	r0, [r7, #32]
 800160e:	f004 fe67 	bl	80062e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161e:	441a      	add	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001630:	441a      	add	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	e016      	b.n	8001666 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	0c5b      	lsrs	r3, r3, #17
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b06      	cmp	r3, #6
 8001642:	d110      	bne.n	8001666 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800164a:	2208      	movs	r2, #8
 800164c:	4619      	mov	r1, r3
 800164e:	6a38      	ldr	r0, [r7, #32]
 8001650:	f004 fe46 	bl	80062e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001660:	441a      	add	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0210 	orr.w	r2, r2, #16
 8001674:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f004 ff17 	bl	80064ae <USB_ReadInterrupts>
 8001680:	4603      	mov	r3, r0
 8001682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001686:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800168a:	f040 80a7 	bne.w	80017dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 ff1c 	bl	80064d4 <USB_ReadDevAllOutEpInterrupt>
 800169c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800169e:	e099      	b.n	80017d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 808e 	beq.w	80017c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 ff40 	bl	800653c <USB_ReadDevOutEPInterrupt>
 80016bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00c      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d4:	461a      	mov	r2, r3
 80016d6:	2301      	movs	r3, #1
 80016d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fe51 	bl	8002384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f8:	461a      	mov	r2, r3
 80016fa:	2308      	movs	r3, #8
 80016fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 ff27 	bl	8002554 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800171c:	461a      	mov	r2, r3
 800171e:	2310      	movs	r3, #16
 8001720:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001734:	2b80      	cmp	r3, #128	@ 0x80
 8001736:	d109      	bne.n	800174c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800174c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	3304      	adds	r3, #4
 8001760:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2200      	movs	r2, #0
 800176e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fba8 	bl	8001ecc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001788:	461a      	mov	r2, r3
 800178a:	2302      	movs	r3, #2
 800178c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a4:	461a      	mov	r2, r3
 80017a6:	2320      	movs	r3, #32
 80017a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c0:	461a      	mov	r2, r3
 80017c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	3301      	adds	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f af62 	bne.w	80016a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fe64 	bl	80064ae <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017f0:	f040 80db 	bne.w	80019aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 fe85 	bl	8006508 <USB_ReadDevAllInEpInterrupt>
 80017fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001804:	e0cd      	b.n	80019a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80c2 	beq.w	8001996 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f004 feab 	bl	8006578 <USB_ReadDevInEPInterrupt>
 8001822:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d057      	beq.n	80018de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	2201      	movs	r2, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	69f9      	ldr	r1, [r7, #28]
 800184a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800184e:	4013      	ands	r3, r2
 8001850:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2301      	movs	r3, #1
 8001862:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	799b      	ldrb	r3, [r3, #6]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d132      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3320      	adds	r3, #32
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	331c      	adds	r3, #28
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4419      	add	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4403      	add	r3, r0
 80018a0:	3320      	adds	r3, #32
 80018a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3324      	adds	r3, #36	@ 0x24
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d108      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018ca:	461a      	mov	r2, r3
 80018cc:	2101      	movs	r1, #1
 80018ce:	f004 feb3 	bl	8006638 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f00a fbab 	bl	800c034 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018f4:	461a      	mov	r2, r3
 80018f6:	2308      	movs	r3, #8
 80018f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001910:	461a      	mov	r2, r3
 8001912:	2310      	movs	r3, #16
 8001914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800192c:	461a      	mov	r2, r3
 800192e:	2340      	movs	r3, #64	@ 0x40
 8001930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800193c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800193e:	6a38      	ldr	r0, [r7, #32]
 8001940:	f004 f822 	bl	8005988 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3310      	adds	r3, #16
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	78db      	ldrb	r3, [r3, #3]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2200      	movs	r2, #0
 8001964:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fab9 	bl	8001ee4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197e:	461a      	mov	r2, r3
 8001980:	2302      	movs	r3, #2
 8001982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800198e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fc6b 	bl	800226c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	3301      	adds	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f47f af2e 	bne.w	8001806 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fd7d 	bl	80064ae <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019be:	d122      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019e6:	2100      	movs	r1, #0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fe1d 	bl	8002628 <HAL_PCDEx_LPM_Callback>
 80019ee:	e002      	b.n	80019f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f00a fccf 	bl	800c394 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fd4f 	bl	80064ae <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a1a:	d112      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d102      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f00a fc9b 	bl	800c368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fd31 	bl	80064ae <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a56:	d121      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001a66:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d111      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fdca 	bl	8002628 <HAL_PCDEx_LPM_Callback>
 8001a94:	e002      	b.n	8001a9c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f00a fc66 	bl	800c368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fd04 	bl	80064ae <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ab0:	f040 80b7 	bne.w	8001c22 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2110      	movs	r1, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 ff5a 	bl	8005988 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad8:	e046      	b.n	8001b68 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001aec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001afe:	0151      	lsls	r1, r2, #5
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	440a      	add	r2, r1
 8001b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b32:	0151      	lsls	r1, r2, #5
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	440a      	add	r2, r1
 8001b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b52:	0151      	lsls	r1, r2, #5
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	440a      	add	r2, r1
 8001b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b64:	3301      	adds	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	791b      	ldrb	r3, [r3, #4]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d3b2      	bcc.n	8001ada <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b82:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b86:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7bdb      	ldrb	r3, [r3, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d016      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba0:	f043 030b 	orr.w	r3, r3, #11
 8001ba4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bb6:	f043 030b 	orr.w	r3, r3, #11
 8001bba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbc:	e015      	b.n	8001bea <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bd0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001bd4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be4:	f043 030b 	orr.w	r3, r3, #11
 8001be8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bf8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001bfc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f004 fd13 	bl	8006638 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fc41 	bl	80064ae <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c36:	d123      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fcd7 	bl	80065f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 ff17 	bl	8005a7a <USB_GetDevSpeed>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	f001 ff7c 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c62:	461a      	mov	r2, r3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f003 fc1f 	bl	80054a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f00a fb18 	bl	800c2a0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fc12 	bl	80064ae <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d10a      	bne.n	8001caa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f00a fb93 	bl	800c3c0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 0208 	and.w	r2, r2, #8
 8001ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fbfd 	bl	80064ae <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cba:	2b80      	cmp	r3, #128	@ 0x80
 8001cbc:	d123      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cce:	e014      	b.n	8001cfa <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa5e 	bl	80021b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d3e4      	bcc.n	8001cd0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fbcf 	bl	80064ae <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d1a:	d13c      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d20:	e02b      	b.n	8001d7a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3318      	adds	r3, #24
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d115      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da12      	bge.n	8001d74 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3317      	adds	r3, #23
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fa1e 	bl	80021b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	3301      	adds	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	791b      	ldrb	r3, [r3, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d3cd      	bcc.n	8001d22 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fb87 	bl	80064ae <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001daa:	d156      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db0:	e045      	b.n	8001e3e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12e      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da2b      	bge.n	8001e38 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	0c1a      	lsrs	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001dea:	4053      	eors	r3, r2
 8001dec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d121      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e34:	6053      	str	r3, [r2, #4]
            break;
 8001e36:	e008      	b.n	8001e4a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	461a      	mov	r2, r3
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d3b3      	bcc.n	8001db2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fb25 	bl	80064ae <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6e:	d10a      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f00a fa45 	bl	800c300 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fb0f 	bl	80064ae <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d115      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f00a fa3d 	bl	800c32c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	e000      	b.n	8001ec6 <HAL_PCD_IRQHandler+0x996>
      return;
 8001ec4:	bf00      	nop
    }
  }
}
 8001ec6:	3734      	adds	r7, #52	@ 0x34
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}

08001ecc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	803b      	strh	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3310      	adds	r3, #16
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00f      	b.n	8001f62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f6e:	883b      	ldrh	r3, [r7, #0]
 8001f70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	78ba      	ldrb	r2, [r7, #2]
 8001f7c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f90:	78bb      	ldrb	r3, [r7, #2]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d102      	bne.n	8001f9c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_PCD_EP_Open+0xae>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00e      	b.n	8001fc8 <HAL_PCD_EP_Open+0xcc>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fd83 	bl	8005ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2200      	movs	r2, #0
 8002010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	b2da      	uxtb	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	799b      	ldrb	r3, [r3, #6]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	799b      	ldrb	r3, [r3, #6]
 8002034:	461a      	mov	r2, r3
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	f003 fdcc 	bl	8005bd4 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002068:	681b      	ldr	r3, [r3, #0]
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3310      	adds	r3, #16
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	799b      	ldrb	r3, [r3, #6]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	799b      	ldrb	r3, [r3, #6]
 80020d8:	461a      	mov	r2, r3
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	f003 fd7a 	bl	8005bd4 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	7912      	ldrb	r2, [r2, #4]
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e04f      	b.n	80021a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0f      	bge.n	8002130 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3310      	adds	r3, #16
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00d      	b.n	800214c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_EP_SetStall+0x82>
 8002168:	2302      	movs	r3, #2
 800216a:	e01d      	b.n	80021a8 <HAL_PCD_EP_SetStall+0xbe>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 f908 	bl	8006390 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7999      	ldrb	r1, [r3, #6]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002198:	461a      	mov	r2, r3
 800219a:	f004 fa4d 	bl	8006638 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0c      	bge.n	80021de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	3310      	adds	r3, #16
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e00c      	b.n	80021f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 ff86 	bl	8006110 <USB_EPStopXfer>
 8002204:	4603      	mov	r3, r0
 8002206:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002208:	7afb      	ldrb	r3, [r7, #11]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_PCD_EP_Flush+0x1a>
 8002228:	2302      	movs	r3, #2
 800222a:	e01b      	b.n	8002264 <HAL_PCD_EP_Flush+0x52>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da09      	bge.n	8002250 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f003 fb9d 	bl	8005988 <USB_FlushTxFifo>
 800224e:	e004      	b.n	800225a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fbc9 	bl	80059ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af02      	add	r7, sp, #8
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3310      	adds	r3, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d901      	bls.n	80022a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e06b      	b.n	800237c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d902      	bls.n	80022c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3303      	adds	r3, #3
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022c8:	e02a      	b.n	8002320 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d902      	bls.n	80022e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3303      	adds	r3, #3
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4603      	mov	r3, r0
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f003 ffae 	bl	8006264 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	441a      	add	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	441a      	add	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	429a      	cmp	r2, r3
 8002334:	d809      	bhi.n	800234a <PCD_WriteEmptyTxFifo+0xde>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233e:	429a      	cmp	r2, r3
 8002340:	d203      	bcs.n	800234a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1bf      	bne.n	80022ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d811      	bhi.n	800237a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800236a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	43db      	mvns	r3, r3
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002376:	4013      	ands	r3, r2
 8002378:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	333c      	adds	r3, #60	@ 0x3c
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	799b      	ldrb	r3, [r3, #6]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d17b      	bne.n	80024b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4a61      	ldr	r2, [pc, #388]	@ (800254c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	f240 80b9 	bls.w	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80b3 	beq.w	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ec:	6093      	str	r3, [r2, #8]
 80023ee:	e0a7      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002406:	461a      	mov	r2, r3
 8002408:	2320      	movs	r3, #32
 800240a:	6093      	str	r3, [r2, #8]
 800240c:	e098      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 8093 	bne.w	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4a4b      	ldr	r2, [pc, #300]	@ (800254c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d90f      	bls.n	8002442 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243e:	6093      	str	r3, [r2, #8]
 8002440:	e07e      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	440b      	add	r3, r1
 8002464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800248c:	461a      	mov	r2, r3
 800248e:	2101      	movs	r1, #1
 8002490:	f004 f8d2 	bl	8006638 <USB_EP0_OutStart>
 8002494:	e006      	b.n	80024a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f009 fe78 	bl	800c1a0 <HAL_PCD_DataOutStageCallback>
 80024b0:	e046      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4a26      	ldr	r2, [pc, #152]	@ (8002550 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d124      	bne.n	8002504 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024d6:	6093      	str	r3, [r2, #8]
 80024d8:	e032      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2320      	movs	r3, #32
 80024f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f009 fe4f 	bl	800c1a0 <HAL_PCD_DataOutStageCallback>
 8002502:	e01d      	b.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d114      	bne.n	8002534 <PCD_EP_OutXfrComplete_int+0x1b0>
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d108      	bne.n	8002534 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800252c:	461a      	mov	r2, r3
 800252e:	2100      	movs	r1, #0
 8002530:	f004 f882 	bl	8006638 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f009 fe30 	bl	800c1a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	4f54300a 	.word	0x4f54300a
 8002550:	4f54310a 	.word	0x4f54310a

08002554 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	333c      	adds	r3, #60	@ 0x3c
 800256c:	3304      	adds	r3, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a15      	ldr	r2, [pc, #84]	@ (80025dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d90e      	bls.n	80025a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025a0:	461a      	mov	r2, r3
 80025a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f009 fcc9 	bl	800bf40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <PCD_EP_OutSetupPacket_int+0x88>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d90c      	bls.n	80025d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025c8:	461a      	mov	r2, r3
 80025ca:	2101      	movs	r1, #1
 80025cc:	f004 f834 	bl	8006638 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	4f54300a 	.word	0x4f54300a

080025e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	f043 0303 	orr.w	r3, r3, #3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002648:	4b39      	ldr	r3, [pc, #228]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002650:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10b      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002660:	d905      	bls.n	800266e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002662:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800266c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e057      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002678:	d90a      	bls.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4313      	orrs	r3, r2
 8002686:	4a2a      	ldr	r2, [pc, #168]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	e007      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002690:	4b27      	ldr	r3, [pc, #156]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002698:	4925      	ldr	r1, [pc, #148]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80026a0:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	2232      	movs	r2, #50	@ 0x32
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a21      	ldr	r2, [pc, #132]	@ (8002738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80026be:	e002      	b.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f3      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01b      	beq.n	8002716 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	2232      	movs	r2, #50	@ 0x32
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	3301      	adds	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026fc:	e002      	b.n	8002704 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b01      	subs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f3      	bne.n	80026fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e000      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	46020800 	.word	0x46020800
 8002734:	20000000 	.word	0x20000000
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <HAL_PWREx_GetVoltageRange+0x18>)
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	46020800 	.word	0x46020800

08002758 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_PWREx_EnableVddUSB+0x1c>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6113      	str	r3, [r2, #16]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	46020800 	.word	0x46020800

08002778 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800277e:	f7ff ffdd 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8002782:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800278a:	d003      	beq.n	8002794 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002792:	d107      	bne.n	80027a4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800279a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800279e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	46020800 	.word	0x46020800

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	@ 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f000 bec8 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ce:	4b99      	ldr	r3, [pc, #612]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d8:	4b96      	ldr	r3, [pc, #600]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 816c 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_RCC_OscConfig+0x52>
 80027f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	f040 80de 	bne.w	80029ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	2b01      	cmp	r3, #1
 8002802:	f040 80da 	bne.w	80029ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f000 bea5 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002818:	4b86      	ldr	r3, [pc, #536]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_RCC_OscConfig+0x7a>
 8002824:	4b83      	ldr	r3, [pc, #524]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800282c:	e005      	b.n	800283a <HAL_RCC_OscConfig+0x86>
 800282e:	4b81      	ldr	r3, [pc, #516]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800283a:	4293      	cmp	r3, r2
 800283c:	d255      	bcs.n	80028ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f001 f9e9 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	f000 be82 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800285a:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4a75      	ldr	r2, [pc, #468]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002860:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002864:	6093      	str	r3, [r2, #8]
 8002866:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	4970      	ldr	r1, [pc, #448]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002880:	d309      	bcc.n	8002896 <HAL_RCC_OscConfig+0xe2>
 8002882:	4b6c      	ldr	r3, [pc, #432]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 021f 	bic.w	r2, r3, #31
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4969      	ldr	r1, [pc, #420]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
 8002894:	e07e      	b.n	8002994 <HAL_RCC_OscConfig+0x1e0>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	da0a      	bge.n	80028b4 <HAL_RCC_OscConfig+0x100>
 800289e:	4b65      	ldr	r3, [pc, #404]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	4961      	ldr	r1, [pc, #388]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
 80028b2:	e06f      	b.n	8002994 <HAL_RCC_OscConfig+0x1e0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028bc:	d30a      	bcc.n	80028d4 <HAL_RCC_OscConfig+0x120>
 80028be:	4b5d      	ldr	r3, [pc, #372]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	4959      	ldr	r1, [pc, #356]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60cb      	str	r3, [r1, #12]
 80028d2:	e05f      	b.n	8002994 <HAL_RCC_OscConfig+0x1e0>
 80028d4:	4b57      	ldr	r3, [pc, #348]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	03db      	lsls	r3, r3, #15
 80028e2:	4954      	ldr	r1, [pc, #336]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
 80028e8:	e054      	b.n	8002994 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80028ea:	4b52      	ldr	r3, [pc, #328]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a51      	ldr	r2, [pc, #324]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	494c      	ldr	r1, [pc, #304]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002910:	d309      	bcc.n	8002926 <HAL_RCC_OscConfig+0x172>
 8002912:	4b48      	ldr	r3, [pc, #288]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 021f 	bic.w	r2, r3, #31
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4945      	ldr	r1, [pc, #276]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002920:	4313      	orrs	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
 8002924:	e028      	b.n	8002978 <HAL_RCC_OscConfig+0x1c4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	da0a      	bge.n	8002944 <HAL_RCC_OscConfig+0x190>
 800292e:	4b41      	ldr	r3, [pc, #260]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	493d      	ldr	r1, [pc, #244]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 800293e:	4313      	orrs	r3, r2
 8002940:	60cb      	str	r3, [r1, #12]
 8002942:	e019      	b.n	8002978 <HAL_RCC_OscConfig+0x1c4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294c:	d30a      	bcc.n	8002964 <HAL_RCC_OscConfig+0x1b0>
 800294e:	4b39      	ldr	r3, [pc, #228]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4935      	ldr	r1, [pc, #212]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
 8002962:	e009      	b.n	8002978 <HAL_RCC_OscConfig+0x1c4>
 8002964:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	03db      	lsls	r3, r3, #15
 8002972:	4930      	ldr	r1, [pc, #192]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	4618      	mov	r0, r3
 8002984:	f001 f94c 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 bde5 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002994:	f001 f8de 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_OscConfig+0x284>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd ffdb 	bl	8000958 <HAL_InitTick>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808a 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b6:	f000 bdd2 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d066      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80029c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029ce:	f7fe f909 	bl	8000be4 <HAL_GetTick>
 80029d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80029d4:	e009      	b.n	80029ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d6:	f7fe f905 	bl	8000be4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f000 bdba 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ef      	beq.n	80029d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80029f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a00:	6093      	str	r3, [r2, #8]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	4909      	ldr	r1, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a1c:	d30e      	bcc.n	8002a3c <HAL_RCC_OscConfig+0x288>
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 021f 	bic.w	r2, r3, #31
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4902      	ldr	r1, [pc, #8]	@ (8002a34 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
 8002a30:	e04a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x314>
 8002a32:	bf00      	nop
 8002a34:	46020c00 	.word	0x46020c00
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da0a      	bge.n	8002a5a <HAL_RCC_OscConfig+0x2a6>
 8002a44:	4b98      	ldr	r3, [pc, #608]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	4995      	ldr	r1, [pc, #596]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_OscConfig+0x314>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a62:	d30a      	bcc.n	8002a7a <HAL_RCC_OscConfig+0x2c6>
 8002a64:	4b90      	ldr	r3, [pc, #576]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	029b      	lsls	r3, r3, #10
 8002a72:	498d      	ldr	r1, [pc, #564]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
 8002a78:	e026      	b.n	8002ac8 <HAL_RCC_OscConfig+0x314>
 8002a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	03db      	lsls	r3, r3, #15
 8002a88:	4987      	ldr	r1, [pc, #540]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
 8002a8e:	e01b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002a90:	4b85      	ldr	r3, [pc, #532]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a84      	ldr	r2, [pc, #528]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a9c:	f7fe f8a2 	bl	8000be4 <HAL_GetTick>
 8002aa0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002aa2:	e009      	b.n	8002ab8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa4:	f7fe f89e 	bl	8000be4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f000 bd53 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808b 	beq.w	8002bec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d17d      	bne.n	8002bec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f000 bd34 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x35a>
 8002b00:	4b69      	ldr	r3, [pc, #420]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a68      	ldr	r2, [pc, #416]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e041      	b.n	8002b92 <HAL_RCC_OscConfig+0x3de>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b16:	d112      	bne.n	8002b3e <HAL_RCC_OscConfig+0x38a>
 8002b18:	4b63      	ldr	r3, [pc, #396]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a62      	ldr	r2, [pc, #392]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e029      	b.n	8002b92 <HAL_RCC_OscConfig+0x3de>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b46:	d112      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3ba>
 8002b48:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a53      	ldr	r2, [pc, #332]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e011      	b.n	8002b92 <HAL_RCC_OscConfig+0x3de>
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d014      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002b9a:	f7fe f823 	bl	8000be4 <HAL_GetTick>
 8002b9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba0:	e009      	b.n	8002bb6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba2:	f7fe f81f 	bl	8000be4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	@ 0x64
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f000 bcd4 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0ef      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3ee>
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f80e 	bl	8000be4 <HAL_GetTick>
 8002bc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bca:	e009      	b.n	8002be0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe f80a 	bl	8000be4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d902      	bls.n	8002be0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f000 bcbf 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be0:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ef      	bne.n	8002bcc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05f      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x456>
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d114      	bne.n	8002c2e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d111      	bne.n	8002c2e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f000 bca3 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b23      	ldr	r3, [pc, #140]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	4920      	ldr	r1, [pc, #128]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c2c:	e044      	b.n	8002cb8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d024      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c42:	f7fd ffcf 	bl	8000be4 <HAL_GetTick>
 8002c46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	e009      	b.n	8002c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fd ffcb 	bl	8000be4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d902      	bls.n	8002c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f000 bc80 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ef      	beq.n	8002c4a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	490b      	ldr	r1, [pc, #44]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]
 8002c7e:	e01b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c8c:	f7fd ffaa 	bl	8000be4 <HAL_GetTick>
 8002c90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fd ffa6 	bl	8000be4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d904      	bls.n	8002cac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	f000 bc5b 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
 8002ca8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	4baf      	ldr	r3, [pc, #700]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ed      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80c8 	beq.w	8002e56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ccc:	4ba7      	ldr	r3, [pc, #668]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d111      	bne.n	8002cfe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4ba4      	ldr	r3, [pc, #656]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce0:	4aa2      	ldr	r2, [pc, #648]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cea:	4ba0      	ldr	r3, [pc, #640]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d0a:	4b99      	ldr	r3, [pc, #612]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0e:	4a98      	ldr	r2, [pc, #608]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fd ff65 	bl	8000be4 <HAL_GetTick>
 8002d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d1c:	e009      	b.n	8002d32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fd ff61 	bl	8000be4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	f000 bc16 	b.w	800355e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d32:	4b8f      	ldr	r3, [pc, #572]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ef      	beq.n	8002d1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002d46:	4b89      	ldr	r3, [pc, #548]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d037      	beq.n	8002dcc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e3f4      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01b      	beq.n	8002db6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d84:	4a79      	ldr	r2, [pc, #484]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002d86:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002d8e:	f7fd ff29 	bl	8000be4 <HAL_GetTick>
 8002d92:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fd ff25 	bl	8000be4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e3da      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002da8:	4b70      	ldr	r3, [pc, #448]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ef      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002db6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4969      	ldr	r1, [pc, #420]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b67      	ldr	r3, [pc, #412]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd2:	4a66      	ldr	r2, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002dd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002ddc:	f7fd ff02 	bl	8000be4 <HAL_GetTick>
 8002de0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fd fefe 	bl	8000be4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e3b3      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002df6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCC_OscConfig+0x630>
 8002e04:	e01b      	b.n	8002e3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e0c:	4a57      	ldr	r2, [pc, #348]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002e12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002e16:	f7fd fee5 	bl	8000be4 <HAL_GetTick>
 8002e1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fd fee1 	bl	8000be4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e396      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e30:	4b4e      	ldr	r3, [pc, #312]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ef      	bne.n	8002e1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b49      	ldr	r3, [pc, #292]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4c:	4a47      	ldr	r2, [pc, #284]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8111 	beq.w	8003086 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e88:	4b38      	ldr	r3, [pc, #224]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d118      	bne.n	8002eda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	4a30      	ldr	r2, [pc, #192]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb4:	f7fd fe96 	bl	8000be4 <HAL_GetTick>
 8002eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fd fe92 	bl	8000be4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e347      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ece:	4b28      	ldr	r3, [pc, #160]	@ (8002f70 <HAL_RCC_OscConfig+0x7bc>)
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01f      	beq.n	8002f26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f12:	e018      	b.n	8002f46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f24:	e00f      	b.n	8002f46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x7b8>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d057      	beq.n	8002ffe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002f4e:	f7fd fe49 	bl	8000be4 <HAL_GetTick>
 8002f52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f54:	e00e      	b.n	8002f74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fd fe45 	bl	8000be4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d905      	bls.n	8002f74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e2f8      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
 8002f6c:	46020c00 	.word	0x46020c00
 8002f70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f74:	4b9c      	ldr	r3, [pc, #624]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0e9      	beq.n	8002f56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f8e:	4b96      	ldr	r3, [pc, #600]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f94:	4a94      	ldr	r2, [pc, #592]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd fe20 	bl	8000be4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e2d3      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fb6:	4b8c      	ldr	r3, [pc, #560]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ed      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x7ec>
 8002fc4:	e053      	b.n	800306e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fc6:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fcc:	4a86      	ldr	r2, [pc, #536]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fd fe04 	bl	8000be4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e2b7      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fee:	4b7e      	ldr	r3, [pc, #504]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8002ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ed      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x824>
 8002ffc:	e037      	b.n	800306e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002ffe:	f7fd fdf1 	bl	8000be4 <HAL_GetTick>
 8003002:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fd fded 	bl	8000be4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e2a0      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301c:	4b72      	ldr	r3, [pc, #456]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800301e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800302a:	4b6f      	ldr	r3, [pc, #444]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800302c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01a      	beq.n	800306e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003038:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800303a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800303e:	4a6a      	ldr	r2, [pc, #424]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fd fdcb 	bl	8000be4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e27e      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003060:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ed      	bne.n	800304a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800306e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b5c      	ldr	r3, [pc, #368]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307c:	4a5a      	ldr	r2, [pc, #360]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d036      	beq.n	8003100 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d019      	beq.n	80030ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800309a:	4b53      	ldr	r3, [pc, #332]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80030a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030a6:	f7fd fd9d 	bl	8000be4 <HAL_GetTick>
 80030aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ae:	f7fd fd99 	bl	8000be4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e24e      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030c0:	4b49      	ldr	r3, [pc, #292]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x8fa>
 80030cc:	e018      	b.n	8003100 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80030ce:	4b46      	ldr	r3, [pc, #280]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a45      	ldr	r2, [pc, #276]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80030d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030da:	f7fd fd83 	bl	8000be4 <HAL_GetTick>
 80030de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e2:	f7fd fd7f 	bl	8000be4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e234      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030f4:	4b3c      	ldr	r3, [pc, #240]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d036      	beq.n	800317a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	2b00      	cmp	r3, #0
 8003112:	d019      	beq.n	8003148 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003114:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a33      	ldr	r2, [pc, #204]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800311a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003120:	f7fd fd60 	bl	8000be4 <HAL_GetTick>
 8003124:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003128:	f7fd fd5c 	bl	8000be4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e211      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800313a:	4b2b      	ldr	r3, [pc, #172]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x974>
 8003146:	e018      	b.n	800317a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800314e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003152:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003154:	f7fd fd46 	bl	8000be4 <HAL_GetTick>
 8003158:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800315c:	f7fd fd42 	bl	8000be4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e1f7      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800316e:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d07f      	beq.n	8003286 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d062      	beq.n	8003254 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800318e:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 8003194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003198:	6093      	str	r3, [r2, #8]
 800319a:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	4910      	ldr	r1, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80031b4:	d309      	bcc.n	80031ca <HAL_RCC_OscConfig+0xa16>
 80031b6:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 021f 	bic.w	r2, r3, #31
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4909      	ldr	r1, [pc, #36]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
 80031c8:	e02a      	b.n	8003220 <HAL_RCC_OscConfig+0xa6c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da0c      	bge.n	80031ec <HAL_RCC_OscConfig+0xa38>
 80031d2:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	4901      	ldr	r1, [pc, #4]	@ (80031e8 <HAL_RCC_OscConfig+0xa34>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60cb      	str	r3, [r1, #12]
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0xa6c>
 80031e8:	46020c00 	.word	0x46020c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f4:	d30a      	bcc.n	800320c <HAL_RCC_OscConfig+0xa58>
 80031f6:	4ba1      	ldr	r3, [pc, #644]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	499d      	ldr	r1, [pc, #628]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	60cb      	str	r3, [r1, #12]
 800320a:	e009      	b.n	8003220 <HAL_RCC_OscConfig+0xa6c>
 800320c:	4b9b      	ldr	r3, [pc, #620]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	03db      	lsls	r3, r3, #15
 800321a:	4998      	ldr	r1, [pc, #608]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003220:	4b96      	ldr	r3, [pc, #600]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a95      	ldr	r2, [pc, #596]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003226:	f043 0310 	orr.w	r3, r3, #16
 800322a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800322c:	f7fd fcda 	bl	8000be4 <HAL_GetTick>
 8003230:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003234:	f7fd fcd6 	bl	8000be4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e18b      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003246:	4b8d      	ldr	r3, [pc, #564]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xa80>
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003254:	4b89      	ldr	r3, [pc, #548]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a88      	ldr	r2, [pc, #544]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800325a:	f023 0310 	bic.w	r3, r3, #16
 800325e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003260:	f7fd fcc0 	bl	8000be4 <HAL_GetTick>
 8003264:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003268:	f7fd fcbc 	bl	8000be4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e171      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800327a:	4b80      	ldr	r3, [pc, #512]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8166 	beq.w	800355c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003296:	4b79      	ldr	r3, [pc, #484]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	f000 80f2 	beq.w	8003488 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f040 80c5 	bne.w	8003438 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b73      	ldr	r3, [pc, #460]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a72      	ldr	r2, [pc, #456]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80032ba:	f7fd fc93 	bl	8000be4 <HAL_GetTick>
 80032be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fc8f 	bl	8000be4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e144      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032d4:	4b69      	ldr	r3, [pc, #420]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e0:	4b66      	ldr	r3, [pc, #408]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4b63      	ldr	r3, [pc, #396]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f4:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80032fe:	4b5f      	ldr	r3, [pc, #380]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003312:	4b5b      	ldr	r3, [pc, #364]	@ (8003480 <HAL_RCC_OscConfig+0xccc>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800331e:	d102      	bne.n	8003326 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003326:	4b56      	ldr	r3, [pc, #344]	@ (8003480 <HAL_RCC_OscConfig+0xccc>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a55      	ldr	r2, [pc, #340]	@ (8003480 <HAL_RCC_OscConfig+0xccc>)
 800332c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003330:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003332:	4b52      	ldr	r3, [pc, #328]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003346:	3a01      	subs	r2, #1
 8003348:	0212      	lsls	r2, r2, #8
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003350:	430a      	orrs	r2, r1
 8003352:	494a      	ldr	r1, [pc, #296]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	628b      	str	r3, [r1, #40]	@ 0x28
 8003358:	4b48      	ldr	r3, [pc, #288]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800335a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335c:	4b49      	ldr	r3, [pc, #292]	@ (8003484 <HAL_RCC_OscConfig+0xcd0>)
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003364:	3a01      	subs	r2, #1
 8003366:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800336e:	3a01      	subs	r2, #1
 8003370:	0252      	lsls	r2, r2, #9
 8003372:	b292      	uxth	r2, r2
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800337a:	3a01      	subs	r2, #1
 800337c:	0412      	lsls	r2, r2, #16
 800337e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003382:	4311      	orrs	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003388:	3a01      	subs	r2, #1
 800338a:	0612      	lsls	r2, r2, #24
 800338c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003390:	430a      	orrs	r2, r1
 8003392:	493a      	ldr	r1, [pc, #232]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003398:	4b38      	ldr	r3, [pc, #224]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	4a37      	ldr	r2, [pc, #220]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	4a34      	ldr	r2, [pc, #208]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80033ae:	4b33      	ldr	r3, [pc, #204]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	4a32      	ldr	r2, [pc, #200]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033b4:	f043 0310 	orr.w	r3, r3, #16
 80033b8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80033ba:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	f023 020c 	bic.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	492d      	ldr	r1, [pc, #180]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80033cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80033d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <HAL_RCC_OscConfig+0xccc>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a29      	ldr	r2, [pc, #164]	@ (8003480 <HAL_RCC_OscConfig+0xccc>)
 80033da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80033e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b24      	ldr	r3, [pc, #144]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ee:	4a23      	ldr	r2, [pc, #140]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003404:	f7fd fbee 	bl	8000be4 <HAL_GetTick>
 8003408:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fbea 	bl	8000be4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e09f      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800341e:	4b17      	ldr	r3, [pc, #92]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800342a:	4b14      	ldr	r3, [pc, #80]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003434:	6293      	str	r3, [r2, #40]	@ 0x28
 8003436:	e091      	b.n	800355c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0f      	ldr	r2, [pc, #60]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003444:	f7fd fbce 	bl	8000be4 <HAL_GetTick>
 8003448:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd fbca 	bl	8000be4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e07f      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800345e:	4b07      	ldr	r3, [pc, #28]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800346a:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	4a03      	ldr	r2, [pc, #12]	@ (800347c <HAL_RCC_OscConfig+0xcc8>)
 8003470:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003474:	f023 0303 	bic.w	r3, r3, #3
 8003478:	6293      	str	r3, [r2, #40]	@ 0x28
 800347a:	e06f      	b.n	800355c <HAL_RCC_OscConfig+0xda8>
 800347c:	46020c00 	.word	0x46020c00
 8003480:	46020800 	.word	0x46020800
 8003484:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003488:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800348e:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	2b01      	cmp	r3, #1
 800349a:	d039      	beq.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d132      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d129      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d122      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d11a      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	0a5b      	lsrs	r3, r3, #9
 80034de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d111      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e024      	b.n	800355e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003522:	429a      	cmp	r2, r3
 8003524:	d01a      	beq.n	800355c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	4a0f      	ldr	r2, [pc, #60]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 800352c:	f023 0310 	bic.w	r3, r3, #16
 8003530:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fd fb57 	bl	8000be4 <HAL_GetTick>
 8003536:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003538:	bf00      	nop
 800353a:	f7fd fb53 	bl	8000be4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	4293      	cmp	r3, r2
 8003544:	d0f9      	beq.n	800353a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	4a07      	ldr	r2, [pc, #28]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_RCC_OscConfig+0xdb4>)
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3738      	adds	r7, #56	@ 0x38
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	46020c00 	.word	0x46020c00

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e1d9      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b9b      	ldr	r3, [pc, #620]	@ (80037f0 <HAL_RCC_ClockConfig+0x284>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b98      	ldr	r3, [pc, #608]	@ (80037f0 <HAL_RCC_ClockConfig+0x284>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 020f 	bic.w	r2, r3, #15
 8003596:	4996      	ldr	r1, [pc, #600]	@ (80037f0 <HAL_RCC_ClockConfig+0x284>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b94      	ldr	r3, [pc, #592]	@ (80037f0 <HAL_RCC_ClockConfig+0x284>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e1c1      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	4b8c      	ldr	r3, [pc, #560]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d908      	bls.n	80035de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80035cc:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	4986      	ldr	r1, [pc, #536]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	4b81      	ldr	r3, [pc, #516]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d909      	bls.n	8003610 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80035fc:	4b7d      	ldr	r3, [pc, #500]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	497a      	ldr	r1, [pc, #488]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800360c:	4313      	orrs	r3, r2
 800360e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b74      	ldr	r3, [pc, #464]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003628:	429a      	cmp	r2, r3
 800362a:	d908      	bls.n	800363e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b71      	ldr	r3, [pc, #452]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	496e      	ldr	r1, [pc, #440]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800363a:	4313      	orrs	r3, r2
 800363c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	4b69      	ldr	r3, [pc, #420]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	429a      	cmp	r2, r3
 8003658:	d908      	bls.n	800366c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800365a:	4b66      	ldr	r3, [pc, #408]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 020f 	bic.w	r2, r3, #15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4963      	ldr	r1, [pc, #396]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003668:	4313      	orrs	r3, r2
 800366a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80d2 	beq.w	800381e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d143      	bne.n	800370e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b5b      	ldr	r3, [pc, #364]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b57      	ldr	r3, [pc, #348]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369a:	4a56      	ldr	r2, [pc, #344]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036a4:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80036b6:	f7fd fa95 	bl	8000be4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80036bc:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <HAL_RCC_ClockConfig+0x28c>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80036ca:	f7fd fa8b 	bl	8000be4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e12b      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80036dc:	4b46      	ldr	r3, [pc, #280]	@ (80037f8 <HAL_RCC_ClockConfig+0x28c>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b41      	ldr	r3, [pc, #260]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f4:	4a3f      	ldr	r2, [pc, #252]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d121      	bne.n	800374e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e112      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e106      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0fa      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373e:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0f2      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4926      	ldr	r1, [pc, #152]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 800375c:	4313      	orrs	r3, r2
 800375e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003760:	f7fd fa40 	bl	8000be4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d112      	bne.n	8003794 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fa38 	bl	8000be4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0d6      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_ClockConfig+0x204>
 8003792:	e044      	b.n	800381e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379e:	f7fd fa21 	bl	8000be4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0bf      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b4:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d1ee      	bne.n	800379e <HAL_RCC_ClockConfig+0x232>
 80037c0:	e02d      	b.n	800381e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d123      	bne.n	8003812 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fd fa0a 	bl	8000be4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0a8      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037e2:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <HAL_RCC_ClockConfig+0x288>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ee      	bne.n	80037cc <HAL_RCC_ClockConfig+0x260>
 80037ee:	e016      	b.n	800381e <HAL_RCC_ClockConfig+0x2b2>
 80037f0:	40022000 	.word	0x40022000
 80037f4:	46020c00 	.word	0x46020c00
 80037f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fd f9f2 	bl	8000be4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e090      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d1ee      	bne.n	80037fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	429a      	cmp	r2, r3
 8003838:	d208      	bcs.n	800384c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 020f 	bic.w	r2, r3, #15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	493d      	ldr	r1, [pc, #244]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 8003848:	4313      	orrs	r3, r2
 800384a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b3c      	ldr	r3, [pc, #240]	@ (8003940 <HAL_RCC_ClockConfig+0x3d4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d210      	bcs.n	800387c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCC_ClockConfig+0x3d4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4937      	ldr	r1, [pc, #220]	@ (8003940 <HAL_RCC_ClockConfig+0x3d4>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_ClockConfig+0x3d4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e05b      	b.n	8003934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003894:	429a      	cmp	r2, r3
 8003896:	d208      	bcs.n	80038aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4925      	ldr	r1, [pc, #148]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d209      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80038c8:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4919      	ldr	r1, [pc, #100]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d208      	bcs.n	800390a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	490d      	ldr	r1, [pc, #52]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 8003906:	4313      	orrs	r3, r2
 8003908:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x3d0>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	490a      	ldr	r1, [pc, #40]	@ (8003944 <HAL_RCC_ClockConfig+0x3d8>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x3dc>)
 8003922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x3e0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f815 	bl	8000958 <HAL_InitTick>
 800392e:	4603      	mov	r3, r0
 8003930:	73fb      	strb	r3, [r7, #15]

  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	46020c00 	.word	0x46020c00
 8003940:	40022000 	.word	0x40022000
 8003944:	0800d594 	.word	0x0800d594
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b08b      	sub	sp, #44	@ 0x2c
 8003954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395e:	4b78      	ldr	r3, [pc, #480]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003968:	4b75      	ldr	r3, [pc, #468]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x34>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d121      	bne.n	80039c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d11e      	bne.n	80039c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003984:	4b6e      	ldr	r3, [pc, #440]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003990:	4b6b      	ldr	r3, [pc, #428]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003996:	0b1b      	lsrs	r3, r3, #12
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
 800399e:	e005      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80039a0:	4b67      	ldr	r3, [pc, #412]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0f1b      	lsrs	r3, r3, #28
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039ac:	4a65      	ldr	r2, [pc, #404]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039c0:	e00d      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	e004      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d101      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039da:	4b5b      	ldr	r3, [pc, #364]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	f040 80a5 	bne.w	8003b30 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039e6:	4b56      	ldr	r3, [pc, #344]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039fe:	4b50      	ldr	r3, [pc, #320]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d022      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x128>
 8003a32:	e043      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003b4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b3e      	ldr	r3, [pc, #248]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a56:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a5a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003b50 <HAL_RCC_GetSysClockFreq+0x200>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a76:	e046      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003b4c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a9e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003b50 <HAL_RCC_GetSysClockFreq+0x200>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aba:	e024      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ae4:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ae8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003b50 <HAL_RCC_GetSysClockFreq+0x200>
 8003aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003af4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b04:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	0e1b      	lsrs	r3, r3, #24
 8003b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b10:	3301      	adds	r3, #1
 8003b12:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2a:	ee17 3a90 	vmov	r3, s15
 8003b2e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	372c      	adds	r7, #44	@ 0x2c
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	46020c00 	.word	0x46020c00
 8003b44:	0800d5ac 	.word	0x0800d5ac
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	4b742400 	.word	0x4b742400
 8003b50:	46000000 	.word	0x46000000

08003b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b58:	f7ff fefa 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x28>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	4906      	ldr	r1, [pc, #24]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b70:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b74:	681b      	ldr	r3, [r3, #0]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	46020c00 	.word	0x46020c00
 8003b80:	0800d594 	.word	0x0800d594
 8003b84:	20000000 	.word	0x20000000

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003b8c:	f7ff ffe2 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	@ (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	46020c00 	.word	0x46020c00
 8003bac:	0800d5a4 	.word	0x0800d5a4

08003bb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	221f      	movs	r2, #31
 8003bbe:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003bc0:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_RCC_GetClockConfig+0x68>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 0203 	and.w	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_GetClockConfig+0x68>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 020f 	and.w	r2, r3, #15
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_RCC_GetClockConfig+0x68>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCC_GetClockConfig+0x68>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003bf2:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_GetClockConfig+0x68>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bfe:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <HAL_RCC_GetClockConfig+0x6c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	46020c00 	.word	0x46020c00
 8003c1c:	40022000 	.word	0x40022000

08003c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c28:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c36:	f7fe fd81 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003c3a:	6178      	str	r0, [r7, #20]
 8003c3c:	e019      	b.n	8003c72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c44:	4a37      	ldr	r2, [pc, #220]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c4e:	4b35      	ldr	r3, [pc, #212]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7fe fd6e 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b30      	ldr	r3, [pc, #192]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c68:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c6a:	f023 0304 	bic.w	r3, r3, #4
 8003c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c78:	d003      	beq.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c80:	d109      	bne.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c88:	d202      	bcs.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c8e:	e033      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c94:	e030      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c9c:	d208      	bcs.n	8003cb0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d102      	bne.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e025      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e035      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb6:	d90f      	bls.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cc4:	d902      	bls.n	8003ccc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e015      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e012      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e00f      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cde:	d109      	bne.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce6:	d102      	bne.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003ce8:	2301      	movs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e004      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003cee:	2302      	movs	r3, #2
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e001      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 020f 	bic.w	r2, r3, #15
 8003d00:	4909      	ldr	r1, [pc, #36]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	46020c00 	.word	0x46020c00
 8003d28:	40022000 	.word	0x40022000

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b0c2      	sub	sp, #264	@ 0x108
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 0401 	and.w	r4, r2, #1
 8003d50:	2500      	movs	r5, #0
 8003d52:	ea54 0305 	orrs.w	r3, r4, r5
 8003d56:	d00b      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d58:	4bd5      	ldr	r3, [pc, #852]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d5e:	f023 0103 	bic.w	r1, r3, #3
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d68:	4ad1      	ldr	r2, [pc, #836]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f002 0802 	and.w	r8, r2, #2
 8003d7c:	f04f 0900 	mov.w	r9, #0
 8003d80:	ea58 0309 	orrs.w	r3, r8, r9
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003d86:	4bca      	ldr	r3, [pc, #808]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d8c:	f023 010c 	bic.w	r1, r3, #12
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	4ac6      	ldr	r2, [pc, #792]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f002 0a04 	and.w	sl, r2, #4
 8003daa:	f04f 0b00 	mov.w	fp, #0
 8003dae:	ea5a 030b 	orrs.w	r3, sl, fp
 8003db2:	d00b      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003db4:	4bbe      	ldr	r3, [pc, #760]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dba:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	4aba      	ldr	r2, [pc, #744]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f002 0308 	and.w	r3, r2, #8
 8003dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003de2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003dec:	4bb0      	ldr	r3, [pc, #704]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	4aac      	ldr	r2, [pc, #688]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 0310 	and.w	r3, r2, #16
 8003e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e24:	4ba2      	ldr	r3, [pc, #648]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	4a9e      	ldr	r2, [pc, #632]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003e5c:	4b94      	ldr	r3, [pc, #592]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e6c:	4a90      	ldr	r2, [pc, #576]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f002 0320 	and.w	r3, r2, #32
 8003e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d00b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e94:	4b86      	ldr	r3, [pc, #536]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e9a:	f023 0107 	bic.w	r1, r3, #7
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea4:	4a82      	ldr	r2, [pc, #520]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ec2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003ecc:	4b78      	ldr	r3, [pc, #480]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ed2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003edc:	4a74      	ldr	r2, [pc, #464]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003efa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f04:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	4a66      	ldr	r2, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d00b      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4c:	4a58      	ldr	r2, [pc, #352]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4313      	orrs	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f74:	4b4e      	ldr	r3, [pc, #312]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f7a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f84:	4a4a      	ldr	r2, [pc, #296]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f86:	430b      	orrs	r3, r1
 8003f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fa2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fb2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fda:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d00c      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003fe4:	4b32      	ldr	r3, [pc, #200]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800400a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004014:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d00c      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800401e:	4b24      	ldr	r3, [pc, #144]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004024:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004030:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004032:	430b      	orrs	r3, r1
 8004034:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800404e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	d00c      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800405a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800405e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800406c:	430b      	orrs	r3, r1
 800406e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800407e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004088:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d010      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004092:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004098:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a4:	4a02      	ldr	r2, [pc, #8]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80040ae:	bf00      	nop
 80040b0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d04c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d02d      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d827      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040e4:	2b60      	cmp	r3, #96	@ 0x60
 80040e6:	d02b      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80040e8:	2b60      	cmp	r3, #96	@ 0x60
 80040ea:	d823      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d006      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d81f      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d011      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80040fc:	e01a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040fe:	4bbd      	ldr	r3, [pc, #756]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	4abc      	ldr	r2, [pc, #752]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800410a:	e01a      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	3308      	adds	r3, #8
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fca8 	bl	8004a68 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 800411e:	e010      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	332c      	adds	r3, #44	@ 0x2c
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fd36 	bl	8004b98 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004132:	e006      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800413a:	e002      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800414a:	4baa      	ldr	r3, [pc, #680]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800414c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004150:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800415c:	4aa5      	ldr	r2, [pc, #660]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800415e:	430b      	orrs	r3, r1
 8004160:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004164:	e003      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004166:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800416a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800417a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800417c:	2300      	movs	r3, #0
 800417e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004180:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d053      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d033      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419c:	d82c      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800419e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a2:	d02f      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a8:	d826      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b4:	d820      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80041c0:	e01a      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041c2:	4b8c      	ldr	r3, [pc, #560]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	4a8b      	ldr	r2, [pc, #556]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041ce:	e01a      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	3308      	adds	r3, #8
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc46 	bl	8004a68 <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041e2:	e010      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	332c      	adds	r3, #44	@ 0x2c
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fcd4 	bl	8004b98 <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041f6:	e006      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10d      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800420e:	4b79      	ldr	r3, [pc, #484]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004210:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004214:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004220:	4a74      	ldr	r2, [pc, #464]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004222:	430b      	orrs	r3, r1
 8004224:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800422e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800423e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004240:	2300      	movs	r3, #0
 8004242:	677b      	str	r3, [r7, #116]	@ 0x74
 8004244:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d046      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004256:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800425a:	d028      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800425c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004260:	d821      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004266:	d022      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800426c:	d81b      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800426e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004272:	d01c      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004274:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004278:	d815      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	d80f      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428e:	d00e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004290:	e009      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	3308      	adds	r3, #8
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fbe5 	bl	8004a68 <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80042a4:	e004      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 80042ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80042b8:	4b4e      	ldr	r3, [pc, #312]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042be:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042ca:	4a4a      	ldr	r2, [pc, #296]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042d2:	e003      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042d8:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ea:	2300      	movs	r3, #0
 80042ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d03f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004300:	2b04      	cmp	r3, #4
 8004302:	d81e      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800434b 	.word	0x0800434b
 8004310:	08004321 	.word	0x08004321
 8004314:	0800432f 	.word	0x0800432f
 8004318:	0800434b 	.word	0x0800434b
 800431c:	0800434b 	.word	0x0800434b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004320:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	4a33      	ldr	r2, [pc, #204]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800432c:	e00e      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	332c      	adds	r3, #44	@ 0x2c
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc2f 	bl	8004b98 <RCCEx_PLL3_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004340:	e004      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 800434a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800434c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004356:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800435a:	f023 0107 	bic.w	r1, r3, #7
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004366:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004368:	430b      	orrs	r3, r1
 800436a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800436e:	e003      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004374:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004384:	663b      	str	r3, [r7, #96]	@ 0x60
 8004386:	2300      	movs	r3, #0
 8004388:	667b      	str	r3, [r7, #100]	@ 0x64
 800438a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d04c      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800439c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043a0:	d02a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80043a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043a6:	d821      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80043a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043ac:	d026      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80043ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043b2:	d81b      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b8:	d00e      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80043ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043be:	d815      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01d      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c8:	d110      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043ca:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80043d6:	e014      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	332c      	adds	r3, #44	@ 0x2c
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fbda 	bl	8004b98 <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80043ea:	e00a      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80043f2:	e006      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80043f4:	46020c00 	.word	0x46020c00
        break;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8004400:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004402:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800440a:	4baf      	ldr	r3, [pc, #700]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800440c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004410:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800441c:	4aaa      	ldr	r2, [pc, #680]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800441e:	430b      	orrs	r3, r1
 8004420:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800442a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800443a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800443c:	2300      	movs	r3, #0
 800443e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004440:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	f000 80b5 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b9d      	ldr	r3, [pc, #628]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b99      	ldr	r3, [pc, #612]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004466:	4a98      	ldr	r2, [pc, #608]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004470:	4b95      	ldr	r3, [pc, #596]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800447e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004488:	4b90      	ldr	r3, [pc, #576]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	4a8f      	ldr	r2, [pc, #572]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004494:	f7fc fba6 	bl	8000be4 <HAL_GetTick>
 8004498:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800449c:	e00b      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fc fba1 	bl	8000be4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d903      	bls.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80044b4:	e005      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044b6:	4b85      	ldr	r3, [pc, #532]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ed      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 80044c2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d165      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ca:	4b7f      	ldr	r3, [pc, #508]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d01b      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f0:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80044f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	4b72      	ldr	r3, [pc, #456]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004504:	4a70      	ldr	r2, [pc, #448]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b6e      	ldr	r3, [pc, #440]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004514:	4a6c      	ldr	r2, [pc, #432]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800451e:	4a6a      	ldr	r2, [pc, #424]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d019      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fc fb56 	bl	8000be4 <HAL_GetTick>
 8004538:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e00d      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fc fb51 	bl	8000be4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004548:	1ad2      	subs	r2, r2, r3
 800454a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800454e:	429a      	cmp	r2, r3
 8004550:	d903      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8004558:	e006      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	4b5b      	ldr	r3, [pc, #364]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800455c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ea      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8004568:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004570:	4b55      	ldr	r3, [pc, #340]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004576:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004582:	4a51      	ldr	r2, [pc, #324]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004584:	430b      	orrs	r3, r1
 8004586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800458c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004590:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800459a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800459e:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b48      	ldr	r3, [pc, #288]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ac:	4a46      	ldr	r2, [pc, #280]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c4:	2300      	movs	r3, #0
 80045c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045c8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d042      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 80045e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045e4:	d81b      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80045e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ea:	d011      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f0:	d815      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d019      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80045f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045fa:	d110      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	3308      	adds	r3, #8
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa30 	bl	8004a68 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800460e:	e00d      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004610:	4b2d      	ldr	r3, [pc, #180]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	4a2c      	ldr	r2, [pc, #176]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800461a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800461c:	e006      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004624:	e002      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 800462a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800462c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004634:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800463a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004646:	4a20      	ldr	r2, [pc, #128]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004648:	430b      	orrs	r3, r1
 800464a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004654:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004666:	2300      	movs	r3, #0
 8004668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800466a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d031      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004680:	d00b      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004686:	d804      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004690:	d007      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80046a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046a4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80046ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046be:	4a02      	ldr	r2, [pc, #8]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046c6:	e007      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80046c8:	46020c00 	.word	0x46020c00
 80046cc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80046d4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e6:	2300      	movs	r3, #0
 80046e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d019      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004700:	d105      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004702:	4ba1      	ldr	r3, [pc, #644]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	4aa0      	ldr	r2, [pc, #640]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800470e:	4b9e      	ldr	r3, [pc, #632]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004714:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004720:	4a99      	ldr	r2, [pc, #612]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004722:	430b      	orrs	r3, r1
 8004724:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004736:	2300      	movs	r3, #0
 8004738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800473a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d00c      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004744:	4b90      	ldr	r3, [pc, #576]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800474a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004756:	4a8c      	ldr	r2, [pc, #560]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004758:	430b      	orrs	r3, r1
 800475a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800476a:	633b      	str	r3, [r7, #48]	@ 0x30
 800476c:	2300      	movs	r3, #0
 800476e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004770:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d00c      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800477a:	4b83      	ldr	r3, [pc, #524]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800477c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004780:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800478c:	4a7e      	ldr	r2, [pc, #504]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800478e:	430b      	orrs	r3, r1
 8004790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d00c      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80047b0:	4b75      	ldr	r3, [pc, #468]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047b6:	f023 0218 	bic.w	r2, r3, #24
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047c2:	4971      	ldr	r1, [pc, #452]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
 80047dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d032      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b64      	ldr	r3, [pc, #400]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	4a63      	ldr	r2, [pc, #396]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fe:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004808:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800480c:	d108      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	3308      	adds	r3, #8
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f927 	bl	8004a68 <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 8004820:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004828:	4b57      	ldr	r3, [pc, #348]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800482a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800483a:	4953      	ldr	r1, [pc, #332]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004842:	e003      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004848:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	2100      	movs	r1, #0
 8004856:	61b9      	str	r1, [r7, #24]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	d04a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004870:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004874:	d01e      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004876:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800487a:	d825      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800487c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004880:	d00e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004886:	d81f      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d021      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800488c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004890:	d11a      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004892:	4b3d      	ldr	r3, [pc, #244]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	4a3c      	ldr	r2, [pc, #240]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800489e:	e018      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	3308      	adds	r3, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f8de 	bl	8004a68 <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048b2:	e00e      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b8:	332c      	adds	r3, #44	@ 0x2c
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f96c 	bl	8004b98 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048c6:	e004      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 80048d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80048da:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80048dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80048ec:	4926      	ldr	r1, [pc, #152]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80048f4:	e003      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80048fa:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	d03c      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004926:	d00e      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800492c:	d815      	bhi.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d017      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004936:	d110      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800493e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004942:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004944:	e00e      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494a:	3308      	adds	r3, #8
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f88b 	bl	8004a68 <RCCEx_PLL2_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 8004962:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004964:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10f      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004972:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	4902      	ldr	r1, [pc, #8]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004986:	e005      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004988:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004990:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d00c      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80049b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049c2:	4928      	ldr	r1, [pc, #160]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	2100      	movs	r1, #0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80049ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80049f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049f8:	d811      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 80049fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049fe:	d012      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a04:	d80b      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00d      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a10:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8004a1c:	e004      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004a24:	e000      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 8004a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a28:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a36:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004a42:	4908      	ldr	r1, [pc, #32]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a4a:	e003      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004a50:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004a54:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a64:	46020c00 	.word	0x46020c00

08004a68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004a70:	4b47      	ldr	r3, [pc, #284]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a46      	ldr	r2, [pc, #280]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a7c:	f7fc f8b2 	bl	8000be4 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a84:	f7fc f8ae 	bl	8000be4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e077      	b.n	8004b86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a96:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6811      	ldr	r1, [r2, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6852      	ldr	r2, [r2, #4]
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	0212      	lsls	r2, r2, #8
 8004aba:	430a      	orrs	r2, r1
 8004abc:	4934      	ldr	r1, [pc, #208]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004ac2:	4b33      	ldr	r3, [pc, #204]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ac6:	4b33      	ldr	r3, [pc, #204]	@ (8004b94 <RCCEx_PLL2_Config+0x12c>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68d2      	ldr	r2, [r2, #12]
 8004ad8:	3a01      	subs	r2, #1
 8004ada:	0252      	lsls	r2, r2, #9
 8004adc:	b292      	uxth	r2, r2
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6912      	ldr	r2, [r2, #16]
 8004ae4:	3a01      	subs	r2, #1
 8004ae6:	0412      	lsls	r2, r2, #16
 8004ae8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6952      	ldr	r2, [r2, #20]
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0612      	lsls	r2, r2, #24
 8004af6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004afa:	430a      	orrs	r2, r1
 8004afc:	4924      	ldr	r1, [pc, #144]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004b02:	4b23      	ldr	r3, [pc, #140]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	f023 020c 	bic.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	4920      	ldr	r1, [pc, #128]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004b14:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	491c      	ldr	r1, [pc, #112]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004b22:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4a1a      	ldr	r2, [pc, #104]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b2e:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b36:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	69d2      	ldr	r2, [r2, #28]
 8004b3e:	00d2      	lsls	r2, r2, #3
 8004b40:	4913      	ldr	r1, [pc, #76]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004b46:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b4c:	f043 0310 	orr.w	r3, r3, #16
 8004b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004b52:	4b0f      	ldr	r3, [pc, #60]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a0e      	ldr	r2, [pc, #56]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b5e:	f7fc f841 	bl	8000be4 <HAL_GetTick>
 8004b62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b66:	f7fc f83d 	bl	8000be4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e006      	b.n	8004b86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <RCCEx_PLL2_Config+0x128>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0

}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	46020c00 	.word	0x46020c00
 8004b94:	80800000 	.word	0x80800000

08004b98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004ba0:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a46      	ldr	r2, [pc, #280]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bac:	f7fc f81a 	bl	8000be4 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bb4:	f7fc f816 	bl	8000be4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e077      	b.n	8004cb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6811      	ldr	r1, [r2, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6852      	ldr	r2, [r2, #4]
 8004be6:	3a01      	subs	r2, #1
 8004be8:	0212      	lsls	r2, r2, #8
 8004bea:	430a      	orrs	r2, r1
 8004bec:	4934      	ldr	r1, [pc, #208]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	630b      	str	r3, [r1, #48]	@ 0x30
 8004bf2:	4b33      	ldr	r3, [pc, #204]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf6:	4b33      	ldr	r3, [pc, #204]	@ (8004cc4 <RCCEx_PLL3_Config+0x12c>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68d2      	ldr	r2, [r2, #12]
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0252      	lsls	r2, r2, #9
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6912      	ldr	r2, [r2, #16]
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0412      	lsls	r2, r2, #16
 8004c18:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6952      	ldr	r2, [r2, #20]
 8004c22:	3a01      	subs	r2, #1
 8004c24:	0612      	lsls	r2, r2, #24
 8004c26:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	4924      	ldr	r1, [pc, #144]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004c32:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	f023 020c 	bic.w	r2, r3, #12
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	4920      	ldr	r1, [pc, #128]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004c44:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	491c      	ldr	r1, [pc, #112]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004c52:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5e:	4b18      	ldr	r3, [pc, #96]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	69d2      	ldr	r2, [r2, #28]
 8004c6e:	00d2      	lsls	r2, r2, #3
 8004c70:	4913      	ldr	r1, [pc, #76]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c7c:	f043 0310 	orr.w	r3, r3, #16
 8004c80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004c82:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c8e:	f7fb ffa9 	bl	8000be4 <HAL_GetTick>
 8004c92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c96:	f7fb ffa5 	bl	8000be4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <RCCEx_PLL3_Config+0x128>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	46020c00 	.word	0x46020c00
 8004cc4:	80800000 	.word	0x80800000

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e049      	b.n	8004d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f841 	bl	8004d76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 fa58 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e072      	b.n	8004e8a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <HAL_TIM_Base_Start_IT+0x10c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d040      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a34      	ldr	r2, [pc, #208]	@ (8004e9c <HAL_TIM_Base_Start_IT+0x110>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d03b      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd8:	d036      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de2:	d031      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea0 <HAL_TIM_Base_Start_IT+0x114>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02c      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea4 <HAL_TIM_Base_Start_IT+0x118>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d027      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea8 <HAL_TIM_Base_Start_IT+0x11c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d022      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a29      	ldr	r2, [pc, #164]	@ (8004eac <HAL_TIM_Base_Start_IT+0x120>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d01d      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a27      	ldr	r2, [pc, #156]	@ (8004eb0 <HAL_TIM_Base_Start_IT+0x124>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d018      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a26      	ldr	r2, [pc, #152]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0x128>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a24      	ldr	r2, [pc, #144]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0x12c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00e      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a23      	ldr	r2, [pc, #140]	@ (8004ebc <HAL_TIM_Base_Start_IT+0x130>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d009      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a21      	ldr	r2, [pc, #132]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0x134>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xbc>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0x138>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d115      	bne.n	8004e74 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0x13c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d015      	beq.n	8004e86 <HAL_TIM_Base_Start_IT+0xfa>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d011      	beq.n	8004e86 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	e008      	b.n	8004e86 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e000      	b.n	8004e88 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	50012c00 	.word	0x50012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	50000400 	.word	0x50000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	50000800 	.word	0x50000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	50000c00 	.word	0x50000c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	50013400 	.word	0x50013400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	50014000 	.word	0x50014000
 8004ec8:	00010007 	.word	0x00010007

08004ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d020      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0202 	mvn.w	r2, #2
 8004f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f931 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f923 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f934 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d020      	beq.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0204 	mvn.w	r2, #4
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f90b 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8fd 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f90e 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d020      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0208 	mvn.w	r2, #8
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8e5 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8d7 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8e8 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d020      	beq.n	8005014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01b      	beq.n	8005014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0210 	mvn.w	r2, #16
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8bf 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8b1 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8c2 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00c      	beq.n	8005038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0201 	mvn.w	r2, #1
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fb fbd0 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9b5 	bl	80053d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00c      	beq.n	800508a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f9ad 	bl	80053e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f87c 	bl	80051a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0220 	mvn.w	r2, #32
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f975 	bl	80053bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00c      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80050ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f981 	bl	80053f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00c      	beq.n	800511a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f979 	bl	800540c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f971 	bl	8005420 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800515a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f969 	bl	8005434 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a6b      	ldr	r2, [pc, #428]	@ (800537c <TIM_Base_SetConfig+0x1c0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d02b      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <TIM_Base_SetConfig+0x1c4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d027      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d023      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ea:	d01f      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a65      	ldr	r2, [pc, #404]	@ (8005384 <TIM_Base_SetConfig+0x1c8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01b      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a64      	ldr	r2, [pc, #400]	@ (8005388 <TIM_Base_SetConfig+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d017      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a63      	ldr	r2, [pc, #396]	@ (800538c <TIM_Base_SetConfig+0x1d0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a62      	ldr	r2, [pc, #392]	@ (8005390 <TIM_Base_SetConfig+0x1d4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a61      	ldr	r2, [pc, #388]	@ (8005394 <TIM_Base_SetConfig+0x1d8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a60      	ldr	r2, [pc, #384]	@ (8005398 <TIM_Base_SetConfig+0x1dc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a5f      	ldr	r2, [pc, #380]	@ (800539c <TIM_Base_SetConfig+0x1e0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x70>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a5e      	ldr	r2, [pc, #376]	@ (80053a0 <TIM_Base_SetConfig+0x1e4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4e      	ldr	r2, [pc, #312]	@ (800537c <TIM_Base_SetConfig+0x1c0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d043      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a4d      	ldr	r2, [pc, #308]	@ (8005380 <TIM_Base_SetConfig+0x1c4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d03f      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005254:	d03b      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800525c:	d037      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a48      	ldr	r2, [pc, #288]	@ (8005384 <TIM_Base_SetConfig+0x1c8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d033      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a47      	ldr	r2, [pc, #284]	@ (8005388 <TIM_Base_SetConfig+0x1cc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02f      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a46      	ldr	r2, [pc, #280]	@ (800538c <TIM_Base_SetConfig+0x1d0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d02b      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a45      	ldr	r2, [pc, #276]	@ (8005390 <TIM_Base_SetConfig+0x1d4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a44      	ldr	r2, [pc, #272]	@ (8005394 <TIM_Base_SetConfig+0x1d8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d023      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a43      	ldr	r2, [pc, #268]	@ (8005398 <TIM_Base_SetConfig+0x1dc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01f      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a42      	ldr	r2, [pc, #264]	@ (800539c <TIM_Base_SetConfig+0x1e0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01b      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a41      	ldr	r2, [pc, #260]	@ (80053a0 <TIM_Base_SetConfig+0x1e4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d017      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a40      	ldr	r2, [pc, #256]	@ (80053a4 <TIM_Base_SetConfig+0x1e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a3f      	ldr	r2, [pc, #252]	@ (80053a8 <TIM_Base_SetConfig+0x1ec>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00f      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a3e      	ldr	r2, [pc, #248]	@ (80053ac <TIM_Base_SetConfig+0x1f0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a3d      	ldr	r2, [pc, #244]	@ (80053b0 <TIM_Base_SetConfig+0x1f4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a3c      	ldr	r2, [pc, #240]	@ (80053b4 <TIM_Base_SetConfig+0x1f8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_Base_SetConfig+0x112>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a3b      	ldr	r2, [pc, #236]	@ (80053b8 <TIM_Base_SetConfig+0x1fc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <TIM_Base_SetConfig+0x1c0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d023      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <TIM_Base_SetConfig+0x1c4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01f      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a22      	ldr	r2, [pc, #136]	@ (800539c <TIM_Base_SetConfig+0x1e0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01b      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <TIM_Base_SetConfig+0x1e4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d017      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <TIM_Base_SetConfig+0x1e8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1f      	ldr	r2, [pc, #124]	@ (80053a8 <TIM_Base_SetConfig+0x1ec>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1e      	ldr	r2, [pc, #120]	@ (80053ac <TIM_Base_SetConfig+0x1f0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <TIM_Base_SetConfig+0x1f4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <TIM_Base_SetConfig+0x1f8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0x192>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1b      	ldr	r2, [pc, #108]	@ (80053b8 <TIM_Base_SetConfig+0x1fc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d103      	bne.n	8005356 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f043 0204 	orr.w	r2, r3, #4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]
}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	50012c00 	.word	0x50012c00
 8005384:	40000400 	.word	0x40000400
 8005388:	50000400 	.word	0x50000400
 800538c:	40000800 	.word	0x40000800
 8005390:	50000800 	.word	0x50000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	50000c00 	.word	0x50000c00
 800539c:	40013400 	.word	0x40013400
 80053a0:	50013400 	.word	0x50013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	50014000 	.word	0x50014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	50014400 	.word	0x50014400
 80053b4:	40014800 	.word	0x40014800
 80053b8:	50014800 	.word	0x50014800

080053bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005448:	b084      	sub	sp, #16
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	f107 001c 	add.w	r0, r7, #28
 8005456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800545a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800545e:	2b03      	cmp	r3, #3
 8005460:	d105      	bne.n	800546e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 f940 	bl	80066f4 <USB_CoreReset>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8005478:	7fbb      	ldrb	r3, [r7, #30]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10b      	bne.n	8005496 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b004      	add	sp, #16
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d165      	bne.n	8005588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a41      	ldr	r2, [pc, #260]	@ (80055c4 <USB_SetTurnaroundTime+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x2a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a40      	ldr	r2, [pc, #256]	@ (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054cc:	230f      	movs	r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e062      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a3c      	ldr	r2, [pc, #240]	@ (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0x40>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a3b      	ldr	r2, [pc, #236]	@ (80055cc <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d202      	bcs.n	80054e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e2:	230e      	movs	r3, #14
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e057      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <USB_SetTurnaroundTime+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d306      	bcc.n	80054fe <USB_SetTurnaroundTime+0x56>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a37      	ldr	r2, [pc, #220]	@ (80055d0 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f8:	230d      	movs	r3, #13
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e04c      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a33      	ldr	r2, [pc, #204]	@ (80055d0 <USB_SetTurnaroundTime+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d306      	bcc.n	8005514 <USB_SetTurnaroundTime+0x6c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a32      	ldr	r2, [pc, #200]	@ (80055d4 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550e:	230c      	movs	r3, #12
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e041      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a2f      	ldr	r2, [pc, #188]	@ (80055d4 <USB_SetTurnaroundTime+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0x82>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a2e      	ldr	r2, [pc, #184]	@ (80055d8 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005524:	230b      	movs	r3, #11
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e036      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <USB_SetTurnaroundTime+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d906      	bls.n	8005540 <USB_SetTurnaroundTime+0x98>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a29      	ldr	r2, [pc, #164]	@ (80055dc <USB_SetTurnaroundTime+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553a:	230a      	movs	r3, #10
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02b      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <USB_SetTurnaroundTime+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0xae>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <USB_SetTurnaroundTime+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d202      	bcs.n	8005556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005550:	2309      	movs	r3, #9
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e020      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a21      	ldr	r2, [pc, #132]	@ (80055e0 <USB_SetTurnaroundTime+0x138>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d306      	bcc.n	800556c <USB_SetTurnaroundTime+0xc4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a20      	ldr	r2, [pc, #128]	@ (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005566:	2308      	movs	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e015      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0xda>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <USB_SetTurnaroundTime+0x140>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d202      	bcs.n	8005582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800557c:	2307      	movs	r3, #7
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005582:	2306      	movs	r3, #6
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558e:	2309      	movs	r3, #9
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e001      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005594:	2309      	movs	r3, #9
 8005596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00d8acbf 	.word	0x00d8acbf
 80055c8:	00e4e1c0 	.word	0x00e4e1c0
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	01067380 	.word	0x01067380
 80055d4:	011a499f 	.word	0x011a499f
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	014ca43f 	.word	0x014ca43f
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	01a6ab1f 	.word	0x01a6ab1f
 80055e8:	01e84800 	.word	0x01e84800

080055ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 0201 	bic.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d115      	bne.n	800565c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800563c:	200a      	movs	r0, #10
 800563e:	f7fb fadd 	bl	8000bfc <HAL_Delay>
      ms += 10U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	330a      	adds	r3, #10
 8005646:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 ffc3 	bl	80065d4 <USB_GetMode>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d01e      	beq.n	8005692 <USB_SetCurrentMode+0x84>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2bc7      	cmp	r3, #199	@ 0xc7
 8005658:	d9f0      	bls.n	800563c <USB_SetCurrentMode+0x2e>
 800565a:	e01a      	b.n	8005692 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d115      	bne.n	800568e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800566e:	200a      	movs	r0, #10
 8005670:	f7fb fac4 	bl	8000bfc <HAL_Delay>
      ms += 10U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	330a      	adds	r3, #10
 8005678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ffaa 	bl	80065d4 <USB_GetMode>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <USB_SetCurrentMode+0x84>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2bc7      	cmp	r3, #199	@ 0xc7
 800568a:	d9f0      	bls.n	800566e <USB_SetCurrentMode+0x60>
 800568c:	e001      	b.n	8005692 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e005      	b.n	800569e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2bc8      	cmp	r3, #200	@ 0xc8
 8005696:	d101      	bne.n	800569c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a8:	b084      	sub	sp, #16
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	e009      	b.n	80056dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3340      	adds	r3, #64	@ 0x40
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	3301      	adds	r3, #1
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b0e      	cmp	r3, #14
 80056e0:	d9f2      	bls.n	80056c8 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11c      	bne.n	8005730 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005726:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38
 800572e:	e011      	b.n	8005754 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005760:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005764:	2b03      	cmp	r3, #3
 8005766:	d10d      	bne.n	8005784 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005770:	2100      	movs	r1, #0
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f968 	bl	8005a48 <USB_SetDevSpeed>
 8005778:	e008      	b.n	800578c <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800577a:	2101      	movs	r1, #1
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f963 	bl	8005a48 <USB_SetDevSpeed>
 8005782:	e003      	b.n	800578c <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005784:	2103      	movs	r1, #3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f95e 	bl	8005a48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800578c:	2110      	movs	r1, #16
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8fa 	bl	8005988 <USB_FlushTxFifo>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f924 	bl	80059ec <USB_FlushRxFifo>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c0:	461a      	mov	r2, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e043      	b.n	8005860 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ee:	d118      	bne.n	8005822 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005802:	461a      	mov	r2, r3
 8005804:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e013      	b.n	8005834 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e008      	b.n	8005834 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005852:	461a      	mov	r2, r3
 8005854:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005864:	461a      	mov	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4293      	cmp	r3, r2
 800586a:	d3b5      	bcc.n	80057d8 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e043      	b.n	80058fa <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005888:	d118      	bne.n	80058bc <USB_DevInit+0x214>
    {
      if (i == 0U)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589c:	461a      	mov	r2, r3
 800589e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e013      	b.n	80058ce <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e008      	b.n	80058ce <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058da:	461a      	mov	r2, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	3301      	adds	r3, #1
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058fe:	461a      	mov	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4293      	cmp	r3, r2
 8005904:	d3b5      	bcc.n	8005872 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005918:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005926:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005928:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f043 0210 	orr.w	r2, r3, #16
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <USB_DevInit+0x2dc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005948:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f043 0208 	orr.w	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800595c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005980:	b004      	add	sp, #16
 8005982:	4770      	bx	lr
 8005984:	803c3800 	.word	0x803c3800

08005988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a2:	d901      	bls.n	80059a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e01b      	b.n	80059e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	daf2      	bge.n	8005996 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	019b      	lsls	r3, r3, #6
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059cc:	d901      	bls.n	80059d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e006      	b.n	80059e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d0f0      	beq.n	80059c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a04:	d901      	bls.n	8005a0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e018      	b.n	8005a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	daf2      	bge.n	80059f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2210      	movs	r2, #16
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a28:	d901      	bls.n	8005a2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b087      	sub	sp, #28
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0306 	and.w	r3, r3, #6
 8005a92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
 8005a9e:	e00a      	b.n	8005ab6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d002      	beq.n	8005aac <USB_GetDevSpeed+0x32>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b06      	cmp	r3, #6
 8005aaa:	d102      	bne.n	8005ab2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005aac:	2302      	movs	r3, #2
 8005aae:	75fb      	strb	r3, [r7, #23]
 8005ab0:	e001      	b.n	8005ab6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ab2:	230f      	movs	r3, #15
 8005ab4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d13a      	bne.n	8005b56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d155      	bne.n	8005bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	791b      	ldrb	r3, [r3, #4]
 8005b32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	059b      	lsls	r3, r3, #22
 8005b3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e036      	b.n	8005bc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11a      	bne.n	8005bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005baa:	430b      	orrs	r3, r1
 8005bac:	4313      	orrs	r3, r2
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	@ 0x28
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 817f 	bne.w	8005ef4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d132      	bne.n	8005c64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c18:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c1c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5c:	0cdb      	lsrs	r3, r3, #19
 8005c5e:	04db      	lsls	r3, r3, #19
 8005c60:	6113      	str	r3, [r2, #16]
 8005c62:	e097      	b.n	8005d94 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7e:	0cdb      	lsrs	r3, r3, #19
 8005c80:	04db      	lsls	r3, r3, #19
 8005c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ca2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ca6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11a      	bne.n	8005ce4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce0:	6113      	str	r3, [r2, #16]
 8005ce2:	e044      	b.n	8005d6e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	8afb      	ldrh	r3, [r7, #22]
 8005d0a:	04d9      	lsls	r1, r3, #19
 8005d0c:	4ba4      	ldr	r3, [pc, #656]	@ (8005fa0 <USB_EPStartXfer+0x3cc>)
 8005d0e:	400b      	ands	r3, r1
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	791b      	ldrb	r3, [r3, #4]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d122      	bne.n	8005d6e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d42:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d46:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	8afb      	ldrh	r3, [r7, #22]
 8005d58:	075b      	lsls	r3, r3, #29
 8005d5a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	0148      	lsls	r0, r1, #5
 8005d62:	69f9      	ldr	r1, [r7, #28]
 8005d64:	4401      	add	r1, r0
 8005d66:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d14b      	bne.n	8005e32 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d128      	bne.n	8005e10 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d110      	bne.n	8005df0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e00f      	b.n	8005e10 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e166      	b.n	8006100 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d015      	beq.n	8005e86 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 814e 	beq.w	8006100 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	2101      	movs	r1, #1
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	69f9      	ldr	r1, [r7, #28]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e80:	4313      	orrs	r3, r2
 8005e82:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e84:	e13c      	b.n	8006100 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e00f      	b.n	8005ed8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68d9      	ldr	r1, [r3, #12]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	b298      	uxth	r0, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4603      	mov	r3, r0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f9b9 	bl	8006264 <USB_WritePacket>
 8005ef2:	e105      	b.n	8006100 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f0e:	0cdb      	lsrs	r3, r3, #19
 8005f10:	04db      	lsls	r3, r3, #19
 8005f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f36:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d132      	bne.n	8005fa4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6c:	69b9      	ldr	r1, [r7, #24]
 8005f6e:	0148      	lsls	r0, r1, #5
 8005f70:	69f9      	ldr	r1, [r7, #28]
 8005f72:	4401      	add	r1, r0
 8005f74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f9a:	6113      	str	r3, [r2, #16]
 8005f9c:	e062      	b.n	8006064 <USB_EPStartXfer+0x490>
 8005f9e:	bf00      	nop
 8005fa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d123      	bne.n	8005ff4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc2:	69b9      	ldr	r1, [r7, #24]
 8005fc4:	0148      	lsls	r0, r1, #5
 8005fc6:	69f9      	ldr	r1, [r7, #28]
 8005fc8:	4401      	add	r1, r0
 8005fca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ff0:	6113      	str	r3, [r2, #16]
 8005ff2:	e037      	b.n	8006064 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	8afa      	ldrh	r2, [r7, #22]
 8006010:	fb03 f202 	mul.w	r2, r3, r2
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	8afb      	ldrh	r3, [r7, #22]
 8006028:	04d9      	lsls	r1, r3, #19
 800602a:	4b38      	ldr	r3, [pc, #224]	@ (800610c <USB_EPStartXfer+0x538>)
 800602c:	400b      	ands	r3, r1
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	0148      	lsls	r0, r1, #5
 8006032:	69f9      	ldr	r1, [r7, #28]
 8006034:	4401      	add	r1, r0
 8006036:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800603a:	4313      	orrs	r3, r2
 800603c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	0148      	lsls	r0, r1, #5
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	4401      	add	r1, r0
 800605c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006060:	4313      	orrs	r3, r2
 8006062:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006064:	79fb      	ldrb	r3, [r7, #7]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10d      	bne.n	8006086 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006082:	460a      	mov	r2, r1
 8006084:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d128      	bne.n	80060e0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d110      	bne.n	80060c0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e00f      	b.n	80060e0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	1ff80000 	.word	0x1ff80000

08006110 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d14a      	bne.n	80061c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006146:	f040 8086 	bne.w	8006256 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006168:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800616c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800619e:	4293      	cmp	r3, r2
 80061a0:	d902      	bls.n	80061a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
          break;
 80061a6:	e056      	b.n	8006256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c0:	d0e7      	beq.n	8006192 <USB_EPStopXfer+0x82>
 80061c2:	e048      	b.n	8006256 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061dc:	d13b      	bne.n	8006256 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006200:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006224:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006232:	4293      	cmp	r3, r2
 8006234:	d902      	bls.n	800623c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
          break;
 800623a:	e00c      	b.n	8006256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006254:	d0e7      	beq.n	8006226 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
}
 8006258:	4618      	mov	r0, r3
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	@ 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	460b      	mov	r3, r1
 8006274:	71fb      	strb	r3, [r7, #7]
 8006276:	4613      	mov	r3, r2
 8006278:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006286:	2b00      	cmp	r3, #0
 8006288:	d123      	bne.n	80062d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800628a:	88bb      	ldrh	r3, [r7, #4]
 800628c:	3303      	adds	r3, #3
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e018      	b.n	80062ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	031a      	lsls	r2, r3, #12
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a4:	461a      	mov	r2, r3
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d3e2      	bcc.n	8006298 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3724      	adds	r7, #36	@ 0x24
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b08b      	sub	sp, #44	@ 0x2c
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	089b      	lsrs	r3, r3, #2
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	e014      	b.n	8006336 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	601a      	str	r2, [r3, #0]
    pDest++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	3301      	adds	r3, #1
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	3301      	adds	r3, #1
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	429a      	cmp	r2, r3
 800633c:	d3e6      	bcc.n	800630c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800633e:	8bfb      	ldrh	r3, [r7, #30]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01e      	beq.n	8006382 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634e:	461a      	mov	r2, r3
 8006350:	f107 0310 	add.w	r3, r7, #16
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	b2da      	uxtb	r2, r3
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	701a      	strb	r2, [r3, #0]
      i++;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	3301      	adds	r3, #1
 800636e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	3301      	adds	r3, #1
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006376:	8bfb      	ldrh	r3, [r7, #30]
 8006378:	3b01      	subs	r3, #1
 800637a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1ea      	bne.n	8006358 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006384:	4618      	mov	r0, r3
 8006386:	372c      	adds	r7, #44	@ 0x2c
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d12c      	bne.n	8006406 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	db12      	blt.n	80063e4 <USB_EPSetStall+0x54>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00f      	beq.n	80063e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e02b      	b.n	800645e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	db12      	blt.n	800643e <USB_EPSetStall+0xae>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00f      	beq.n	800643e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006438:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800643c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800645c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4013      	ands	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4013      	ands	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	0c1b      	lsrs	r3, r3, #16
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4013      	ands	r3, r2
 800652a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	b29b      	uxth	r3, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800656a:	68bb      	ldr	r3, [r7, #8]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
 80065a8:	01db      	lsls	r3, r3, #7
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4013      	ands	r3, r2
 80065c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065c6:	68bb      	ldr	r3, [r7, #8]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006626:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	460b      	mov	r3, r1
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	333c      	adds	r3, #60	@ 0x3c
 800664e:	3304      	adds	r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4a26      	ldr	r2, [pc, #152]	@ (80066f0 <USB_EP0_OutStart+0xb8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d90a      	bls.n	8006672 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800666c:	d101      	bne.n	8006672 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e037      	b.n	80066e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800668c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 0318 	orr.w	r3, r3, #24
 80066a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80066b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10f      	bne.n	80066e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80066de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	4f54300a 	.word	0x4f54300a

080066f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800670c:	d901      	bls.n	8006712 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e01b      	b.n	800674a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	daf2      	bge.n	8006700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f043 0201 	orr.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006736:	d901      	bls.n	800673c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e006      	b.n	800674a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	d0f0      	beq.n	800672a <USB_CoreReset+0x36>

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b096      	sub	sp, #88	@ 0x58
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3303      	adds	r3, #3
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006770:	f3ef 8310 	mrs	r3, PRIMASK
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800677a:	b672      	cpsid	i
#endif
    return(int_posture);
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800677e:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006780:	4b55      	ldr	r3, [pc, #340]	@ (80068d8 <_tx_byte_allocate+0x180>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800678e:	621a      	str	r2, [r3, #32]
 8006790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	f383 8810 	msr	PRIMASK, r3
}
 800679a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f9b2 	bl	8006b08 <_tx_byte_pool_search>
 80067a4:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80067a6:	f3ef 8310 	mrs	r3, PRIMASK
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80067b0:	b672      	cpsid	i
    return(int_posture);
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80067b4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80067b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80067bc:	2301      	movs	r3, #1
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c0:	e006      	b.n	80067d0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d101      	bne.n	80067d0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80067d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0d9      	beq.n	800678a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067da:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80067dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d008      	beq.n	80067f4 <_tx_byte_allocate+0x9c>
 80067e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f383 8810 	msr	PRIMASK, r3
}
 80067ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80067ee:	2300      	movs	r3, #0
 80067f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067f2:	e06c      	b.n	80068ce <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d061      	beq.n	80068be <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80067fa:	4b38      	ldr	r3, [pc, #224]	@ (80068dc <_tx_byte_allocate+0x184>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8006802:	2310      	movs	r3, #16
 8006804:	653b      	str	r3, [r7, #80]	@ 0x50
 8006806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006808:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	e05d      	b.n	80068ce <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8006812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006814:	4a32      	ldr	r2, [pc, #200]	@ (80068e0 <_tx_byte_allocate+0x188>)
 8006816:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8006818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800681e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8006824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800682a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800682c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006834:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006858:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800685a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800685e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006860:	e011      	b.n	8006886 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800686a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800686c:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800686e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006872:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006876:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006878:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800687e:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006884:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8006886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006888:	2209      	movs	r2, #9
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800688c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688e:	2201      	movs	r2, #1
 8006890:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006898:	4b10      	ldr	r3, [pc, #64]	@ (80068dc <_tx_byte_allocate+0x184>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	4a0f      	ldr	r2, [pc, #60]	@ (80068dc <_tx_byte_allocate+0x184>)
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f383 8810 	msr	PRIMASK, r3
}
 80068ac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80068ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80068b0:	f001 fd7a 	bl	80083a8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80068b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80068bc:	e007      	b.n	80068ce <_tx_byte_allocate+0x176>
 80068be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f383 8810 	msr	PRIMASK, r3
}
 80068c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80068ca:	2310      	movs	r3, #16
 80068cc:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80068ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3758      	adds	r7, #88	@ 0x58
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20010f0c 	.word	0x20010f0c
 80068dc:	20010fa4 	.word	0x20010fa4
 80068e0:	080068e5 	.word	0x080068e5

080068e4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	@ 0x38
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80068ee:	f3ef 8310 	mrs	r3, PRIMASK
 80068f2:	623b      	str	r3, [r7, #32]
    return(posture);
 80068f4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80068f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80068f8:	b672      	cpsid	i
    return(int_posture);
 80068fa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006902:	4a33      	ldr	r2, [pc, #204]	@ (80069d0 <_tx_byte_pool_cleanup+0xec>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d158      	bne.n	80069ba <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d152      	bne.n	80069ba <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d04c      	beq.n	80069ba <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a2b      	ldr	r2, [pc, #172]	@ (80069d4 <_tx_byte_pool_cleanup+0xf0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d147      	bne.n	80069ba <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d043      	beq.n	80069ba <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	1e5a      	subs	r2, r3, #1
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	2200      	movs	r2, #0
 8006952:	625a      	str	r2, [r3, #36]	@ 0x24
 8006954:	e013      	b.n	800697e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006966:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800696c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d102      	bne.n	800697e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800697c:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	2b09      	cmp	r3, #9
 8006984:	d119      	bne.n	80069ba <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2210      	movs	r2, #16
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800698e:	4b12      	ldr	r3, [pc, #72]	@ (80069d8 <_tx_byte_pool_cleanup+0xf4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3301      	adds	r3, #1
 8006994:	4a10      	ldr	r2, [pc, #64]	@ (80069d8 <_tx_byte_pool_cleanup+0xf4>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f383 8810 	msr	PRIMASK, r3
}
 80069a2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fbff 	bl	80081a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80069aa:	f3ef 8310 	mrs	r3, PRIMASK
 80069ae:	61bb      	str	r3, [r7, #24]
    return(posture);
 80069b0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80069b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80069b4:	b672      	cpsid	i
    return(int_posture);
 80069b6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80069c6:	bf00      	nop
 80069c8:	3738      	adds	r7, #56	@ 0x38
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	080068e5 	.word	0x080068e5
 80069d4:	42595445 	.word	0x42595445
 80069d8:	20010fa4 	.word	0x20010fa4

080069dc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80069ea:	2234      	movs	r2, #52	@ 0x34
 80069ec:	2100      	movs	r1, #0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f006 fd10 	bl	800d414 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1a3 0208 	sub.w	r2, r3, #8
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2202      	movs	r2, #2
 8006a28:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8006a2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	4413      	add	r3, r2
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a48:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a66:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6e:	3304      	adds	r3, #4
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	4a1f      	ldr	r2, [pc, #124]	@ (8006af8 <_tx_byte_pool_create+0x11c>)
 8006a7a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a82:	f3ef 8310 	mrs	r3, PRIMASK
 8006a86:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006a88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006a8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a8c:	b672      	cpsid	i
    return(int_posture);
 8006a8e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <_tx_byte_pool_create+0x120>)
 8006a96:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <_tx_byte_pool_create+0x124>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006aa0:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <_tx_byte_pool_create+0x128>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ab2:	e011      	b.n	8006ad8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006ab4:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <_tx_byte_pool_create+0x128>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abe:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8006ad8:	4b09      	ldr	r3, [pc, #36]	@ (8006b00 <_tx_byte_pool_create+0x124>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	4a08      	ldr	r2, [pc, #32]	@ (8006b00 <_tx_byte_pool_create+0x124>)
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3738      	adds	r7, #56	@ 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	ffffeeee 	.word	0xffffeeee
 8006afc:	42595445 	.word	0x42595445
 8006b00:	20010f00 	.word	0x20010f00
 8006b04:	20010efc 	.word	0x20010efc

08006b08 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b097      	sub	sp, #92	@ 0x5c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b16:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8006b1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b20:	b672      	cpsid	i
    return(int_posture);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006b24:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	3b02      	subs	r3, #2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4413      	add	r3, r2
 8006b34:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d308      	bcc.n	8006b50 <_tx_byte_pool_search+0x48>
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b4e:	e0dd      	b.n	8006d0c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006b50:	4b72      	ldr	r3, [pc, #456]	@ (8006d1c <_tx_byte_pool_search+0x214>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b5a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b70:	3304      	adds	r3, #4
 8006b72:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a68      	ldr	r2, [pc, #416]	@ (8006d20 <_tx_byte_pool_search+0x218>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d143      	bne.n	8006c0a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8006b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b8c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b94:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba6:	3b08      	subs	r3, #8
 8006ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8006baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d257      	bcs.n	8006c62 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb8:	3304      	adds	r3, #4
 8006bba:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a56      	ldr	r2, [pc, #344]	@ (8006d20 <_tx_byte_pool_search+0x218>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d113      	bne.n	8006bf2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	1e5a      	subs	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d114      	bne.n	8006c14 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bee:	615a      	str	r2, [r3, #20]
 8006bf0:	e010      	b.n	8006c14 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8006bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8006c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c04:	3b01      	subs	r3, #1
 8006c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c08:	e004      	b.n	8006c14 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8006c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f383 8810 	msr	PRIMASK, r3
}
 8006c2a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c30:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006c32:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006c34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006c36:	b672      	cpsid	i
    return(int_posture);
 8006c38:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8006c3a:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d009      	beq.n	8006c5a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c58:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8006c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d186      	bne.n	8006b6e <_tx_byte_pool_search+0x66>
 8006c60:	e000      	b.n	8006c64 <_tx_byte_pool_search+0x15c>
                    break;
 8006c62:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8006c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d048      	beq.n	8006cfc <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8006c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b13      	cmp	r3, #19
 8006c72:	d91e      	bls.n	8006cb2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c7a:	4413      	add	r3, r2
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c80:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c84:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	3304      	adds	r3, #4
 8006c92:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	4a21      	ldr	r2, [pc, #132]	@ (8006d20 <_tx_byte_pool_search+0x218>)
 8006c9c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cac:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cba:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f1a3 0208 	sub.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d105      	bne.n	8006ce8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cde:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	615a      	str	r2, [r3, #20]
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f383 8810 	msr	PRIMASK, r3
}
 8006cf2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cfa:	e007      	b.n	8006d0c <_tx_byte_pool_search+0x204>
 8006cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cfe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f383 8810 	msr	PRIMASK, r3
}
 8006d06:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	375c      	adds	r7, #92	@ 0x5c
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20010f0c 	.word	0x20010f0c
 8006d20:	ffffeeee 	.word	0xffffeeee

08006d24 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8006d28:	f001 f8fc 	bl	8007f24 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8006d2c:	f001 fd04 	bl	8008738 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8006d30:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <_tx_initialize_high_level+0x58>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	4b12      	ldr	r3, [pc, #72]	@ (8006d80 <_tx_initialize_high_level+0x5c>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8006d3c:	4b11      	ldr	r3, [pc, #68]	@ (8006d84 <_tx_initialize_high_level+0x60>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	4b11      	ldr	r3, [pc, #68]	@ (8006d88 <_tx_initialize_high_level+0x64>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8006d48:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <_tx_initialize_high_level+0x68>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <_tx_initialize_high_level+0x6c>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8006d54:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <_tx_initialize_high_level+0x70>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d98 <_tx_initialize_high_level+0x74>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8006d60:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <_tx_initialize_high_level+0x78>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <_tx_initialize_high_level+0x7c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <_tx_initialize_high_level+0x80>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <_tx_initialize_high_level+0x84>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
#endif
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20010ed4 	.word	0x20010ed4
 8006d80:	20010ed8 	.word	0x20010ed8
 8006d84:	20010edc 	.word	0x20010edc
 8006d88:	20010ee0 	.word	0x20010ee0
 8006d8c:	20010ee4 	.word	0x20010ee4
 8006d90:	20010ee8 	.word	0x20010ee8
 8006d94:	20010ef4 	.word	0x20010ef4
 8006d98:	20010ef8 	.word	0x20010ef8
 8006d9c:	20010efc 	.word	0x20010efc
 8006da0:	20010f00 	.word	0x20010f00
 8006da4:	20010eec 	.word	0x20010eec
 8006da8:	20010ef0 	.word	0x20010ef0

08006dac <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8006db0:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <_tx_initialize_kernel_enter+0x48>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8006db8:	d00c      	beq.n	8006dd4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006dba:	4b0e      	ldr	r3, [pc, #56]	@ (8006df4 <_tx_initialize_kernel_enter+0x48>)
 8006dbc:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8006dc0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8006dc2:	f7f9 fa65 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8006dc6:	f7ff ffad 	bl	8006d24 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <_tx_initialize_kernel_enter+0x4c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	4a09      	ldr	r2, [pc, #36]	@ (8006df8 <_tx_initialize_kernel_enter+0x4c>)
 8006dd2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006dd4:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <_tx_initialize_kernel_enter+0x48>)
 8006dd6:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8006dda:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <_tx_initialize_kernel_enter+0x50>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fb8b 	bl	80004fc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8006de6:	4b03      	ldr	r3, [pc, #12]	@ (8006df4 <_tx_initialize_kernel_enter+0x48>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006dec:	f7f9 fa8c 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006df0:	bf00      	nop
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	20010fa4 	.word	0x20010fa4
 8006dfc:	20010f04 	.word	0x20010f04

08006e00 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	@ 0x38
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0e:	623b      	str	r3, [r7, #32]
    return(posture);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006e12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e14:	b672      	cpsid	i
    return(int_posture);
 8006e16:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8006e18:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e1e:	4a33      	ldr	r2, [pc, #204]	@ (8006eec <_tx_mutex_cleanup+0xec>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d158      	bne.n	8006ed6 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d152      	bne.n	8006ed6 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d04c      	beq.n	8006ed6 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2b      	ldr	r2, [pc, #172]	@ (8006ef0 <_tx_mutex_cleanup+0xf0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d147      	bne.n	8006ed6 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d043      	beq.n	8006ed6 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	1e5a      	subs	r2, r3, #1
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	619a      	str	r2, [r3, #24]
 8006e70:	e013      	b.n	8006e9a <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e82:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e88:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d102      	bne.n	8006e9a <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e98:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9e:	2b0d      	cmp	r3, #13
 8006ea0:	d119      	bne.n	8006ed6 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	221d      	movs	r2, #29
 8006ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <_tx_mutex_cleanup+0xf4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	4a10      	ldr	r2, [pc, #64]	@ (8006ef4 <_tx_mutex_cleanup+0xf4>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f383 8810 	msr	PRIMASK, r3
}
 8006ebe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f971 	bl	80081a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eca:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006ece:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ed0:	b672      	cpsid	i
    return(int_posture);
 8006ed2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f383 8810 	msr	PRIMASK, r3
}
 8006ee0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006ee2:	bf00      	nop
 8006ee4:	3738      	adds	r7, #56	@ 0x38
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	08006e01 	.word	0x08006e01
 8006ef0:	4d555445 	.word	0x4d555445
 8006ef4:	20010fa4 	.word	0x20010fa4

08006ef8 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f00:	f3ef 8310 	mrs	r3, PRIMASK
 8006f04:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006f06:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006f08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f0a:	b672      	cpsid	i
    return(int_posture);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <_tx_mutex_thread_release+0x84>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <_tx_mutex_thread_release+0x84>)
 8006f18:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f20:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d017      	beq.n	8006f58 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	609a      	str	r2, [r3, #8]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f383 8810 	msr	PRIMASK, r3
}
 8006f38:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8006f3a:	6a38      	ldr	r0, [r7, #32]
 8006f3c:	f000 fb9c 	bl	8007678 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f40:	f3ef 8310 	mrs	r3, PRIMASK
 8006f44:	617b      	str	r3, [r7, #20]
    return(posture);
 8006f46:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006f48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f4a:	b672      	cpsid	i
    return(int_posture);
 8006f4c:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f56:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1dd      	bne.n	8006f1a <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <_tx_mutex_thread_release+0x84>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4a05      	ldr	r2, [pc, #20]	@ (8006f7c <_tx_mutex_thread_release+0x84>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f383 8810 	msr	PRIMASK, r3
}
 8006f72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8006f74:	bf00      	nop
 8006f76:	3728      	adds	r7, #40	@ 0x28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20010fa4 	.word	0x20010fa4

08006f80 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	@ 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8006f8c:	2234      	movs	r2, #52	@ 0x34
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f006 fa3f 	bl	800d414 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006fa8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006faa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006fac:	b672      	cpsid	i
    return(int_posture);
 8006fae:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007020 <_tx_mutex_create+0xa0>)
 8006fb6:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007024 <_tx_mutex_create+0xa4>)
 8006fba:	4a1b      	ldr	r2, [pc, #108]	@ (8007028 <_tx_mutex_create+0xa8>)
 8006fbc:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800702c <_tx_mutex_create+0xac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007030 <_tx_mutex_create+0xb0>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fd8:	e011      	b.n	8006ffe <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8006fda:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <_tx_mutex_create+0xb0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <_tx_mutex_create+0xac>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <_tx_mutex_create+0xac>)
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f383 8810 	msr	PRIMASK, r3
}
 8007012:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3728      	adds	r7, #40	@ 0x28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	4d555445 	.word	0x4d555445
 8007024:	20010fa8 	.word	0x20010fa8
 8007028:	08006ef9 	.word	0x08006ef9
 800702c:	20010ef0 	.word	0x20010ef0
 8007030:	20010eec 	.word	0x20010eec

08007034 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b096      	sub	sp, #88	@ 0x58
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800703c:	f3ef 8310 	mrs	r3, PRIMASK
 8007040:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007046:	b672      	cpsid	i
    return(int_posture);
 8007048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800704a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8007052:	4b4a      	ldr	r3, [pc, #296]	@ (800717c <_tx_mutex_delete+0x148>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3b01      	subs	r3, #1
 8007058:	4a48      	ldr	r2, [pc, #288]	@ (800717c <_tx_mutex_delete+0x148>)
 800705a:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800705c:	4b47      	ldr	r3, [pc, #284]	@ (800717c <_tx_mutex_delete+0x148>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8007064:	4b46      	ldr	r3, [pc, #280]	@ (8007180 <_tx_mutex_delete+0x14c>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e013      	b.n	8007094 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8007078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800707a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800707e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007082:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8007084:	4b3e      	ldr	r3, [pc, #248]	@ (8007180 <_tx_mutex_delete+0x14c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	429a      	cmp	r2, r3
 800708c:	d102      	bne.n	8007094 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800708e:	4a3c      	ldr	r2, [pc, #240]	@ (8007180 <_tx_mutex_delete+0x14c>)
 8007090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007092:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007094:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <_tx_mutex_delete+0x150>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	4a3a      	ldr	r2, [pc, #232]	@ (8007184 <_tx_mutex_delete+0x150>)
 800709c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80070bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d013      	beq.n	80070ea <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	609a      	str	r2, [r3, #8]
 80070c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	f383 8810 	msr	PRIMASK, r3
}
 80070d2:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 facf 	bl	8007678 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80070da:	f3ef 8310 	mrs	r3, PRIMASK
 80070de:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 80070e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80070e4:	b672      	cpsid	i
    return(int_posture);
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 80070e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	f383 8810 	msr	PRIMASK, r3
}
 80070f4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80070f6:	e024      	b.n	8007142 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80070f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fa:	3b01      	subs	r3, #1
 80070fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80070fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007102:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007104:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007106:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007108:	b672      	cpsid	i
    return(int_posture);
 800710a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800710c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800710e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007116:	2201      	movs	r2, #1
 8007118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800711c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007122:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <_tx_mutex_delete+0x150>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a16      	ldr	r2, [pc, #88]	@ (8007184 <_tx_mutex_delete+0x150>)
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f383 8810 	msr	PRIMASK, r3
}
 8007136:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007138:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800713a:	f001 f835 	bl	80081a8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800713e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 8007142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1d7      	bne.n	80070f8 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007148:	f3ef 8310 	mrs	r3, PRIMASK
 800714c:	613b      	str	r3, [r7, #16]
    return(posture);
 800714e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007150:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007152:	b672      	cpsid	i
    return(int_posture);
 8007154:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007156:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007158:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <_tx_mutex_delete+0x150>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	4a09      	ldr	r2, [pc, #36]	@ (8007184 <_tx_mutex_delete+0x150>)
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007164:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f383 8810 	msr	PRIMASK, r3
}
 800716c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800716e:	f000 ffe1 	bl	8008134 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3758      	adds	r7, #88	@ 0x58
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20010ef0 	.word	0x20010ef0
 8007180:	20010eec 	.word	0x20010eec
 8007184:	20010fa4 	.word	0x20010fa4

08007188 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b092      	sub	sp, #72	@ 0x48
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007192:	f3ef 8310 	mrs	r3, PRIMASK
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800719a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800719c:	b672      	cpsid	i
    return(int_posture);
 800719e:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80071a0:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80071a2:	4b7a      	ldr	r3, [pc, #488]	@ (800738c <_tx_mutex_get+0x204>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d144      	bne.n	800723a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071ba:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d032      	beq.n	8007228 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d106      	bne.n	80071d8 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80071d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071de:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00f      	beq.n	8007206 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007204:	e009      	b.n	800721a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800721a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007224:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8007228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f383 8810 	msr	PRIMASK, r3
}
 8007232:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007234:	2300      	movs	r3, #0
 8007236:	647b      	str	r3, [r7, #68]	@ 0x44
 8007238:	e0a2      	b.n	8007380 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007240:	429a      	cmp	r2, r3
 8007242:	d10d      	bne.n	8007260 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	609a      	str	r2, [r3, #8]
 800724e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007250:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f383 8810 	msr	PRIMASK, r3
}
 8007258:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800725a:	2300      	movs	r3, #0
 800725c:	647b      	str	r3, [r7, #68]	@ 0x44
 800725e:	e08f      	b.n	8007380 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8084 	beq.w	8007370 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007268:	4b49      	ldr	r3, [pc, #292]	@ (8007390 <_tx_mutex_get+0x208>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <_tx_mutex_get+0xfa>
 8007270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007272:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f383 8810 	msr	PRIMASK, r3
}
 800727a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800727c:	231d      	movs	r3, #29
 800727e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007280:	e07e      	b.n	8007380 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	4a42      	ldr	r2, [pc, #264]	@ (8007394 <_tx_mutex_get+0x20c>)
 800728c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800728e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072ae:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80072b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072b4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80072b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072ba:	675a      	str	r2, [r3, #116]	@ 0x74
 80072bc:	e011      	b.n	80072e2 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80072c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072c8:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ce:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80072d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d4:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072da:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072e0:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80072ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ee:	220d      	movs	r2, #13
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80072f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f4:	2201      	movs	r2, #1
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80072f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <_tx_mutex_get+0x208>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	4a22      	ldr	r2, [pc, #136]	@ (8007390 <_tx_mutex_get+0x208>)
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800730a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d121      	bne.n	8007360 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8007328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8007330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800733a:	429a      	cmp	r2, r3
 800733c:	d204      	bcs.n	8007348 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8007348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	429a      	cmp	r2, r3
 8007352:	d905      	bls.n	8007360 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8007354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	4619      	mov	r1, r3
 800735a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800735c:	f000 f8ce 	bl	80074fc <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007362:	f001 f821 	bl	80083a8 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736c:	647b      	str	r3, [r7, #68]	@ 0x44
 800736e:	e007      	b.n	8007380 <_tx_mutex_get+0x1f8>
 8007370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007372:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f383 8810 	msr	PRIMASK, r3
}
 800737a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800737c:	231d      	movs	r3, #29
 800737e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8007380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8007382:	4618      	mov	r0, r3
 8007384:	3748      	adds	r7, #72	@ 0x48
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20010f0c 	.word	0x20010f0c
 8007390:	20010fa4 	.word	0x20010fa4
 8007394:	08006e01 	.word	0x08006e01

08007398 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b092      	sub	sp, #72	@ 0x48
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073a0:	f3ef 8310 	mrs	r3, PRIMASK
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80073a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80073aa:	b672      	cpsid	i
    return(int_posture);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80073ae:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80073b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d805      	bhi.n	80073c8 <_tx_mutex_prioritize+0x30>
 80073bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	e092      	b.n	80074ee <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80073c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d114      	bne.n	80073f8 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d202      	bcs.n	80073ec <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ea:	619a      	str	r2, [r3, #24]
 80073ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f383 8810 	msr	PRIMASK, r3
}
 80073f6:	e07a      	b.n	80074ee <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8007402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007406:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8007408:	4b3b      	ldr	r3, [pc, #236]	@ (80074f8 <_tx_mutex_prioritize+0x160>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	4a3a      	ldr	r2, [pc, #232]	@ (80074f8 <_tx_mutex_prioritize+0x160>)
 8007410:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8007416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d201      	bcs.n	8007426 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8007422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007428:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f383 8810 	msr	PRIMASK, r3
}
 8007430:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007432:	f3ef 8310 	mrs	r3, PRIMASK
 8007436:	617b      	str	r3, [r7, #20]
    return(posture);
 8007438:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800743a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800743c:	b672      	cpsid	i
    return(int_posture);
 800743e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8007440:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007448:	429a      	cmp	r2, r3
 800744a:	d002      	beq.n	8007452 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007450:	e006      	b.n	8007460 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007458:	429a      	cmp	r2, r3
 800745a:	d001      	beq.n	8007460 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746a:	643b      	str	r3, [r7, #64]	@ 0x40
 800746c:	e00c      	b.n	8007488 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007482:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 8007488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800748a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748c:	429a      	cmp	r2, r3
 800748e:	d1c2      	bne.n	8007416 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8007490:	4b19      	ldr	r3, [pc, #100]	@ (80074f8 <_tx_mutex_prioritize+0x160>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <_tx_mutex_prioritize+0x160>)
 8007498:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800749a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	429a      	cmp	r2, r3
 80074a0:	d01d      	beq.n	80074de <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80074a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80074a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ac:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074b2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b8:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074be:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80074c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074c4:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80074c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ca:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074d0:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80074d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074d6:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074dc:	619a      	str	r2, [r3, #24]
 80074de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f383 8810 	msr	PRIMASK, r3
}
 80074e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80074ea:	f000 fe23 	bl	8008134 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80074ee:	2300      	movs	r3, #0
#endif
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3748      	adds	r7, #72	@ 0x48
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20010fa4 	.word	0x20010fa4

080074fc <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b090      	sub	sp, #64	@ 0x40
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007506:	f3ef 8310 	mrs	r3, PRIMASK
 800750a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800750c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007510:	b672      	cpsid	i
    return(int_posture);
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8007514:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	2b00      	cmp	r3, #0
 800751c:	d017      	beq.n	800754e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d905      	bls.n	800753c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	63da      	str	r2, [r3, #60]	@ 0x3c
 800753a:	e002      	b.n	8007542 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	f383 8810 	msr	PRIMASK, r3
}
 800754c:	e089      	b.n	8007662 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800754e:	4b47      	ldr	r3, [pc, #284]	@ (800766c <_tx_mutex_priority_change+0x170>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800755a:	4b45      	ldr	r3, [pc, #276]	@ (8007670 <_tx_mutex_priority_change+0x174>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3302      	adds	r3, #2
 8007560:	4a43      	ldr	r2, [pc, #268]	@ (8007670 <_tx_mutex_priority_change+0x174>)
 8007562:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	220e      	movs	r2, #14
 8007568:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007578:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 ff10 	bl	80083a8 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007588:	f3ef 8310 	mrs	r3, PRIMASK
 800758c:	623b      	str	r3, [r7, #32]
    return(posture);
 800758e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007590:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007592:	b672      	cpsid	i
    return(int_posture);
 8007594:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d905      	bls.n	80075b6 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075b4:	e002      	b.n	80075bc <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fded 	bl	80081a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
 80075d2:	617b      	str	r3, [r7, #20]
    return(posture);
 80075d4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80075d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80075d8:	b672      	cpsid	i
    return(int_posture);
 80075da:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 80075de:	4b23      	ldr	r3, [pc, #140]	@ (800766c <_tx_mutex_priority_change+0x170>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d034      	beq.n	8007656 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d130      	bne.n	8007656 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d811      	bhi.n	8007624 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	429a      	cmp	r2, r3
 8007606:	d126      	bne.n	8007656 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8007608:	4a18      	ldr	r2, [pc, #96]	@ (800766c <_tx_mutex_priority_change+0x170>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800760e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d21f      	bcs.n	8007656 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	4916      	ldr	r1, [pc, #88]	@ (8007674 <_tx_mutex_priority_change+0x178>)
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007622:	e018      	b.n	8007656 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d212      	bcs.n	8007656 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	429a      	cmp	r2, r3
 800763a:	d80c      	bhi.n	8007656 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800763c:	4a0b      	ldr	r2, [pc, #44]	@ (800766c <_tx_mutex_priority_change+0x170>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8007642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d205      	bcs.n	8007656 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	4909      	ldr	r1, [pc, #36]	@ (8007674 <_tx_mutex_priority_change+0x178>)
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007658:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f383 8810 	msr	PRIMASK, r3
}
 8007660:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007662:	bf00      	nop
 8007664:	3740      	adds	r7, #64	@ 0x40
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20010f10 	.word	0x20010f10
 8007670:	20010fa4 	.word	0x20010fa4
 8007674:	20010f24 	.word	0x20010f24

08007678 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b0a6      	sub	sp, #152	@ 0x98
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8007680:	2320      	movs	r3, #32
 8007682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007686:	f3ef 8310 	mrs	r3, PRIMASK
 800768a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 800768c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 800768e:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8007690:	b672      	cpsid	i
    return(int_posture);
 8007692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8007694:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 81ff 	beq.w	8007aa0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80076a8:	4ba3      	ldr	r3, [pc, #652]	@ (8007938 <_tx_mutex_put+0x2c0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d00d      	beq.n	80076d4 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80076b8:	4ba0      	ldr	r3, [pc, #640]	@ (800793c <_tx_mutex_put+0x2c4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <_tx_mutex_put+0x5c>
 80076c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076c4:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c8:	f383 8810 	msr	PRIMASK, r3
}
 80076cc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80076ce:	231e      	movs	r3, #30
 80076d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80076d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076d8:	2b20      	cmp	r3, #32
 80076da:	f040 81eb 	bne.w	8007ab4 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <_tx_mutex_put+0x8e>
 80076f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076f4:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f8:	f383 8810 	msr	PRIMASK, r3
}
 80076fc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 80076fe:	2300      	movs	r3, #0
 8007700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007704:	e1d6      	b.n	8007ab4 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8007706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <_tx_mutex_put+0xaa>
 800770c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800771a:	2300      	movs	r3, #0
 800771c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007720:	e1c8      	b.n	8007ab4 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8007722:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800772c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8007730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800773a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800773c:	2200      	movs	r2, #0
 800773e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8007742:	e019      	b.n	8007778 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007750:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8007752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007756:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007758:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800775a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800775c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007760:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8007762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d104      	bne.n	8007778 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800776e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007770:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007774:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d110      	bne.n	80077a2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007792:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80077a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	f040 8184 	bne.w	8007ab4 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80077b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d155      	bne.n	8007870 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80077c4:	4b5d      	ldr	r3, [pc, #372]	@ (800793c <_tx_mutex_put+0x2c4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	4a5c      	ldr	r2, [pc, #368]	@ (800793c <_tx_mutex_put+0x2c4>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077d2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d6:	f383 8810 	msr	PRIMASK, r3
}
 80077da:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 80077dc:	2320      	movs	r3, #32
 80077de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80077e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 80077ec:	e01f      	b.n	800782e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 80077ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10b      	bne.n	8007810 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 80077f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007802:	429a      	cmp	r2, r3
 8007804:	d904      	bls.n	8007810 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8007806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8007810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800781a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007820:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007824:	429a      	cmp	r2, r3
 8007826:	d102      	bne.n	800782e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 800782e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1db      	bne.n	80077ee <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007836:	f3ef 8310 	mrs	r3, PRIMASK
 800783a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800783c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007840:	b672      	cpsid	i
    return(int_posture);
 8007842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8007844:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8007848:	4b3c      	ldr	r3, [pc, #240]	@ (800793c <_tx_mutex_put+0x2c4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3b01      	subs	r3, #1
 800784e:	4a3b      	ldr	r2, [pc, #236]	@ (800793c <_tx_mutex_put+0x2c4>)
 8007850:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8007852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007854:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007858:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800785c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007864:	429a      	cmp	r2, r3
 8007866:	d203      	bcs.n	8007870 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8007868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800786c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d920      	bls.n	80078ba <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d11c      	bne.n	80078ba <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8007880:	4b2e      	ldr	r3, [pc, #184]	@ (800793c <_tx_mutex_put+0x2c4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	4a2d      	ldr	r2, [pc, #180]	@ (800793c <_tx_mutex_put+0x2c4>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800788e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f383 8810 	msr	PRIMASK, r3
}
 8007896:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fd7d 	bl	8007398 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800789e:	f3ef 8310 	mrs	r3, PRIMASK
 80078a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80078a8:	b672      	cpsid	i
    return(int_posture);
 80078aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80078ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80078b0:	4b22      	ldr	r3, [pc, #136]	@ (800793c <_tx_mutex_put+0x2c4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	4a21      	ldr	r2, [pc, #132]	@ (800793c <_tx_mutex_put+0x2c4>)
 80078b8:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d13e      	bne.n	8007940 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80078c2:	4b1e      	ldr	r3, [pc, #120]	@ (800793c <_tx_mutex_put+0x2c4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	4a1c      	ldr	r2, [pc, #112]	@ (800793c <_tx_mutex_put+0x2c4>)
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d006      	beq.n	80078fc <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fe00 	bl	80074fc <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8007904:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007906:	b672      	cpsid	i
    return(int_posture);
 8007908:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800790a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800790e:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <_tx_mutex_put+0x2c4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3b01      	subs	r3, #1
 8007914:	4a09      	ldr	r2, [pc, #36]	@ (800793c <_tx_mutex_put+0x2c4>)
 8007916:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	f383 8810 	msr	PRIMASK, r3
}
 800792a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800792c:	f000 fc02 	bl	8008134 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8007930:	2300      	movs	r3, #0
 8007932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007936:	e0bd      	b.n	8007ab4 <_tx_mutex_put+0x43c>
 8007938:	20010f0c 	.word	0x20010f0c
 800793c:	20010fa4 	.word	0x20010fa4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10a      	bne.n	8007964 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8007956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8007964:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800796a:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800796c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007972:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	631a      	str	r2, [r3, #48]	@ 0x30
 8007986:	e016      	b.n	80079b6 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8007988:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800798a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800798e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8007992:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007998:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800799a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80079a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80079ac:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079b4:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80079b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079ca:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	1e5a      	subs	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80079dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	619a      	str	r2, [r3, #24]
 80079e8:	e00e      	b.n	8007a08 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80079ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ee:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80079f4:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80079f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fa:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 80079fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a00:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8007a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a06:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007a16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac0 <_tx_mutex_put+0x448>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	4a28      	ldr	r2, [pc, #160]	@ (8007ac0 <_tx_mutex_put+0x448>)
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a24:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f383 8810 	msr	PRIMASK, r3
}
 8007a2c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d12d      	bne.n	8007a92 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01c      	beq.n	8007a78 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fcaa 	bl	8007398 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a44:	f3ef 8310 	mrs	r3, PRIMASK
 8007a48:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007a4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007a4e:	b672      	cpsid	i
    return(int_posture);
 8007a50:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8007a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 8007a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8007a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f383 8810 	msr	PRIMASK, r3
}
 8007a76:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8007a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d005      	beq.n	8007a92 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8007a86:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8007a8a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8007a8e:	f7ff fd35 	bl	80074fc <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8007a92:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007a94:	f000 fb88 	bl	80081a8 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a9e:	e009      	b.n	8007ab4 <_tx_mutex_put+0x43c>
 8007aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007aa4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f383 8810 	msr	PRIMASK, r3
}
 8007aac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8007aae:	231e      	movs	r3, #30
 8007ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 8007ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3798      	adds	r7, #152	@ 0x98
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20010fa4 	.word	0x20010fa4

08007ac4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	@ 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8007ad0:	221c      	movs	r2, #28
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f005 fc9d 	bl	800d414 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aea:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007aec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007aee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007af0:	b672      	cpsid	i
    return(int_posture);
 8007af2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <_tx_semaphore_create+0x98>)
 8007afa:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007afc:	4b18      	ldr	r3, [pc, #96]	@ (8007b60 <_tx_semaphore_create+0x9c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8007b04:	4a17      	ldr	r2, [pc, #92]	@ (8007b64 <_tx_semaphore_create+0xa0>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	619a      	str	r2, [r3, #24]
 8007b16:	e011      	b.n	8007b3c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8007b18:	4b12      	ldr	r3, [pc, #72]	@ (8007b64 <_tx_semaphore_create+0xa0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a3a      	ldr	r2, [r7, #32]
 8007b3a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8007b3c:	4b08      	ldr	r3, [pc, #32]	@ (8007b60 <_tx_semaphore_create+0x9c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	4a07      	ldr	r2, [pc, #28]	@ (8007b60 <_tx_semaphore_create+0x9c>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f383 8810 	msr	PRIMASK, r3
}
 8007b50:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3728      	adds	r7, #40	@ 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	53454d41 	.word	0x53454d41
 8007b60:	20010ed8 	.word	0x20010ed8
 8007b64:	20010ed4 	.word	0x20010ed4

08007b68 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b092      	sub	sp, #72	@ 0x48
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b70:	f3ef 8310 	mrs	r3, PRIMASK
 8007b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b7a:	b672      	cpsid	i
    return(int_posture);
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8007b86:	4b3d      	ldr	r3, [pc, #244]	@ (8007c7c <_tx_semaphore_delete+0x114>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c7c <_tx_semaphore_delete+0x114>)
 8007b8e:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8007b90:	4b3a      	ldr	r3, [pc, #232]	@ (8007c7c <_tx_semaphore_delete+0x114>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8007b98:	4b39      	ldr	r3, [pc, #228]	@ (8007c80 <_tx_semaphore_delete+0x118>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e013      	b.n	8007bc8 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bb0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bb6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8007bb8:	4b31      	ldr	r3, [pc, #196]	@ (8007c80 <_tx_semaphore_delete+0x118>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d102      	bne.n	8007bc8 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8007bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c80 <_tx_semaphore_delete+0x118>)
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	4a2d      	ldr	r2, [pc, #180]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007bd0:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	647b      	str	r3, [r7, #68]	@ 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	643b      	str	r3, [r7, #64]	@ 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	611a      	str	r2, [r3, #16]
 8007bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	f383 8810 	msr	PRIMASK, r3
}
 8007bf4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8007bf6:	e024      	b.n	8007c42 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8007c02:	61fb      	str	r3, [r7, #28]
    return(posture);
 8007c04:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8007c06:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c08:	b672      	cpsid	i
    return(int_posture);
 8007c0a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8007c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c10:	2200      	movs	r2, #0
 8007c12:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c20:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007c22:	4b18      	ldr	r3, [pc, #96]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	4a16      	ldr	r2, [pc, #88]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	f383 8810 	msr	PRIMASK, r3
}
 8007c36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007c38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007c3a:	f000 fab5 	bl	80081a8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 8007c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1d7      	bne.n	8007bf8 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c48:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4c:	613b      	str	r3, [r7, #16]
    return(posture);
 8007c4e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8007c50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c52:	b672      	cpsid	i
    return(int_posture);
 8007c54:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4a09      	ldr	r2, [pc, #36]	@ (8007c84 <_tx_semaphore_delete+0x11c>)
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f383 8810 	msr	PRIMASK, r3
}
 8007c6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8007c6e:	f000 fa61 	bl	8008134 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3748      	adds	r7, #72	@ 0x48
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20010ed8 	.word	0x20010ed8
 8007c80:	20010ed4 	.word	0x20010ed4
 8007c84:	20010fa4 	.word	0x20010fa4

08007c88 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08c      	sub	sp, #48	@ 0x30
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c90:	f3ef 8310 	mrs	r3, PRIMASK
 8007c94:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007c96:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007c98:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c9a:	b672      	cpsid	i
    return(int_posture);
 8007c9c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8007c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	609a      	str	r2, [r3, #8]
 8007cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f383 8810 	msr	PRIMASK, r3
}
 8007cc0:	e033      	b.n	8007d2a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e00e      	b.n	8007cfa <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a3a      	ldr	r2, [r7, #32]
 8007ce6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cec:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	6a3a      	ldr	r2, [r7, #32]
 8007cf8:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cfe:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	2200      	movs	r2, #0
 8007d04:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <_tx_semaphore_put+0xac>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a07      	ldr	r2, [pc, #28]	@ (8007d34 <_tx_semaphore_put+0xac>)
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f383 8810 	msr	PRIMASK, r3
}
 8007d22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007d24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d26:	f000 fa3f 	bl	80081a8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3730      	adds	r7, #48	@ 0x30
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20010fa4 	.word	0x20010fa4

08007d38 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b092      	sub	sp, #72	@ 0x48
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8007d46:	2300      	movs	r3, #0
 8007d48:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d4c:	21ef      	movs	r1, #239	@ 0xef
 8007d4e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007d50:	f005 fb60 	bl	800d414 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007d54:	22b0      	movs	r2, #176	@ 0xb0
 8007d56:	2100      	movs	r1, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f005 fb5b 	bl	800d414 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d74:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d7a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d8e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d94:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da4:	3b01      	subs	r3, #1
 8007da6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007da8:	4413      	add	r3, r2
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007db0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d007      	beq.n	8007dca <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007dc8:	e006      	b.n	8007dd8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dce:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dd4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4a48      	ldr	r2, [pc, #288]	@ (8007f04 <_tx_thread_create+0x1cc>)
 8007de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007dea:	4947      	ldr	r1, [pc, #284]	@ (8007f08 <_tx_thread_create+0x1d0>)
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7f8 faf1 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007df2:	f3ef 8310 	mrs	r3, PRIMASK
 8007df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007dfc:	b672      	cpsid	i
    return(int_posture);
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007e00:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a41      	ldr	r2, [pc, #260]	@ (8007f0c <_tx_thread_create+0x1d4>)
 8007e06:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007e08:	4b41      	ldr	r3, [pc, #260]	@ (8007f10 <_tx_thread_create+0x1d8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10b      	bne.n	8007e28 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007e10:	4a40      	ldr	r2, [pc, #256]	@ (8007f14 <_tx_thread_create+0x1dc>)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8007e26:	e016      	b.n	8007e56 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007e28:	4b3a      	ldr	r3, [pc, #232]	@ (8007f14 <_tx_thread_create+0x1dc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e34:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8007e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8007e56:	4b2e      	ldr	r3, [pc, #184]	@ (8007f10 <_tx_thread_create+0x1d8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f10 <_tx_thread_create+0x1d8>)
 8007e5e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007e60:	4b2d      	ldr	r3, [pc, #180]	@ (8007f18 <_tx_thread_create+0x1e0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a2c      	ldr	r2, [pc, #176]	@ (8007f18 <_tx_thread_create+0x1e0>)
 8007e68:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8007e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d129      	bne.n	8007ec4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007e70:	f3ef 8305 	mrs	r3, IPSR
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8007e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8007e78:	4b28      	ldr	r3, [pc, #160]	@ (8007f1c <_tx_thread_create+0x1e4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8007e82:	d30d      	bcc.n	8007ea0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8007e84:	4b26      	ldr	r3, [pc, #152]	@ (8007f20 <_tx_thread_create+0x1e8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8007e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8007e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e94:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8007e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007e9e:	e001      	b.n	8007ea4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f383 8810 	msr	PRIMASK, r3
}
 8007eae:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f979 	bl	80081a8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8007eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01e      	beq.n	8007efa <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ec2:	e01a      	b.n	8007efa <_tx_thread_create+0x1c2>
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f383 8810 	msr	PRIMASK, r3
}
 8007ece:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007ed6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007ed8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007eda:	b672      	cpsid	i
    return(int_posture);
 8007edc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8007ede:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8007f18 <_tx_thread_create+0x1e0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f18 <_tx_thread_create+0x1e0>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	f383 8810 	msr	PRIMASK, r3
}
 8007ef4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007ef6:	f000 f91d 	bl	8008134 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3748      	adds	r7, #72	@ 0x48
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	0800867d 	.word	0x0800867d
 8007f08:	08007f9d 	.word	0x08007f9d
 8007f0c:	54485244 	.word	0x54485244
 8007f10:	20010f18 	.word	0x20010f18
 8007f14:	20010f14 	.word	0x20010f14
 8007f18:	20010fa4 	.word	0x20010fa4
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	20010f10 	.word	0x20010f10

08007f24 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007f28:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <_tx_thread_initialize+0x50>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007f2e:	4b12      	ldr	r3, [pc, #72]	@ (8007f78 <_tx_thread_initialize+0x54>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8007f34:	4b11      	ldr	r3, [pc, #68]	@ (8007f7c <_tx_thread_initialize+0x58>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007f3a:	4b11      	ldr	r3, [pc, #68]	@ (8007f80 <_tx_thread_initialize+0x5c>)
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	2100      	movs	r1, #0
 8007f44:	480f      	ldr	r0, [pc, #60]	@ (8007f84 <_tx_thread_initialize+0x60>)
 8007f46:	f005 fa65 	bl	800d414 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8007f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f88 <_tx_thread_initialize+0x64>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	@ (8007f8c <_tx_thread_initialize+0x68>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8007f56:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <_tx_thread_initialize+0x6c>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f94 <_tx_thread_initialize+0x70>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8007f62:	4b0d      	ldr	r3, [pc, #52]	@ (8007f98 <_tx_thread_initialize+0x74>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8007f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8007f98 <_tx_thread_initialize+0x74>)
 8007f6c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8007f6e:	bf00      	nop
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20010f0c 	.word	0x20010f0c
 8007f78:	20010f10 	.word	0x20010f10
 8007f7c:	20010f1c 	.word	0x20010f1c
 8007f80:	20010f20 	.word	0x20010f20
 8007f84:	20010f24 	.word	0x20010f24
 8007f88:	20010f14 	.word	0x20010f14
 8007f8c:	20010f18 	.word	0x20010f18
 8007f90:	20010fa4 	.word	0x20010fa4
 8007f94:	20010fa8 	.word	0x20010fa8
 8007f98:	20010fac 	.word	0x20010fac

08007f9c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007fa2:	4b21      	ldr	r3, [pc, #132]	@ (8008028 <_tx_thread_shell_entry+0x8c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800802c <_tx_thread_shell_entry+0x90>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8007fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800802c <_tx_thread_shell_entry+0x90>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69f8      	ldr	r0, [r7, #28]
 8007fc2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fc8:	607b      	str	r3, [r7, #4]
    return(posture);
 8007fca:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8007fcc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007fce:	b672      	cpsid	i
    return(int_posture);
 8007fd0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8007fd2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007fe6:	4b12      	ldr	r3, [pc, #72]	@ (8008030 <_tx_thread_shell_entry+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	4a10      	ldr	r2, [pc, #64]	@ (8008030 <_tx_thread_shell_entry+0x94>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8007ffc:	f3ef 8314 	mrs	r3, CONTROL
 8008000:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8008002:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 0304 	bic.w	r3, r3, #4
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f383 8814 	msr	CONTROL, r3
}
 8008018:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f000 f9c4 	bl	80083a8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008020:	bf00      	nop
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20010f0c 	.word	0x20010f0c
 800802c:	20010fa8 	.word	0x20010fa8
 8008030:	20010fa4 	.word	0x20010fa4

08008034 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	@ 0x38
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800803c:	f3ef 8310 	mrs	r3, PRIMASK
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008046:	b672      	cpsid	i
    return(int_posture);
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800804a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800804c:	4b35      	ldr	r3, [pc, #212]	@ (8008124 <_tx_thread_sleep+0xf0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8008052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <_tx_thread_sleep+0x36>
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	f383 8810 	msr	PRIMASK, r3
}
 8008062:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008064:	2313      	movs	r3, #19
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
 8008068:	e056      	b.n	8008118 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800806a:	f3ef 8305 	mrs	r3, IPSR
 800806e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008070:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008072:	4b2d      	ldr	r3, [pc, #180]	@ (8008128 <_tx_thread_sleep+0xf4>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4313      	orrs	r3, r2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <_tx_thread_sleep+0x5a>
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f383 8810 	msr	PRIMASK, r3
}
 8008086:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008088:	2313      	movs	r3, #19
 800808a:	637b      	str	r3, [r7, #52]	@ 0x34
 800808c:	e044      	b.n	8008118 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	4a26      	ldr	r2, [pc, #152]	@ (800812c <_tx_thread_sleep+0xf8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d108      	bne.n	80080a8 <_tx_thread_sleep+0x74>
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80080a2:	2313      	movs	r3, #19
 80080a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a6:	e037      	b.n	8008118 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <_tx_thread_sleep+0x8c>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80080ba:	2300      	movs	r3, #0
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e02b      	b.n	8008118 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80080c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <_tx_thread_sleep+0xfc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <_tx_thread_sleep+0xa6>
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f383 8810 	msr	PRIMASK, r3
}
 80080d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80080d4:	2313      	movs	r3, #19
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d8:	e01e      	b.n	8008118 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	2204      	movs	r2, #4
 80080de:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80080e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e2:	2201      	movs	r2, #1
 80080e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80080f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008130 <_tx_thread_sleep+0xfc>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008130 <_tx_thread_sleep+0xfc>)
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f383 8810 	msr	PRIMASK, r3
}
 8008108:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800810a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800810c:	f000 f94c 	bl	80083a8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008116:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8008118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800811a:	4618      	mov	r0, r3
 800811c:	3738      	adds	r7, #56	@ 0x38
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20010f0c 	.word	0x20010f0c
 8008128:	2000000c 	.word	0x2000000c
 800812c:	20011054 	.word	0x20011054
 8008130:	20010fa4 	.word	0x20010fa4

08008134 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	@ 0x24
 8008138:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800813a:	4b17      	ldr	r3, [pc, #92]	@ (8008198 <_tx_thread_system_preempt_check+0x64>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d121      	bne.n	800818a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <_tx_thread_system_preempt_check+0x68>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800814c:	4b14      	ldr	r3, [pc, #80]	@ (80081a0 <_tx_thread_system_preempt_check+0x6c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	429a      	cmp	r2, r3
 8008158:	d017      	beq.n	800818a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800815a:	4b12      	ldr	r3, [pc, #72]	@ (80081a4 <_tx_thread_system_preempt_check+0x70>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008162:	f3ef 8305 	mrs	r3, IPSR
 8008166:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008168:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10c      	bne.n	8008188 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800816e:	f3ef 8310 	mrs	r3, PRIMASK
 8008172:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008174:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8008176:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008178:	b662      	cpsie	i
}
 800817a:	bf00      	nop
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f383 8810 	msr	PRIMASK, r3
}
 8008186:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008188:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800818a:	bf00      	nop
 800818c:	3724      	adds	r7, #36	@ 0x24
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20010fa4 	.word	0x20010fa4
 800819c:	20010f0c 	.word	0x20010f0c
 80081a0:	20010f10 	.word	0x20010f10
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b096      	sub	sp, #88	@ 0x58
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081b0:	f3ef 8310 	mrs	r3, PRIMASK
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 80081b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 80081b8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80081ba:	b672      	cpsid	i
    return(int_posture);
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80081be:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	334c      	adds	r3, #76	@ 0x4c
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fb91 	bl	80088f4 <_tx_timer_system_deactivate>
 80081d2:	e002      	b.n	80081da <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80081da:	4b6c      	ldr	r3, [pc, #432]	@ (800838c <_tx_thread_system_resume+0x1e4>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3b01      	subs	r3, #1
 80081e0:	4a6a      	ldr	r2, [pc, #424]	@ (800838c <_tx_thread_system_resume+0x1e4>)
 80081e2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f040 8083 	bne.w	80082f4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8097 	beq.w	8008326 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d172      	bne.n	80082e6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800820c:	4a60      	ldr	r2, [pc, #384]	@ (8008390 <_tx_thread_system_resume+0x1e8>)
 800820e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008214:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8008216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d154      	bne.n	80082c6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800821c:	495c      	ldr	r1, [pc, #368]	@ (8008390 <_tx_thread_system_resume+0x1e8>)
 800821e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008232:	2201      	movs	r2, #1
 8008234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008236:	fa02 f303 	lsl.w	r3, r2, r3
 800823a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800823c:	4b55      	ldr	r3, [pc, #340]	@ (8008394 <_tx_thread_system_resume+0x1ec>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008242:	4313      	orrs	r3, r2
 8008244:	4a53      	ldr	r2, [pc, #332]	@ (8008394 <_tx_thread_system_resume+0x1ec>)
 8008246:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8008248:	4b53      	ldr	r3, [pc, #332]	@ (8008398 <_tx_thread_system_resume+0x1f0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800824e:	429a      	cmp	r2, r3
 8008250:	d269      	bcs.n	8008326 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008252:	4a51      	ldr	r2, [pc, #324]	@ (8008398 <_tx_thread_system_resume+0x1f0>)
 8008254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008256:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8008258:	4b50      	ldr	r3, [pc, #320]	@ (800839c <_tx_thread_system_resume+0x1f4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800825e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008264:	4a4d      	ldr	r2, [pc, #308]	@ (800839c <_tx_thread_system_resume+0x1f4>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e05c      	b.n	8008326 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800826c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800826e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008270:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008272:	429a      	cmp	r2, r3
 8008274:	d257      	bcs.n	8008326 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8008276:	4a49      	ldr	r2, [pc, #292]	@ (800839c <_tx_thread_system_resume+0x1f4>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800827e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008282:	f383 8810 	msr	PRIMASK, r3
}
 8008286:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008288:	4b40      	ldr	r3, [pc, #256]	@ (800838c <_tx_thread_system_resume+0x1e4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800828e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d174      	bne.n	800837e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008294:	4b42      	ldr	r3, [pc, #264]	@ (80083a0 <_tx_thread_system_resume+0x1f8>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800829c:	f3ef 8305 	mrs	r3, IPSR
 80082a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 80082a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10c      	bne.n	80082c2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082a8:	f3ef 8310 	mrs	r3, PRIMASK
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 80082b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80082b2:	b662      	cpsie	i
}
 80082b4:	bf00      	nop
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	bf00      	nop
}
 80082c2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80082c4:	e05b      	b.n	800837e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80082c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ca:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80082cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80082d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082dc:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082e2:	621a      	str	r2, [r3, #32]
 80082e4:	e01f      	b.n	8008326 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2203      	movs	r2, #3
 80082f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80082f2:	e018      	b.n	8008326 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d014      	beq.n	8008326 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008300:	2b02      	cmp	r3, #2
 8008302:	d010      	beq.n	8008326 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008308:	2b00      	cmp	r3, #0
 800830a:	d106      	bne.n	800831a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
 8008318:	e005      	b.n	8008326 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2203      	movs	r2, #3
 8008324:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008326:	4b1f      	ldr	r3, [pc, #124]	@ (80083a4 <_tx_thread_system_resume+0x1fc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800832c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800832e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f383 8810 	msr	PRIMASK, r3
}
 8008336:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008338:	4b18      	ldr	r3, [pc, #96]	@ (800839c <_tx_thread_system_resume+0x1f4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800833e:	429a      	cmp	r2, r3
 8008340:	d020      	beq.n	8008384 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008342:	4b12      	ldr	r3, [pc, #72]	@ (800838c <_tx_thread_system_resume+0x1e4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8008348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d11a      	bne.n	8008384 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800834e:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <_tx_thread_system_resume+0x1f8>)
 8008350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008354:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008356:	f3ef 8305 	mrs	r3, IPSR
 800835a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800835c:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10f      	bne.n	8008382 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008362:	f3ef 8310 	mrs	r3, PRIMASK
 8008366:	613b      	str	r3, [r7, #16]
    return(posture);
 8008368:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800836a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800836c:	b662      	cpsie	i
}
 800836e:	bf00      	nop
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	bf00      	nop
}
 800837c:	e001      	b.n	8008382 <_tx_thread_system_resume+0x1da>
                                return;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <_tx_thread_system_resume+0x1dc>
 8008382:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8008384:	3758      	adds	r7, #88	@ 0x58
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20010fa4 	.word	0x20010fa4
 8008390:	20010f24 	.word	0x20010f24
 8008394:	20010f1c 	.word	0x20010f1c
 8008398:	20010f20 	.word	0x20010f20
 800839c:	20010f10 	.word	0x20010f10
 80083a0:	e000ed04 	.word	0xe000ed04
 80083a4:	20010f0c 	.word	0x20010f0c

080083a8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b09e      	sub	sp, #120	@ 0x78
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80083b0:	4b81      	ldr	r3, [pc, #516]	@ (80085b8 <_tx_thread_system_suspend+0x210>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083b6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 80083bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 80083be:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80083c0:	b672      	cpsid	i
    return(int_posture);
 80083c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80083c4:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d112      	bne.n	80083f4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80083d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d008      	beq.n	80083ec <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80083da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d004      	beq.n	80083ec <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	334c      	adds	r3, #76	@ 0x4c
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fa22 	bl	8008830 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	4a72      	ldr	r2, [pc, #456]	@ (80085bc <_tx_thread_system_suspend+0x214>)
 80083f2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80083f4:	4b72      	ldr	r3, [pc, #456]	@ (80085c0 <_tx_thread_system_suspend+0x218>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	4a71      	ldr	r2, [pc, #452]	@ (80085c0 <_tx_thread_system_suspend+0x218>)
 80083fc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	2b01      	cmp	r3, #1
 8008404:	f040 80a6 	bne.w	8008554 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800841a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	429a      	cmp	r2, r3
 8008420:	d015      	beq.n	800844e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008426:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800842a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800842c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800842e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008430:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008432:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008434:	4a63      	ldr	r2, [pc, #396]	@ (80085c4 <_tx_thread_system_suspend+0x21c>)
 8008436:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d157      	bne.n	80084f2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8008442:	4960      	ldr	r1, [pc, #384]	@ (80085c4 <_tx_thread_system_suspend+0x21c>)
 8008444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008446:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800844c:	e051      	b.n	80084f2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800844e:	4a5d      	ldr	r2, [pc, #372]	@ (80085c4 <_tx_thread_system_suspend+0x21c>)
 8008450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008452:	2100      	movs	r1, #0
 8008454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8008458:	2201      	movs	r2, #1
 800845a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008462:	4b59      	ldr	r3, [pc, #356]	@ (80085c8 <_tx_thread_system_suspend+0x220>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008468:	43db      	mvns	r3, r3
 800846a:	4013      	ands	r3, r2
 800846c:	4a56      	ldr	r2, [pc, #344]	@ (80085c8 <_tx_thread_system_suspend+0x220>)
 800846e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8008470:	2300      	movs	r3, #0
 8008472:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8008474:	4b54      	ldr	r3, [pc, #336]	@ (80085c8 <_tx_thread_system_suspend+0x220>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800847a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847c:	2b00      	cmp	r3, #0
 800847e:	d12b      	bne.n	80084d8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008480:	4b52      	ldr	r3, [pc, #328]	@ (80085cc <_tx_thread_system_suspend+0x224>)
 8008482:	2220      	movs	r2, #32
 8008484:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8008486:	4b52      	ldr	r3, [pc, #328]	@ (80085d0 <_tx_thread_system_suspend+0x228>)
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800848e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008492:	f383 8810 	msr	PRIMASK, r3
}
 8008496:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008498:	4b49      	ldr	r3, [pc, #292]	@ (80085c0 <_tx_thread_system_suspend+0x218>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800849e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8081 	bne.w	80085a8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80084a6:	4b4b      	ldr	r3, [pc, #300]	@ (80085d4 <_tx_thread_system_suspend+0x22c>)
 80084a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ac:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 80084b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 80084c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80084c4:	b662      	cpsie	i
}
 80084c6:	bf00      	nop
 80084c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ca:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ce:	f383 8810 	msr	PRIMASK, r3
}
 80084d2:	bf00      	nop
}
 80084d4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80084d6:	e067      	b.n	80085a8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80084d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084da:	fa93 f3a3 	rbit	r3, r3
 80084de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e2:	fab3 f383 	clz	r3, r3
 80084e6:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80084e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80084ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084ec:	4413      	add	r3, r2
 80084ee:	4a37      	ldr	r2, [pc, #220]	@ (80085cc <_tx_thread_system_suspend+0x224>)
 80084f0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80084f2:	4b37      	ldr	r3, [pc, #220]	@ (80085d0 <_tx_thread_system_suspend+0x228>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d12b      	bne.n	8008554 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80084fc:	4b33      	ldr	r3, [pc, #204]	@ (80085cc <_tx_thread_system_suspend+0x224>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a30      	ldr	r2, [pc, #192]	@ (80085c4 <_tx_thread_system_suspend+0x21c>)
 8008502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008506:	4a32      	ldr	r2, [pc, #200]	@ (80085d0 <_tx_thread_system_suspend+0x228>)
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800850c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	f383 8810 	msr	PRIMASK, r3
}
 8008514:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008516:	4b2a      	ldr	r3, [pc, #168]	@ (80085c0 <_tx_thread_system_suspend+0x218>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800851c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800851e:	2b00      	cmp	r3, #0
 8008520:	d144      	bne.n	80085ac <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008522:	4b2c      	ldr	r3, [pc, #176]	@ (80085d4 <_tx_thread_system_suspend+0x22c>)
 8008524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008528:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800852a:	f3ef 8305 	mrs	r3, IPSR
 800852e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10c      	bne.n	8008550 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008536:	f3ef 8310 	mrs	r3, PRIMASK
 800853a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800853e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008540:	b662      	cpsie	i
}
 8008542:	bf00      	nop
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	bf00      	nop
}
 8008550:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008552:	e02b      	b.n	80085ac <_tx_thread_system_suspend+0x204>
 8008554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008556:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008560:	4b1b      	ldr	r3, [pc, #108]	@ (80085d0 <_tx_thread_system_suspend+0x228>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008566:	429a      	cmp	r2, r3
 8008568:	d022      	beq.n	80085b0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800856a:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <_tx_thread_system_suspend+0x218>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8008570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008572:	2b00      	cmp	r3, #0
 8008574:	d11c      	bne.n	80085b0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008576:	4b17      	ldr	r3, [pc, #92]	@ (80085d4 <_tx_thread_system_suspend+0x22c>)
 8008578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800857c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008584:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10c      	bne.n	80085a4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800858a:	f3ef 8310 	mrs	r3, PRIMASK
 800858e:	617b      	str	r3, [r7, #20]
    return(posture);
 8008590:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8008592:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008594:	b662      	cpsie	i
}
 8008596:	bf00      	nop
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	bf00      	nop
}
 80085a4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80085a6:	e003      	b.n	80085b0 <_tx_thread_system_suspend+0x208>
                return;
 80085a8:	bf00      	nop
 80085aa:	e002      	b.n	80085b2 <_tx_thread_system_suspend+0x20a>
            return;
 80085ac:	bf00      	nop
 80085ae:	e000      	b.n	80085b2 <_tx_thread_system_suspend+0x20a>
    return;
 80085b0:	bf00      	nop
}
 80085b2:	3778      	adds	r7, #120	@ 0x78
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20010f0c 	.word	0x20010f0c
 80085bc:	20011510 	.word	0x20011510
 80085c0:	20010fa4 	.word	0x20010fa4
 80085c4:	20010f24 	.word	0x20010f24
 80085c8:	20010f1c 	.word	0x20010f1c
 80085cc:	20010f20 	.word	0x20010f20
 80085d0:	20010f10 	.word	0x20010f10
 80085d4:	e000ed04 	.word	0xe000ed04

080085d8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80085de:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <_tx_thread_time_slice+0x8c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085e4:	f3ef 8310 	mrs	r3, PRIMASK
 80085e8:	60fb      	str	r3, [r7, #12]
    return(posture);
 80085ea:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80085ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80085ee:	b672      	cpsid	i
    return(int_posture);
 80085f0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80085f2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80085f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008668 <_tx_thread_time_slice+0x90>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d024      	beq.n	800864a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008604:	2b00      	cmp	r3, #0
 8008606:	d120      	bne.n	800864a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	4a15      	ldr	r2, [pc, #84]	@ (800866c <_tx_thread_time_slice+0x94>)
 8008616:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	429a      	cmp	r2, r3
 8008620:	d013      	beq.n	800864a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862a:	429a      	cmp	r2, r3
 800862c:	d10d      	bne.n	800864a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	6a12      	ldr	r2, [r2, #32]
 8008636:	490e      	ldr	r1, [pc, #56]	@ (8008670 <_tx_thread_time_slice+0x98>)
 8008638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800863c:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <_tx_thread_time_slice+0x9c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0b      	ldr	r2, [pc, #44]	@ (8008670 <_tx_thread_time_slice+0x98>)
 8008642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008646:	4a0c      	ldr	r2, [pc, #48]	@ (8008678 <_tx_thread_time_slice+0xa0>)
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f383 8810 	msr	PRIMASK, r3
}
 8008654:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20010f0c 	.word	0x20010f0c
 8008668:	20010fb4 	.word	0x20010fb4
 800866c:	20011510 	.word	0x20011510
 8008670:	20010f24 	.word	0x20010f24
 8008674:	20010f20 	.word	0x20010f20
 8008678:	20010f10 	.word	0x20010f10

0800867c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	@ 0x28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008688:	f3ef 8310 	mrs	r3, PRIMASK
 800868c:	617b      	str	r3, [r7, #20]
    return(posture);
 800868e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008690:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008692:	b672      	cpsid	i
    return(int_posture);
 8008694:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008696:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869c:	2b04      	cmp	r3, #4
 800869e:	d10e      	bne.n	80086be <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80086a0:	4b13      	ldr	r3, [pc, #76]	@ (80086f0 <_tx_thread_timeout+0x74>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	4a12      	ldr	r2, [pc, #72]	@ (80086f0 <_tx_thread_timeout+0x74>)
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f383 8810 	msr	PRIMASK, r3
}
 80086b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80086b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086b8:	f7ff fd76 	bl	80081a8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80086bc:	e013      	b.n	80086e6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086c2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f383 8810 	msr	PRIMASK, r3
}
 80086d6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	69b9      	ldr	r1, [r7, #24]
 80086e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086e4:	4798      	blx	r3
}
 80086e6:	bf00      	nop
 80086e8:	3728      	adds	r7, #40	@ 0x28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20010fa4 	.word	0x20010fa4

080086f4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80086fa:	f3ef 8310 	mrs	r3, PRIMASK
 80086fe:	607b      	str	r3, [r7, #4]
    return(posture);
 8008700:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8008702:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008704:	b672      	cpsid	i
    return(int_posture);
 8008706:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8008708:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <_tx_timer_expiration_process+0x3c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	4a07      	ldr	r2, [pc, #28]	@ (8008730 <_tx_timer_expiration_process+0x3c>)
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8008720:	4804      	ldr	r0, [pc, #16]	@ (8008734 <_tx_timer_expiration_process+0x40>)
 8008722:	f7ff fd41 	bl	80081a8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20010fa4 	.word	0x20010fa4
 8008734:	20011054 	.word	0x20011054

08008738 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8008738:	b590      	push	{r4, r7, lr}
 800873a:	b089      	sub	sp, #36	@ 0x24
 800873c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800873e:	4b28      	ldr	r3, [pc, #160]	@ (80087e0 <_tx_timer_initialize+0xa8>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8008744:	4b27      	ldr	r3, [pc, #156]	@ (80087e4 <_tx_timer_initialize+0xac>)
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800874a:	4b27      	ldr	r3, [pc, #156]	@ (80087e8 <_tx_timer_initialize+0xb0>)
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8008750:	4b26      	ldr	r3, [pc, #152]	@ (80087ec <_tx_timer_initialize+0xb4>)
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8008756:	4b26      	ldr	r3, [pc, #152]	@ (80087f0 <_tx_timer_initialize+0xb8>)
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800875c:	2280      	movs	r2, #128	@ 0x80
 800875e:	2100      	movs	r1, #0
 8008760:	4824      	ldr	r0, [pc, #144]	@ (80087f4 <_tx_timer_initialize+0xbc>)
 8008762:	f004 fe57 	bl	800d414 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8008766:	4b24      	ldr	r3, [pc, #144]	@ (80087f8 <_tx_timer_initialize+0xc0>)
 8008768:	4a22      	ldr	r2, [pc, #136]	@ (80087f4 <_tx_timer_initialize+0xbc>)
 800876a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800876c:	4b23      	ldr	r3, [pc, #140]	@ (80087fc <_tx_timer_initialize+0xc4>)
 800876e:	4a21      	ldr	r2, [pc, #132]	@ (80087f4 <_tx_timer_initialize+0xbc>)
 8008770:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8008772:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <_tx_timer_initialize+0xc8>)
 8008774:	4a23      	ldr	r2, [pc, #140]	@ (8008804 <_tx_timer_initialize+0xcc>)
 8008776:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8008778:	4b21      	ldr	r3, [pc, #132]	@ (8008800 <_tx_timer_initialize+0xc8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3304      	adds	r3, #4
 800877e:	4a20      	ldr	r2, [pc, #128]	@ (8008800 <_tx_timer_initialize+0xc8>)
 8008780:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8008782:	4b21      	ldr	r3, [pc, #132]	@ (8008808 <_tx_timer_initialize+0xd0>)
 8008784:	4a21      	ldr	r2, [pc, #132]	@ (800880c <_tx_timer_initialize+0xd4>)
 8008786:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8008788:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <_tx_timer_initialize+0xd8>)
 800878a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800878e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8008790:	4b20      	ldr	r3, [pc, #128]	@ (8008814 <_tx_timer_initialize+0xdc>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8008796:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <_tx_timer_initialize+0xd0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1d      	ldr	r2, [pc, #116]	@ (8008810 <_tx_timer_initialize+0xd8>)
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	491d      	ldr	r1, [pc, #116]	@ (8008814 <_tx_timer_initialize+0xdc>)
 80087a0:	6809      	ldr	r1, [r1, #0]
 80087a2:	481c      	ldr	r0, [pc, #112]	@ (8008814 <_tx_timer_initialize+0xdc>)
 80087a4:	6800      	ldr	r0, [r0, #0]
 80087a6:	2400      	movs	r4, #0
 80087a8:	9405      	str	r4, [sp, #20]
 80087aa:	2400      	movs	r4, #0
 80087ac:	9404      	str	r4, [sp, #16]
 80087ae:	9003      	str	r0, [sp, #12]
 80087b0:	9102      	str	r1, [sp, #8]
 80087b2:	9201      	str	r2, [sp, #4]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4b18      	ldr	r3, [pc, #96]	@ (8008818 <_tx_timer_initialize+0xe0>)
 80087b8:	4a18      	ldr	r2, [pc, #96]	@ (800881c <_tx_timer_initialize+0xe4>)
 80087ba:	4919      	ldr	r1, [pc, #100]	@ (8008820 <_tx_timer_initialize+0xe8>)
 80087bc:	4819      	ldr	r0, [pc, #100]	@ (8008824 <_tx_timer_initialize+0xec>)
 80087be:	f7ff fabb 	bl	8007d38 <_tx_thread_create>
 80087c2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e5      	bne.n	8008796 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80087ca:	4b17      	ldr	r3, [pc, #92]	@ (8008828 <_tx_timer_initialize+0xf0>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80087d0:	4b16      	ldr	r3, [pc, #88]	@ (800882c <_tx_timer_initialize+0xf4>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd90      	pop	{r4, r7, pc}
 80087de:	bf00      	nop
 80087e0:	20010fb0 	.word	0x20010fb0
 80087e4:	20011510 	.word	0x20011510
 80087e8:	20010fb4 	.word	0x20010fb4
 80087ec:	20011044 	.word	0x20011044
 80087f0:	20011050 	.word	0x20011050
 80087f4:	20010fb8 	.word	0x20010fb8
 80087f8:	20011038 	.word	0x20011038
 80087fc:	20011040 	.word	0x20011040
 8008800:	2001103c 	.word	0x2001103c
 8008804:	20011034 	.word	0x20011034
 8008808:	20011104 	.word	0x20011104
 800880c:	20011110 	.word	0x20011110
 8008810:	20011108 	.word	0x20011108
 8008814:	2001110c 	.word	0x2001110c
 8008818:	4154494d 	.word	0x4154494d
 800881c:	08008965 	.word	0x08008965
 8008820:	0800d4b8 	.word	0x0800d4b8
 8008824:	20011054 	.word	0x20011054
 8008828:	20011048 	.word	0x20011048
 800882c:	2001104c 	.word	0x2001104c

08008830 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008830:	b480      	push	{r7}
 8008832:	b089      	sub	sp, #36	@ 0x24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d04a      	beq.n	80088da <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d046      	beq.n	80088da <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d142      	bne.n	80088da <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b20      	cmp	r3, #32
 8008858:	d902      	bls.n	8008860 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800885a:	231f      	movs	r3, #31
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	e002      	b.n	8008866 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3b01      	subs	r3, #1
 8008864:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8008866:	4b20      	ldr	r3, [pc, #128]	@ (80088e8 <_tx_timer_system_activate+0xb8>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008872:	4b1e      	ldr	r3, [pc, #120]	@ (80088ec <_tx_timer_system_activate+0xbc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	429a      	cmp	r2, r3
 800887a:	d30b      	bcc.n	8008894 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800887c:	4b1b      	ldr	r3, [pc, #108]	@ (80088ec <_tx_timer_system_activate+0xbc>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	109b      	asrs	r3, r3, #2
 8008886:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8008888:	4b19      	ldr	r3, [pc, #100]	@ (80088f0 <_tx_timer_system_activate+0xc0>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d109      	bne.n	80088b0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e011      	b.n	80088d4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80088da:	bf00      	nop
 80088dc:	3724      	adds	r7, #36	@ 0x24
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20011040 	.word	0x20011040
 80088ec:	2001103c 	.word	0x2001103c
 80088f0:	20011038 	.word	0x20011038

080088f4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d026      	beq.n	8008956 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	429a      	cmp	r2, r3
 8008914:	d108      	bne.n	8008928 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d117      	bne.n	8008950 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e013      	b.n	8008950 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d105      	bne.n	8008950 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	619a      	str	r2, [r3, #24]
    }
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b098      	sub	sp, #96	@ 0x60
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800896c:	2300      	movs	r3, #0
 800896e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a73      	ldr	r2, [pc, #460]	@ (8008b40 <_tx_timer_thread_entry+0x1dc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	f040 80de 	bne.w	8008b36 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800897a:	f3ef 8310 	mrs	r3, PRIMASK
 800897e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8008980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008984:	b672      	cpsid	i
    return(int_posture);
 8008986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8008988:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800898a:	4b6e      	ldr	r3, [pc, #440]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f107 020c 	add.w	r2, r7, #12
 800899e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80089a0:	4b68      	ldr	r3, [pc, #416]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80089a8:	4b66      	ldr	r3, [pc, #408]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4a65      	ldr	r2, [pc, #404]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 80089b0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80089b2:	4b64      	ldr	r3, [pc, #400]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b64      	ldr	r3, [pc, #400]	@ (8008b48 <_tx_timer_thread_entry+0x1e4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d103      	bne.n	80089c6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80089be:	4b63      	ldr	r3, [pc, #396]	@ (8008b4c <_tx_timer_thread_entry+0x1e8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a60      	ldr	r2, [pc, #384]	@ (8008b44 <_tx_timer_thread_entry+0x1e0>)
 80089c4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80089c6:	4b62      	ldr	r3, [pc, #392]	@ (8008b50 <_tx_timer_thread_entry+0x1ec>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089ce:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f383 8810 	msr	PRIMASK, r3
}
 80089d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089d8:	f3ef 8310 	mrs	r3, PRIMASK
 80089dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80089e2:	b672      	cpsid	i
    return(int_posture);
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80089e6:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80089e8:	e07f      	b.n	8008aea <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80089f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d102      	bne.n	8008a06 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e00e      	b.n	8008a24 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8008a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a10:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a16:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8008a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1a:	f107 020c 	add.w	r2, r7, #12
 8008a1e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8008a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a22:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d911      	bls.n	8008a50 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a36:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3e:	f107 0208 	add.w	r2, r7, #8
 8008a42:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a48:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a4c:	60bb      	str	r3, [r7, #8]
 8008a4e:	e01a      	b.n	8008a86 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8008a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a62:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8008a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a6e:	f107 0208 	add.w	r2, r7, #8
 8008a72:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8008a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a78:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8008a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	e002      	b.n	8008a86 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a82:	2200      	movs	r2, #0
 8008a84:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8008a86:	4a33      	ldr	r2, [pc, #204]	@ (8008b54 <_tx_timer_thread_entry+0x1f0>)
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	f383 8810 	msr	PRIMASK, r3
}
 8008a96:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8008a98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8008a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008aa0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008aa2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008aac:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008aae:	b672      	cpsid	i
    return(int_posture);
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008ab4:	4b27      	ldr	r3, [pc, #156]	@ (8008b54 <_tx_timer_thread_entry+0x1f0>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d105      	bne.n	8008ace <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8008ac8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008aca:	f7ff feb1 	bl	8008830 <_tx_timer_system_activate>
 8008ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ad0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	f383 8810 	msr	PRIMASK, r3
}
 8008ad8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ada:	f3ef 8310 	mrs	r3, PRIMASK
 8008ade:	623b      	str	r3, [r7, #32]
    return(posture);
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008ae2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ae4:	b672      	cpsid	i
    return(int_posture);
 8008ae6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f af7c 	bne.w	80089ea <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008af2:	4b17      	ldr	r3, [pc, #92]	@ (8008b50 <_tx_timer_thread_entry+0x1ec>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d116      	bne.n	8008b28 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8008afa:	4b17      	ldr	r3, [pc, #92]	@ (8008b58 <_tx_timer_thread_entry+0x1f4>)
 8008afc:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b00:	2203      	movs	r2, #3
 8008b02:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b06:	2201      	movs	r2, #1
 8008b08:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8008b0a:	4b14      	ldr	r3, [pc, #80]	@ (8008b5c <_tx_timer_thread_entry+0x1f8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	4a12      	ldr	r2, [pc, #72]	@ (8008b5c <_tx_timer_thread_entry+0x1f8>)
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f383 8810 	msr	PRIMASK, r3
}
 8008b1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008b20:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008b22:	f7ff fc41 	bl	80083a8 <_tx_thread_system_suspend>
 8008b26:	e728      	b.n	800897a <_tx_timer_thread_entry+0x16>
 8008b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f383 8810 	msr	PRIMASK, r3
}
 8008b32:	bf00      	nop
            TX_DISABLE
 8008b34:	e721      	b.n	800897a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8008b36:	bf00      	nop
 8008b38:	3760      	adds	r7, #96	@ 0x60
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	4154494d 	.word	0x4154494d
 8008b44:	20011040 	.word	0x20011040
 8008b48:	2001103c 	.word	0x2001103c
 8008b4c:	20011038 	.word	0x20011038
 8008b50:	20011044 	.word	0x20011044
 8008b54:	20011050 	.word	0x20011050
 8008b58:	20011054 	.word	0x20011054
 8008b5c:	20010fa4 	.word	0x20010fa4

08008b60 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b7c:	e029      	b.n	8008bd2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a2d      	ldr	r2, [pc, #180]	@ (8008c38 <_txe_byte_allocate+0xd8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d002      	beq.n	8008b8e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8c:	e021      	b.n	8008bd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8008b94:	2303      	movs	r3, #3
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b98:	e01b      	b.n	8008bd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008ba0:	2305      	movs	r3, #5
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ba4:	e015      	b.n	8008bd2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d902      	bls.n	8008bb6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008bb0:	2305      	movs	r3, #5
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb4:	e00d      	b.n	8008bd2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bbc:	f3ef 8305 	mrs	r3, IPSR
 8008bc0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008bc2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c3c <_txe_byte_allocate+0xdc>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008bce:	2304      	movs	r3, #4
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d108      	bne.n	8008bea <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008bd8:	4b19      	ldr	r3, [pc, #100]	@ (8008c40 <_txe_byte_allocate+0xe0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	4a18      	ldr	r2, [pc, #96]	@ (8008c44 <_txe_byte_allocate+0xe4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d101      	bne.n	8008bea <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008be6:	2313      	movs	r3, #19
 8008be8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d114      	bne.n	8008c1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bf0:	f3ef 8305 	mrs	r3, IPSR
 8008bf4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008bf6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008bf8:	4b10      	ldr	r3, [pc, #64]	@ (8008c3c <_txe_byte_allocate+0xdc>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c02:	f3ef 8305 	mrs	r3, IPSR
 8008c06:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008c08:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c3c <_txe_byte_allocate+0xdc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008c14:	d201      	bcs.n	8008c1a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008c16:	2313      	movs	r3, #19
 8008c18:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7fd fd96 	bl	8006758 <_tx_byte_allocate>
 8008c2c:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3728      	adds	r7, #40	@ 0x28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	42595445 	.word	0x42595445
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	20010f0c 	.word	0x20010f0c
 8008c44:	20011054 	.word	0x20011054

08008c48 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b092      	sub	sp, #72	@ 0x48
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008c56:	2300      	movs	r3, #0
 8008c58:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c60:	2302      	movs	r3, #2
 8008c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c64:	e075      	b.n	8008d52 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8008c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c68:	2b34      	cmp	r3, #52	@ 0x34
 8008c6a:	d002      	beq.n	8008c72 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c70:	e06f      	b.n	8008d52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c72:	f3ef 8310 	mrs	r3, PRIMASK
 8008c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8008c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c7c:	b672      	cpsid	i
    return(int_posture);
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008c80:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008c82:	4b3b      	ldr	r3, [pc, #236]	@ (8008d70 <_txe_byte_pool_create+0x128>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3301      	adds	r3, #1
 8008c88:	4a39      	ldr	r2, [pc, #228]	@ (8008d70 <_txe_byte_pool_create+0x128>)
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f383 8810 	msr	PRIMASK, r3
}
 8008c96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008c98:	4b36      	ldr	r3, [pc, #216]	@ (8008d74 <_txe_byte_pool_create+0x12c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ca2:	e009      	b.n	8008cb8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d00b      	beq.n	8008cc4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8008d78 <_txe_byte_pool_create+0x130>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d3f0      	bcc.n	8008ca4 <_txe_byte_pool_create+0x5c>
 8008cc2:	e000      	b.n	8008cc6 <_txe_byte_pool_create+0x7e>
                break;
 8008cc4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cca:	623b      	str	r3, [r7, #32]
    return(posture);
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008cce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008cd0:	b672      	cpsid	i
    return(int_posture);
 8008cd2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008cd6:	4b26      	ldr	r3, [pc, #152]	@ (8008d70 <_txe_byte_pool_create+0x128>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	4a24      	ldr	r2, [pc, #144]	@ (8008d70 <_txe_byte_pool_create+0x128>)
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	f383 8810 	msr	PRIMASK, r3
}
 8008cea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008cec:	f7ff fa22 	bl	8008134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d102      	bne.n	8008cfe <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfc:	e029      	b.n	8008d52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008d04:	2303      	movs	r3, #3
 8008d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d08:	e023      	b.n	8008d52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b63      	cmp	r3, #99	@ 0x63
 8008d0e:	d802      	bhi.n	8008d16 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008d10:	2305      	movs	r3, #5
 8008d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d14:	e01d      	b.n	8008d52 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008d16:	4b19      	ldr	r3, [pc, #100]	@ (8008d7c <_txe_byte_pool_create+0x134>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	4a18      	ldr	r2, [pc, #96]	@ (8008d80 <_txe_byte_pool_create+0x138>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d101      	bne.n	8008d28 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008d24:	2313      	movs	r3, #19
 8008d26:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d28:	f3ef 8305 	mrs	r3, IPSR
 8008d2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008d2e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008d30:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <_txe_byte_pool_create+0x13c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00b      	beq.n	8008d52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d3a:	f3ef 8305 	mrs	r3, IPSR
 8008d3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008d40:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008d42:	4b10      	ldr	r3, [pc, #64]	@ (8008d84 <_txe_byte_pool_create+0x13c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008d4c:	d201      	bcs.n	8008d52 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008d4e:	2313      	movs	r3, #19
 8008d50:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7fd fe3c 	bl	80069dc <_tx_byte_pool_create>
 8008d64:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8008d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3748      	adds	r7, #72	@ 0x48
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20010fa4 	.word	0x20010fa4
 8008d74:	20010efc 	.word	0x20010efc
 8008d78:	20010f00 	.word	0x20010f00
 8008d7c:	20010f0c 	.word	0x20010f0c
 8008d80:	20011054 	.word	0x20011054
 8008d84:	2000000c 	.word	0x2000000c

08008d88 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b092      	sub	sp, #72	@ 0x48
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008d96:	2300      	movs	r3, #0
 8008d98:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d102      	bne.n	8008da6 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008da0:	231c      	movs	r3, #28
 8008da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da4:	e053      	b.n	8008e4e <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b34      	cmp	r3, #52	@ 0x34
 8008daa:	d002      	beq.n	8008db2 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008dac:	231c      	movs	r3, #28
 8008dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db0:	e04d      	b.n	8008e4e <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008db2:	f3ef 8310 	mrs	r3, PRIMASK
 8008db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8008db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008dbc:	b672      	cpsid	i
    return(int_posture);
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008dc0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008eac <_txe_mutex_create+0x124>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a38      	ldr	r2, [pc, #224]	@ (8008eac <_txe_mutex_create+0x124>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8008dd8:	4b35      	ldr	r3, [pc, #212]	@ (8008eb0 <_txe_mutex_create+0x128>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008de2:	e009      	b.n	8008df8 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d00b      	beq.n	8008e04 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8008dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008df4:	3301      	adds	r3, #1
 8008df6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008df8:	4b2e      	ldr	r3, [pc, #184]	@ (8008eb4 <_txe_mutex_create+0x12c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3f0      	bcc.n	8008de4 <_txe_mutex_create+0x5c>
 8008e02:	e000      	b.n	8008e06 <_txe_mutex_create+0x7e>
                break;
 8008e04:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e06:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0a:	623b      	str	r3, [r7, #32]
    return(posture);
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008e0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e10:	b672      	cpsid	i
    return(int_posture);
 8008e12:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008e16:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <_txe_mutex_create+0x124>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4a23      	ldr	r2, [pc, #140]	@ (8008eac <_txe_mutex_create+0x124>)
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e22:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	f383 8810 	msr	PRIMASK, r3
}
 8008e2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008e2c:	f7ff f982 	bl	8008134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d102      	bne.n	8008e3e <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8008e38:	231c      	movs	r3, #28
 8008e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3c:	e007      	b.n	8008e4e <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d004      	beq.n	8008e4e <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8008e4a:	231f      	movs	r3, #31
 8008e4c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11d      	bne.n	8008e90 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008e54:	4b18      	ldr	r3, [pc, #96]	@ (8008eb8 <_txe_mutex_create+0x130>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5c:	4a17      	ldr	r2, [pc, #92]	@ (8008ebc <_txe_mutex_create+0x134>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d101      	bne.n	8008e66 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008e62:	2313      	movs	r3, #19
 8008e64:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008e6c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008e6e:	4b14      	ldr	r3, [pc, #80]	@ (8008ec0 <_txe_mutex_create+0x138>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00b      	beq.n	8008e90 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e78:	f3ef 8305 	mrs	r3, IPSR
 8008e7c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008e7e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008e80:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec0 <_txe_mutex_create+0x138>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008e8a:	d201      	bcs.n	8008e90 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008e8c:	2313      	movs	r3, #19
 8008e8e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d105      	bne.n	8008ea2 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7fe f870 	bl	8006f80 <_tx_mutex_create>
 8008ea0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8008ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3748      	adds	r7, #72	@ 0x48
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20010fa4 	.word	0x20010fa4
 8008eb0:	20010eec 	.word	0x20010eec
 8008eb4:	20010ef0 	.word	0x20010ef0
 8008eb8:	20010f0c 	.word	0x20010f0c
 8008ebc:	20011054 	.word	0x20011054
 8008ec0:	2000000c 	.word	0x2000000c

08008ec4 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008ed6:	231c      	movs	r3, #28
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e023      	b.n	8008f24 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a13      	ldr	r2, [pc, #76]	@ (8008f30 <_txe_mutex_delete+0x6c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d002      	beq.n	8008eec <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008ee6:	231c      	movs	r3, #28
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e01b      	b.n	8008f24 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008eec:	f3ef 8305 	mrs	r3, IPSR
 8008ef0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008ef2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <_txe_mutex_delete+0x70>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8008efe:	2313      	movs	r3, #19
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e00f      	b.n	8008f24 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008f04:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <_txe_mutex_delete+0x74>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8008f3c <_txe_mutex_delete+0x78>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d101      	bne.n	8008f16 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008f12:	2313      	movs	r3, #19
 8008f14:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fe f889 	bl	8007034 <_tx_mutex_delete>
 8008f22:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8008f24:	697b      	ldr	r3, [r7, #20]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	4d555445 	.word	0x4d555445
 8008f34:	2000000c 	.word	0x2000000c
 8008f38:	20010f0c 	.word	0x20010f0c
 8008f3c:	20011054 	.word	0x20011054

08008f40 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f54:	231c      	movs	r3, #28
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	e01f      	b.n	8008f9a <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a21      	ldr	r2, [pc, #132]	@ (8008fe4 <_txe_mutex_get+0xa4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d002      	beq.n	8008f6a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f64:	231c      	movs	r3, #28
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	e017      	b.n	8008f9a <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d014      	beq.n	8008f9a <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f70:	f3ef 8305 	mrs	r3, IPSR
 8008f74:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008f76:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008f78:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <_txe_mutex_get+0xa8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008f82:	2304      	movs	r3, #4
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	e008      	b.n	8008f9a <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8008f88:	4b18      	ldr	r3, [pc, #96]	@ (8008fec <_txe_mutex_get+0xac>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	4a17      	ldr	r2, [pc, #92]	@ (8008ff0 <_txe_mutex_get+0xb0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d101      	bne.n	8008f9a <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008f96:	2304      	movs	r3, #4
 8008f98:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d114      	bne.n	8008fca <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008fa0:	f3ef 8305 	mrs	r3, IPSR
 8008fa4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008fa6:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <_txe_mutex_get+0xa8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008fb2:	f3ef 8305 	mrs	r3, IPSR
 8008fb6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008fb8:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008fba:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe8 <_txe_mutex_get+0xa8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008fc4:	d201      	bcs.n	8008fca <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008fc6:	2313      	movs	r3, #19
 8008fc8:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fe f8d8 	bl	8007188 <_tx_mutex_get>
 8008fd8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008fda:	69fb      	ldr	r3, [r7, #28]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3720      	adds	r7, #32
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	4d555445 	.word	0x4d555445
 8008fe8:	2000000c 	.word	0x2000000c
 8008fec:	20010f0c 	.word	0x20010f0c
 8008ff0:	20011054 	.word	0x20011054

08008ff4 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8009006:	231c      	movs	r3, #28
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e01c      	b.n	8009046 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a13      	ldr	r2, [pc, #76]	@ (8009060 <_txe_mutex_put+0x6c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d002      	beq.n	800901c <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8009016:	231c      	movs	r3, #28
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e014      	b.n	8009046 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800901c:	f3ef 8305 	mrs	r3, IPSR
 8009020:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009022:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009024:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <_txe_mutex_put+0x70>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4313      	orrs	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800902e:	f3ef 8305 	mrs	r3, IPSR
 8009032:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8009034:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009036:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <_txe_mutex_put+0x70>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4313      	orrs	r3, r2
 800903c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009040:	d201      	bcs.n	8009046 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009042:	2313      	movs	r3, #19
 8009044:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d103      	bne.n	8009054 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fe fb13 	bl	8007678 <_tx_mutex_put>
 8009052:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	4d555445 	.word	0x4d555445
 8009064:	2000000c 	.word	0x2000000c

08009068 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b092      	sub	sp, #72	@ 0x48
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009076:	2300      	movs	r3, #0
 8009078:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8009080:	230c      	movs	r3, #12
 8009082:	647b      	str	r3, [r7, #68]	@ 0x44
 8009084:	e054      	b.n	8009130 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b1c      	cmp	r3, #28
 800908a:	d002      	beq.n	8009092 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800908c:	230c      	movs	r3, #12
 800908e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009090:	e04e      	b.n	8009130 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009092:	f3ef 8310 	mrs	r3, PRIMASK
 8009096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800909a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800909c:	b672      	cpsid	i
    return(int_posture);
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80090a0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80090a2:	4b36      	ldr	r3, [pc, #216]	@ (800917c <_txe_semaphore_create+0x114>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3301      	adds	r3, #1
 80090a8:	4a34      	ldr	r2, [pc, #208]	@ (800917c <_txe_semaphore_create+0x114>)
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80090b8:	4b31      	ldr	r3, [pc, #196]	@ (8009180 <_txe_semaphore_create+0x118>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80090be:	2300      	movs	r3, #0
 80090c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c2:	e009      	b.n	80090d8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00b      	beq.n	80090e4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80090cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80090d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d4:	3301      	adds	r3, #1
 80090d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80090d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009184 <_txe_semaphore_create+0x11c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090de:	429a      	cmp	r2, r3
 80090e0:	d3f0      	bcc.n	80090c4 <_txe_semaphore_create+0x5c>
 80090e2:	e000      	b.n	80090e6 <_txe_semaphore_create+0x7e>
                break;
 80090e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090e6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ea:	623b      	str	r3, [r7, #32]
    return(posture);
 80090ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80090ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80090f0:	b672      	cpsid	i
    return(int_posture);
 80090f2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80090f4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80090f6:	4b21      	ldr	r3, [pc, #132]	@ (800917c <_txe_semaphore_create+0x114>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	4a1f      	ldr	r2, [pc, #124]	@ (800917c <_txe_semaphore_create+0x114>)
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	f383 8810 	msr	PRIMASK, r3
}
 800910a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800910c:	f7ff f812 	bl	8008134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009114:	429a      	cmp	r2, r3
 8009116:	d102      	bne.n	800911e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8009118:	230c      	movs	r3, #12
 800911a:	647b      	str	r3, [r7, #68]	@ 0x44
 800911c:	e008      	b.n	8009130 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800911e:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <_txe_semaphore_create+0x120>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	4a19      	ldr	r2, [pc, #100]	@ (800918c <_txe_semaphore_create+0x124>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d101      	bne.n	8009130 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800912c:	2313      	movs	r3, #19
 800912e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009132:	2b00      	cmp	r3, #0
 8009134:	d114      	bne.n	8009160 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009136:	f3ef 8305 	mrs	r3, IPSR
 800913a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800913c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800913e:	4b14      	ldr	r3, [pc, #80]	@ (8009190 <_txe_semaphore_create+0x128>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4313      	orrs	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009148:	f3ef 8305 	mrs	r3, IPSR
 800914c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800914e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009150:	4b0f      	ldr	r3, [pc, #60]	@ (8009190 <_txe_semaphore_create+0x128>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4313      	orrs	r3, r2
 8009156:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800915a:	d201      	bcs.n	8009160 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800915c:	2313      	movs	r3, #19
 800915e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7fe fcaa 	bl	8007ac4 <_tx_semaphore_create>
 8009170:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8009172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009174:	4618      	mov	r0, r3
 8009176:	3748      	adds	r7, #72	@ 0x48
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20010fa4 	.word	0x20010fa4
 8009180:	20010ed4 	.word	0x20010ed4
 8009184:	20010ed8 	.word	0x20010ed8
 8009188:	20010f0c 	.word	0x20010f0c
 800918c:	20011054 	.word	0x20011054
 8009190:	2000000c 	.word	0x2000000c

08009194 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80091a6:	230c      	movs	r3, #12
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e01c      	b.n	80091e6 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a13      	ldr	r2, [pc, #76]	@ (8009200 <_txe_semaphore_delete+0x6c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d002      	beq.n	80091bc <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80091b6:	230c      	movs	r3, #12
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e014      	b.n	80091e6 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80091bc:	f3ef 8305 	mrs	r3, IPSR
 80091c0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80091c2:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <_txe_semaphore_delete+0x70>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80091ce:	2313      	movs	r3, #19
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e008      	b.n	80091e6 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80091d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009208 <_txe_semaphore_delete+0x74>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	4a0b      	ldr	r2, [pc, #44]	@ (800920c <_txe_semaphore_delete+0x78>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d101      	bne.n	80091e6 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80091e2:	2313      	movs	r3, #19
 80091e4:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d103      	bne.n	80091f4 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7fe fcbb 	bl	8007b68 <_tx_semaphore_delete>
 80091f2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80091f4:	697b      	ldr	r3, [r7, #20]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	53454d41 	.word	0x53454d41
 8009204:	2000000c 	.word	0x2000000c
 8009208:	20010f0c 	.word	0x20010f0c
 800920c:	20011054 	.word	0x20011054

08009210 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800921e:	230c      	movs	r3, #12
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e00b      	b.n	800923c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a07      	ldr	r2, [pc, #28]	@ (8009248 <_txe_semaphore_put+0x38>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d002      	beq.n	8009234 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800922e:	230c      	movs	r3, #12
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e003      	b.n	800923c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7fe fd27 	bl	8007c88 <_tx_semaphore_put>
 800923a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800923c:	68fb      	ldr	r3, [r7, #12]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	53454d41 	.word	0x53454d41

0800924c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b09a      	sub	sp, #104	@ 0x68
 8009250:	af06      	add	r7, sp, #24
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800925a:	2300      	movs	r3, #0
 800925c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009264:	230e      	movs	r3, #14
 8009266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009268:	e0bb      	b.n	80093e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800926a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800926c:	2bb0      	cmp	r3, #176	@ 0xb0
 800926e:	d002      	beq.n	8009276 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009270:	230e      	movs	r3, #14
 8009272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009274:	e0b5      	b.n	80093e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009276:	f3ef 8310 	mrs	r3, PRIMASK
 800927a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009280:	b672      	cpsid	i
    return(int_posture);
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009284:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009286:	4b64      	ldr	r3, [pc, #400]	@ (8009418 <_txe_thread_create+0x1cc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	4a62      	ldr	r2, [pc, #392]	@ (8009418 <_txe_thread_create+0x1cc>)
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	f383 8810 	msr	PRIMASK, r3
}
 800929a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800929c:	2300      	movs	r3, #0
 800929e:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 80092a0:	4b5e      	ldr	r3, [pc, #376]	@ (800941c <_txe_thread_create+0x1d0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80092a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092a8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80092aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ac:	3b01      	subs	r3, #1
 80092ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092b0:	4413      	add	r3, r2
 80092b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80092bc:	e02b      	b.n	8009316 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d101      	bne.n	80092ca <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80092c6:	2301      	movs	r3, #1
 80092c8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80092ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d028      	beq.n	8009322 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80092d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d308      	bcc.n	80092ec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80092da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d203      	bcs.n	80092ec <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80092ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d308      	bcc.n	8009308 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80092f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d203      	bcs.n	8009308 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009304:	2301      	movs	r3, #1
 8009306:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009312:	3301      	adds	r3, #1
 8009314:	647b      	str	r3, [r7, #68]	@ 0x44
 8009316:	4b42      	ldr	r3, [pc, #264]	@ (8009420 <_txe_thread_create+0x1d4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800931c:	429a      	cmp	r2, r3
 800931e:	d3ce      	bcc.n	80092be <_txe_thread_create+0x72>
 8009320:	e000      	b.n	8009324 <_txe_thread_create+0xd8>
                break;
 8009322:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009324:	f3ef 8310 	mrs	r3, PRIMASK
 8009328:	61fb      	str	r3, [r7, #28]
    return(posture);
 800932a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800932c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800932e:	b672      	cpsid	i
    return(int_posture);
 8009330:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8009334:	4b38      	ldr	r3, [pc, #224]	@ (8009418 <_txe_thread_create+0x1cc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3b01      	subs	r3, #1
 800933a:	4a37      	ldr	r2, [pc, #220]	@ (8009418 <_txe_thread_create+0x1cc>)
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009340:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	f383 8810 	msr	PRIMASK, r3
}
 8009348:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800934a:	f7fe fef3 	bl	8008134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009352:	429a      	cmp	r2, r3
 8009354:	d102      	bne.n	800935c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8009356:	230e      	movs	r3, #14
 8009358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800935a:	e042      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800935c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800935e:	2b00      	cmp	r3, #0
 8009360:	d102      	bne.n	8009368 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8009362:	2303      	movs	r3, #3
 8009364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009366:	e03c      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800936e:	2303      	movs	r3, #3
 8009370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009372:	e036      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009376:	2bc7      	cmp	r3, #199	@ 0xc7
 8009378:	d802      	bhi.n	8009380 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800937a:	2305      	movs	r3, #5
 800937c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800937e:	e030      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8009380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009382:	2b1f      	cmp	r3, #31
 8009384:	d902      	bls.n	800938c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8009386:	230f      	movs	r3, #15
 8009388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800938a:	e02a      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800938c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800938e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009390:	429a      	cmp	r2, r3
 8009392:	d902      	bls.n	800939a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009394:	2318      	movs	r3, #24
 8009396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009398:	e023      	b.n	80093e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800939a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d902      	bls.n	80093a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80093a0:	2310      	movs	r3, #16
 80093a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093a4:	e01d      	b.n	80093e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80093a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009424 <_txe_thread_create+0x1d8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009428 <_txe_thread_create+0x1dc>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d101      	bne.n	80093b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80093b4:	2313      	movs	r3, #19
 80093b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093b8:	f3ef 8305 	mrs	r3, IPSR
 80093bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80093be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80093c0:	4b1a      	ldr	r3, [pc, #104]	@ (800942c <_txe_thread_create+0x1e0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00b      	beq.n	80093e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093ca:	f3ef 8305 	mrs	r3, IPSR
 80093ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80093d0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80093d2:	4b16      	ldr	r3, [pc, #88]	@ (800942c <_txe_thread_create+0x1e0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80093dc:	d201      	bcs.n	80093e2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80093de:	2313      	movs	r3, #19
 80093e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80093e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d112      	bne.n	800940e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80093e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093f2:	9303      	str	r3, [sp, #12]
 80093f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7fe fc96 	bl	8007d38 <_tx_thread_create>
 800940c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800940e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8009410:	4618      	mov	r0, r3
 8009412:	3750      	adds	r7, #80	@ 0x50
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20010fa4 	.word	0x20010fa4
 800941c:	20010f14 	.word	0x20010f14
 8009420:	20010f18 	.word	0x20010f18
 8009424:	20010f0c 	.word	0x20010f0c
 8009428:	20011054 	.word	0x20011054
 800942c:	2000000c 	.word	0x2000000c

08009430 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009438:	4b1b      	ldr	r3, [pc, #108]	@ (80094a8 <_ux_device_stack_alternate_setting_get+0x78>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3320      	adds	r3, #32
 800943e:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b03      	cmp	r3, #3
 8009446:	d129      	bne.n	800949c <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800944e:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 8009450:	e021      	b.n	8009496 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	7b9b      	ldrb	r3, [r3, #14]
 8009456:	461a      	mov	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4293      	cmp	r3, r2
 800945c:	d118      	bne.n	8009490 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	3318      	adds	r3, #24
 8009462:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	3320      	adds	r3, #32
 8009468:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009472:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2201      	movs	r2, #1
 8009478:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2203      	movs	r2, #3
 800947e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8009480:	2201      	movs	r2, #1
 8009482:	2101      	movs	r1, #1
 8009484:	6938      	ldr	r0, [r7, #16]
 8009486:	f001 fccb 	bl	800ae20 <_ux_device_stack_transfer_request>
 800948a:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	e006      	b.n	800949e <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1da      	bne.n	8009452 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800949c:	23ff      	movs	r3, #255	@ 0xff
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20011514 	.word	0x20011514

080094ac <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b0a4      	sub	sp, #144	@ 0x90
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80094b6:	4bb5      	ldr	r3, [pc, #724]	@ (800978c <_ux_device_stack_alternate_setting_set+0x2e0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3320      	adds	r3, #32
 80094bc:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80094be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d001      	beq.n	80094ca <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 80094c6:	2354      	movs	r3, #84	@ 0x54
 80094c8:	e1ef      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 80094ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 80094d4:	e00b      	b.n	80094ee <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 80094d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094da:	7b9b      	ldrb	r3, [r3, #14]
 80094dc:	461a      	mov	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d009      	beq.n	80094f8 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80094e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 80094ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1ef      	bne.n	80094d6 <_ux_device_stack_alternate_setting_set+0x2a>
 80094f6:	e000      	b.n	80094fa <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 80094f8:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 80094fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8009502:	2252      	movs	r2, #82	@ 0x52
 8009504:	2107      	movs	r1, #7
 8009506:	2002      	movs	r0, #2
 8009508:	f001 fd14 	bl	800af34 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800950c:	2352      	movs	r3, #82	@ 0x52
 800950e:	e1cc      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8009510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009514:	7bdb      	ldrb	r3, [r3, #15]
 8009516:	461a      	mov	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	4293      	cmp	r3, r2
 800951c:	d101      	bne.n	8009522 <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 800951e:	2300      	movs	r3, #0
 8009520:	e1c3      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8009522:	4b9a      	ldr	r3, [pc, #616]	@ (800978c <_ux_device_stack_alternate_setting_set+0x2e0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8009528:	4b98      	ldr	r3, [pc, #608]	@ (800978c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8009534:	4b95      	ldr	r3, [pc, #596]	@ (800978c <_ux_device_stack_alternate_setting_set+0x2e0>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800953c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8009540:	e1ad      	b.n	800989e <_ux_device_stack_alternate_setting_set+0x3f2>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800954a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8009554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009558:	2b02      	cmp	r3, #2
 800955a:	f040 8194 	bne.w	8009886 <_ux_device_stack_alternate_setting_set+0x3da>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800955e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009562:	2208      	movs	r2, #8
 8009564:	498a      	ldr	r1, [pc, #552]	@ (8009790 <_ux_device_stack_alternate_setting_set+0x2e4>)
 8009566:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800956a:	f001 fddd 	bl	800b128 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800956e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8009572:	461a      	mov	r2, r3
 8009574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800957a:	429a      	cmp	r2, r3
 800957c:	f040 8183 	bne.w	8009886 <_ux_device_stack_alternate_setting_set+0x3da>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 8009580:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 8009588:	e177      	b.n	800987a <_ux_device_stack_alternate_setting_set+0x3ce>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800958a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 8009592:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800959c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	f040 815e 	bne.w	8009862 <_ux_device_stack_alternate_setting_set+0x3b6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 80095a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80095aa:	2209      	movs	r2, #9
 80095ac:	4979      	ldr	r1, [pc, #484]	@ (8009794 <_ux_device_stack_alternate_setting_set+0x2e8>)
 80095ae:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80095b2:	f001 fdb9 	bl	800b128 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 80095b6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80095ba:	461a      	mov	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4293      	cmp	r3, r2
 80095c0:	f040 814f 	bne.w	8009862 <_ux_device_stack_alternate_setting_set+0x3b6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 80095c4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80095c8:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	f040 8148 	bne.w	8009862 <_ux_device_stack_alternate_setting_set+0x3b6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 80095d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 80095dc:	e026      	b.n	800962c <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 80095de:	2126      	movs	r1, #38	@ 0x26
 80095e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80095e4:	f001 fc0a 	bl	800adfc <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 80095e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095f0:	210f      	movs	r1, #15
 80095f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095f4:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80095f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80095fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8009606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800960a:	2200      	movs	r2, #0
 800960c:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800960e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009612:	2200      	movs	r2, #0
 8009614:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8009616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800961a:	2200      	movs	r2, #0
 800961c:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800961e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009622:	2200      	movs	r2, #0
 8009624:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8009626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800962c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1d4      	bne.n	80095de <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 8009634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009638:	2200      	movs	r2, #0
 800963a:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800963c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009648:	1a9b      	subs	r3, r3, r2
 800964a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 800964e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800965a:	4413      	add	r3, r2
 800965c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8009660:	e0c9      	b.n	80097f6 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 8009662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800966a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 8009674:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009678:	2b05      	cmp	r3, #5
 800967a:	d009      	beq.n	8009690 <_ux_device_stack_alternate_setting_set+0x1e4>
 800967c:	2b05      	cmp	r3, #5
 800967e:	f300 80ad 	bgt.w	80097dc <_ux_device_stack_alternate_setting_set+0x330>
 8009682:	2b02      	cmp	r3, #2
 8009684:	f000 80a6 	beq.w	80097d4 <_ux_device_stack_alternate_setting_set+0x328>
 8009688:	2b04      	cmp	r3, #4
 800968a:	f000 80a3 	beq.w	80097d4 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800968e:	e0a5      	b.n	80097dc <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8009690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800969a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800969c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80096a0:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 80096a2:	e011      	b.n	80096c8 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80096a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 80096ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
                                            break;
 80096b6:	e00a      	b.n	80096ce <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 80096b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096bc:	3380      	adds	r3, #128	@ 0x80
 80096be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 80096c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096c4:	3b01      	subs	r3, #1
 80096c6:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 80096c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1ea      	bne.n	80096a4 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 80096ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 80096d4:	2312      	movs	r3, #18
 80096d6:	e0e8      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80096d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096dc:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 80096de:	2206      	movs	r2, #6
 80096e0:	492d      	ldr	r1, [pc, #180]	@ (8009798 <_ux_device_stack_alternate_setting_set+0x2ec>)
 80096e2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80096e6:	f001 fd1f 	bl	800b128 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80096ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096ee:	3320      	adds	r3, #32
 80096f0:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80096f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096f6:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 80096f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096fc:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80096fe:	4b23      	ldr	r3, [pc, #140]	@ (800978c <_ux_device_stack_alternate_setting_set+0x2e0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009706:	2b02      	cmp	r3, #2
 8009708:	d11a      	bne.n	8009740 <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800970a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800970e:	7bdb      	ldrb	r3, [r3, #15]
 8009710:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8009714:	2b00      	cmp	r3, #0
 8009716:	d013      	beq.n	8009740 <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8009718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800971c:	8a1b      	ldrh	r3, [r3, #16]
 800971e:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009722:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 8009724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800972a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800972c:	0adb      	lsrs	r3, r3, #11
 800972e:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 8009730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009732:	3301      	adds	r3, #1
 8009734:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 8009736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009738:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800973a:	fb02 f303 	mul.w	r3, r2, r3
 800973e:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8009740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009742:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009744:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8009746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009748:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800974c:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800974e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8009756:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800975a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800975e:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 8009760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009764:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009766:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8009768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009770:	210e      	movs	r1, #14
 8009772:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009774:	4798      	blx	r3
 8009776:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 8009778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00e      	beq.n	800979c <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800977e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]
                                        return(status);
 8009786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009788:	e08f      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>
 800978a:	bf00      	nop
 800978c:	20011514 	.word	0x20011514
 8009790:	20000040 	.word	0x20000040
 8009794:	20000048 	.word	0x20000048
 8009798:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800979c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d105      	bne.n	80097b2 <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80097a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097ae:	61da      	str	r2, [r3, #28]
                                    break;
 80097b0:	e015      	b.n	80097de <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 80097b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80097ba:	e002      	b.n	80097c2 <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 80097bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80097c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1f8      	bne.n	80097bc <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80097ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097d0:	615a      	str	r2, [r3, #20]
                                    break;
 80097d2:	e004      	b.n	80097de <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 80097d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 80097da:	e000      	b.n	80097de <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 80097dc:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 80097de:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80097e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 80097ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80097ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097f0:	4413      	add	r3, r2
 80097f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 80097f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f47f af31 	bne.w	8009662 <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8009800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009804:	330c      	adds	r3, #12
 8009806:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800980a:	220c      	movs	r2, #12
 800980c:	4618      	mov	r0, r3
 800980e:	f001 ff2f 	bl	800b670 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8009812:	4b28      	ldr	r3, [pc, #160]	@ (80098b4 <_ux_device_stack_alternate_setting_set+0x408>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800981a:	7b9b      	ldrb	r3, [r3, #14]
 800981c:	3344      	adds	r3, #68	@ 0x44
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 8009826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <_ux_device_stack_alternate_setting_set+0x388>
 800982c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800982e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <_ux_device_stack_alternate_setting_set+0x38c>
                            {

                                return (UX_NO_CLASS_MATCH);
 8009834:	2357      	movs	r3, #87	@ 0x57
 8009836:	e038      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8009838:	2306      	movs	r3, #6
 800983a:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800983c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009840:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8009842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009844:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8009846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009848:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800984c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8009850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009854:	f107 020c 	add.w	r2, r7, #12
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800985e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009860:	e023      	b.n	80098aa <_ux_device_stack_alternate_setting_set+0x3fe>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 8009862:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800986e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009874:	4413      	add	r3, r2
 8009876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 800987a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800987e:	2b00      	cmp	r3, #0
 8009880:	f47f ae83 	bne.w	800958a <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 8009884:	e010      	b.n	80098a8 <_ux_device_stack_alternate_setting_set+0x3fc>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8009886:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800988a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8009892:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009898:	4413      	add	r3, r2
 800989a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 800989e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f47f ae4d 	bne.w	8009542 <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 80098a8:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3790      	adds	r7, #144	@ 0x90
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20011514 	.word	0x20011514

080098b8 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b092      	sub	sp, #72	@ 0x48
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 80098ca:	f107 0310 	add.w	r3, r7, #16
 80098ce:	223f      	movs	r2, #63	@ 0x3f
 80098d0:	4619      	mov	r1, r3
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f002 f81b 	bl	800b90e <_ux_utility_string_length_check>
 80098d8:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 80098da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <_ux_device_stack_class_register+0x2c>
        return(status);
 80098e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e2:	e035      	b.n	8009950 <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80098e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009958 <_ux_device_stack_class_register+0xa0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80098ec:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 80098ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d12b      	bne.n	800994e <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 80098f6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3301      	adds	r3, #1
 80098fc:	461a      	mov	r2, r3
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	f001 feb6 	bl	800b670 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8009904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800990a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800990c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800990e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8009912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800991a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 8009922:	2305      	movs	r3, #5
 8009924:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 8009926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009928:	63bb      	str	r3, [r7, #56]	@ 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800992a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800992e:	f107 0214 	add.w	r2, r7, #20
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800993a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <_ux_device_stack_class_register+0x8c>
                return(status);
 8009940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009942:	e005      	b.n	8009950 <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 8009944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009946:	2201      	movs	r2, #1
 8009948:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800994a:	2300      	movs	r3, #0
 800994c:	e000      	b.n	8009950 <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800994e:	2312      	movs	r3, #18
}
 8009950:	4618      	mov	r0, r3
 8009952:	3748      	adds	r7, #72	@ 0x48
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	20011514 	.word	0x20011514

0800995c <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	@ 0x28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009968:	4b2b      	ldr	r3, [pc, #172]	@ (8009a18 <_ux_device_stack_clear_feature+0xbc>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800996e:	4b2a      	ldr	r3, [pc, #168]	@ (8009a18 <_ux_device_stack_clear_feature+0xbc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3320      	adds	r3, #32
 8009974:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	3318      	adds	r3, #24
 800997a:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <_ux_device_stack_clear_feature+0x30>
 8009986:	2b02      	cmp	r3, #2
 8009988:	d011      	beq.n	80099ae <_ux_device_stack_clear_feature+0x52>
 800998a:	e036      	b.n	80099fa <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d13b      	bne.n	8009a0a <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8009992:	4b21      	ldr	r3, [pc, #132]	@ (8009a18 <_ux_device_stack_clear_feature+0xbc>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800999e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a18 <_ux_device_stack_clear_feature+0xbc>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 80099a8:	e02f      	b.n	8009a0a <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 80099aa:	2354      	movs	r3, #84	@ 0x54
 80099ac:	e02f      	b.n	8009a0e <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 80099b6:	e01d      	b.n	80099f4 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 80099be:	e013      	b.n	80099e8 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	7b9b      	ldrb	r3, [r3, #14]
 80099c4:	461a      	mov	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d10a      	bne.n	80099e2 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	6a3a      	ldr	r2, [r7, #32]
 80099d2:	2110      	movs	r1, #16
 80099d4:	69f8      	ldr	r0, [r7, #28]
 80099d6:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 80099de:	2300      	movs	r3, #0
 80099e0:	e015      	b.n	8009a0e <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e8      	bne.n	80099c0 <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1de      	bne.n	80099b8 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	2114      	movs	r1, #20
 8009a02:	69f8      	ldr	r0, [r7, #28]
 8009a04:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8009a06:	2300      	movs	r3, #0
 8009a08:	e001      	b.n	8009a0e <_ux_device_stack_clear_feature+0xb2>
        break;
 8009a0a:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	@ 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20011514 	.word	0x20011514

08009a1c <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009a22:	4b0f      	ldr	r3, [pc, #60]	@ (8009a60 <_ux_device_stack_configuration_get+0x44>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3320      	adds	r3, #32
 8009a28:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	3320      	adds	r3, #32
 8009a34:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8009a40:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8009a42:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2203      	movs	r2, #3
 8009a48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 f9e6 	bl	800ae20 <_ux_device_stack_transfer_request>
 8009a54:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 8009a56:	683b      	ldr	r3, [r7, #0]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20011514 	.word	0x20011514

08009a64 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b0a0      	sub	sp, #128	@ 0x80
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8009a6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	605a      	str	r2, [r3, #4]
 8009a76:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009a84:	4b84      	ldr	r3, [pc, #528]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009a8a:	4b83      	ldr	r3, [pc, #524]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3320      	adds	r3, #32
 8009a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8009a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d101      	bne.n	8009aa6 <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e139      	b.n	8009d1a <_ux_device_stack_configuration_set+0x2b6>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8009aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8009ab0:	4b79      	ldr	r3, [pc, #484]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ab8:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8009aba:	e01f      	b.n	8009afc <_ux_device_stack_configuration_set+0x98>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009abc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8009ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8009aca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d10c      	bne.n	8009aec <_ux_device_stack_configuration_set+0x88>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8009ad2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009ad6:	2208      	movs	r2, #8
 8009ad8:	4970      	ldr	r1, [pc, #448]	@ (8009c9c <_ux_device_stack_configuration_set+0x238>)
 8009ada:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009adc:	f001 fb24 	bl	800b128 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8009ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00b      	beq.n	8009b04 <_ux_device_stack_configuration_set+0xa0>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 8009aec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8009af4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009af8:	4413      	add	r3, r2
 8009afa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 8009afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1dc      	bne.n	8009abc <_ux_device_stack_configuration_set+0x58>
 8009b02:	e000      	b.n	8009b06 <_ux_device_stack_configuration_set+0xa2>
                break;
 8009b04:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8009b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <_ux_device_stack_configuration_set+0xb2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <_ux_device_stack_configuration_set+0xb2>
        return(UX_ERROR);
 8009b12:	23ff      	movs	r3, #255	@ 0xff
 8009b14:	e101      	b.n	8009d1a <_ux_device_stack_configuration_set+0x2b6>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8009b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d021      	beq.n	8009b64 <_ux_device_stack_configuration_set+0x100>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8009b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b26:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 8009b28:	e019      	b.n	8009b5e <_ux_device_stack_configuration_set+0xfa>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8009b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b30:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 8009b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8009b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8009b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <_ux_device_stack_configuration_set+0xea>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8009b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b46:	f107 0208 	add.w	r2, r7, #8
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8009b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8009b54:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8009b56:	f000 ff0f 	bl	800a978 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 8009b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b5c:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 8009b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e2      	bne.n	8009b2a <_ux_device_stack_configuration_set+0xc6>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8009b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8009b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8009b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	2201      	movs	r2, #1
 8009b78:	2113      	movs	r1, #19
 8009b7a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009b7c:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <_ux_device_stack_configuration_set+0x124>
        return(UX_SUCCESS);
 8009b84:	2300      	movs	r3, #0
 8009b86:	e0c8      	b.n	8009d1a <_ux_device_stack_configuration_set+0x2b6>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8009b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 8009b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b92:	339c      	adds	r3, #156	@ 0x9c
    _ux_utility_descriptor_parse(device_framework,
 8009b94:	2208      	movs	r2, #8
 8009b96:	4941      	ldr	r1, [pc, #260]	@ (8009c9c <_ux_device_stack_configuration_set+0x238>)
 8009b98:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009b9a:	f001 fac5 	bl	800b128 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8009b9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <_ux_device_stack_configuration_set+0x14a>
 8009baa:	2202      	movs	r2, #2
 8009bac:	e000      	b.n	8009bb0 <_ux_device_stack_configuration_set+0x14c>
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4b39      	ldr	r3, [pc, #228]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8009bb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009bbc:	115b      	asrs	r3, r3, #5
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4b35      	ldr	r3, [pc, #212]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f002 0201 	and.w	r2, r2, #1
 8009bc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 8009bcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bd0:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8009bd2:	e094      	b.n	8009cfe <_ux_device_stack_configuration_set+0x29a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8009bd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8009bda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8009be2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009be6:	2b0b      	cmp	r3, #11
 8009be8:	d109      	bne.n	8009bfe <_ux_device_stack_configuration_set+0x19a>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 8009bea:	2301      	movs	r3, #1
 8009bec:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8009bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8009bf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8009bfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d173      	bne.n	8009cee <_ux_device_stack_configuration_set+0x28a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8009c06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009c0a:	2209      	movs	r2, #9
 8009c0c:	4924      	ldr	r1, [pc, #144]	@ (8009ca0 <_ux_device_stack_configuration_set+0x23c>)
 8009c0e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009c10:	f001 fa8a 	bl	800b128 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8009c14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d168      	bne.n	8009cee <_ux_device_stack_configuration_set+0x28a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8009c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d140      	bne.n	8009ca4 <_ux_device_stack_configuration_set+0x240>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8009c22:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c26:	461a      	mov	r2, r3
 8009c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d122      	bne.n	8009c74 <_ux_device_stack_configuration_set+0x210>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009c36:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8009c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d122      	bne.n	8009c86 <_ux_device_stack_configuration_set+0x222>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009c40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c44:	461a      	mov	r2, r3
 8009c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d11a      	bne.n	8009c86 <_ux_device_stack_configuration_set+0x222>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8009c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c52:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d114      	bne.n	8009c86 <_ux_device_stack_configuration_set+0x222>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c64:	3344      	adds	r3, #68	@ 0x44
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c6c:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 8009c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c70:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c72:	e008      	b.n	8009c86 <_ux_device_stack_configuration_set+0x222>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8009c74:	4b08      	ldr	r3, [pc, #32]	@ (8009c98 <_ux_device_stack_configuration_set+0x234>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009c7c:	3344      	adds	r3, #68	@ 0x44
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009c84:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8009c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8009c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d128      	bne.n	8009ce4 <_ux_device_stack_configuration_set+0x280>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c96:	e025      	b.n	8009ce4 <_ux_device_stack_configuration_set+0x280>
 8009c98:	20011514 	.word	0x20011514
 8009c9c:	20000040 	.word	0x20000040
 8009ca0:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8009ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d24 <_ux_device_stack_configuration_set+0x2c0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009cac:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8009cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d116      	bne.n	8009ce4 <_ux_device_stack_configuration_set+0x280>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009cb6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d10e      	bne.n	8009ce4 <_ux_device_stack_configuration_set+0x280>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8009cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d108      	bne.n	8009ce4 <_ux_device_stack_configuration_set+0x280>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 8009cd2:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <_ux_device_stack_configuration_set+0x2c0>)
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009cda:	3344      	adds	r3, #68	@ 0x44
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ce2:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009ce8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8009cea:	f000 fe8d 	bl	800aa08 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8009cee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8009cf6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cfa:	4413      	add	r3, r2
 8009cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 8009cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f47f af67 	bne.w	8009bd4 <_ux_device_stack_configuration_set+0x170>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8009d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d08:	2203      	movs	r2, #3
 8009d0a:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 8009d0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	2203      	movs	r2, #3
 8009d12:	2113      	movs	r1, #19
 8009d14:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009d16:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3780      	adds	r7, #128	@ 0x80
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20011514 	.word	0x20011514

08009d28 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b09d      	sub	sp, #116	@ 0x74
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8009d30:	23ff      	movs	r3, #255	@ 0xff
 8009d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009d34:	4b9c      	ldr	r3, [pc, #624]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009d3a:	4b9b      	ldr	r3, [pc, #620]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3320      	adds	r3, #32
 8009d40:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 813b 	bne.w	8009fc2 <_ux_device_stack_control_request_process+0x29a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009d52:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009d5a:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3354      	adds	r3, #84	@ 0x54
 8009d60:	3302      	adds	r3, #2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fdbc 	bl	800b8e0 <_ux_utility_short_get>
 8009d68:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3354      	adds	r3, #84	@ 0x54
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 fdb5 	bl	800b8e0 <_ux_utility_short_get>
 8009d76:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3354      	adds	r3, #84	@ 0x54
 8009d7c:	3306      	adds	r3, #6
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fdae 	bl	800b8e0 <_ux_utility_short_get>
 8009d84:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8009d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	d002      	beq.n	8009d92 <_ux_device_stack_control_request_process+0x6a>
 8009d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d8e:	2b07      	cmp	r3, #7
 8009d90:	d10d      	bne.n	8009dae <_ux_device_stack_control_request_process+0x86>
 8009d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d94:	0a1b      	lsrs	r3, r3, #8
 8009d96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8009d9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009da0:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8009da4:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8009da6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009da8:	f043 0320 	orr.w	r3, r3, #32
 8009dac:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8009dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009db0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009db4:	2b40      	cmp	r3, #64	@ 0x40
 8009db6:	d13a      	bne.n	8009e2e <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8009db8:	4b7b      	ldr	r3, [pc, #492]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d034      	beq.n	8009e2e <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8009dc4:	4b78      	ldr	r3, [pc, #480]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 8009dcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d12d      	bne.n	8009e2e <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8009dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dd6:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8009dd8:	4b73      	ldr	r3, [pc, #460]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f8d3 4180 	ldr.w	r4, [r3, #384]	@ 0x180
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f107 020c 	add.w	r2, r7, #12
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009df0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009df2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009df4:	47a0      	blx	r4
 8009df6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 8009df8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d110      	bne.n	8009e20 <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e00:	3318      	adds	r3, #24
 8009e02:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e06:	3320      	adds	r3, #32
 8009e08:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2203      	movs	r2, #3
 8009e0e:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 f802 	bl	800ae20 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e0d1      	b.n	8009fc4 <_ux_device_stack_control_request_process+0x29c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8009e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e22:	3318      	adds	r3, #24
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 fb49 	bl	800a4bc <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e0ca      	b.n	8009fc4 <_ux_device_stack_control_request_process+0x29c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8009e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d004      	beq.n	8009e42 <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8009e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	d14f      	bne.n	8009ee2 <_ux_device_stack_control_request_process+0x1ba>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8009e42:	2304      	movs	r3, #4
 8009e44:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8009e46:	2300      	movs	r3, #0
 8009e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e4a:	e03b      	b.n	8009ec4 <_ux_device_stack_control_request_process+0x19c>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8009e4c:	4b56      	ldr	r3, [pc, #344]	@ (8009fa8 <_ux_device_stack_control_request_process+0x280>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e52:	3344      	adds	r3, #68	@ 0x44
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d02a      	beq.n	8009eb8 <_ux_device_stack_control_request_process+0x190>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8009e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d118      	bne.n	8009e9e <_ux_device_stack_control_request_process+0x176>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8009e6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e6e:	2ba1      	cmp	r3, #161	@ 0xa1
 8009e70:	d110      	bne.n	8009e94 <_ux_device_stack_control_request_process+0x16c>
 8009e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10d      	bne.n	8009e94 <_ux_device_stack_control_request_process+0x16c>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 8009e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009e7e:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	d107      	bne.n	8009e94 <_ux_device_stack_control_request_process+0x16c>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d005      	beq.n	8009e9e <_ux_device_stack_control_request_process+0x176>
                            continue;
 8009e92:	e014      	b.n	8009ebe <_ux_device_stack_control_request_process+0x196>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 8009e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d10e      	bne.n	8009ebc <_ux_device_stack_control_request_process+0x194>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8009e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea0:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ea6:	f107 0210 	add.w	r2, r7, #16
 8009eaa:	4610      	mov	r0, r2
 8009eac:	4798      	blx	r3
 8009eae:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8009eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <_ux_device_stack_control_request_process+0x1a4>
 8009eb6:	e002      	b.n	8009ebe <_ux_device_stack_control_request_process+0x196>
                    continue;
 8009eb8:	bf00      	nop
 8009eba:	e000      	b.n	8009ebe <_ux_device_stack_control_request_process+0x196>
                            continue;
 8009ebc:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8009ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ec4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d9c0      	bls.n	8009e4c <_ux_device_stack_control_request_process+0x124>
 8009eca:	e000      	b.n	8009ece <_ux_device_stack_control_request_process+0x1a6>

                    /* We are done, break the loop!  */
                    break;
 8009ecc:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8009ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <_ux_device_stack_control_request_process+0x1b6>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8009ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed6:	3318      	adds	r3, #24
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 faef 	bl	800a4bc <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8009ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ee0:	e070      	b.n	8009fc4 <_ux_device_stack_control_request_process+0x29c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 8009ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee4:	2b0c      	cmp	r3, #12
 8009ee6:	d861      	bhi.n	8009fac <_ux_device_stack_control_request_process+0x284>
 8009ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <_ux_device_stack_control_request_process+0x1c8>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f25 	.word	0x08009f25
 8009ef4:	08009f33 	.word	0x08009f33
 8009ef8:	08009fad 	.word	0x08009fad
 8009efc:	08009f41 	.word	0x08009f41
 8009f00:	08009fad 	.word	0x08009fad
 8009f04:	08009f4f 	.word	0x08009f4f
 8009f08:	08009f65 	.word	0x08009f65
 8009f0c:	08009f73 	.word	0x08009f73
 8009f10:	08009f79 	.word	0x08009f79
 8009f14:	08009f81 	.word	0x08009f81
 8009f18:	08009f8b 	.word	0x08009f8b
 8009f1c:	08009f95 	.word	0x08009f95
 8009f20:	08009fa1 	.word	0x08009fa1
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8009f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009f28:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009f2a:	f000 faff 	bl	800a52c <_ux_device_stack_get_status>
 8009f2e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f30:	e03f      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8009f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f36:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009f38:	f7ff fd10 	bl	800995c <_ux_device_stack_clear_feature>
 8009f3c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f3e:	e038      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8009f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f42:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009f46:	f000 fec3 	bl	800acd0 <_ux_device_stack_set_feature>
 8009f4a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f4c:	e031      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8009f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f52:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8009f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f5a:	2111      	movs	r1, #17
 8009f5c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009f5e:	4798      	blx	r3
 8009f60:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f62:	e026      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8009f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009f68:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009f6a:	f000 f82f 	bl	8009fcc <_ux_device_stack_descriptor_send>
 8009f6e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f70:	e01f      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8009f72:	2354      	movs	r3, #84	@ 0x54
 8009f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8009f76:	e01c      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8009f78:	f7ff fd50 	bl	8009a1c <_ux_device_stack_configuration_get>
 8009f7c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f7e:	e018      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8009f80:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009f82:	f7ff fd6f 	bl	8009a64 <_ux_device_stack_configuration_set>
 8009f86:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f88:	e013      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8009f8a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009f8c:	f7ff fa50 	bl	8009430 <_ux_device_stack_alternate_setting_get>
 8009f90:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f92:	e00e      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8009f94:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f96:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009f98:	f7ff fa88 	bl	80094ac <_ux_device_stack_alternate_setting_set>
 8009f9c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 8009f9e:	e008      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8009fa4:	e005      	b.n	8009fb2 <_ux_device_stack_control_request_process+0x28a>
 8009fa6:	bf00      	nop
 8009fa8:	20011514 	.word	0x20011514

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8009fac:	2354      	movs	r3, #84	@ 0x54
 8009fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8009fb0:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 8009fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d004      	beq.n	8009fc2 <_ux_device_stack_control_request_process+0x29a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8009fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fba:	3318      	adds	r3, #24
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fa7d 	bl	800a4bc <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8009fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	376c      	adds	r7, #108	@ 0x6c
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd90      	pop	{r4, r7, pc}

08009fcc <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b09a      	sub	sp, #104	@ 0x68
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 8009fdc:	23ff      	movs	r3, #255	@ 0xff
 8009fde:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009fe0:	4b98      	ldr	r3, [pc, #608]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009fe6:	4b97      	ldr	r3, [pc, #604]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3320      	adds	r3, #32
 8009fec:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	3318      	adds	r3, #24
 8009ff2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff6:	3320      	adds	r3, #32
 8009ff8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800a006:	2300      	movs	r3, #0
 800a008:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3b01      	subs	r3, #1
 800a01a:	2b0e      	cmp	r3, #14
 800a01c:	f200 81e1 	bhi.w	800a3e2 <_ux_device_stack_descriptor_send+0x416>
 800a020:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <_ux_device_stack_descriptor_send+0x5c>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a065 	.word	0x0800a065
 800a02c:	0800a0f9 	.word	0x0800a0f9
 800a030:	0800a215 	.word	0x0800a215
 800a034:	0800a3e3 	.word	0x0800a3e3
 800a038:	0800a3e3 	.word	0x0800a3e3
 800a03c:	0800a06f 	.word	0x0800a06f
 800a040:	0800a0f9 	.word	0x0800a0f9
 800a044:	0800a3e3 	.word	0x0800a3e3
 800a048:	0800a07f 	.word	0x0800a07f
 800a04c:	0800a3e3 	.word	0x0800a3e3
 800a050:	0800a3e3 	.word	0x0800a3e3
 800a054:	0800a3e3 	.word	0x0800a3e3
 800a058:	0800a3e3 	.word	0x0800a3e3
 800a05c:	0800a3e3 	.word	0x0800a3e3
 800a060:	0800a0f9 	.word	0x0800a0f9
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b12      	cmp	r3, #18
 800a068:	d901      	bls.n	800a06e <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800a06a:	2312      	movs	r3, #18
 800a06c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b06      	cmp	r3, #6
 800a072:	d104      	bne.n	800a07e <_ux_device_stack_descriptor_send+0xb2>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b0a      	cmp	r3, #10
 800a078:	d901      	bls.n	800a07e <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800a07a:	230a      	movs	r3, #10
 800a07c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b09      	cmp	r3, #9
 800a082:	d104      	bne.n	800a08e <_ux_device_stack_descriptor_send+0xc2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b05      	cmp	r3, #5
 800a088:	d901      	bls.n	800a08e <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800a08a:	2305      	movs	r3, #5
 800a08c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a08e:	4b6d      	ldr	r3, [pc, #436]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a096:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800a098:	4b6a      	ldr	r3, [pc, #424]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0a0:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800a0a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0a6:	4413      	add	r3, r2
 800a0a8:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800a0aa:	e020      	b.n	800a0ee <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800a0ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800a0b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d10e      	bne.n	800a0de <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fad1 	bl	800b670 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a0d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0d4:	f000 fea4 	bl	800ae20 <_ux_device_stack_transfer_request>
 800a0d8:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a0da:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800a0dc:	e18c      	b.n	800a3f8 <_ux_device_stack_descriptor_send+0x42c>
            device_framework_length -=  descriptor_length;
 800a0de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800a0e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	4413      	add	r3, r2
 800a0ec:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800a0ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d3da      	bcc.n	800a0ac <_ux_device_stack_descriptor_send+0xe0>
        break;
 800a0f6:	e17f      	b.n	800a3f8 <_ux_device_stack_descriptor_send+0x42c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b07      	cmp	r3, #7
 800a0fc:	d10e      	bne.n	800a11c <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800a0fe:	4b51      	ldr	r3, [pc, #324]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a106:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800a108:	4b4e      	ldr	r3, [pc, #312]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a110:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800a112:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a116:	4413      	add	r3, r2
 800a118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a11a:	e045      	b.n	800a1a8 <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a11c:	4b49      	ldr	r3, [pc, #292]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a124:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800a126:	4b47      	ldr	r3, [pc, #284]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a12e:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800a130:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a134:	4413      	add	r3, r2
 800a136:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800a138:	e036      	b.n	800a1a8 <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800a13a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b0f      	cmp	r3, #15
 800a144:	d110      	bne.n	800a168 <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800a146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a148:	3301      	adds	r3, #1
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b0f      	cmp	r3, #15
 800a14e:	d123      	bne.n	800a198 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800a150:	f107 0310 	add.w	r3, r7, #16
 800a154:	2204      	movs	r2, #4
 800a156:	493c      	ldr	r1, [pc, #240]	@ (800a248 <_ux_device_stack_descriptor_send+0x27c>)
 800a158:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800a15a:	f000 ffe5 	bl	800b128 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800a15e:	8a7b      	ldrh	r3, [r7, #18]
 800a160:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800a162:	2300      	movs	r3, #0
 800a164:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800a166:	e023      	b.n	800a1b0 <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800a168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a16a:	3301      	adds	r3, #1
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d112      	bne.n	800a198 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800a172:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a176:	429a      	cmp	r2, r3
 800a178:	d10b      	bne.n	800a192 <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800a17a:	f107 0318 	add.w	r3, r7, #24
 800a17e:	2208      	movs	r2, #8
 800a180:	4932      	ldr	r1, [pc, #200]	@ (800a24c <_ux_device_stack_descriptor_send+0x280>)
 800a182:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800a184:	f000 ffd0 	bl	800b128 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800a188:	8b7b      	ldrh	r3, [r7, #26]
 800a18a:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800a18c:	2300      	movs	r3, #0
 800a18e:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800a190:	e00e      	b.n	800a1b0 <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800a192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a194:	3301      	adds	r3, #1
 800a196:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800a198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800a1a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	4413      	add	r3, r2
 800a1a6:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800a1a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d3c4      	bcc.n	800a13a <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800a1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f040 811d 	bne.w	800a3f2 <_ux_device_stack_descriptor_send+0x426>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800a1b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d202      	bcs.n	800a1c6 <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 800a1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c4:	e001      	b.n	800a1ca <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d0:	d90c      	bls.n	800a1ec <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a1d2:	2212      	movs	r2, #18
 800a1d4:	2109      	movs	r1, #9
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	f000 feac 	bl	800af34 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1e2:	2114      	movs	r1, #20
 800a1e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1e6:	4798      	blx	r3
 800a1e8:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a1ea:	e105      	b.n	800a3f8 <_ux_device_stack_descriptor_send+0x42c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 fa3b 	bl	800b670 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	b2d2      	uxtb	r2, r2
 800a204:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a20a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a20c:	f000 fe08 	bl	800ae20 <_ux_device_stack_transfer_request>
 800a210:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 800a212:	e0ee      	b.n	800a3f2 <_ux_device_stack_descriptor_send+0x426>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800a214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d14f      	bne.n	800a2ba <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a21a:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <_ux_device_stack_descriptor_send+0x278>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a222:	3302      	adds	r3, #2
 800a224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a228:	d912      	bls.n	800a250 <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a22a:	2212      	movs	r2, #18
 800a22c:	2109      	movs	r1, #9
 800a22e:	2002      	movs	r0, #2
 800a230:	f000 fe80 	bl	800af34 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a23a:	2114      	movs	r1, #20
 800a23c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a23e:	4798      	blx	r3
 800a240:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800a242:	e0d9      	b.n	800a3f8 <_ux_device_stack_descriptor_send+0x42c>
 800a244:	20011514 	.word	0x20011514
 800a248:	20000054 	.word	0x20000054
 800a24c:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800a256:	4b6b      	ldr	r3, [pc, #428]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	3302      	adds	r3, #2
 800a262:	b2da      	uxtb	r2, r3
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	3301      	adds	r3, #1
 800a26c:	2203      	movs	r2, #3
 800a26e:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	1c98      	adds	r0, r3, #2
 800a274:	4b63      	ldr	r3, [pc, #396]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800a27c:	4b61      	ldr	r3, [pc, #388]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a27e:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800a280:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a284:	461a      	mov	r2, r3
 800a286:	f001 f9f3 	bl	800b670 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800a28a:	4b5e      	ldr	r3, [pc, #376]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a292:	3302      	adds	r3, #2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	429a      	cmp	r2, r3
 800a298:	d906      	bls.n	800a2a8 <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800a29a:	4b5a      	ldr	r3, [pc, #360]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a2a2:	3302      	adds	r3, #2
 800a2a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2a6:	e001      	b.n	800a2ac <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a2b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b2:	f000 fdb5 	bl	800ae20 <_ux_device_stack_transfer_request>
 800a2b6:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800a2b8:	e09d      	b.n	800a3f6 <_ux_device_stack_descriptor_send+0x42a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800a2ba:	4b52      	ldr	r3, [pc, #328]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800a2c2:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800a2c4:	4b4f      	ldr	r3, [pc, #316]	@ (800a404 <_ux_device_stack_descriptor_send+0x438>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800a2cc:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800a2ce:	e07a      	b.n	800a3c6 <_ux_device_stack_descriptor_send+0x3fa>
                if (_ux_utility_short_get(string_framework) == request_index)
 800a2d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a2d2:	f001 fb05 	bl	800b8e0 <_ux_utility_short_get>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d164      	bne.n	800a3a8 <_ux_device_stack_descriptor_send+0x3dc>
                    if (*(string_framework + 2) == descriptor_index)
 800a2de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d15d      	bne.n	800a3a8 <_ux_device_stack_descriptor_send+0x3dc>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800a2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2fa:	dd0c      	ble.n	800a316 <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800a2fc:	2212      	movs	r2, #18
 800a2fe:	2109      	movs	r1, #9
 800a300:	2002      	movs	r0, #2
 800a302:	f000 fe17 	bl	800af34 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a30c:	2114      	movs	r1, #20
 800a30e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a310:	4798      	blx	r3
 800a312:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 800a314:	e05a      	b.n	800a3cc <_ux_device_stack_descriptor_send+0x400>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800a31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a31e:	3303      	adds	r3, #3
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	3301      	adds	r3, #1
 800a332:	2203      	movs	r2, #3
 800a334:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800a336:	2300      	movs	r3, #0
 800a338:	643b      	str	r3, [r7, #64]	@ 0x40
 800a33a:	e015      	b.n	800a368 <_ux_device_stack_descriptor_send+0x39c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800a33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a33e:	3304      	adds	r3, #4
 800a340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a342:	441a      	add	r2, r3
 800a344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a346:	3301      	adds	r3, #1
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a34c:	440b      	add	r3, r1
 800a34e:	7812      	ldrb	r2, [r2, #0]
 800a350:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800a352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a354:	3301      	adds	r3, #1
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	3301      	adds	r3, #1
 800a35a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a35c:	4413      	add	r3, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800a362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a364:	3301      	adds	r3, #1
 800a366:	643b      	str	r3, [r7, #64]	@ 0x40
 800a368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a36a:	3303      	adds	r3, #3
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a372:	4293      	cmp	r3, r2
 800a374:	d3e2      	bcc.n	800a33c <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800a376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a378:	3303      	adds	r3, #3
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	461a      	mov	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4293      	cmp	r3, r2
 800a386:	d906      	bls.n	800a396 <_ux_device_stack_descriptor_send+0x3ca>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800a388:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a38a:	3303      	adds	r3, #3
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a394:	e001      	b.n	800a39a <_ux_device_stack_descriptor_send+0x3ce>
                            length =  host_length;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a39e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3a0:	f000 fd3e 	bl	800ae20 <_ux_device_stack_transfer_request>
 800a3a4:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 800a3a6:	e011      	b.n	800a3cc <_ux_device_stack_descriptor_send+0x400>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800a3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	3b04      	subs	r3, #4
 800a3b6:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800a3b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ba:	3303      	adds	r3, #3
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3c2:	4413      	add	r3, r2
 800a3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800a3c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d181      	bne.n	800a2d0 <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 800a3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d111      	bne.n	800a3f6 <_ux_device_stack_descriptor_send+0x42a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d8:	2114      	movs	r1, #20
 800a3da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3dc:	4798      	blx	r3
                return(UX_ERROR);
 800a3de:	23ff      	movs	r3, #255	@ 0xff
 800a3e0:	e00b      	b.n	800a3fa <_ux_device_stack_descriptor_send+0x42e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e8:	2114      	movs	r1, #20
 800a3ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3ec:	4798      	blx	r3
        return(UX_ERROR);
 800a3ee:	23ff      	movs	r3, #255	@ 0xff
 800a3f0:	e003      	b.n	800a3fa <_ux_device_stack_descriptor_send+0x42e>
        break;
 800a3f2:	bf00      	nop
 800a3f4:	e000      	b.n	800a3f8 <_ux_device_stack_descriptor_send+0x42c>
        break;
 800a3f6:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800a3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3768      	adds	r7, #104	@ 0x68
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20011514 	.word	0x20011514

0800a408 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b092      	sub	sp, #72	@ 0x48
 800a40c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800a40e:	23ff      	movs	r3, #255	@ 0xff
 800a410:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a412:	4b29      	ldr	r3, [pc, #164]	@ (800a4b8 <_ux_device_stack_disconnect+0xb0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a418:	4b27      	ldr	r3, [pc, #156]	@ (800a4b8 <_ux_device_stack_disconnect+0xb0>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3320      	adds	r3, #32
 800a41e:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d123      	bne.n	800a470 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a42e:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800a430:	e018      	b.n	800a464 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800a432:	2303      	movs	r3, #3
 800a434:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800a436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a438:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800a43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800a444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a446:	2b00      	cmp	r3, #0
 800a448:	d004      	beq.n	800a454 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800a44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a44e:	1d3a      	adds	r2, r7, #4
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800a454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800a45a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a45c:	f000 fa8c 	bl	800a978 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800a464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e3      	bne.n	800a432 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	2201      	movs	r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d107      	bne.n	800a488 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800a478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800a47c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a47e:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800a480:	210f      	movs	r1, #15
 800a482:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a484:	4798      	blx	r3
 800a486:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800a490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800a496:	4b08      	ldr	r3, [pc, #32]	@ (800a4b8 <_ux_device_stack_disconnect+0xb0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800a4a2:	4b05      	ldr	r3, [pc, #20]	@ (800a4b8 <_ux_device_stack_disconnect+0xb0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800a4aa:	200a      	movs	r0, #10
 800a4ac:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800a4ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3748      	adds	r7, #72	@ 0x48
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	20011514 	.word	0x20011514

0800a4bc <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a4c4:	4b18      	ldr	r3, [pc, #96]	@ (800a528 <_ux_device_stack_endpoint_stall+0x6c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800a4ca:	23ff      	movs	r3, #255	@ 0xff
 800a4cc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d2:	613b      	str	r3, [r7, #16]
    return(posture);
 800a4d4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a4d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4d8:	b672      	cpsid	i
    return(int_posture);
 800a4da:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800a4dc:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800a4de:	4b12      	ldr	r3, [pc, #72]	@ (800a528 <_ux_device_stack_endpoint_stall+0x6c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d013      	beq.n	800a510 <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d00f      	beq.n	800a510 <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	2114      	movs	r1, #20
 800a4f8:	69b8      	ldr	r0, [r7, #24]
 800a4fa:	4798      	blx	r3
 800a4fc:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7bdb      	ldrb	r3, [r3, #15]
 800a502:	f003 0303 	and.w	r3, r3, #3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2202      	movs	r2, #2
 800a50e:	605a      	str	r2, [r3, #4]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f383 8810 	msr	PRIMASK, r3
}
 800a51a:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800a51c:	69fb      	ldr	r3, [r7, #28]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3720      	adds	r7, #32
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20011514 	.word	0x20011514

0800a52c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08a      	sub	sp, #40	@ 0x28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a538:	4b39      	ldr	r3, [pc, #228]	@ (800a620 <_ux_device_stack_get_status+0xf4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a53e:	4b38      	ldr	r3, [pc, #224]	@ (800a620 <_ux_device_stack_get_status+0xf4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3320      	adds	r3, #32
 800a544:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	3318      	adds	r3, #24
 800a54a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	3320      	adds	r3, #32
 800a550:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800a564:	2302      	movs	r3, #2
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <_ux_device_stack_get_status+0x4c>
 800a572:	2b02      	cmp	r3, #2
 800a574:	d021      	beq.n	800a5ba <_ux_device_stack_get_status+0x8e>
 800a576:	e03a      	b.n	800a5ee <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800a57e:	d102      	bne.n	800a586 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800a580:	2301      	movs	r3, #1
 800a582:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800a584:	e03b      	b.n	800a5fe <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800a586:	4b26      	ldr	r3, [pc, #152]	@ (800a620 <_ux_device_stack_get_status+0xf4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d103      	bne.n	800a59a <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800a59a:	4b21      	ldr	r3, [pc, #132]	@ (800a620 <_ux_device_stack_get_status+0xf4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02b      	beq.n	800a5fe <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f042 0202 	orr.w	r2, r2, #2
 800a5b4:	b2d2      	uxtb	r2, r2
 800a5b6:	701a      	strb	r2, [r3, #0]
        break;
 800a5b8:	e021      	b.n	800a5fe <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	2115      	movs	r1, #21
 800a5c2:	6a38      	ldr	r0, [r7, #32]
 800a5c4:	4798      	blx	r3
 800a5c6:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2bff      	cmp	r3, #255	@ 0xff
 800a5cc:	d007      	beq.n	800a5de <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d116      	bne.n	800a602 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800a5dc:	e011      	b.n	800a602 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	2114      	movs	r1, #20
 800a5e6:	6a38      	ldr	r0, [r7, #32]
 800a5e8:	4798      	blx	r3
            return(UX_SUCCESS);            
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e014      	b.n	800a618 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	2114      	movs	r1, #20
 800a5f6:	6a38      	ldr	r0, [r7, #32]
 800a5f8:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e00c      	b.n	800a618 <_ux_device_stack_get_status+0xec>
        break;
 800a5fe:	bf00      	nop
 800a600:	e000      	b.n	800a604 <_ux_device_stack_get_status+0xd8>
        break;
 800a602:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2203      	movs	r2, #3
 800a608:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a60e:	6978      	ldr	r0, [r7, #20]
 800a610:	f000 fc06 	bl	800ae20 <_ux_device_stack_transfer_request>
 800a614:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800a616:	693b      	ldr	r3, [r7, #16]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3728      	adds	r7, #40	@ 0x28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20011514 	.word	0x20011514

0800a624 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b094      	sub	sp, #80	@ 0x50
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a632:	4b9a      	ldr	r3, [pc, #616]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3320      	adds	r3, #32
 800a638:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800a63a:	4b98      	ldr	r3, [pc, #608]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800a644:	4b95      	ldr	r3, [pc, #596]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800a64e:	4b93      	ldr	r3, [pc, #588]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800a658:	4b90      	ldr	r3, [pc, #576]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800a662:	4b8e      	ldr	r3, [pc, #568]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a668:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800a66c:	4b8b      	ldr	r3, [pc, #556]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a672:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800a676:	4b89      	ldr	r3, [pc, #548]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a67c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800a680:	4b86      	ldr	r3, [pc, #536]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a686:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800a68a:	4b84      	ldr	r3, [pc, #528]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a690:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800a694:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800a698:	2100      	movs	r1, #0
 800a69a:	2000      	movs	r0, #0
 800a69c:	f000 fde2 	bl	800b264 <_ux_utility_memory_allocate>
 800a6a0:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800a6a8:	2312      	movs	r3, #18
 800a6aa:	e15d      	b.n	800a968 <_ux_device_stack_initialize+0x344>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800a6ac:	4b7b      	ldr	r3, [pc, #492]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6a3a      	ldr	r2, [r7, #32]
 800a6b2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	3338      	adds	r3, #56	@ 0x38
 800a6ba:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800a6bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f000 fdce 	bl	800b264 <_ux_utility_memory_allocate>
 800a6c8:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800a6d6:	2312      	movs	r3, #18
 800a6d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6da:	e001      	b.n	800a6e0 <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800a6ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f040 8090 	bne.w	800a814 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800a6f4:	4b69      	ldr	r3, [pc, #420]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800a6fe:	4b67      	ldr	r3, [pc, #412]	@ (800a89c <_ux_device_stack_initialize+0x278>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a706:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800a708:	2300      	movs	r3, #0
 800a70a:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800a710:	2300      	movs	r3, #0
 800a712:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800a714:	e054      	b.n	800a7c0 <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800a71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d029      	beq.n	800a77c <_ux_device_stack_initialize+0x158>
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d13e      	bne.n	800a7aa <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72e:	3303      	adds	r3, #3
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10b      	bne.n	800a74e <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800a736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	4413      	add	r3, r2
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800a73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a740:	3304      	adds	r3, #4
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800a746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a748:	3301      	adds	r3, #1
 800a74a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a74c:	e00a      	b.n	800a764 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	3304      	adds	r3, #4
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	461a      	mov	r2, r3
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	4293      	cmp	r3, r2
 800a75a:	d203      	bcs.n	800a764 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75e:	3304      	adds	r3, #4
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800a764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a766:	3302      	adds	r3, #2
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76e:	4293      	cmp	r3, r2
 800a770:	d21d      	bcs.n	800a7ae <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800a772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a774:	3302      	adds	r3, #2
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800a77a:	e018      	b.n	800a7ae <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800a77c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a780:	429a      	cmp	r2, r3
 800a782:	d901      	bls.n	800a788 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800a788:	2300      	movs	r3, #0
 800a78a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800a78c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	4413      	add	r3, r2
 800a792:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800a794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a798:	429a      	cmp	r2, r3
 800a79a:	d901      	bls.n	800a7a0 <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800a79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a79e:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800a7a8:	e002      	b.n	800a7b0 <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800a7aa:	bf00      	nop
 800a7ac:	e000      	b.n	800a7b0 <_ux_device_stack_initialize+0x18c>
                break;
 800a7ae:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800a7b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800a7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	4413      	add	r3, r2
 800a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1a7      	bne.n	800a716 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800a7c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ca:	4413      	add	r3, r2
 800a7cc:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800a7ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d901      	bls.n	800a7da <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d8:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800a7da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d901      	bls.n	800a7e6 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e4:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d106      	bne.n	800a7fa <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800a7ec:	2242      	movs	r2, #66	@ 0x42
 800a7ee:	2103      	movs	r1, #3
 800a7f0:	2002      	movs	r0, #2
 800a7f2:	f000 fb9f 	bl	800af34 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800a7f6:	2342      	movs	r3, #66	@ 0x42
 800a7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800a7fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d109      	bne.n	800a814 <_ux_device_stack_initialize+0x1f0>
 800a800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a802:	2b0f      	cmp	r3, #15
 800a804:	d906      	bls.n	800a814 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800a806:	2212      	movs	r2, #18
 800a808:	2103      	movs	r1, #3
 800a80a:	2002      	movs	r0, #2
 800a80c:	f000 fb92 	bl	800af34 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800a810:	2312      	movs	r3, #18
 800a812:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800a814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a816:	2b00      	cmp	r3, #0
 800a818:	d118      	bne.n	800a84c <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a81e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800a822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a824:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a826:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800a82a:	2320      	movs	r3, #32
 800a82c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a82e:	2100      	movs	r1, #0
 800a830:	2000      	movs	r0, #0
 800a832:	f000 fe0b 	bl	800b44c <_ux_utility_memory_allocate_mulc_safe>
 800a836:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800a83e:	2312      	movs	r3, #18
 800a840:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a842:	e003      	b.n	800a84c <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800a84c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d042      	beq.n	800a8d8 <_ux_device_stack_initialize+0x2b4>
 800a852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a854:	2b00      	cmp	r3, #0
 800a856:	d13f      	bne.n	800a8d8 <_ux_device_stack_initialize+0x2b4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800a858:	2380      	movs	r3, #128	@ 0x80
 800a85a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a85c:	2100      	movs	r1, #0
 800a85e:	2000      	movs	r0, #0
 800a860:	f000 fdf4 	bl	800b44c <_ux_utility_memory_allocate_mulc_safe>
 800a864:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800a866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800a86c:	2312      	movs	r3, #18
 800a86e:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800a870:	e034      	b.n	800a8dc <_ux_device_stack_initialize+0x2b8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a876:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800a87a:	e022      	b.n	800a8c2 <_ux_device_stack_initialize+0x29e>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800a87c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a880:	2101      	movs	r1, #1
 800a882:	2000      	movs	r0, #0
 800a884:	f000 fcee 	bl	800b264 <_ux_utility_memory_allocate>
 800a888:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800a88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88c:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800a88e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d104      	bne.n	800a8a0 <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800a896:	2312      	movs	r3, #18
 800a898:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800a89a:	e01c      	b.n	800a8d6 <_ux_device_stack_initialize+0x2b2>
 800a89c:	20011514 	.word	0x20011514
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800a8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a2:	3350      	adds	r3, #80	@ 0x50
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4932      	ldr	r1, [pc, #200]	@ (800a970 <_ux_device_stack_initialize+0x34c>)
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 ffe5 	bl	800b878 <_ux_utility_semaphore_create>
 800a8ae:	64b8      	str	r0, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800a8b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d002      	beq.n	800a8bc <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800a8b6:	2315      	movs	r3, #21
 800a8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800a8ba:	e00c      	b.n	800a8d6 <_ux_device_stack_initialize+0x2b2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800a8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8be:	3380      	adds	r3, #128	@ 0x80
 800a8c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800a8c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8ca:	01db      	lsls	r3, r3, #7
 800a8cc:	4413      	add	r3, r2
 800a8ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d3d3      	bcc.n	800a87c <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800a8d4:	e002      	b.n	800a8dc <_ux_device_stack_initialize+0x2b8>
 800a8d6:	e001      	b.n	800a8dc <_ux_device_stack_initialize+0x2b8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800a8dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <_ux_device_stack_initialize+0x2c2>
        return(UX_SUCCESS);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e040      	b.n	800a968 <_ux_device_stack_initialize+0x344>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800a8e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d021      	beq.n	800a930 <_ux_device_stack_initialize+0x30c>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800a8ec:	e014      	b.n	800a918 <_ux_device_stack_initialize+0x2f4>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800a8ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d004      	beq.n	800a900 <_ux_device_stack_initialize+0x2dc>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800a8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f8:	3350      	adds	r3, #80	@ 0x50
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 ffd6 	bl	800b8ac <_ux_utility_semaphore_delete>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800a900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <_ux_device_stack_initialize+0x2ee>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800a908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fecd 	bl	800b6ac <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800a912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a914:	3b80      	subs	r3, #128	@ 0x80
 800a916:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a91e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a920:	429a      	cmp	r2, r3
 800a922:	d2e4      	bcs.n	800a8ee <_ux_device_stack_initialize+0x2ca>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 febe 	bl	800b6ac <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <_ux_device_stack_initialize+0x322>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a940:	4618      	mov	r0, r3
 800a942:	f000 feb3 	bl	800b6ac <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d004      	beq.n	800a958 <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a952:	4618      	mov	r0, r3
 800a954:	f000 feaa 	bl	800b6ac <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800a958:	4b06      	ldr	r3, [pc, #24]	@ (800a974 <_ux_device_stack_initialize+0x350>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fea3 	bl	800b6ac <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800a966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3750      	adds	r7, #80	@ 0x50
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	0800d4cc 	.word	0x0800d4cc
 800a974:	20011514 	.word	0x20011514

0800a978 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a980:	4b20      	ldr	r3, [pc, #128]	@ (800aa04 <_ux_device_stack_interface_delete+0x8c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3320      	adds	r3, #32
 800a986:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800a98e:	e01c      	b.n	800a9ca <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800a99a:	4b1a      	ldr	r3, [pc, #104]	@ (800aa04 <_ux_device_stack_interface_delete+0x8c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	210f      	movs	r1, #15
 800a9a8:	68b8      	ldr	r0, [r7, #8]
 800a9aa:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1df      	bne.n	800a990 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699a      	ldr	r2, [r3, #24]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20011514 	.word	0x20011514

0800aa08 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b092      	sub	sp, #72	@ 0x48
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800aa14:	4b82      	ldr	r3, [pc, #520]	@ (800ac20 <_ux_device_stack_interface_set+0x218>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800aa1a:	4b81      	ldr	r3, [pc, #516]	@ (800ac20 <_ux_device_stack_interface_set+0x218>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3320      	adds	r3, #32
 800aa20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa28:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800aa32:	e009      	b.n	800aa48 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800aa34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d009      	beq.n	800aa50 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800aa3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa3e:	3320      	adds	r3, #32
 800aa40:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800aa42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa44:	3b01      	subs	r3, #1
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800aa48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f2      	bne.n	800aa34 <_ux_device_stack_interface_set+0x2c>
 800aa4e:	e000      	b.n	800aa52 <_ux_device_stack_interface_set+0x4a>
            break;
 800aa50:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800aa52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800aa58:	2312      	movs	r3, #18
 800aa5a:	e0dd      	b.n	800ac18 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800aa5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800aa62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa64:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800aa66:	2209      	movs	r2, #9
 800aa68:	496e      	ldr	r1, [pc, #440]	@ (800ac24 <_ux_device_stack_interface_set+0x21c>)
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fb5c 	bl	800b128 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa7e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800aa82:	e00e      	b.n	800aaa2 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aa8a:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800aa8c:	e002      	b.n	800aa94 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800aa8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f8      	bne.n	800aa8e <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800aa9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa0:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800aaba:	e0a4      	b.n	800ac06 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800aac8:	7efb      	ldrb	r3, [r7, #27]
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d009      	beq.n	800aae2 <_ux_device_stack_interface_set+0xda>
 800aace:	2b05      	cmp	r3, #5
 800aad0:	f300 8090 	bgt.w	800abf4 <_ux_device_stack_interface_set+0x1ec>
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	f000 8087 	beq.w	800abe8 <_ux_device_stack_interface_set+0x1e0>
 800aada:	2b04      	cmp	r3, #4
 800aadc:	f000 8084 	beq.w	800abe8 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800aae0:	e088      	b.n	800abf4 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800aaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800aaf0:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800aaf2:	e00d      	b.n	800ab10 <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d103      	bne.n	800ab04 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafe:	2201      	movs	r2, #1
 800ab00:	601a      	str	r2, [r3, #0]
                    break;
 800ab02:	e008      	b.n	800ab16 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800ab04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab06:	3380      	adds	r3, #128	@ 0x80
 800ab08:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1ee      	bne.n	800aaf4 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800ab1c:	2312      	movs	r3, #18
 800ab1e:	e07b      	b.n	800ac18 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800ab24:	2206      	movs	r2, #6
 800ab26:	4940      	ldr	r1, [pc, #256]	@ (800ac28 <_ux_device_stack_interface_set+0x220>)
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 fafd 	bl	800b128 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab30:	3320      	adds	r3, #32
 800ab32:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800ab38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ab3e:	4b38      	ldr	r3, [pc, #224]	@ (800ac20 <_ux_device_stack_interface_set+0x218>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d118      	bne.n	800ab7c <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	7bdb      	ldrb	r3, [r3, #15]
 800ab4e:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d012      	beq.n	800ab7c <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	8a1b      	ldrh	r3, [r3, #16]
 800ab5a:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800ab5e:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	0adb      	lsrs	r3, r3, #11
 800ab6a:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	fb02 f303 	mul.w	r3, r2, r3
 800ab7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab80:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab86:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8e:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab94:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800ab96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab9a:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aba2:	210e      	movs	r1, #14
 800aba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aba6:	4798      	blx	r3
 800aba8:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d004      	beq.n	800abba <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
                return(status);
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	e02e      	b.n	800ac18 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800abba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800abc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abc6:	61da      	str	r2, [r3, #28]
            break;
 800abc8:	e015      	b.n	800abf6 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800abca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800abd0:	e002      	b.n	800abd8 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800abd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800abd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f8      	bne.n	800abd2 <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800abe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abe4:	615a      	str	r2, [r3, #20]
            break;
 800abe6:	e006      	b.n	800abf6 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800abe8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800abea:	f000 f81f 	bl	800ac2c <_ux_device_stack_interface_start>
 800abee:	6238      	str	r0, [r7, #32]
            return(status);
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	e011      	b.n	800ac18 <_ux_device_stack_interface_set+0x210>
            break;
 800abf4:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f47f af57 	bne.w	800aabc <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800ac0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ac10:	f000 f80c 	bl	800ac2c <_ux_device_stack_interface_start>
 800ac14:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800ac16:	6a3b      	ldr	r3, [r7, #32]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3748      	adds	r7, #72	@ 0x48
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20011514 	.word	0x20011514
 800ac24:	20000048 	.word	0x20000048
 800ac28:	20000028 	.word	0x20000028

0800ac2c <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b090      	sub	sp, #64	@ 0x40
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800ac34:	4b25      	ldr	r3, [pc, #148]	@ (800accc <_ux_device_stack_interface_start+0xa0>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7b9b      	ldrb	r3, [r3, #14]
 800ac3c:	3344      	adds	r3, #68	@ 0x44
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800ac46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800ac4c:	2357      	movs	r3, #87	@ 0x57
 800ac4e:	e038      	b.n	800acc2 <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ac50:	4b1e      	ldr	r3, [pc, #120]	@ (800accc <_ux_device_stack_interface_start+0xa0>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3320      	adds	r3, #32
 800ac56:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7c5b      	ldrb	r3, [r3, #17]
 800ac64:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7c9b      	ldrb	r3, [r3, #18]
 800ac6a:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7cdb      	ldrb	r3, [r3, #19]
 800ac70:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800ac72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac74:	899b      	ldrh	r3, [r3, #12]
 800ac76:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800ac78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7a:	89db      	ldrh	r3, [r3, #14]
 800ac7c:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ac86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8a:	f107 0208 	add.w	r2, r7, #8
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
 800ac92:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800ac94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d112      	bne.n	800acc0 <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9c:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800aca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca6:	f107 0208 	add.w	r2, r7, #8
 800acaa:	4610      	mov	r0, r2
 800acac:	4798      	blx	r3
 800acae:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800acb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d102      	bne.n	800acbc <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acba:	605a      	str	r2, [r3, #4]

        return(status); 
 800acbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbe:	e000      	b.n	800acc2 <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800acc0:	2357      	movs	r3, #87	@ 0x57
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3740      	adds	r7, #64	@ 0x40
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	20011514 	.word	0x20011514

0800acd0 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	@ 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800acdc:	4b29      	ldr	r3, [pc, #164]	@ (800ad84 <_ux_device_stack_set_feature+0xb4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ace2:	4b28      	ldr	r3, [pc, #160]	@ (800ad84 <_ux_device_stack_set_feature+0xb4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3320      	adds	r3, #32
 800ace8:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	3318      	adds	r3, #24
 800acee:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f003 0303 	and.w	r3, r3, #3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <_ux_device_stack_set_feature+0x30>
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d014      	beq.n	800ad28 <_ux_device_stack_set_feature+0x58>
 800acfe:	e036      	b.n	800ad6e <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d10e      	bne.n	800ad24 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800ad06:	4b1f      	ldr	r3, [pc, #124]	@ (800ad84 <_ux_device_stack_set_feature+0xb4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800ad12:	4b1c      	ldr	r3, [pc, #112]	@ (800ad84 <_ux_device_stack_set_feature+0xb4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* OK. */
                return (UX_SUCCESS);
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e02d      	b.n	800ad7c <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800ad20:	2354      	movs	r3, #84	@ 0x54
 800ad22:	e02b      	b.n	800ad7c <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800ad24:	2354      	movs	r3, #84	@ 0x54
 800ad26:	e029      	b.n	800ad7c <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ad2e:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800ad30:	e01a      	b.n	800ad68 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800ad38:	e010      	b.n	800ad5c <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	7b9b      	ldrb	r3, [r3, #14]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d107      	bne.n	800ad56 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	2114      	movs	r1, #20
 800ad4e:	69f8      	ldr	r0, [r7, #28]
 800ad50:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800ad52:	2300      	movs	r3, #0
 800ad54:	e012      	b.n	800ad7c <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1eb      	bne.n	800ad3a <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e1      	bne.n	800ad32 <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	2114      	movs	r1, #20
 800ad76:	69f8      	ldr	r0, [r7, #28]
 800ad78:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ad7a:	2300      	movs	r3, #0
    }
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3728      	adds	r7, #40	@ 0x28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20011514 	.word	0x20011514

0800ad88 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ad92:	4b19      	ldr	r3, [pc, #100]	@ (800adf8 <_ux_device_stack_transfer_abort+0x70>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad9e:	f3ef 8310 	mrs	r3, PRIMASK
 800ada2:	617b      	str	r3, [r7, #20]
    return(posture);
 800ada4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ada6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ada8:	b672      	cpsid	i
    return(int_posture);
 800adaa:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800adac:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d114      	bne.n	800ade0 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	210d      	movs	r1, #13
 800adbe:	69f8      	ldr	r0, [r7, #28]
 800adc0:	4798      	blx	r3
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f383 8810 	msr	PRIMASK, r3
}
 800adcc:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2204      	movs	r2, #4
 800add2:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3330      	adds	r3, #48	@ 0x30
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fd74 	bl	800b8c6 <_ux_utility_semaphore_put>
 800adde:	e005      	b.n	800adec <_ux_device_stack_transfer_abort+0x64>
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f383 8810 	msr	PRIMASK, r3
}
 800adea:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20011514 	.word	0x20011514

0800adfc <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3320      	adds	r3, #32
 800ae0a:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f7ff ffba 	bl	800ad88 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	@ 0x38
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800ae34:	2300      	movs	r3, #0
 800ae36:	e077      	b.n	800af28 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae38:	f3ef 8310 	mrs	r3, PRIMASK
 800ae3c:	623b      	str	r3, [r7, #32]
    return(posture);
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ae40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae42:	b672      	cpsid	i
    return(int_posture);
 800ae44:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800ae46:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800ae48:	4b39      	ldr	r3, [pc, #228]	@ (800af30 <_ux_device_stack_transfer_request+0x110>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d005      	beq.n	800ae62 <_ux_device_stack_transfer_request+0x42>
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d002      	beq.n	800ae62 <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d115      	bne.n	800ae8e <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	f383 8810 	msr	PRIMASK, r3
}
 800ae72:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ae74:	4b2e      	ldr	r3, [pc, #184]	@ (800af30 <_ux_device_stack_transfer_request+0x110>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	7bdb      	ldrb	r3, [r3, #15]
 800ae84:	f003 0303 	and.w	r3, r3, #3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <_ux_device_stack_transfer_request+0x84>
 800ae8c:	e01a      	b.n	800aec4 <_ux_device_stack_transfer_request+0xa4>
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f383 8810 	msr	PRIMASK, r3
}
 800ae98:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800ae9a:	2325      	movs	r3, #37	@ 0x25
 800ae9c:	e044      	b.n	800af28 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800ae9e:	2064      	movs	r0, #100	@ 0x64
 800aea0:	f000 f928 	bl	800b0f4 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800aea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d0f8      	beq.n	800ae9e <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	7b9b      	ldrb	r3, [r3, #14]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da03      	bge.n	800aebe <_ux_device_stack_transfer_request+0x9e>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2203      	movs	r2, #3
 800aeba:	629a      	str	r2, [r3, #40]	@ 0x28
 800aebc:	e002      	b.n	800aec4 <_ux_device_stack_transfer_request+0xa4>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2202      	movs	r2, #2
 800aec2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d115      	bne.n	800aef8 <_ux_device_stack_transfer_request+0xd8>
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d012      	beq.n	800aef8 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d00e      	beq.n	800aef8 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800aeda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aedc:	8a1b      	ldrh	r3, [r3, #16]
 800aede:	461a      	mov	r2, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aee6:	fb01 f202 	mul.w	r2, r1, r2
 800aeea:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	651a      	str	r2, [r3, #80]	@ 0x50
 800aef6:	e002      	b.n	800aefe <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800af18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	210c      	movs	r1, #12
 800af20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af22:	4798      	blx	r3
 800af24:	6278      	str	r0, [r7, #36]	@ 0x24

    /* And return the status.  */
    return(status);
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

#endif
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3738      	adds	r7, #56	@ 0x38
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	20011514 	.word	0x20011514

0800af34 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800af40:	4b0c      	ldr	r3, [pc, #48]	@ (800af74 <_ux_system_error_handler+0x40>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	641a      	str	r2, [r3, #64]	@ 0x40
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800af48:	4b0a      	ldr	r3, [pc, #40]	@ (800af74 <_ux_system_error_handler+0x40>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af4e:	3201      	adds	r2, #1
 800af50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800af52:	4b08      	ldr	r3, [pc, #32]	@ (800af74 <_ux_system_error_handler+0x40>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d006      	beq.n	800af6a <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800af5c:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <_ux_system_error_handler+0x40>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	4798      	blx	r3
    }
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20011518 	.word	0x20011518

0800af78 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08a      	sub	sp, #40	@ 0x28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <_ux_system_initialize+0x1a>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800af92:	23fa      	movs	r3, #250	@ 0xfa
 800af94:	e08a      	b.n	800b0ac <_ux_system_initialize+0x134>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	2100      	movs	r1, #0
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 fc0a 	bl	800b7b4 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800afa0:	4a44      	ldr	r2, [pc, #272]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800afa6:	234c      	movs	r3, #76	@ 0x4c
 800afa8:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afae:	4413      	add	r3, r2
 800afb0:	4a41      	ldr	r2, [pc, #260]	@ (800b0b8 <_ux_system_initialize+0x140>)
 800afb2:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800afbc:	4b3d      	ldr	r3, [pc, #244]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68f9      	ldr	r1, [r7, #12]
 800afc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afc4:	440a      	add	r2, r1
 800afc6:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800afc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afca:	3314      	adds	r3, #20
 800afcc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00c      	beq.n	800afee <_ux_system_initialize+0x76>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d009      	beq.n	800afee <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800afda:	4b36      	ldr	r3, [pc, #216]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68f9      	ldr	r1, [r7, #12]
 800afe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe2:	440a      	add	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	3314      	adds	r3, #20
 800afea:	627b      	str	r3, [r7, #36]	@ 0x24
 800afec:	e005      	b.n	800affa <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800afee:	4b31      	ldr	r3, [pc, #196]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4b30      	ldr	r3, [pc, #192]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6812      	ldr	r2, [r2, #0]
 800aff8:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	4413      	add	r3, r2
 800b000:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	3307      	adds	r3, #7
 800b006:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	f023 0307 	bic.w	r3, r3, #7
 800b00e:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	4413      	add	r3, r2
 800b016:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	6a3a      	ldr	r2, [r7, #32]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d301      	bcc.n	800b024 <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800b020:	2312      	movs	r3, #18
 800b022:	e043      	b.n	800b0ac <_ux_system_initialize+0x134>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800b02c:	4b21      	ldr	r3, [pc, #132]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6a39      	ldr	r1, [r7, #32]
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fa2e 	bl	800b498 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d026      	beq.n	800b090 <_ux_system_initialize+0x118>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d023      	beq.n	800b090 <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	2100      	movs	r1, #0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fbb1 	bl	800b7b4 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	3307      	adds	r3, #7
 800b05a:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	f023 0307 	bic.w	r3, r3, #7
 800b062:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	4413      	add	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	429a      	cmp	r2, r3
 800b072:	d301      	bcc.n	800b078 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800b074:	2312      	movs	r3, #18
 800b076:	e019      	b.n	800b0ac <_ux_system_initialize+0x134>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800b080:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	6a39      	ldr	r1, [r7, #32]
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fa04 	bl	800b498 <_ux_utility_memory_byte_pool_create>
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800b090:	4b08      	ldr	r3, [pc, #32]	@ (800b0b4 <_ux_system_initialize+0x13c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	330c      	adds	r3, #12
 800b096:	4909      	ldr	r1, [pc, #36]	@ (800b0bc <_ux_system_initialize+0x144>)
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 fba5 	bl	800b7e8 <_ux_utility_mutex_create>
 800b09e:	6138      	str	r0, [r7, #16]
    if(status != UX_SUCCESS)
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <_ux_system_initialize+0x132>
        return(UX_MUTEX_ERROR);
 800b0a6:	2317      	movs	r3, #23
 800b0a8:	e000      	b.n	800b0ac <_ux_system_initialize+0x134>
#endif

    return(UX_SUCCESS);
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3728      	adds	r7, #40	@ 0x28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20011518 	.word	0x20011518
 800b0b8:	20011514 	.word	0x20011514
 800b0bc:	0800d4ec 	.word	0x0800d4ec

0800b0c0 <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <_uxe_system_initialize+0x1a>
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800b0da:	23fa      	movs	r3, #250	@ 0xfa
 800b0dc:	e006      	b.n	800b0ec <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff ff47 	bl	800af78 <_ux_system_initialize>
 800b0ea:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2264      	movs	r2, #100	@ 0x64
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	4a07      	ldr	r2, [pc, #28]	@ (800b124 <_ux_utility_delay_ms+0x30>)
 800b106:	fba2 2303 	umull	r2, r3, r2, r3
 800b10a:	099b      	lsrs	r3, r3, #6
 800b10c:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7fc ff8d 	bl	8008034 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800b11a:	bf00      	nop
}
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	10624dd3 	.word	0x10624dd3

0800b128 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800b136:	e041      	b.n	800b1bc <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	60ba      	str	r2, [r7, #8]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b02      	cmp	r3, #2
 800b142:	d01e      	beq.n	800b182 <_ux_utility_descriptor_parse+0x5a>
 800b144:	2b04      	cmp	r3, #4
 800b146:	d12f      	bne.n	800b1a8 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800b148:	e004      	b.n	800b154 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	603a      	str	r2, [r7, #0]
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1f5      	bne.n	800b14a <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f835 	bl	800b1ce <_ux_utility_long_get>
 800b164:	4602      	mov	r2, r0
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3304      	adds	r3, #4
 800b16e:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	3304      	adds	r3, #4
 800b174:	603b      	str	r3, [r7, #0]
            break;
 800b176:	e021      	b.n	800b1bc <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	603a      	str	r2, [r7, #0]
 800b17e:	2200      	movs	r2, #0
 800b180:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f5      	bne.n	800b178 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 fba7 	bl	800b8e0 <_ux_utility_short_get>
 800b192:	4603      	mov	r3, r0
 800b194:	b29a      	uxth	r2, r3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3302      	adds	r3, #2
 800b19e:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	3302      	adds	r3, #2
 800b1a4:	603b      	str	r3, [r7, #0]
            break;
 800b1a6:	e009      	b.n	800b1bc <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1e5a      	subs	r2, r3, #1
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1b8      	bne.n	800b138 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800b1c6:	bf00      	nop
}
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	607a      	str	r2, [r7, #4]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	041b      	lsls	r3, r3, #16
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	061b      	lsls	r3, r3, #24
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800b20c:	68fb      	ldr	r3, [r7, #12]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	607a      	str	r2, [r7, #4]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	0a19      	lsrs	r1, r3, #8
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	607a      	str	r2, [r7, #4]
 800b23a:	b2ca      	uxtb	r2, r1
 800b23c:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	0c19      	lsrs	r1, r3, #16
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	b2ca      	uxtb	r2, r1
 800b24a:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	0e1b      	lsrs	r3, r3, #24
 800b250:	b2da      	uxtb	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800b256:	bf00      	nop
}
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08e      	sub	sp, #56	@ 0x38
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d104      	bne.n	800b280 <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800b276:	4b73      	ldr	r3, [pc, #460]	@ (800b444 <_ux_utility_memory_allocate+0x1e0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b27e:	e009      	b.n	800b294 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d104      	bne.n	800b290 <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800b286:	4b6f      	ldr	r3, [pc, #444]	@ (800b444 <_ux_utility_memory_allocate+0x1e0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28e:	e001      	b.n	800b294 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800b290:	2300      	movs	r3, #0
 800b292:	e0d2      	b.n	800b43a <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800b294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800b29a:	2300      	movs	r3, #0
 800b29c:	e0cd      	b.n	800b43a <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e0c8      	b.n	800b43a <_ux_utility_memory_allocate+0x1d6>
    }

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800b2a8:	4b66      	ldr	r3, [pc, #408]	@ (800b444 <_ux_utility_memory_allocate+0x1e0>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 facb 	bl	800b84a <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ba:	d101      	bne.n	800b2c0 <_ux_utility_memory_allocate+0x5c>
        memory_alignment = UX_NO_ALIGN;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b06      	cmp	r3, #6
 800b2c4:	d801      	bhi.n	800b2ca <_ux_utility_memory_allocate+0x66>
        memory_alignment =  UX_ALIGN_MIN;
 800b2c6:	2307      	movs	r3, #7
 800b2c8:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3307      	adds	r3, #7
 800b2ce:	f023 0307 	bic.w	r3, r3, #7
 800b2d2:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b07      	cmp	r3, #7
 800b2d8:	d805      	bhi.n	800b2e6 <_ux_utility_memory_allocate+0x82>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b2de:	f000 f92b 	bl	800b538 <_ux_utility_memory_byte_pool_search>
 800b2e2:	6338      	str	r0, [r7, #48]	@ 0x30
 800b2e4:	e007      	b.n	800b2f6 <_ux_utility_memory_allocate+0x92>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b2f0:	f000 f922 	bl	800b538 <_ux_utility_memory_byte_pool_search>
 800b2f4:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10c      	bne.n	800b316 <_ux_utility_memory_allocate+0xb2>
    {

        /* We could not find a memory block.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b2fc:	4b51      	ldr	r3, [pc, #324]	@ (800b444 <_ux_utility_memory_allocate+0x1e0>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	330c      	adds	r3, #12
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fa96 	bl	800b834 <_ux_utility_mutex_off>

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800b308:	2212      	movs	r2, #18
 800b30a:	2108      	movs	r1, #8
 800b30c:	2002      	movs	r0, #2
 800b30e:	f7ff fe11 	bl	800af34 <_ux_system_error_handler>

        return(UX_NULL);
 800b312:	2300      	movs	r3, #0
 800b314:	e091      	b.n	800b43a <_ux_utility_memory_allocate+0x1d6>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b318:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800b31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800b328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32a:	3b08      	subs	r3, #8
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	3308      	adds	r3, #8
 800b332:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800b334:	6a3a      	ldr	r2, [r7, #32]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4013      	ands	r3, r2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d02f      	beq.n	800b39e <_ux_utility_memory_allocate+0x13a>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	3308      	adds	r3, #8
 800b342:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800b344:	6a3a      	ldr	r2, [r7, #32]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	4413      	add	r3, r2
 800b34a:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	43db      	mvns	r3, r3
 800b350:	6a3a      	ldr	r2, [r7, #32]
 800b352:	4013      	ands	r3, r2
 800b354:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	3b08      	subs	r3, #8
 800b35a:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	3304      	adds	r3, #4
 800b370:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	4a33      	ldr	r2, [pc, #204]	@ (800b448 <_ux_utility_memory_allocate+0x1e4>)
 800b37a:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800b37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b384:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b38a:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b38c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	461a      	mov	r2, r3
 800b394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800b39e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	2b13      	cmp	r3, #19
 800b3a6:	d91e      	bls.n	800b3e6 <_ux_utility_memory_allocate+0x182>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ae:	4413      	add	r3, r2
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b448 <_ux_utility_memory_allocate+0x1e4>)
 800b3d0:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3da:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e0:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3f4:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800b3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	f1a3 0208 	sub.w	r2, r3, #8
 800b402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b404:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800b406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d105      	bne.n	800b41c <_ux_utility_memory_allocate+0x1b8>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800b414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41a:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	3308      	adds	r3, #8
 800b420:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800b422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b424:	2100      	movs	r1, #0
 800b426:	69b8      	ldr	r0, [r7, #24]
 800b428:	f000 f9c4 	bl	800b7b4 <_ux_utility_memory_set>
    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)
        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b42c:	4b05      	ldr	r3, [pc, #20]	@ (800b444 <_ux_utility_memory_allocate+0x1e0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	4618      	mov	r0, r3
 800b434:	f000 f9fe 	bl	800b834 <_ux_utility_mutex_off>

    return(work_ptr);
 800b438:	69bb      	ldr	r3, [r7, #24]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3738      	adds	r7, #56	@ 0x38
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20011518 	.word	0x20011518
 800b448:	ffffeeee 	.word	0xffffeeee

0800b44c <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00a      	beq.n	800b476 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800b460:	2100      	movs	r1, #0
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	fba3 2302 	umull	r2, r3, r3, r2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d000      	beq.n	800b470 <_ux_utility_memory_allocate_mulc_safe+0x24>
 800b46e:	2101      	movs	r1, #1
 800b470:	460b      	mov	r3, r1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <_ux_utility_memory_allocate_mulc_safe+0x40>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	fb02 f303 	mul.w	r3, r2, r3
 800b47e:	461a      	mov	r2, r3
 800b480:	68b9      	ldr	r1, [r7, #8]
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff feee 	bl	800b264 <_ux_utility_memory_allocate>
 800b488:	4603      	mov	r3, r0
 800b48a:	e000      	b.n	800b48e <_ux_utility_memory_allocate_mulc_safe+0x42>
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800b4a4:	2214      	movs	r2, #20
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f983 	bl	800b7b4 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f1a3 0208 	sub.w	r2, r3, #8
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b4dc:	69fa      	ldr	r2, [r7, #28]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	69ba      	ldr	r2, [r7, #24]
 800b4f6:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	3b04      	subs	r3, #4
 800b4fc:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	69fa      	ldr	r2, [r7, #28]
 800b514:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	3304      	adds	r3, #4
 800b51e:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4a03      	ldr	r2, [pc, #12]	@ (800b534 <_ux_utility_memory_byte_pool_create+0x9c>)
 800b528:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	ffffeeee 	.word	0xffffeeee

0800b538 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b538:	b480      	push	{r7}
 800b53a:	b08d      	sub	sp, #52	@ 0x34
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	3b02      	subs	r3, #2
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	4413      	add	r3, r2
 800b554:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d301      	bcc.n	800b562 <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800b55e:	2300      	movs	r3, #0
 800b560:	e07d      	b.n	800b65e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d308      	bcc.n	800b580 <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68d9      	ldr	r1, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d901      	bls.n	800b584 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800b580:	2300      	movs	r3, #0
 800b582:	e06c      	b.n	800b65e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	3301      	adds	r3, #1
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800b592:	2300      	movs	r3, #0
 800b594:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b598:	3304      	adds	r3, #4
 800b59a:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a31      	ldr	r2, [pc, #196]	@ (800b66c <_ux_utility_memory_byte_pool_search+0x134>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d143      	bne.n	800b632 <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d104      	bne.n	800b5ba <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b4:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5bc:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ce:	3b08      	subs	r3, #8
 800b5d0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800b5d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d23a      	bcs.n	800b650 <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800b5da:	2300      	movs	r3, #0
 800b5dc:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b66c <_ux_utility_memory_byte_pool_search+0x134>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d113      	bne.n	800b61a <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	1e5a      	subs	r2, r3, #1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d114      	bne.n	800b63c <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b616:	609a      	str	r2, [r3, #8]
 800b618:	e010      	b.n	800b63c <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	2b00      	cmp	r3, #0
 800b628:	d008      	beq.n	800b63c <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	3b01      	subs	r3, #1
 800b62e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b630:	e004      	b.n	800b63c <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b634:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800b63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	3b01      	subs	r3, #1
 800b646:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1a3      	bne.n	800b596 <_ux_utility_memory_byte_pool_search+0x5e>
 800b64e:	e000      	b.n	800b652 <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800b650:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800b658:	2300      	movs	r3, #0
 800b65a:	e000      	b.n	800b65e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3734      	adds	r7, #52	@ 0x34
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	ffffeeee 	.word	0xffffeeee

0800b670 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800b670:	b480      	push	{r7}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800b684:	e007      	b.n	800b696 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	1c53      	adds	r3, r2, #1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	1c59      	adds	r1, r3, #1
 800b690:	6139      	str	r1, [r7, #16]
 800b692:	7812      	ldrb	r2, [r2, #0]
 800b694:	701a      	strb	r2, [r3, #0]
    while(length--)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	1e5a      	subs	r2, r3, #1
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f2      	bne.n	800b686 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800b6a0:	bf00      	nop
}
 800b6a2:	371c      	adds	r7, #28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08a      	sub	sp, #40	@ 0x28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800b6b4:	4b3d      	ldr	r3, [pc, #244]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	330c      	adds	r3, #12
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 f8c5 	bl	800b84a <_ux_utility_mutex_on>
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d03b      	beq.n	800b746 <_ux_utility_memory_free+0x9a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	3b08      	subs	r3, #8
 800b6d2:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a33      	ldr	r2, [pc, #204]	@ (800b7b0 <_ux_utility_memory_free+0x104>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d022      	beq.n	800b72e <_ux_utility_memory_free+0x82>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <_ux_utility_memory_free+0x6a>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800b6fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800b704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b706:	429a      	cmp	r2, r3
 800b708:	d029      	beq.n	800b75e <_ux_utility_memory_free+0xb2>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 800b70a:	4b28      	ldr	r3, [pc, #160]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800b710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b712:	429a      	cmp	r2, r3
 800b714:	d023      	beq.n	800b75e <_ux_utility_memory_free+0xb2>
            {

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b716:	4b25      	ldr	r3, [pc, #148]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	330c      	adds	r3, #12
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f889 	bl	800b834 <_ux_utility_mutex_off>

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b722:	2219      	movs	r2, #25
 800b724:	2108      	movs	r1, #8
 800b726:	2002      	movs	r0, #2
 800b728:	f7ff fc04 	bl	800af34 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 800b72c:	e03b      	b.n	800b7a6 <_ux_utility_memory_free+0xfa>
            }
        }
        else
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b72e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	330c      	adds	r3, #12
 800b734:	4618      	mov	r0, r3
 800b736:	f000 f87d 	bl	800b834 <_ux_utility_mutex_off>

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b73a:	2219      	movs	r2, #25
 800b73c:	2108      	movs	r1, #8
 800b73e:	2002      	movs	r0, #2
 800b740:	f7ff fbf8 	bl	800af34 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 800b744:	e02f      	b.n	800b7a6 <_ux_utility_memory_free+0xfa>
    }
    else
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b746:	4b19      	ldr	r3, [pc, #100]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	330c      	adds	r3, #12
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f871 	bl	800b834 <_ux_utility_mutex_off>

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800b752:	2219      	movs	r2, #25
 800b754:	2108      	movs	r1, #8
 800b756:	2002      	movs	r0, #2
 800b758:	f7ff fbec 	bl	800af34 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 800b75c:	e023      	b.n	800b7a6 <_ux_utility_memory_free+0xfa>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	3304      	adds	r3, #4
 800b762:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	4a11      	ldr	r2, [pc, #68]	@ (800b7b0 <_ux_utility_memory_free+0x104>)
 800b76c:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68f9      	ldr	r1, [r7, #12]
 800b77e:	6a3a      	ldr	r2, [r7, #32]
 800b780:	1a8a      	subs	r2, r1, r2
 800b782:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 800b784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b786:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 800b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	6a3a      	ldr	r2, [r7, #32]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d202      	bcs.n	800b798 <_ux_utility_memory_free+0xec>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800b798:	4b04      	ldr	r3, [pc, #16]	@ (800b7ac <_ux_utility_memory_free+0x100>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	330c      	adds	r3, #12
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f848 	bl	800b834 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800b7a4:	bf00      	nop
}
 800b7a6:	3728      	adds	r7, #40	@ 0x28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20011518 	.word	0x20011518
 800b7b0:	ffffeeee 	.word	0xffffeeee

0800b7b4 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800b7c6:	e004      	b.n	800b7d2 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	617a      	str	r2, [r7, #20]
 800b7ce:	7afa      	ldrb	r2, [r7, #11]
 800b7d0:	701a      	strb	r2, [r3, #0]
    while(length--)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	1e5a      	subs	r2, r3, #1
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f5      	bne.n	800b7c8 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800b7dc:	bf00      	nop
}
 800b7de:	371c      	adds	r7, #28
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800b7f2:	2334      	movs	r3, #52	@ 0x34
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7fd fac5 	bl	8008d88 <_txe_mutex_create>
 800b7fe:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d004      	beq.n	800b810 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	2108      	movs	r1, #8
 800b80a:	2002      	movs	r0, #2
 800b80c:	f7ff fb92 	bl	800af34 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800b810:	68fb      	ldr	r3, [r7, #12]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7fd fb4e 	bl	8008ec4 <_txe_mutex_delete>
 800b828:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b82a:	68fb      	ldr	r3, [r7, #12]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7fd fbd9 	bl	8008ff4 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800b842:	bf00      	nop
}
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800b852:	f04f 31ff 	mov.w	r1, #4294967295
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7fd fb72 	bl	8008f40 <_txe_mutex_get>
 800b85c:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	2108      	movs	r1, #8
 800b868:	2002      	movs	r0, #2
 800b86a:	f7ff fb63 	bl	800af34 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
}
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800b884:	231c      	movs	r3, #28
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7fd fbec 	bl	8009068 <_txe_semaphore_create>
 800b890:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	2108      	movs	r1, #8
 800b89c:	2002      	movs	r0, #2
 800b89e:	f7ff fb49 	bl	800af34 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800b8a2:	697b      	ldr	r3, [r7, #20]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7fd fc6d 	bl	8009194 <_txe_semaphore_delete>
 800b8ba:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7fd fc9e 	bl	8009210 <_txe_semaphore_put>
 800b8d4:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	89fb      	ldrh	r3, [r7, #14]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800b900:	89fb      	ldrh	r3, [r7, #14]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b086      	sub	sp, #24
 800b912:	af00      	add	r7, sp, #0
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	60b9      	str	r1, [r7, #8]
 800b918:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800b920:	23ff      	movs	r3, #255	@ 0xff
 800b922:	e01d      	b.n	800b960 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	4413      	add	r3, r2
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00d      	beq.n	800b950 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	3301      	adds	r3, #1
 800b938:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d9f2      	bls.n	800b928 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800b942:	22ff      	movs	r2, #255	@ 0xff
 800b944:	2108      	movs	r1, #8
 800b946:	2002      	movs	r0, #2
 800b948:	f7ff faf4 	bl	800af34 <_ux_system_error_handler>

            return(UX_ERROR);
 800b94c:	23ff      	movs	r3, #255	@ 0xff
 800b94e:	e007      	b.n	800b960 <_ux_utility_string_length_check+0x52>
            break;
 800b950:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b97a:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	6938      	ldr	r0, [r7, #16]
 800b99c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	@ 0x28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9ba:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b9bc:	4b51      	ldr	r3, [pc, #324]	@ (800bb04 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3320      	adds	r3, #32
 800b9c2:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	3338      	adds	r3, #56	@ 0x38
 800b9c8:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800b9d0:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	3354      	adds	r3, #84	@ 0x54
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff ff81 	bl	800b8e0 <_ux_utility_short_get>
 800b9de:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	3354      	adds	r3, #84	@ 0x54
 800b9e4:	3306      	adds	r3, #6
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff ff7a 	bl	800b8e0 <_ux_utility_short_get>
 800b9ec:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b22      	cmp	r3, #34	@ 0x22
 800b9f6:	d009      	beq.n	800ba0c <_ux_device_class_cdc_acm_control_request+0x64>
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b22      	cmp	r3, #34	@ 0x22
 800b9fc:	d877      	bhi.n	800baee <_ux_device_class_cdc_acm_control_request+0x146>
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	d051      	beq.n	800baa8 <_ux_device_class_cdc_acm_control_request+0x100>
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2b21      	cmp	r3, #33	@ 0x21
 800ba08:	d023      	beq.n	800ba52 <_ux_device_class_cdc_acm_control_request+0xaa>
 800ba0a:	e070      	b.n	800baee <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d054      	beq.n	800baf2 <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	69f8      	ldr	r0, [r7, #28]
 800ba4e:	4798      	blx	r3
            }

            break ;
 800ba50:	e04f      	b.n	800baf2 <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b07      	cmp	r3, #7
 800ba56:	d901      	bls.n	800ba5c <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800ba58:	2307      	movs	r3, #7
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7ff fbd7 	bl	800b21a <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	3304      	adds	r3, #4
 800ba72:	69fa      	ldr	r2, [r7, #28]
 800ba74:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 800ba78:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	3305      	adds	r3, #5
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 800ba86:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	3306      	adds	r3, #6
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	f892 207e 	ldrb.w	r2, [r2, #126]	@ 0x7e
 800ba94:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2203      	movs	r2, #3
 800ba9a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800baa0:	6978      	ldr	r0, [r7, #20]
 800baa2:	f7ff f9bd 	bl	800ae20 <_ux_device_stack_transfer_request>
            break; 
 800baa6:	e027      	b.n	800baf8 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff fb8e 	bl	800b1ce <_ux_utility_long_get>
 800bab2:	4602      	mov	r2, r0
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	791a      	ldrb	r2, [r3, #4]
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	795a      	ldrb	r2, [r3, #5]
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	799a      	ldrb	r2, [r3, #6]
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	69f8      	ldr	r0, [r7, #28]
 800baea:	4798      	blx	r3
            }

            break ;
 800baec:	e003      	b.n	800baf6 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800baee:	23ff      	movs	r3, #255	@ 0xff
 800baf0:	e003      	b.n	800bafa <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800baf2:	bf00      	nop
 800baf4:	e000      	b.n	800baf8 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800baf6:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3728      	adds	r7, #40	@ 0x28
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20011514 	.word	0x20011514

0800bb08 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb1a:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	7b9b      	ldrb	r3, [r3, #14]
 800bb2c:	b25b      	sxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	db05      	blt.n	800bb3e <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	e002      	b.n	800bb44 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800bb44:	2126      	movs	r1, #38	@ 0x26
 800bb46:	69f8      	ldr	r0, [r7, #28]
 800bb48:	f7ff f958 	bl	800adfc <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800bb4c:	2126      	movs	r1, #38	@ 0x26
 800bb4e:	69b8      	ldr	r0, [r7, #24]
 800bb50:	f7ff f954 	bl	800adfc <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800bb54:	2200      	movs	r2, #0
 800bb56:	2107      	movs	r1, #7
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f000 f8bb 	bl	800bcd4 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	6938      	ldr	r0, [r7, #16]
 800bb6c:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3720      	adds	r7, #32
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	2b06      	cmp	r3, #6
 800bb98:	d836      	bhi.n	800bc08 <_ux_device_class_cdc_acm_entry+0x80>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <_ux_device_class_cdc_acm_entry+0x18>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbd5 	.word	0x0800bbd5
 800bba4:	0800bbe5 	.word	0x0800bbe5
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bbfd 	.word	0x0800bbfd
 800bbb0:	0800bbbd 	.word	0x0800bbbd
 800bbb4:	0800bc09 	.word	0x0800bc09
 800bbb8:	0800bbc9 	.word	0x0800bbc9
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f829 	bl	800bc14 <_ux_device_class_cdc_acm_initialize>
 800bbc2:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	e020      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f94d 	bl	800be68 <_ux_device_class_cdc_acm_uninitialize>
 800bbce:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	e01a      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	2b0a      	cmp	r3, #10
 800bbda:	d101      	bne.n	800bbe0 <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800bbdc:	2300      	movs	r3, #0
 800bbde:	e014      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800bbe0:	2357      	movs	r3, #87	@ 0x57
 800bbe2:	e012      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff febf 	bl	800b968 <_ux_device_class_cdc_acm_activate>
 800bbea:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	e00c      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ff89 	bl	800bb08 <_ux_device_class_cdc_acm_deactivate>
 800bbf6:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	e006      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff fed3 	bl	800b9a8 <_ux_device_class_cdc_acm_control_request>
 800bc02:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	e000      	b.n	800bc0a <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800bc08:	2354      	movs	r3, #84	@ 0x54
    }   
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop

0800bc14 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800bc22:	2284      	movs	r2, #132	@ 0x84
 800bc24:	2100      	movs	r1, #0
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7ff fb1c 	bl	800b264 <_ux_utility_memory_allocate>
 800bc2c:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800bc34:	2312      	movs	r3, #18
 800bc36:	e045      	b.n	800bcc4 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc42:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	60da      	str	r2, [r3, #12]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	3310      	adds	r3, #16
 800bc60:	491a      	ldr	r1, [pc, #104]	@ (800bccc <_ux_device_class_cdc_acm_initialize+0xb8>)
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fdc0 	bl	800b7e8 <_ux_utility_mutex_create>
 800bc68:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <_ux_device_class_cdc_acm_initialize+0x66>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800bc70:	6938      	ldr	r0, [r7, #16]
 800bc72:	f7ff fd1b 	bl	800b6ac <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800bc76:	2317      	movs	r3, #23
 800bc78:	e024      	b.n	800bcc4 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	3344      	adds	r3, #68	@ 0x44
 800bc7e:	4914      	ldr	r1, [pc, #80]	@ (800bcd0 <_ux_device_class_cdc_acm_initialize+0xbc>)
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff fdb1 	bl	800b7e8 <_ux_utility_mutex_create>
 800bc86:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d009      	beq.n	800bca2 <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	3310      	adds	r3, #16
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fdc1 	bl	800b81a <_ux_utility_mutex_delete>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800bc98:	6938      	ldr	r0, [r7, #16]
 800bc9a:	f7ff fd07 	bl	800b6ac <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800bc9e:	2317      	movs	r3, #23
 800bca0:	e010      	b.n	800bcc4 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800bca8:	679a      	str	r2, [r3, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2208      	movs	r2, #8
 800bcbe:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	0800d4fc 	.word	0x0800d4fc
 800bcd0:	0800d51c 	.word	0x0800d51c

0800bcd4 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b08a      	sub	sp, #40	@ 0x28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800bce0:	2300      	movs	r3, #0
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	f200 80ae 	bhi.w	800be4a <_ux_device_class_cdc_acm_ioctl+0x176>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd45 	.word	0x0800bd45
 800bcfc:	0800bd71 	.word	0x0800bd71
 800bd00:	0800bda5 	.word	0x0800bda5
 800bd04:	0800bd8b 	.word	0x0800bd8b
 800bd08:	0800be4b 	.word	0x0800be4b
 800bd0c:	0800be4b 	.word	0x0800be4b
 800bd10:	0800be05 	.word	0x0800be05
 800bd14:	0800be05 	.word	0x0800be05
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	791a      	ldrb	r2, [r3, #4]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	795a      	ldrb	r2, [r3, #5]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	799a      	ldrb	r2, [r3, #6]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
            
            break;
 800bd42:	e08b      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	719a      	strb	r2, [r3, #6]
            
            break;
 800bd6e:	e075      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	705a      	strb	r2, [r3, #1]
            
            break;
 800bd88:	e068      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	781a      	ldrb	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	785a      	ldrb	r2, [r3, #1]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            
            break;
 800bda2:	e05b      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	69db      	ldr	r3, [r3, #28]
 800bdae:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d002      	beq.n	800bdbc <_ux_device_class_cdc_acm_ioctl+0xe8>
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d009      	beq.n	800bdce <_ux_device_class_cdc_acm_ioctl+0xfa>
 800bdba:	e011      	b.n	800bde0 <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	7b9b      	ldrb	r3, [r3, #14]
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	db0f      	blt.n	800bde6 <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	623b      	str	r3, [r7, #32]
                }
                break;
 800bdcc:	e00b      	b.n	800bde6 <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	7b9b      	ldrb	r3, [r3, #14]
 800bdd2:	b25b      	sxtb	r3, r3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da08      	bge.n	800bdea <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	623b      	str	r3, [r7, #32]
                }
                break;
 800bdde:	e004      	b.n	800bdea <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800bde0:	2353      	movs	r3, #83	@ 0x53
 800bde2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bde4:	e002      	b.n	800bdec <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800bde6:	bf00      	nop
 800bde8:	e000      	b.n	800bdec <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800bdea:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	3320      	adds	r3, #32
 800bdf0:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d12f      	bne.n	800be5a <_ux_device_class_cdc_acm_ioctl+0x186>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800bdfa:	21f9      	movs	r1, #249	@ 0xf9
 800bdfc:	69b8      	ldr	r0, [r7, #24]
 800bdfe:	f7fe ffc3 	bl	800ad88 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800be02:	e02a      	b.n	800be5a <_ux_device_class_cdc_acm_ioctl+0x186>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	7b9b      	ldrb	r3, [r3, #14]
 800be14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	2a08      	cmp	r2, #8
 800be1c:	d101      	bne.n	800be22 <_ux_device_class_cdc_acm_ioctl+0x14e>
 800be1e:	2200      	movs	r2, #0
 800be20:	e000      	b.n	800be24 <_ux_device_class_cdc_acm_ioctl+0x150>
 800be22:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800be24:	429a      	cmp	r2, r3
 800be26:	d002      	beq.n	800be2e <_ux_device_class_cdc_acm_ioctl+0x15a>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	3320      	adds	r3, #32
 800be32:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d102      	bne.n	800be42 <_ux_device_class_cdc_acm_ioctl+0x16e>
                status = UX_ERROR;
 800be3c:	23ff      	movs	r3, #255	@ 0xff
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800be40:	e00c      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800be48:	e008      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800be4a:	2254      	movs	r2, #84	@ 0x54
 800be4c:	2107      	movs	r1, #7
 800be4e:	2002      	movs	r0, #2
 800be50:	f7ff f870 	bl	800af34 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800be54:	2354      	movs	r3, #84	@ 0x54
 800be56:	627b      	str	r3, [r7, #36]	@ 0x24
 800be58:	e000      	b.n	800be5c <_ux_device_class_cdc_acm_ioctl+0x188>
            break;
 800be5a:	bf00      	nop
    }

    /* Return status to caller.  */
    return(status);
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 800be5e:	4618      	mov	r0, r3
 800be60:	3728      	adds	r7, #40	@ 0x28
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be7a:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00c      	beq.n	800be9c <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	3310      	adds	r3, #16
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff fcc7 	bl	800b81a <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	3344      	adds	r3, #68	@ 0x44
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fcc2 	bl	800b81a <_ux_utility_mutex_delete>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800be96:	68b8      	ldr	r0, [r7, #8]
 800be98:	f7ff fc08 	bl	800b6ac <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2280      	movs	r2, #128	@ 0x80
 800beb4:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800bebc:	6838      	ldr	r0, [r7, #0]
 800bebe:	f7fd ff33 	bl	8009d28 <_ux_device_stack_control_request_process>
}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	60b9      	str	r1, [r7, #8]
 800bed4:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2200      	movs	r2, #0
 800beda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2280      	movs	r2, #128	@ 0x80
 800bee0:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800bee2:	68b8      	ldr	r0, [r7, #8]
 800bee4:	f7fd ff20 	bl	8009d28 <_ux_device_stack_control_request_process>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d108      	bne.n	800bf00 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2203      	movs	r2, #3
 800bef2:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800bef4:	2300      	movs	r3, #0
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7f6 f8bb 	bl	8002076 <HAL_PCD_EP_Transmit>
    }
}
 800bf00:	bf00      	nop
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2280      	movs	r2, #128	@ 0x80
 800bf18:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800bf1a:	68b8      	ldr	r0, [r7, #8]
 800bf1c:	f7fd ff04 	bl	8009d28 <_ux_device_stack_control_request_process>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d108      	bne.n	800bf38 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2204      	movs	r2, #4
 800bf2a:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2100      	movs	r1, #0
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7f6 f89f 	bl	8002076 <HAL_PCD_EP_Transmit>
    }
}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bf48:	4b39      	ldr	r3, [pc, #228]	@ (800c030 <HAL_PCD_SetupStageCallback+0xf0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	3304      	adds	r3, #4
 800bf58:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3320      	adds	r3, #32
 800bf60:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf6e:	2208      	movs	r2, #8
 800bf70:	4619      	mov	r1, r3
 800bf72:	f7ff fb7d 	bl	800b670 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2200      	movs	r2, #0
 800bf86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f023 020e 	bic.w	r2, r3, #14
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800bf9a:	b25b      	sxtb	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da04      	bge.n	800bfaa <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800bfa0:	6939      	ldr	r1, [r7, #16]
 800bfa2:	6978      	ldr	r0, [r7, #20]
 800bfa4:	f7ff ff7f 	bl	800bea6 <_ux_dcd_stm32_setup_in>
 800bfa8:	e03e      	b.n	800c028 <HAL_PCD_SetupStageCallback+0xe8>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2200      	movs	r2, #0
 800bfae:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d105      	bne.n	800bfd0 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	6939      	ldr	r1, [r7, #16]
 800bfc8:	6978      	ldr	r0, [r7, #20]
 800bfca:	f7ff ff9d 	bl	800bf08 <_ux_dcd_stm32_setup_status>
 800bfce:	e02b      	b.n	800c028 <HAL_PCD_SetupStageCallback+0xe8>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	3354      	adds	r3, #84	@ 0x54
 800bfda:	3306      	adds	r3, #6
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff fc7f 	bl	800b8e0 <_ux_utility_short_get>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bff0:	d907      	bls.n	800c002 <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	69b8      	ldr	r0, [r7, #24]
 800bff6:	f000 f9f9 	bl	800c3ec <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2200      	movs	r2, #0
 800bffe:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800c000:	e012      	b.n	800c028 <HAL_PCD_SetupStageCallback+0xe8>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2200      	movs	r2, #0
 800c006:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7f5 ffd7 	bl	8001fd0 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2202      	movs	r2, #2
 800c026:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800c028:	3720      	adds	r7, #32
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20011514 	.word	0x20011514

0800c034 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c040:	4b56      	ldr	r3, [pc, #344]	@ (800c19c <HAL_PCD_DataInStageCallback+0x168>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	69db      	ldr	r3, [r3, #28]
 800c04a:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800c04c:	78fb      	ldrb	r3, [r7, #3]
 800c04e:	f003 030f 	and.w	r3, r3, #15
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00b      	beq.n	800c06e <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	f003 020f 	and.w	r2, r3, #15
 800c05c:	4613      	mov	r3, r2
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	3370      	adds	r3, #112	@ 0x70
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	4413      	add	r3, r2
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	e00a      	b.n	800c084 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800c06e:	78fb      	ldrb	r3, [r7, #3]
 800c070:	f003 020f 	and.w	r2, r3, #15
 800c074:	4613      	mov	r3, r2
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4413      	add	r3, r2
 800c080:	3304      	adds	r3, #4
 800c082:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3320      	adds	r3, #32
 800c08a:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800c08c:	78fb      	ldrb	r3, [r7, #3]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d15c      	bne.n	800c14c <HAL_PCD_DataInStageCallback+0x118>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	7a1b      	ldrb	r3, [r3, #8]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d179      	bne.n	800c194 <HAL_PCD_DataInStageCallback+0x160>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7f5 ff92 	bl	8001fd0 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d824      	bhi.n	800c102 <HAL_PCD_DataInStageCallback+0xce>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d10a      	bne.n	800c0d6 <HAL_PCD_DataInStageCallback+0xa2>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	7b99      	ldrb	r1, [r3, #14]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7f5 ffd4 	bl	8002076 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800c0d4:	e05e      	b.n	800c194 <HAL_PCD_DataInStageCallback+0x160>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <HAL_PCD_DataInStageCallback+0xc6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	2204      	movs	r2, #4
 800c0fe:	721a      	strb	r2, [r3, #8]
}
 800c100:	e048      	b.n	800c194 <HAL_PCD_DataInStageCallback+0x160>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	8a12      	ldrh	r2, [r2, #16]
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	8a1b      	ldrh	r3, [r3, #16]
 800c112:	461a      	mov	r2, r3
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	4293      	cmp	r3, r2
 800c118:	d902      	bls.n	800c120 <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	8a1b      	ldrh	r3, [r3, #16]
 800c11e:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	8a12      	ldrh	r2, [r2, #16]
 800c128:	441a      	add	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	69da      	ldr	r2, [r3, #28]
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	1ad2      	subs	r2, r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7f5 ff96 	bl	8002076 <HAL_PCD_EP_Transmit>
}
 800c14a:	e023      	b.n	800c194 <HAL_PCD_DataInStageCallback+0x160>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c150:	2b00      	cmp	r3, #0
 800c152:	d010      	beq.n	800c176 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00c      	beq.n	800c176 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	651a      	str	r2, [r3, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800c168:	78f9      	ldrb	r1, [r7, #3]
 800c16a:	2300      	movs	r3, #0
 800c16c:	2200      	movs	r2, #0
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7f5 ff81 	bl	8002076 <HAL_PCD_EP_Transmit>
}
 800c174:	e00e      	b.n	800c194 <HAL_PCD_DataInStageCallback+0x160>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2202      	movs	r2, #2
 800c180:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3330      	adds	r3, #48	@ 0x30
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff fb99 	bl	800b8c6 <_ux_utility_semaphore_put>
}
 800c194:	bf00      	nop
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20011514 	.word	0x20011514

0800c1a0 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800c1ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c29c <HAL_PCD_DataOutStageCallback+0xfc>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	f003 020f 	and.w	r2, r3, #15
 800c1be:	4613      	mov	r3, r2
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3320      	adds	r3, #32
 800c1d4:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d147      	bne.n	800c26c <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	7a1b      	ldrb	r3, [r3, #8]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d156      	bne.n	800c292 <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7f5 ff29 	bl	8002046 <HAL_PCD_EP_GetRxCount>
 800c1f4:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	699a      	ldr	r2, [r3, #24]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	441a      	add	r2, r3
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d822      	bhi.n	800c254 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800c216:	429a      	cmp	r2, r3
 800c218:	d005      	beq.n	800c226 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8a1b      	ldrh	r3, [r3, #16]
 800c21e:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	4293      	cmp	r3, r2
 800c224:	d005      	beq.n	800c232 <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	6939      	ldr	r1, [r7, #16]
 800c22a:	6978      	ldr	r0, [r7, #20]
 800c22c:	f7ff fe4d 	bl	800beca <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800c230:	e02f      	b.n	800c292 <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	8a12      	ldrh	r2, [r2, #16]
 800c23a:	441a      	add	r2, r3
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7f5 febf 	bl	8001fd0 <HAL_PCD_EP_Receive>
}
 800c252:	e01e      	b.n	800c292 <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	2227      	movs	r2, #39	@ 0x27
 800c258:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d017      	beq.n	800c292 <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c266:	6938      	ldr	r0, [r7, #16]
 800c268:	4798      	blx	r3
}
 800c26a:	e012      	b.n	800c292 <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800c26c:	78fb      	ldrb	r3, [r7, #3]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7f5 fee8 	bl	8002046 <HAL_PCD_EP_GetRxCount>
 800c276:	4602      	mov	r2, r0
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	2200      	movs	r2, #0
 800c280:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2202      	movs	r2, #2
 800c286:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	3330      	adds	r3, #48	@ 0x30
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fb1a 	bl	800b8c6 <_ux_utility_semaphore_put>
}
 800c292:	bf00      	nop
 800c294:	3720      	adds	r7, #32
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20011514 	.word	0x20011514

0800c2a0 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800c2a8:	4b14      	ldr	r3, [pc, #80]	@ (800c2fc <HAL_PCD_ResetCallback+0x5c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800c2b2:	f7fe f8a9 	bl	800a408 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	79db      	ldrb	r3, [r3, #7]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <HAL_PCD_ResetCallback+0x24>
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d006      	beq.n	800c2d0 <HAL_PCD_ResetCallback+0x30>
 800c2c2:	e00b      	b.n	800c2dc <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800c2c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c2fc <HAL_PCD_ResetCallback+0x5c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c2ce:	e00b      	b.n	800c2e8 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <HAL_PCD_ResetCallback+0x5c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c2da:	e005      	b.n	800c2e8 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <HAL_PCD_ResetCallback+0x5c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800c2e6:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800c2e8:	f000 f8a0 	bl	800c42c <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800c2ec:	4b03      	ldr	r3, [pc, #12]	@ (800c2fc <HAL_PCD_ResetCallback+0x5c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	621a      	str	r2, [r3, #32]
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20011514 	.word	0x20011514

0800c300 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c308:	4b07      	ldr	r3, [pc, #28]	@ (800c328 <HAL_PCD_ConnectCallback+0x28>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800c314:	4b04      	ldr	r3, [pc, #16]	@ (800c328 <HAL_PCD_ConnectCallback+0x28>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c31c:	20f1      	movs	r0, #241	@ 0xf1
 800c31e:	4798      	blx	r3
    }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20011514 	.word	0x20011514

0800c32c <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c334:	4b0b      	ldr	r3, [pc, #44]	@ (800c364 <HAL_PCD_DisconnectCallback+0x38>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d005      	beq.n	800c34c <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <HAL_PCD_DisconnectCallback+0x38>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c348:	20f2      	movs	r0, #242	@ 0xf2
 800c34a:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800c34c:	4b05      	ldr	r3, [pc, #20]	@ (800c364 <HAL_PCD_DisconnectCallback+0x38>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800c356:	f7fe f857 	bl	800a408 <_ux_device_stack_disconnect>
    }
}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20011514 	.word	0x20011514

0800c368 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c370:	4b07      	ldr	r3, [pc, #28]	@ (800c390 <HAL_PCD_SuspendCallback+0x28>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d005      	beq.n	800c388 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800c37c:	4b04      	ldr	r3, [pc, #16]	@ (800c390 <HAL_PCD_SuspendCallback+0x28>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c384:	20f4      	movs	r0, #244	@ 0xf4
 800c386:	4798      	blx	r3
    }
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20011514 	.word	0x20011514

0800c394 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c39c:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <HAL_PCD_ResumeCallback+0x28>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d005      	beq.n	800c3b4 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800c3a8:	4b04      	ldr	r3, [pc, #16]	@ (800c3bc <HAL_PCD_ResumeCallback+0x28>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3b0:	20f3      	movs	r0, #243	@ 0xf3
 800c3b2:	4798      	blx	r3
    }
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20011514 	.word	0x20011514

0800c3c0 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c3c8:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <HAL_PCD_SOFCallback+0x28>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <HAL_PCD_SOFCallback+0x28>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c3dc:	20f0      	movs	r0, #240	@ 0xf0
 800c3de:	4798      	blx	r3
    }
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20011514 	.word	0x20011514

0800c3ec <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f043 0204 	orr.w	r2, r3, #4
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	7b9a      	ldrb	r2, [r3, #14]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	7a9b      	ldrb	r3, [r3, #10]
 800c416:	4313      	orrs	r3, r2
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	4619      	mov	r1, r3
 800c41c:	f7f5 fe65 	bl	80020ea <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c432:	4b62      	ldr	r3, [pc, #392]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c43e:	4b5f      	ldr	r3, [pc, #380]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3320      	adds	r3, #32
 800c444:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800c446:	4b5d      	ldr	r3, [pc, #372]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d110      	bne.n	800c474 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800c452:	4b5a      	ldr	r3, [pc, #360]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	4b59      	ldr	r3, [pc, #356]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
 800c45e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800c462:	4b56      	ldr	r3, [pc, #344]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	4b55      	ldr	r3, [pc, #340]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 800c46e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c472:	e02b      	b.n	800c4cc <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800c474:	4b51      	ldr	r3, [pc, #324]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2200      	movs	r2, #0
 800c47a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800c47e:	4b4f      	ldr	r3, [pc, #316]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800c486:	2b01      	cmp	r3, #1
 800c488:	d110      	bne.n	800c4ac <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c48a:	4b4c      	ldr	r3, [pc, #304]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	4b4b      	ldr	r3, [pc, #300]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 800c496:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c49a:	4b48      	ldr	r3, [pc, #288]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b47      	ldr	r3, [pc, #284]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800c4a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c4aa:	e00f      	b.n	800c4cc <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800c4ac:	4b43      	ldr	r3, [pc, #268]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	4b42      	ldr	r3, [pc, #264]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800c4b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800c4bc:	4b3f      	ldr	r3, [pc, #252]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	4b3e      	ldr	r3, [pc, #248]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 800c4c8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c4cc:	4b3b      	ldr	r3, [pc, #236]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c4d4:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800c4da:	220e      	movs	r2, #14
 800c4dc:	4938      	ldr	r1, [pc, #224]	@ (800c5c0 <_ux_dcd_stm32_initialize_complete+0x194>)
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	f7fe fe22 	bl	800b128 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3338      	adds	r3, #56	@ 0x38
 800c4e8:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c4f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f103 0218 	add.w	r2, r3, #24
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	7adb      	ldrb	r3, [r3, #11]
 800c512:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f103 0218 	add.w	r2, r3, #24
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800c52a:	210e      	movs	r1, #14
 800c52c:	6978      	ldr	r0, [r7, #20]
 800c52e:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c536:	2100      	movs	r1, #0
 800c538:	4618      	mov	r0, r3
 800c53a:	f7f5 fe6a 	bl	8002212 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	7adb      	ldrb	r3, [r3, #11]
 800c548:	461a      	mov	r2, r3
 800c54a:	2300      	movs	r3, #0
 800c54c:	2100      	movs	r1, #0
 800c54e:	f7f5 fcd5 	bl	8001efc <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c558:	2180      	movs	r1, #128	@ 0x80
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f5 fe59 	bl	8002212 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	7adb      	ldrb	r3, [r3, #11]
 800c56a:	461a      	mov	r2, r3
 800c56c:	2300      	movs	r3, #0
 800c56e:	2180      	movs	r1, #128	@ 0x80
 800c570:	f7f5 fcc4 	bl	8001efc <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2208      	movs	r2, #8
 800c58a:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2208      	movs	r2, #8
 800c590:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800c598:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800c5a4:	4b05      	ldr	r3, [pc, #20]	@ (800c5bc <_ux_dcd_stm32_initialize_complete+0x190>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20011514 	.word	0x20011514
 800c5c0:	20000030 	.word	0x20000030

0800c5c4 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b097      	sub	sp, #92	@ 0x5c
 800c5c8:	af08      	add	r7, sp, #32
 800c5ca:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;

  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	633b      	str	r3, [r7, #48]	@ 0x30

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 800c5d4:	f107 010c 	add.w	r1, r7, #12
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c5de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5e0:	f7fc fabe 	bl	8008b60 <_txe_byte_allocate>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e08b      	b.n	800c706 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c5f8:	f7fe fd62 	bl	800b0c0 <_uxe_system_initialize>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 800c602:	23ff      	movs	r3, #255	@ 0xff
 800c604:	e07f      	b.n	800c706 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800c606:	f107 031c 	add.w	r3, r7, #28
 800c60a:	4619      	mov	r1, r3
 800c60c:	2001      	movs	r0, #1
 800c60e:	f000 f8bd 	bl	800c78c <USBD_Get_Device_Framework_Speed>
 800c612:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800c614:	f107 0318 	add.w	r3, r7, #24
 800c618:	4619      	mov	r1, r3
 800c61a:	2000      	movs	r0, #0
 800c61c:	f000 f8b6 	bl	800c78c <USBD_Get_Device_Framework_Speed>
 800c620:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 800c622:	f107 0314 	add.w	r3, r7, #20
 800c626:	4618      	mov	r0, r3
 800c628:	f000 f8f2 	bl	800c810 <USBD_Get_String_Framework>
 800c62c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 800c62e:	f107 0310 	add.w	r3, r7, #16
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f970 	bl	800c918 <USBD_Get_Language_Id_Framework>
 800c638:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 800c63a:	69f9      	ldr	r1, [r7, #28]
 800c63c:	69b8      	ldr	r0, [r7, #24]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	2400      	movs	r4, #0
 800c644:	9404      	str	r4, [sp, #16]
 800c646:	9203      	str	r2, [sp, #12]
 800c648:	6a3a      	ldr	r2, [r7, #32]
 800c64a:	9202      	str	r2, [sp, #8]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4603      	mov	r3, r0
 800c654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c658:	f7fd ffe4 	bl	800a624 <_ux_device_stack_initialize>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
      return UX_ERROR;
 800c662:	23ff      	movs	r3, #255	@ 0xff
 800c664:	e04f      	b.n	800c706 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 800c666:	4b2a      	ldr	r3, [pc, #168]	@ (800c710 <MX_USBX_Device_Init+0x14c>)
 800c668:	4a2a      	ldr	r2, [pc, #168]	@ (800c714 <MX_USBX_Device_Init+0x150>)
 800c66a:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 800c66c:	4b28      	ldr	r3, [pc, #160]	@ (800c710 <MX_USBX_Device_Init+0x14c>)
 800c66e:	4a2a      	ldr	r2, [pc, #168]	@ (800c718 <MX_USBX_Device_Init+0x154>)
 800c670:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 800c672:	4b27      	ldr	r3, [pc, #156]	@ (800c710 <MX_USBX_Device_Init+0x14c>)
 800c674:	4a29      	ldr	r2, [pc, #164]	@ (800c71c <MX_USBX_Device_Init+0x158>)
 800c676:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 800c678:	2100      	movs	r1, #0
 800c67a:	2002      	movs	r0, #2
 800c67c:	f000 f9ac 	bl	800c9d8 <USBD_Get_Configuration_Number>
 800c680:	4603      	mov	r3, r0
 800c682:	461a      	mov	r2, r3
 800c684:	4b26      	ldr	r3, [pc, #152]	@ (800c720 <MX_USBX_Device_Init+0x15c>)
 800c686:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 800c688:	2100      	movs	r1, #0
 800c68a:	2002      	movs	r0, #2
 800c68c:	f000 f966 	bl	800c95c <USBD_Get_Interface_Number>
 800c690:	4603      	mov	r3, r0
 800c692:	461a      	mov	r2, r3
 800c694:	4b23      	ldr	r3, [pc, #140]	@ (800c724 <MX_USBX_Device_Init+0x160>)
 800c696:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 800c698:	4b21      	ldr	r3, [pc, #132]	@ (800c720 <MX_USBX_Device_Init+0x15c>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	4b21      	ldr	r3, [pc, #132]	@ (800c724 <MX_USBX_Device_Init+0x160>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	491b      	ldr	r1, [pc, #108]	@ (800c710 <MX_USBX_Device_Init+0x14c>)
 800c6a2:	9100      	str	r1, [sp, #0]
 800c6a4:	4920      	ldr	r1, [pc, #128]	@ (800c728 <MX_USBX_Device_Init+0x164>)
 800c6a6:	4821      	ldr	r0, [pc, #132]	@ (800c72c <MX_USBX_Device_Init+0x168>)
 800c6a8:	f7fd f906 	bl	80098b8 <_ux_device_stack_class_register>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 800c6b2:	23ff      	movs	r3, #255	@ 0xff
 800c6b4:	e027      	b.n	800c706 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 800c6b6:	f107 010c 	add.w	r1, r7, #12
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c6c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6c2:	f7fc fa4d 	bl	8008b60 <_txe_byte_allocate>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e01a      	b.n	800c706 <MX_USBX_Device_Init+0x142>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	22b0      	movs	r2, #176	@ 0xb0
 800c6d4:	9206      	str	r2, [sp, #24]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	9205      	str	r2, [sp, #20]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	9204      	str	r2, [sp, #16]
 800c6de:	220a      	movs	r2, #10
 800c6e0:	9203      	str	r2, [sp, #12]
 800c6e2:	220a      	movs	r2, #10
 800c6e4:	9202      	str	r2, [sp, #8]
 800c6e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c730 <MX_USBX_Device_Init+0x16c>)
 800c6f2:	4910      	ldr	r1, [pc, #64]	@ (800c734 <MX_USBX_Device_Init+0x170>)
 800c6f4:	4810      	ldr	r0, [pc, #64]	@ (800c738 <MX_USBX_Device_Init+0x174>)
 800c6f6:	f7fc fda9 	bl	800924c <_txe_thread_create>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERROR */
    return TX_THREAD_ERROR;
 800c700:	230e      	movs	r3, #14
 800c702:	e000      	b.n	800c706 <MX_USBX_Device_Init+0x142>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800c704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c706:	4618      	mov	r0, r3
 800c708:	373c      	adds	r7, #60	@ 0x3c
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd90      	pop	{r4, r7, pc}
 800c70e:	bf00      	nop
 800c710:	20011524 	.word	0x20011524
 800c714:	0800c751 	.word	0x0800c751
 800c718:	0800c765 	.word	0x0800c765
 800c71c:	0800c779 	.word	0x0800c779
 800c720:	20011520 	.word	0x20011520
 800c724:	2001151c 	.word	0x2001151c
 800c728:	0800bb89 	.word	0x0800bb89
 800c72c:	20000010 	.word	0x20000010
 800c730:	0800c73d 	.word	0x0800c73d
 800c734:	0800d540 	.word	0x0800d540
 800c738:	20011530 	.word	0x20011530

0800c73c <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
  TX_PARAMETER_NOT_USED(thread_input);
  /* USER CODE END app_ux_device_thread_entry */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 800c758:	bf00      	nop
}
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 800c76c:	bf00      	nop
}
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 800c780:	bf00      	nop
}
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	6039      	str	r1, [r7, #0]
 800c796:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d113      	bne.n	800c7ca <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800c7a2:	4b16      	ldr	r3, [pc, #88]	@ (800c7fc <USBD_Get_Device_Framework_Speed+0x70>)
 800c7a4:	6819      	ldr	r1, [r3, #0]
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	4a15      	ldr	r2, [pc, #84]	@ (800c800 <USBD_Get_Device_Framework_Speed+0x74>)
 800c7aa:	4816      	ldr	r0, [pc, #88]	@ (800c804 <USBD_Get_Device_Framework_Speed+0x78>)
 800c7ac:	f000 f974 	bl	800ca98 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800c7b0:	4b14      	ldr	r3, [pc, #80]	@ (800c804 <USBD_Get_Device_Framework_Speed+0x78>)
 800c7b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800c7b6:	4b13      	ldr	r3, [pc, #76]	@ (800c804 <USBD_Get_Device_Framework_Speed+0x78>)
 800c7b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c7bc:	441a      	add	r2, r3
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800c7c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c7fc <USBD_Get_Device_Framework_Speed+0x70>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	e012      	b.n	800c7f0 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800c7ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c808 <USBD_Get_Device_Framework_Speed+0x7c>)
 800c7cc:	6819      	ldr	r1, [r3, #0]
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	4a0b      	ldr	r2, [pc, #44]	@ (800c800 <USBD_Get_Device_Framework_Speed+0x74>)
 800c7d2:	480e      	ldr	r0, [pc, #56]	@ (800c80c <USBD_Get_Device_Framework_Speed+0x80>)
 800c7d4:	f000 f960 	bl	800ca98 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800c7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c80c <USBD_Get_Device_Framework_Speed+0x80>)
 800c7da:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800c7de:	4b0b      	ldr	r3, [pc, #44]	@ (800c80c <USBD_Get_Device_Framework_Speed+0x80>)
 800c7e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c7e4:	441a      	add	r2, r3
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 800c7ea:	4b07      	ldr	r3, [pc, #28]	@ (800c808 <USBD_Get_Device_Framework_Speed+0x7c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000064 	.word	0x20000064
 800c800:	20000058 	.word	0x20000058
 800c804:	200115e0 	.word	0x200115e0
 800c808:	20000068 	.word	0x20000068
 800c80c:	20011708 	.word	0x20011708

0800c810 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	73fa      	strb	r2, [r7, #15]
 800c826:	461a      	mov	r2, r3
 800c828:	4b37      	ldr	r3, [pc, #220]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c82a:	2109      	movs	r1, #9
 800c82c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	73fa      	strb	r2, [r7, #15]
 800c834:	461a      	mov	r2, r3
 800c836:	4b34      	ldr	r3, [pc, #208]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c838:	2104      	movs	r1, #4
 800c83a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	73fa      	strb	r2, [r7, #15]
 800c842:	461a      	mov	r2, r3
 800c844:	4b30      	ldr	r3, [pc, #192]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c846:	2101      	movs	r1, #1
 800c848:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	4a2e      	ldr	r2, [pc, #184]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c84e:	4413      	add	r3, r2
 800c850:	f107 020c 	add.w	r2, r7, #12
 800c854:	4619      	mov	r1, r3
 800c856:	482d      	ldr	r0, [pc, #180]	@ (800c90c <USBD_Get_String_Framework+0xfc>)
 800c858:	f000 f8d0 	bl	800c9fc <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 800c85c:	89bb      	ldrh	r3, [r7, #12]
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	4413      	add	r3, r2
 800c864:	b2db      	uxtb	r3, r3
 800c866:	3301      	adds	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	73fa      	strb	r2, [r7, #15]
 800c870:	461a      	mov	r2, r3
 800c872:	4b25      	ldr	r3, [pc, #148]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c874:	2109      	movs	r1, #9
 800c876:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c878:	7bfb      	ldrb	r3, [r7, #15]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	73fa      	strb	r2, [r7, #15]
 800c87e:	461a      	mov	r2, r3
 800c880:	4b21      	ldr	r3, [pc, #132]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c882:	2104      	movs	r1, #4
 800c884:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	73fa      	strb	r2, [r7, #15]
 800c88c:	461a      	mov	r2, r3
 800c88e:	4b1e      	ldr	r3, [pc, #120]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c890:	2102      	movs	r1, #2
 800c892:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4a1c      	ldr	r2, [pc, #112]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c898:	4413      	add	r3, r2
 800c89a:	f107 020c 	add.w	r2, r7, #12
 800c89e:	4619      	mov	r1, r3
 800c8a0:	481b      	ldr	r0, [pc, #108]	@ (800c910 <USBD_Get_String_Framework+0x100>)
 800c8a2:	f000 f8ab 	bl	800c9fc <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800c8a6:	89bb      	ldrh	r3, [r7, #12]
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	73fa      	strb	r2, [r7, #15]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4b12      	ldr	r3, [pc, #72]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c8be:	2109      	movs	r1, #9
 800c8c0:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	73fa      	strb	r2, [r7, #15]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c8cc:	2104      	movs	r1, #4
 800c8ce:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	73fa      	strb	r2, [r7, #15]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c8da:	2103      	movs	r1, #3
 800c8dc:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	4a09      	ldr	r2, [pc, #36]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f107 020c 	add.w	r2, r7, #12
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	480a      	ldr	r0, [pc, #40]	@ (800c914 <USBD_Get_String_Framework+0x104>)
 800c8ec:	f000 f886 	bl	800c9fc <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800c8f0:	4805      	ldr	r0, [pc, #20]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
 800c8f2:	f7f3 fdeb 	bl	80004cc <strlen>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 800c8fc:	4b02      	ldr	r3, [pc, #8]	@ (800c908 <USBD_Get_String_Framework+0xf8>)
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200119c0 	.word	0x200119c0
 800c90c:	0800d55c 	.word	0x0800d55c
 800c910:	0800d570 	.word	0x0800d570
 800c914:	0800d584 	.word	0x0800d584

0800c918 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	73fa      	strb	r2, [r7, #15]
 800c92a:	461a      	mov	r2, r3
 800c92c:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <USBD_Get_Language_Id_Framework+0x40>)
 800c92e:	2109      	movs	r1, #9
 800c930:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	73fa      	strb	r2, [r7, #15]
 800c938:	461a      	mov	r2, r3
 800c93a:	4b07      	ldr	r3, [pc, #28]	@ (800c958 <USBD_Get_Language_Id_Framework+0x40>)
 800c93c:	2104      	movs	r1, #4
 800c93e:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800c940:	4805      	ldr	r0, [pc, #20]	@ (800c958 <USBD_Get_Language_Id_Framework+0x40>)
 800c942:	f7f3 fdc3 	bl	80004cc <strlen>
 800c946:	4602      	mov	r2, r0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 800c94c:	4b02      	ldr	r3, [pc, #8]	@ (800c958 <USBD_Get_Language_Id_Framework+0x40>)
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20011ac0 	.word	0x20011ac0

0800c95c <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	460a      	mov	r2, r1
 800c966:	71fb      	strb	r3, [r7, #7]
 800c968:	4613      	mov	r3, r2
 800c96a:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800c974:	2300      	movs	r3, #0
 800c976:	73bb      	strb	r3, [r7, #14]
 800c978:	e021      	b.n	800c9be <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800c97a:	7bbb      	ldrb	r3, [r7, #14]
 800c97c:	4a15      	ldr	r2, [pc, #84]	@ (800c9d4 <USBD_Get_Interface_Number+0x78>)
 800c97e:	215c      	movs	r1, #92	@ 0x5c
 800c980:	fb01 f303 	mul.w	r3, r1, r3
 800c984:	4413      	add	r3, r2
 800c986:	330c      	adds	r3, #12
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	79fa      	ldrb	r2, [r7, #7]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d113      	bne.n	800c9b8 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	4a10      	ldr	r2, [pc, #64]	@ (800c9d4 <USBD_Get_Interface_Number+0x78>)
 800c994:	215c      	movs	r1, #92	@ 0x5c
 800c996:	fb01 f303 	mul.w	r3, r1, r3
 800c99a:	4413      	add	r3, r2
 800c99c:	3314      	adds	r3, #20
 800c99e:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800c9a0:	79ba      	ldrb	r2, [r7, #6]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d108      	bne.n	800c9b8 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800c9a6:	7bbb      	ldrb	r3, [r7, #14]
 800c9a8:	4a0a      	ldr	r2, [pc, #40]	@ (800c9d4 <USBD_Get_Interface_Number+0x78>)
 800c9aa:	215c      	movs	r1, #92	@ 0x5c
 800c9ac:	fb01 f303 	mul.w	r3, r1, r3
 800c9b0:	4413      	add	r3, r2
 800c9b2:	335a      	adds	r3, #90	@ 0x5a
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	73bb      	strb	r3, [r7, #14]
 800c9be:	7bbb      	ldrb	r3, [r7, #14]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d9da      	bls.n	800c97a <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	b29b      	uxth	r3, r3
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3714      	adds	r7, #20
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	200115e0 	.word	0x200115e0

0800c9d8 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	460a      	mov	r2, r1
 800c9e2:	71fb      	strb	r3, [r7, #7]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	b29b      	uxth	r3, r3
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d023      	beq.n	800ca5a <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800ca16:	6938      	ldr	r0, [r7, #16]
 800ca18:	f000 f823 	bl	800ca62 <USBD_Desc_GetLen>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	461a      	mov	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	75fa      	strb	r2, [r7, #23]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	7812      	ldrb	r2, [r2, #0]
 800ca34:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800ca36:	e00b      	b.n	800ca50 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	75fa      	strb	r2, [r7, #23]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4413      	add	r3, r2
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	7812      	ldrb	r2, [r2, #0]
 800ca48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1ef      	bne.n	800ca38 <USBD_Desc_GetString+0x3c>
 800ca58:	e000      	b.n	800ca5c <USBD_Desc_GetString+0x60>
    return;
 800ca5a:	bf00      	nop
  }
}
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b085      	sub	sp, #20
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca72:	e005      	b.n	800ca80 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	3301      	adds	r3, #1
 800ca78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1f5      	bne.n	800ca74 <USBD_Desc_GetLen+0x12>
  }

  return len;
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
	...

0800ca98 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af02      	add	r7, sp, #8
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800caba:	4a73      	ldr	r2, [pc, #460]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800cac0:	4b71      	ldr	r3, [pc, #452]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2212      	movs	r2, #18
 800cac6:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800cac8:	4b6f      	ldr	r3, [pc, #444]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2201      	movs	r2, #1
 800cace:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800cad0:	4b6d      	ldr	r3, [pc, #436]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2200      	movs	r2, #0
 800cad6:	709a      	strb	r2, [r3, #2]
 800cad8:	2200      	movs	r2, #0
 800cada:	f042 0202 	orr.w	r2, r2, #2
 800cade:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800cae0:	4b69      	ldr	r3, [pc, #420]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2200      	movs	r2, #0
 800cae6:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800cae8:	4b67      	ldr	r3, [pc, #412]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2200      	movs	r2, #0
 800caee:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800caf0:	4b65      	ldr	r3, [pc, #404]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2200      	movs	r2, #0
 800caf6:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800caf8:	4b63      	ldr	r3, [pc, #396]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2240      	movs	r2, #64	@ 0x40
 800cafe:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800cb00:	4b61      	ldr	r3, [pc, #388]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 800cb0a:	721a      	strb	r2, [r3, #8]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f042 0204 	orr.w	r2, r2, #4
 800cb12:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800cb14:	4b5c      	ldr	r3, [pc, #368]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f042 0210 	orr.w	r2, r2, #16
 800cb1e:	729a      	strb	r2, [r3, #10]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 800cb26:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800cb28:	4b57      	ldr	r3, [pc, #348]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	731a      	strb	r2, [r3, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f042 0202 	orr.w	r2, r2, #2
 800cb36:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800cb38:	4b53      	ldr	r3, [pc, #332]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800cb40:	4b51      	ldr	r3, [pc, #324]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2202      	movs	r2, #2
 800cb46:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800cb48:	4b4f      	ldr	r3, [pc, #316]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800cb50:	4b4d      	ldr	r3, [pc, #308]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2201      	movs	r2, #1
 800cb56:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cb5e:	f103 0212 	add.w	r2, r3, #18
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d162      	bne.n	800cc34 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	4413      	add	r3, r2
 800cb78:	4a44      	ldr	r2, [pc, #272]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cb7a:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800cb7c:	4b43      	ldr	r3, [pc, #268]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	220a      	movs	r2, #10
 800cb82:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800cb84:	4b41      	ldr	r3, [pc, #260]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2206      	movs	r2, #6
 800cb8a:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800cb8c:	4b3f      	ldr	r3, [pc, #252]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2200      	movs	r2, #0
 800cb92:	709a      	strb	r2, [r3, #2]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f042 0202 	orr.w	r2, r2, #2
 800cb9a:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800cb9c:	4b3b      	ldr	r3, [pc, #236]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2200      	movs	r2, #0
 800cba2:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800cba4:	4b39      	ldr	r3, [pc, #228]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800cbac:	4b37      	ldr	r3, [pc, #220]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800cbb4:	4b35      	ldr	r3, [pc, #212]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2240      	movs	r2, #64	@ 0x40
 800cbba:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800cbbc:	4b33      	ldr	r3, [pc, #204]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800cbc4:	4b31      	ldr	r3, [pc, #196]	@ (800cc8c <USBD_Device_Framework_Builder+0x1f4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cbd2:	f103 020a 	add.w	r2, r3, #10
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800cbdc:	e02a      	b.n	800cc34 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d823      	bhi.n	800cc2e <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d81f      	bhi.n	800cc2e <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d019      	beq.n	800cc2e <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800cc00:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	78fa      	ldrb	r2, [r7, #3]
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	4613      	mov	r3, r2
 800cc12:	2200      	movs	r2, #0
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f83b 	bl	800cc90 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	3301      	adds	r3, #1
 800cc32:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d9d1      	bls.n	800cbde <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d90c      	bls.n	800cc5c <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800cc42:	4b11      	ldr	r3, [pc, #68]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	22ef      	movs	r2, #239	@ 0xef
 800cc48:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2202      	movs	r2, #2
 800cc50:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800cc52:	4b0d      	ldr	r3, [pc, #52]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2201      	movs	r2, #1
 800cc58:	719a      	strb	r2, [r3, #6]
 800cc5a:	e00f      	b.n	800cc7c <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d10b      	bne.n	800cc7c <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800cc64:	4b08      	ldr	r3, [pc, #32]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800cc6c:	4b06      	ldr	r3, [pc, #24]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2202      	movs	r2, #2
 800cc72:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800cc74:	4b04      	ldr	r3, [pc, #16]	@ (800cc88 <USBD_Device_Framework_Builder+0x1f0>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20011ac4 	.word	0x20011ac4
 800cc8c:	20011ac8 	.word	0x20011ac8

0800cc90 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4603      	mov	r3, r0
 800cca0:	70fb      	strb	r3, [r7, #3]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70bb      	strb	r3, [r7, #2]
 800cca6:	4613      	mov	r3, r2
 800cca8:	707b      	strb	r3, [r7, #1]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d834      	bhi.n	800cd1c <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	215c      	movs	r1, #92	@ 0x5c
 800ccba:	fb01 f303 	mul.w	r3, r1, r3
 800ccbe:	4413      	add	r3, r2
 800ccc0:	3318      	adds	r3, #24
 800ccc2:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d129      	bne.n	800cd1c <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6852      	ldr	r2, [r2, #4]
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	205c      	movs	r0, #92	@ 0x5c
 800ccd4:	fb00 f303 	mul.w	r3, r0, r3
 800ccd8:	440b      	add	r3, r1
 800ccda:	3310      	adds	r3, #16
 800ccdc:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	215c      	movs	r1, #92	@ 0x5c
 800cce6:	fb01 f303 	mul.w	r3, r1, r3
 800ccea:	4413      	add	r3, r2
 800ccec:	3318      	adds	r3, #24
 800ccee:	2201      	movs	r2, #1
 800ccf0:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	215c      	movs	r1, #92	@ 0x5c
 800ccfa:	fb01 f303 	mul.w	r3, r1, r3
 800ccfe:	4413      	add	r3, r2
 800cd00:	330c      	adds	r3, #12
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800cd06:	787b      	ldrb	r3, [r7, #1]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f80a 	bl	800cd26 <USBD_FrameWork_AddToConfDesc>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 800cd18:	23ff      	movs	r3, #255	@ 0xff
 800cd1a:	e000      	b.n	800cd1e <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	607a      	str	r2, [r7, #4]
 800cd32:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800cd34:	2300      	movs	r3, #0
 800cd36:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	7afa      	ldrb	r2, [r7, #11]
 800cd3c:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d107      	bne.n	800cd56 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4610      	mov	r0, r2
 800cd52:	f000 f8a1 	bl	800ce98 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	215c      	movs	r1, #92	@ 0x5c
 800cd5e:	fb01 f303 	mul.w	r3, r1, r3
 800cd62:	4413      	add	r3, r2
 800cd64:	330c      	adds	r3, #12
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d162      	bne.n	800ce32 <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 f866 	bl	800ce3e <USBD_FrameWork_FindFreeIFNbr>
 800cd72:	4603      	mov	r3, r0
 800cd74:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	215c      	movs	r1, #92	@ 0x5c
 800cd7e:	fb01 f303 	mul.w	r3, r1, r3
 800cd82:	4413      	add	r3, r2
 800cd84:	3320      	adds	r3, #32
 800cd86:	2202      	movs	r2, #2
 800cd88:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	215c      	movs	r1, #92	@ 0x5c
 800cd92:	fb01 f303 	mul.w	r3, r1, r3
 800cd96:	4413      	add	r3, r2
 800cd98:	335a      	adds	r3, #90	@ 0x5a
 800cd9a:	7dfa      	ldrb	r2, [r7, #23]
 800cd9c:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	7dfa      	ldrb	r2, [r7, #23]
 800cda4:	3201      	adds	r2, #1
 800cda6:	b2d0      	uxtb	r0, r2
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	215c      	movs	r1, #92	@ 0x5c
 800cdac:	fb01 f303 	mul.w	r3, r1, r3
 800cdb0:	4413      	add	r3, r2
 800cdb2:	335b      	adds	r3, #91	@ 0x5b
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	215c      	movs	r1, #92	@ 0x5c
 800cdc0:	fb01 f303 	mul.w	r3, r1, r3
 800cdc4:	4413      	add	r3, r2
 800cdc6:	331c      	adds	r3, #28
 800cdc8:	2203      	movs	r2, #3
 800cdca:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 800cdcc:	7afb      	ldrb	r3, [r7, #11]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d114      	bne.n	800cdfc <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800cdd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	2103      	movs	r1, #3
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f000 f889 	bl	800cef2 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800cde0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cde4:	2202      	movs	r2, #2
 800cde6:	2182      	movs	r1, #130	@ 0x82
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 f882 	bl	800cef2 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800cdee:	2308      	movs	r3, #8
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	2181      	movs	r1, #129	@ 0x81
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f000 f87c 	bl	800cef2 <USBD_FrameWork_AssignEp>
 800cdfa:	e011      	b.n	800ce20 <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800cdfc:	2340      	movs	r3, #64	@ 0x40
 800cdfe:	2202      	movs	r2, #2
 800ce00:	2103      	movs	r1, #3
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f000 f875 	bl	800cef2 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ce08:	2340      	movs	r3, #64	@ 0x40
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	2182      	movs	r1, #130	@ 0x82
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 f86f 	bl	800cef2 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ce14:	2308      	movs	r3, #8
 800ce16:	2203      	movs	r2, #3
 800ce18:	2181      	movs	r1, #129	@ 0x81
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 f869 	bl	800cef2 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ce28:	461a      	mov	r2, r3
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 f8d4 	bl	800cfd8 <USBD_FrameWork_CDCDesc>

      break;
 800ce30:	e000      	b.n	800ce34 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 800ce32:	bf00      	nop
  }

  return UX_SUCCESS;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	b087      	sub	sp, #28
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	613b      	str	r3, [r7, #16]
 800ce4e:	e016      	b.n	800ce7e <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	e005      	b.n	800ce62 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	215c      	movs	r1, #92	@ 0x5c
 800ce68:	fb01 f303 	mul.w	r3, r1, r3
 800ce6c:	4413      	add	r3, r2
 800ce6e:	3320      	adds	r3, #32
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d3ee      	bcc.n	800ce56 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d3e3      	bcc.n	800ce50 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	b2db      	uxtb	r3, r3
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	371c      	adds	r7, #28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2209      	movs	r2, #9
 800ceaa:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	709a      	strb	r2, [r3, #2]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2201      	movs	r2, #1
 800cec6:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	22c0      	movs	r2, #192	@ 0xc0
 800ced2:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2219      	movs	r2, #25
 800ced8:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f103 0209 	add.w	r2, r3, #9
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	601a      	str	r2, [r3, #0]
}
 800cee6:	bf00      	nop
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800cef2:	b490      	push	{r4, r7}
 800cef4:	b086      	sub	sp, #24
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	607b      	str	r3, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	72fb      	strb	r3, [r7, #11]
 800cf00:	4613      	mov	r3, r2
 800cf02:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cf08:	e002      	b.n	800cf10 <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	215c      	movs	r1, #92	@ 0x5c
 800cf18:	fb01 f303 	mul.w	r3, r1, r3
 800cf1c:	4413      	add	r3, r2
 800cf1e:	331c      	adds	r3, #28
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d210      	bcs.n	800cf4a <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6858      	ldr	r0, [r3, #4]
 800cf2c:	68f9      	ldr	r1, [r7, #12]
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	4613      	mov	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	225c      	movs	r2, #92	@ 0x5c
 800cf3a:	fb00 f202 	mul.w	r2, r0, r2
 800cf3e:	4413      	add	r3, r2
 800cf40:	440b      	add	r3, r1
 800cf42:	3328      	adds	r3, #40	@ 0x28
 800cf44:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1df      	bne.n	800cf0a <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6858      	ldr	r0, [r3, #4]
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	4613      	mov	r3, r2
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	4413      	add	r3, r2
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	225c      	movs	r2, #92	@ 0x5c
 800cf5c:	fb00 f202 	mul.w	r2, r0, r2
 800cf60:	4413      	add	r3, r2
 800cf62:	440b      	add	r3, r1
 800cf64:	3324      	adds	r3, #36	@ 0x24
 800cf66:	7afa      	ldrb	r2, [r7, #11]
 800cf68:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6858      	ldr	r0, [r3, #4]
 800cf6e:	68f9      	ldr	r1, [r7, #12]
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	4613      	mov	r3, r2
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	4413      	add	r3, r2
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	225c      	movs	r2, #92	@ 0x5c
 800cf7c:	fb00 f202 	mul.w	r2, r0, r2
 800cf80:	4413      	add	r3, r2
 800cf82:	440b      	add	r3, r1
 800cf84:	3325      	adds	r3, #37	@ 0x25
 800cf86:	7aba      	ldrb	r2, [r7, #10]
 800cf88:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6858      	ldr	r0, [r3, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	b29c      	uxth	r4, r3
 800cf92:	68f9      	ldr	r1, [r7, #12]
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4613      	mov	r3, r2
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4413      	add	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	225c      	movs	r2, #92	@ 0x5c
 800cfa0:	fb00 f202 	mul.w	r2, r0, r2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	3326      	adds	r3, #38	@ 0x26
 800cfaa:	4622      	mov	r2, r4
 800cfac:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6858      	ldr	r0, [r3, #4]
 800cfb2:	68f9      	ldr	r1, [r7, #12]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	005b      	lsls	r3, r3, #1
 800cfbe:	225c      	movs	r2, #92	@ 0x5c
 800cfc0:	fb00 f202 	mul.w	r2, r0, r2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3328      	adds	r3, #40	@ 0x28
 800cfca:	2201      	movs	r2, #1
 800cfcc:	701a      	strb	r2, [r3, #0]
}
 800cfce:	bf00      	nop
 800cfd0:	3718      	adds	r7, #24
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bc90      	pop	{r4, r7}
 800cfd6:	4770      	bx	lr

0800cfd8 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4413      	add	r3, r2
 800cfec:	461a      	mov	r2, r3
 800cfee:	4b99      	ldr	r3, [pc, #612]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800cff0:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800cff2:	4b98      	ldr	r3, [pc, #608]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2208      	movs	r2, #8
 800cff8:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 800cffa:	4b96      	ldr	r3, [pc, #600]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	220b      	movs	r2, #11
 800d000:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	4b93      	ldr	r3, [pc, #588]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68f9      	ldr	r1, [r7, #12]
 800d00c:	205c      	movs	r0, #92	@ 0x5c
 800d00e:	fb00 f202 	mul.w	r2, r0, r2
 800d012:	440a      	add	r2, r1
 800d014:	325a      	adds	r2, #90	@ 0x5a
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 800d01a:	4b8e      	ldr	r3, [pc, #568]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2202      	movs	r2, #2
 800d020:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 800d022:	4b8c      	ldr	r3, [pc, #560]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2202      	movs	r2, #2
 800d028:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 800d02a:	4b8a      	ldr	r3, [pc, #552]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2202      	movs	r2, #2
 800d030:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 800d032:	4b88      	ldr	r3, [pc, #544]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2201      	movs	r2, #1
 800d038:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 800d03a:	4b86      	ldr	r3, [pc, #536]	@ (800d254 <USBD_FrameWork_CDCDesc+0x27c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2200      	movs	r2, #0
 800d040:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f103 0208 	add.w	r2, r3, #8
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	4413      	add	r3, r2
 800d056:	461a      	mov	r2, r3
 800d058:	4b7f      	ldr	r3, [pc, #508]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	4b7e      	ldr	r3, [pc, #504]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2209      	movs	r2, #9
 800d062:	701a      	strb	r2, [r3, #0]
 800d064:	4b7c      	ldr	r3, [pc, #496]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2204      	movs	r2, #4
 800d06a:	705a      	strb	r2, [r3, #1]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	4b79      	ldr	r3, [pc, #484]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68f9      	ldr	r1, [r7, #12]
 800d076:	205c      	movs	r0, #92	@ 0x5c
 800d078:	fb00 f202 	mul.w	r2, r0, r2
 800d07c:	440a      	add	r2, r1
 800d07e:	325a      	adds	r2, #90	@ 0x5a
 800d080:	7812      	ldrb	r2, [r2, #0]
 800d082:	709a      	strb	r2, [r3, #2]
 800d084:	4b74      	ldr	r3, [pc, #464]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2200      	movs	r2, #0
 800d08a:	70da      	strb	r2, [r3, #3]
 800d08c:	4b72      	ldr	r3, [pc, #456]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2201      	movs	r2, #1
 800d092:	711a      	strb	r2, [r3, #4]
 800d094:	4b70      	ldr	r3, [pc, #448]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2202      	movs	r2, #2
 800d09a:	715a      	strb	r2, [r3, #5]
 800d09c:	4b6e      	ldr	r3, [pc, #440]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	719a      	strb	r2, [r3, #6]
 800d0a4:	4b6c      	ldr	r3, [pc, #432]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	71da      	strb	r2, [r3, #7]
 800d0ac:	4b6a      	ldr	r3, [pc, #424]	@ (800d258 <USBD_FrameWork_CDCDesc+0x280>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	721a      	strb	r2, [r3, #8]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f103 0209 	add.w	r2, r3, #9
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	4b64      	ldr	r3, [pc, #400]	@ (800d25c <USBD_FrameWork_CDCDesc+0x284>)
 800d0cc:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 800d0ce:	4b63      	ldr	r3, [pc, #396]	@ (800d25c <USBD_FrameWork_CDCDesc+0x284>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2205      	movs	r2, #5
 800d0d4:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 800d0d6:	4b61      	ldr	r3, [pc, #388]	@ (800d25c <USBD_FrameWork_CDCDesc+0x284>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2224      	movs	r2, #36	@ 0x24
 800d0dc:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 800d0de:	4b5f      	ldr	r3, [pc, #380]	@ (800d25c <USBD_FrameWork_CDCDesc+0x284>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 800d0e6:	4b5d      	ldr	r3, [pc, #372]	@ (800d25c <USBD_FrameWork_CDCDesc+0x284>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f042 0210 	orr.w	r2, r2, #16
 800d0f0:	70da      	strb	r2, [r3, #3]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f042 0201 	orr.w	r2, r2, #1
 800d0f8:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	1d5a      	adds	r2, r3, #5
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	4413      	add	r3, r2
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b54      	ldr	r3, [pc, #336]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d110:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 800d112:	4b53      	ldr	r3, [pc, #332]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2205      	movs	r2, #5
 800d118:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 800d11a:	4b51      	ldr	r3, [pc, #324]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2224      	movs	r2, #36	@ 0x24
 800d120:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 800d122:	4b4f      	ldr	r3, [pc, #316]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2201      	movs	r2, #1
 800d128:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800d12a:	4b4d      	ldr	r3, [pc, #308]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2200      	movs	r2, #0
 800d130:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	4b4a      	ldr	r3, [pc, #296]	@ (800d260 <USBD_FrameWork_CDCDesc+0x288>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	205c      	movs	r0, #92	@ 0x5c
 800d13e:	fb00 f202 	mul.w	r2, r0, r2
 800d142:	440a      	add	r2, r1
 800d144:	325b      	adds	r2, #91	@ 0x5b
 800d146:	7812      	ldrb	r2, [r2, #0]
 800d148:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	1d5a      	adds	r2, r3, #5
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	4413      	add	r3, r2
 800d15c:	461a      	mov	r2, r3
 800d15e:	4b41      	ldr	r3, [pc, #260]	@ (800d264 <USBD_FrameWork_CDCDesc+0x28c>)
 800d160:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 800d162:	4b40      	ldr	r3, [pc, #256]	@ (800d264 <USBD_FrameWork_CDCDesc+0x28c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2204      	movs	r2, #4
 800d168:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 800d16a:	4b3e      	ldr	r3, [pc, #248]	@ (800d264 <USBD_FrameWork_CDCDesc+0x28c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2224      	movs	r2, #36	@ 0x24
 800d170:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 800d172:	4b3c      	ldr	r3, [pc, #240]	@ (800d264 <USBD_FrameWork_CDCDesc+0x28c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2202      	movs	r2, #2
 800d178:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 800d17a:	4b3a      	ldr	r3, [pc, #232]	@ (800d264 <USBD_FrameWork_CDCDesc+0x28c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2202      	movs	r2, #2
 800d180:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	1d1a      	adds	r2, r3, #4
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	4413      	add	r3, r2
 800d194:	461a      	mov	r2, r3
 800d196:	4b34      	ldr	r3, [pc, #208]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d198:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 800d19a:	4b33      	ldr	r3, [pc, #204]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2205      	movs	r2, #5
 800d1a0:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 800d1a2:	4b31      	ldr	r3, [pc, #196]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2224      	movs	r2, #36	@ 0x24
 800d1a8:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2206      	movs	r2, #6
 800d1b0:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	4b2c      	ldr	r3, [pc, #176]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	205c      	movs	r0, #92	@ 0x5c
 800d1be:	fb00 f202 	mul.w	r2, r0, r2
 800d1c2:	440a      	add	r2, r1
 800d1c4:	325a      	adds	r2, #90	@ 0x5a
 800d1c6:	7812      	ldrb	r2, [r2, #0]
 800d1c8:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	4b26      	ldr	r3, [pc, #152]	@ (800d268 <USBD_FrameWork_CDCDesc+0x290>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	205c      	movs	r0, #92	@ 0x5c
 800d1d6:	fb00 f202 	mul.w	r2, r0, r2
 800d1da:	440a      	add	r2, r1
 800d1dc:	325b      	adds	r2, #91	@ 0x5b
 800d1de:	7812      	ldrb	r2, [r2, #0]
 800d1e0:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	1d5a      	adds	r2, r3, #5
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2207      	movs	r2, #7
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	4b1a      	ldr	r3, [pc, #104]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2205      	movs	r2, #5
 800d208:	705a      	strb	r2, [r3, #1]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	4b17      	ldr	r3, [pc, #92]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68f9      	ldr	r1, [r7, #12]
 800d214:	205c      	movs	r0, #92	@ 0x5c
 800d216:	fb00 f202 	mul.w	r2, r0, r2
 800d21a:	440a      	add	r2, r1
 800d21c:	3230      	adds	r2, #48	@ 0x30
 800d21e:	7812      	ldrb	r2, [r2, #0]
 800d220:	709a      	strb	r2, [r3, #2]
 800d222:	4b12      	ldr	r3, [pc, #72]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2203      	movs	r2, #3
 800d228:	70da      	strb	r2, [r3, #3]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	685a      	ldr	r2, [r3, #4]
 800d22e:	4b0f      	ldr	r3, [pc, #60]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	205c      	movs	r0, #92	@ 0x5c
 800d236:	fb00 f202 	mul.w	r2, r0, r2
 800d23a:	440a      	add	r2, r1
 800d23c:	3232      	adds	r2, #50	@ 0x32
 800d23e:	8812      	ldrh	r2, [r2, #0]
 800d240:	809a      	strh	r2, [r3, #4]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d112      	bne.n	800d270 <USBD_FrameWork_CDCDesc+0x298>
 800d24a:	4b08      	ldr	r3, [pc, #32]	@ (800d26c <USBD_FrameWork_CDCDesc+0x294>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2205      	movs	r2, #5
 800d250:	719a      	strb	r2, [r3, #6]
 800d252:	e011      	b.n	800d278 <USBD_FrameWork_CDCDesc+0x2a0>
 800d254:	20011acc 	.word	0x20011acc
 800d258:	20011ad0 	.word	0x20011ad0
 800d25c:	20011ad4 	.word	0x20011ad4
 800d260:	20011ad8 	.word	0x20011ad8
 800d264:	20011adc 	.word	0x20011adc
 800d268:	20011ae0 	.word	0x20011ae0
 800d26c:	20011ae4 	.word	0x20011ae4
 800d270:	4b66      	ldr	r3, [pc, #408]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2205      	movs	r2, #5
 800d276:	719a      	strb	r2, [r3, #6]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	1dda      	adds	r2, r3, #7
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	4413      	add	r3, r2
 800d28a:	461a      	mov	r2, r3
 800d28c:	4b60      	ldr	r3, [pc, #384]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	4b5f      	ldr	r3, [pc, #380]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2209      	movs	r2, #9
 800d296:	701a      	strb	r2, [r3, #0]
 800d298:	4b5d      	ldr	r3, [pc, #372]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2204      	movs	r2, #4
 800d29e:	705a      	strb	r2, [r3, #1]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	4b5a      	ldr	r3, [pc, #360]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68f9      	ldr	r1, [r7, #12]
 800d2aa:	205c      	movs	r0, #92	@ 0x5c
 800d2ac:	fb00 f202 	mul.w	r2, r0, r2
 800d2b0:	440a      	add	r2, r1
 800d2b2:	325b      	adds	r2, #91	@ 0x5b
 800d2b4:	7812      	ldrb	r2, [r2, #0]
 800d2b6:	709a      	strb	r2, [r3, #2]
 800d2b8:	4b55      	ldr	r3, [pc, #340]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	70da      	strb	r2, [r3, #3]
 800d2c0:	4b53      	ldr	r3, [pc, #332]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	711a      	strb	r2, [r3, #4]
 800d2c8:	4b51      	ldr	r3, [pc, #324]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	220a      	movs	r2, #10
 800d2ce:	715a      	strb	r2, [r3, #5]
 800d2d0:	4b4f      	ldr	r3, [pc, #316]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	719a      	strb	r2, [r3, #6]
 800d2d8:	4b4d      	ldr	r3, [pc, #308]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	71da      	strb	r2, [r3, #7]
 800d2e0:	4b4b      	ldr	r3, [pc, #300]	@ (800d410 <USBD_FrameWork_CDCDesc+0x438>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	721a      	strb	r2, [r3, #8]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f103 0209 	add.w	r2, r3, #9
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	4b43      	ldr	r3, [pc, #268]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	4b42      	ldr	r3, [pc, #264]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2207      	movs	r2, #7
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	4b40      	ldr	r3, [pc, #256]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2205      	movs	r2, #5
 800d310:	705a      	strb	r2, [r3, #1]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	4b3d      	ldr	r3, [pc, #244]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	205c      	movs	r0, #92	@ 0x5c
 800d31e:	fb00 f202 	mul.w	r2, r0, r2
 800d322:	440a      	add	r2, r1
 800d324:	3224      	adds	r2, #36	@ 0x24
 800d326:	7812      	ldrb	r2, [r2, #0]
 800d328:	709a      	strb	r2, [r3, #2]
 800d32a:	4b38      	ldr	r3, [pc, #224]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2202      	movs	r2, #2
 800d330:	70da      	strb	r2, [r3, #3]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	4b35      	ldr	r3, [pc, #212]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	205c      	movs	r0, #92	@ 0x5c
 800d33e:	fb00 f202 	mul.w	r2, r0, r2
 800d342:	440a      	add	r2, r1
 800d344:	3226      	adds	r2, #38	@ 0x26
 800d346:	8812      	ldrh	r2, [r2, #0]
 800d348:	809a      	strh	r2, [r3, #4]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d104      	bne.n	800d35c <USBD_FrameWork_CDCDesc+0x384>
 800d352:	4b2e      	ldr	r3, [pc, #184]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2200      	movs	r2, #0
 800d358:	719a      	strb	r2, [r3, #6]
 800d35a:	e003      	b.n	800d364 <USBD_FrameWork_CDCDesc+0x38c>
 800d35c:	4b2b      	ldr	r3, [pc, #172]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2200      	movs	r2, #0
 800d362:	719a      	strb	r2, [r3, #6]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	1dda      	adds	r2, r3, #7
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	4413      	add	r3, r2
 800d376:	461a      	mov	r2, r3
 800d378:	4b24      	ldr	r3, [pc, #144]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	4b23      	ldr	r3, [pc, #140]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2207      	movs	r2, #7
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	4b21      	ldr	r3, [pc, #132]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2205      	movs	r2, #5
 800d38a:	705a      	strb	r2, [r3, #1]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	4b1e      	ldr	r3, [pc, #120]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68f9      	ldr	r1, [r7, #12]
 800d396:	205c      	movs	r0, #92	@ 0x5c
 800d398:	fb00 f202 	mul.w	r2, r0, r2
 800d39c:	440a      	add	r2, r1
 800d39e:	322a      	adds	r2, #42	@ 0x2a
 800d3a0:	7812      	ldrb	r2, [r2, #0]
 800d3a2:	709a      	strb	r2, [r3, #2]
 800d3a4:	4b19      	ldr	r3, [pc, #100]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	70da      	strb	r2, [r3, #3]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	4b16      	ldr	r3, [pc, #88]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68f9      	ldr	r1, [r7, #12]
 800d3b6:	205c      	movs	r0, #92	@ 0x5c
 800d3b8:	fb00 f202 	mul.w	r2, r0, r2
 800d3bc:	440a      	add	r2, r1
 800d3be:	322c      	adds	r2, #44	@ 0x2c
 800d3c0:	8812      	ldrh	r2, [r2, #0]
 800d3c2:	809a      	strh	r2, [r3, #4]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d104      	bne.n	800d3d6 <USBD_FrameWork_CDCDesc+0x3fe>
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	719a      	strb	r2, [r3, #6]
 800d3d4:	e003      	b.n	800d3de <USBD_FrameWork_CDCDesc+0x406>
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <USBD_FrameWork_CDCDesc+0x434>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	719a      	strb	r2, [r3, #6]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	1dda      	adds	r2, r3, #7
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	791a      	ldrb	r2, [r3, #4]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	3202      	adds	r2, #2
 800d3f0:	b2d2      	uxtb	r2, r2
 800d3f2:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	b292      	uxth	r2, r2
 800d3fc:	805a      	strh	r2, [r3, #2]
}
 800d3fe:	bf00      	nop
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	20011ae4 	.word	0x20011ae4
 800d410:	20011ad0 	.word	0x20011ad0

0800d414 <memset>:
 800d414:	4402      	add	r2, r0
 800d416:	4603      	mov	r3, r0
 800d418:	4293      	cmp	r3, r2
 800d41a:	d100      	bne.n	800d41e <memset+0xa>
 800d41c:	4770      	bx	lr
 800d41e:	f803 1b01 	strb.w	r1, [r3], #1
 800d422:	e7f9      	b.n	800d418 <memset+0x4>

0800d424 <__libc_init_array>:
 800d424:	b570      	push	{r4, r5, r6, lr}
 800d426:	4d0d      	ldr	r5, [pc, #52]	@ (800d45c <__libc_init_array+0x38>)
 800d428:	2600      	movs	r6, #0
 800d42a:	4c0d      	ldr	r4, [pc, #52]	@ (800d460 <__libc_init_array+0x3c>)
 800d42c:	1b64      	subs	r4, r4, r5
 800d42e:	10a4      	asrs	r4, r4, #2
 800d430:	42a6      	cmp	r6, r4
 800d432:	d109      	bne.n	800d448 <__libc_init_array+0x24>
 800d434:	4d0b      	ldr	r5, [pc, #44]	@ (800d464 <__libc_init_array+0x40>)
 800d436:	2600      	movs	r6, #0
 800d438:	4c0b      	ldr	r4, [pc, #44]	@ (800d468 <__libc_init_array+0x44>)
 800d43a:	f000 f817 	bl	800d46c <_init>
 800d43e:	1b64      	subs	r4, r4, r5
 800d440:	10a4      	asrs	r4, r4, #2
 800d442:	42a6      	cmp	r6, r4
 800d444:	d105      	bne.n	800d452 <__libc_init_array+0x2e>
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44c:	3601      	adds	r6, #1
 800d44e:	4798      	blx	r3
 800d450:	e7ee      	b.n	800d430 <__libc_init_array+0xc>
 800d452:	f855 3b04 	ldr.w	r3, [r5], #4
 800d456:	3601      	adds	r6, #1
 800d458:	4798      	blx	r3
 800d45a:	e7f2      	b.n	800d442 <__libc_init_array+0x1e>
 800d45c:	0800d674 	.word	0x0800d674
 800d460:	0800d674 	.word	0x0800d674
 800d464:	0800d674 	.word	0x0800d674
 800d468:	0800d678 	.word	0x0800d678

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
